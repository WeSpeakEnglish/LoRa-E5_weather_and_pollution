
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e4f0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  0801e628  0801e628  0002e628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801f4ec  0801f4ec  0002f4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f5ac  0801f5ac  00030178  2**0
                  CONTENTS
  5 .ARM          00000008  0801f5ac  0801f5ac  0002f5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f5b4  0801f5b4  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801f5b4  0801f5b4  0002f5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f5bc  0801f5bc  0002f5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000178  20000000  0801f5c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000025fc  20000178  0801f738  00030178  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002774  0801f738  00032774  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301a2  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004c062  00000000  00000000  000301e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b930  00000000  00000000  0007c247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003e50  00000000  00000000  00087b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002f63  00000000  00000000  0008b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b19b  00000000  00000000  0008e92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c743  00000000  00000000  000b9ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d93b7  00000000  00000000  00106209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000104dc  00000000  00000000  001df5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001efa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000178 	.word	0x20000178
 8000154:	00000000 	.word	0x00000000
 8000158:	0801e610 	.word	0x0801e610

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000017c 	.word	0x2000017c
 8000174:	0801e610 	.word	0x0801e610

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <CS_Select>:
#define NRF24_CSN_PORT  GPIOB
#define NRF24_CSN_PIN   GPIO_PIN_9


void CS_Select (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <CS_Select+0x14>)
 8001094:	f004 fff8 	bl	8006088 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	48000400 	.word	0x48000400

080010a0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CS_UnSelect+0x14>)
 80010ac:	f004 ffec 	bl	8006088 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	48000400 	.word	0x48000400

080010b8 <CE_Enable>:


void CE_Enable (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <CE_Enable+0x14>)
 80010c4:	f004 ffe0 	bl	8006088 <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	48000400 	.word	0x48000400

080010d0 <CE_Disable>:

void CE_Disable (void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <CE_Disable+0x14>)
 80010dc:	f004 ffd4 	bl	8006088 <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	48000400 	.word	0x48000400

080010e8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	//HAL_StatusTypeDef checkOK;
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f043 0320 	orr.w	r3, r3, #32
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001106:	f7ff ffbf 	bl	8001088 <CS_Select>

//	checkOK = HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800110a:	f7ff ffc9 	bl	80010a0 <CS_UnSelect>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	b2db      	uxtb	r3, r3
 800112e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001130:	f7ff ffaa 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001134:	f107 0114 	add.w	r1, r7, #20
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	2201      	movs	r2, #1
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800113e:	f007 fd55 	bl	8008bec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800114e:	f007 fd4d 	bl	8008bec <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001152:	f7ff ffa5 	bl	80010a0 <CS_UnSelect>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000334 	.word	0x20000334

08001164 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001172:	f7ff ff89 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001176:	1df9      	adds	r1, r7, #7
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	2201      	movs	r2, #1
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800117e:	f007 fd35 	bl	8008bec <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001182:	f107 010f 	add.w	r1, r7, #15
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2201      	movs	r2, #1
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800118c:	f007 febe 	bl	8008f0c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001190:	f7ff ff86 	bl	80010a0 <CS_UnSelect>

	return data;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000334 	.word	0x20000334

080011a4 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80011b2:	f7ff ff69 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80011b6:	f107 010f 	add.w	r1, r7, #15
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	2201      	movs	r2, #1
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011c0:	f007 fd14 	bl	8008bec <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011d0:	f007 fe9c 	bl	8008f0c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80011d4:	f7ff ff64 	bl	80010a0 <CS_UnSelect>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000334 	.word	0x20000334

080011e4 <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d104      	bne.n	80011fe <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2007      	movs	r0, #7
 80011f8:	f7ff ff76 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80011fc:	e090      	b.n	8001320 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b17      	cmp	r3, #23
 8001202:	d104      	bne.n	800120e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001204:	2111      	movs	r1, #17
 8001206:	2017      	movs	r0, #23
 8001208:	f7ff ff6e 	bl	80010e8 <nrf24_WriteReg>
}
 800120c:	e088      	b.n	8001320 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800120e:	2108      	movs	r1, #8
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff69 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001216:	213f      	movs	r1, #63	; 0x3f
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ff65 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800121e:	2103      	movs	r1, #3
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff ff61 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001226:	2103      	movs	r1, #3
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff ff5d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800122e:	2103      	movs	r1, #3
 8001230:	2004      	movs	r0, #4
 8001232:	f7ff ff59 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001236:	2102      	movs	r1, #2
 8001238:	2005      	movs	r0, #5
 800123a:	f7ff ff55 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800123e:	210e      	movs	r1, #14
 8001240:	2006      	movs	r0, #6
 8001242:	f7ff ff51 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001246:	2100      	movs	r1, #0
 8001248:	2007      	movs	r0, #7
 800124a:	f7ff ff4d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800124e:	2100      	movs	r1, #0
 8001250:	2008      	movs	r0, #8
 8001252:	f7ff ff49 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001256:	2100      	movs	r1, #0
 8001258:	2009      	movs	r0, #9
 800125a:	f7ff ff45 	bl	80010e8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <nrf24_reset+0x144>)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001268:	6018      	str	r0, [r3, #0]
 800126a:	3304      	adds	r3, #4
 800126c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2205      	movs	r2, #5
 8001274:	4619      	mov	r1, r3
 8001276:	200a      	movs	r0, #10
 8001278:	f7ff ff4e 	bl	8001118 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <nrf24_reset+0x148>)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001286:	6018      	str	r0, [r3, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2205      	movs	r2, #5
 8001292:	4619      	mov	r1, r3
 8001294:	200b      	movs	r0, #11
 8001296:	f7ff ff3f 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800129a:	21c3      	movs	r1, #195	; 0xc3
 800129c:	200c      	movs	r0, #12
 800129e:	f7ff ff23 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80012a2:	21c4      	movs	r1, #196	; 0xc4
 80012a4:	200d      	movs	r0, #13
 80012a6:	f7ff ff1f 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80012aa:	21c5      	movs	r1, #197	; 0xc5
 80012ac:	200e      	movs	r0, #14
 80012ae:	f7ff ff1b 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80012b2:	21c6      	movs	r1, #198	; 0xc6
 80012b4:	200f      	movs	r0, #15
 80012b6:	f7ff ff17 	bl	80010e8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <nrf24_reset+0x144>)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2205      	movs	r2, #5
 80012d0:	4619      	mov	r1, r3
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ff20 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80012d8:	2100      	movs	r1, #0
 80012da:	2011      	movs	r0, #17
 80012dc:	f7ff ff04 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2012      	movs	r0, #18
 80012e4:	f7ff ff00 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	2013      	movs	r0, #19
 80012ec:	f7ff fefc 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2014      	movs	r0, #20
 80012f4:	f7ff fef8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2015      	movs	r0, #21
 80012fc:	f7ff fef4 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	2016      	movs	r0, #22
 8001304:	f7ff fef0 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001308:	2111      	movs	r1, #17
 800130a:	2017      	movs	r0, #23
 800130c:	f7ff feec 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	201c      	movs	r0, #28
 8001314:	f7ff fee8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	201d      	movs	r0, #29
 800131c:	f7ff fee4 	bl	80010e8 <nrf24_WriteReg>
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801e628 	.word	0x0801e628
 800132c:	0801e630 	.word	0x0801e630

08001330 <NRF24_Init>:




void NRF24_Init (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001334:	f7ff fecc 	bl	80010d0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ff53 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800133e:	2100      	movs	r1, #0
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fed1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001346:	2100      	movs	r1, #0
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fecd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800134e:	2100      	movs	r1, #0
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff fec9 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001356:	2103      	movs	r1, #3
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fec5 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800135e:	2100      	movs	r1, #0
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff fec1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001366:	2100      	movs	r1, #0
 8001368:	2005      	movs	r0, #5
 800136a:	f7ff febd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800136e:	210e      	movs	r1, #14
 8001370:	2006      	movs	r0, #6
 8001372:	f7ff feb9 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001376:	f7ff fe9f 	bl	80010b8 <CE_Enable>

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}

0800137e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800138a:	f7ff fea1 	bl	80010d0 <CE_Disable>

	nrf24_reset (STATUS);
 800138e:	2007      	movs	r0, #7
 8001390:	f7ff ff28 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	2005      	movs	r0, #5
 800139a:	f7ff fea5 	bl	80010e8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fee0 	bl	8001164 <nrf24_ReadReg>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff fe97 	bl	80010e8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80013ba:	2205      	movs	r2, #5
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200b      	movs	r0, #11
 80013c0:	f7ff feaa 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80013c4:	21ee      	movs	r1, #238	; 0xee
 80013c6:	200c      	movs	r0, #12
 80013c8:	f7ff fe8e 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80013cc:	2120      	movs	r1, #32
 80013ce:	2013      	movs	r0, #19
 80013d0:	f7ff fe8a 	bl	80010e8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fec5 	bl	8001164 <nrf24_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	f043 0303 	orr.w	r3, r3, #3
 80013e4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fe7c 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80013f0:	f7ff fe62 	bl	80010b8 <CE_Enable>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001404:	2007      	movs	r0, #7
 8001406:	f7ff fead 	bl	8001164 <nrf24_ReadReg>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <isDataAvailable+0x34>
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	2007      	movs	r0, #7
 8001428:	f7ff fe5e 	bl	80010e8 <nrf24_WriteReg>

		return 1;
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <isDataAvailable+0x36>
	}

	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e00c      	b.n	8001462 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	18d4      	adds	r4, r2, r3
 8001452:	4608      	mov	r0, r1
 8001454:	f7ff fe86 	bl	8001164 <nrf24_ReadReg>
 8001458:	4603      	mov	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b09      	cmp	r3, #9
 8001466:	ddef      	ble.n	8001448 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	330a      	adds	r3, #10
 800146c:	2205      	movs	r2, #5
 800146e:	4619      	mov	r1, r3
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff fe97 	bl	80011a4 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	330f      	adds	r3, #15
 800147a:	2205      	movs	r2, #5
 800147c:	4619      	mov	r1, r3
 800147e:	200b      	movs	r0, #11
 8001480:	f7ff fe90 	bl	80011a4 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f103 0414 	add.w	r4, r3, #20
 800148a:	200c      	movs	r0, #12
 800148c:	f7ff fe6a 	bl	8001164 <nrf24_ReadReg>
 8001490:	4603      	mov	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 0415 	add.w	r4, r3, #21
 800149a:	200d      	movs	r0, #13
 800149c:	f7ff fe62 	bl	8001164 <nrf24_ReadReg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 0416 	add.w	r4, r3, #22
 80014aa:	200e      	movs	r0, #14
 80014ac:	f7ff fe5a 	bl	8001164 <nrf24_ReadReg>
 80014b0:	4603      	mov	r3, r0
 80014b2:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f103 0417 	add.w	r4, r3, #23
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff fe52 	bl	8001164 <nrf24_ReadReg>
 80014c0:	4603      	mov	r3, r0
 80014c2:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3318      	adds	r3, #24
 80014c8:	2205      	movs	r2, #5
 80014ca:	4619      	mov	r1, r3
 80014cc:	200a      	movs	r0, #10
 80014ce:	f7ff fe69 	bl	80011a4 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80014d2:	231d      	movs	r3, #29
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	e00e      	b.n	80014f6 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3b0c      	subs	r3, #12
 80014de:	b2d9      	uxtb	r1, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	18d4      	adds	r4, r2, r3
 80014e6:	4608      	mov	r0, r1
 80014e8:	f7ff fe3c 	bl	8001164 <nrf24_ReadReg>
 80014ec:	4603      	mov	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b25      	cmp	r3, #37	; 0x25
 80014fa:	dded      	ble.n	80014d8 <NRF24_ReadAll+0x9e>
	}

}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	43db      	mvns	r3, r3
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	4013      	ands	r3, r2
 800154e:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_ADC_Init+0x94>)
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <MX_ADC_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_ADC_Init+0x94>)
 8001568:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800156c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_ADC_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_ADC_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_ADC_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_ADC_Init+0x94>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_ADC_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_ADC_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_ADC_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_ADC_Init+0x94>)
 800159a:	2201      	movs	r2, #1
 800159c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_ADC_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_ADC_Init+0x94>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_ADC_Init+0x94>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_ADC_Init+0x94>)
 80015de:	f002 fc3b 	bl	8003e58 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80015e8:	f000 fdba 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000194 	.word	0x20000194
 80015f4:	40012400 	.word	0x40012400

080015f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_ADC_MspInit+0x24>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d103      	bne.n	8001612 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800160a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800160e:	f7ff ff7a 	bl	8001506 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012400 	.word	0x40012400

08001620 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_ADC_MspDeInit+0x24>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d103      	bne.n	800163a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001636:	f7ff ff7e 	bl	8001536 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40012400 	.word	0x40012400

08001648 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <SYS_InitMeasurement+0x14>)
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <SYS_InitMeasurement+0x18>)
 8001650:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000194 	.word	0x20000194
 8001660:	40012400 	.word	0x40012400

08001664 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <SYS_GetBatteryLevel+0x5c>)
 8001674:	f000 f82a 	bl	80016cc <ADC_ReadChannels>
 8001678:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	80fb      	strh	r3, [r7, #6]
 8001684:	e016      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	4293      	cmp	r3, r2
 8001690:	d00b      	beq.n	80016aa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	f640 43e4 	movw	r3, #3300	; 0xce4
 800169c:	fb03 f202 	mul.w	r2, r3, r2
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	e004      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SYS_GetBatteryLevel+0x64>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80016b4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	b4002000 	.word	0xb4002000
 80016c4:	1fff75aa 	.word	0x1fff75aa
 80016c8:	004c08d8 	.word	0x004c08d8

080016cc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80016e4:	f7ff ff3a 	bl	800155c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80016e8:	481a      	ldr	r0, [pc, #104]	; (8001754 <ADC_ReadChannels+0x88>)
 80016ea:	f003 f9e4 	bl	8004ab6 <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80016f4:	f000 fd34 	bl	8002160 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	4812      	ldr	r0, [pc, #72]	; (8001754 <ADC_ReadChannels+0x88>)
 800170c:	f002 fef0 	bl	80044f0 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001716:	f000 fd23 	bl	8002160 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <ADC_ReadChannels+0x88>)
 800171c:	f002 fdcc 	bl	80042b8 <HAL_ADC_Start>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001726:	f000 fd1b 	bl	8002160 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <ADC_ReadChannels+0x88>)
 8001730:	f002 fe3a 	bl	80043a8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <ADC_ReadChannels+0x88>)
 8001736:	f002 fe05 	bl	8004344 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <ADC_ReadChannels+0x88>)
 800173c:	f002 fecb 	bl	80044d6 <HAL_ADC_GetValue>
 8001740:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <ADC_ReadChannels+0x88>)
 8001744:	f002 fd3c 	bl	80041c0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001748:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000194 	.word	0x20000194

08001758 <LL_AHB1_GRP1_EnableClock>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800178c:	2004      	movs	r0, #4
 800178e:	f7ff ffe3 	bl	8001758 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff ffe0 	bl	8001758 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2102      	movs	r1, #2
 800179c:	200b      	movs	r0, #11
 800179e:	f003 fb30 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a2:	200b      	movs	r0, #11
 80017a4:	f003 fb47 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	200c      	movs	r0, #12
 80017ae:	f003 fb28 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b2:	200c      	movs	r0, #12
 80017b4:	f003 fb3f 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	203d      	movs	r0, #61	; 0x3d
 80017be:	f003 fb20 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80017c2:	203d      	movs	r0, #61	; 0x3d
 80017c4:	f003 fb37 	bl	8004e36 <HAL_NVIC_EnableIRQ>

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017dc:	d101      	bne.n	80017e2 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80017e2:	2300      	movs	r3, #0
#endif
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	58004000 	.word	0x58004000

080017f0 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001808:	4b56      	ldr	r3, [pc, #344]	; (8001964 <FLASH_IF_Write+0x174>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0299      	lsls	r1, r3, #10
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <FLASH_IF_Write+0x178>)
 8001810:	400b      	ands	r3, r1
 8001812:	fbb2 f1f3 	udiv	r1, r2, r3
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	0adb      	lsrs	r3, r3, #11
 800181e:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800182a:	3b01      	subs	r3, #1
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <FLASH_IF_Write+0x174>)
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	0291      	lsls	r1, r2, #10
 8001832:	4a4d      	ldr	r2, [pc, #308]	; (8001968 <FLASH_IF_Write+0x178>)
 8001834:	400a      	ands	r2, r1
 8001836:	fbb3 f1f2 	udiv	r1, r3, r2
 800183a:	fb01 f202 	mul.w	r2, r1, r2
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	0adb      	lsrs	r3, r3, #11
 8001842:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <FLASH_IF_Write+0x7a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <FLASH_IF_Write+0x7a>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800186a:	f06f 0304 	mvn.w	r3, #4
 800186e:	e074      	b.n	800195a <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001870:	4b3e      	ldr	r3, [pc, #248]	; (800196c <FLASH_IF_Write+0x17c>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da02      	bge.n	800187e <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001878:	f06f 0303 	mvn.w	r3, #3
 800187c:	e06d      	b.n	800195a <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	429a      	cmp	r2, r3
 8001884:	d005      	beq.n	8001892 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800188c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e05b      	b.n	8001950 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8f8 	bl	8001a92 <FLASH_IF_IsEmpty>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d037      	beq.n	8001918 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 80018ae:	f06f 0304 	mvn.w	r3, #4
 80018b2:	e052      	b.n	800195a <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018ba:	02db      	lsls	r3, r3, #11
 80018bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c0:	4619      	mov	r1, r3
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f01b face 	bl	801ce64 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	6a39      	ldr	r1, [r7, #32]
 80018d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018d6:	b292      	uxth	r2, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f01b fac3 	bl	801ce64 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80018de:	2200      	movs	r2, #0
 80018e0:	2101      	movs	r1, #1
 80018e2:	69f8      	ldr	r0, [r7, #28]
 80018e4:	f000 f865 	bl	80019b2 <FLASH_IF_EraseByPages>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80018ee:	f06f 0301 	mvn.w	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80018f4:	e030      	b.n	8001958 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018fc:	02db      	lsls	r3, r3, #11
 80018fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f88a 	bl	8001a1e <FLASH_IF_Write_Buffer>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001910:	f06f 0302 	mvn.w	r3, #2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001916:	e01f      	b.n	8001958 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800191c:	4619      	mov	r1, r3
 800191e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001920:	f000 f87d 	bl	8001a1e <FLASH_IF_Write_Buffer>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 800192a:	f06f 0302 	mvn.w	r3, #2
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001930:	e012      	b.n	8001958 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 8001932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	4413      	add	r3, r2
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 800193a:	6a3a      	ldr	r2, [r7, #32]
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	4413      	add	r3, r2
 8001940:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	d99f      	bls.n	8001898 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800195a:	4618      	mov	r0, r3
 800195c:	3730      	adds	r7, #48	; 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	1fff75e0 	.word	0x1fff75e0
 8001968:	03fffc00 	.word	0x03fffc00
 800196c:	58004000 	.word	0x58004000

08001970 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 800197c:	e00b      	b.n	8001996 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 800197e:	bf00      	nop
 8001980:	f7ff ff24 	bl	80017cc <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1fa      	bne.n	8001980 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800198a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	2001      	movs	r0, #1
 8001992:	f003 fee9 	bl	8005768 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019a0:	4299      	cmp	r1, r3
 80019a2:	bf08      	it	eq
 80019a4:	4290      	cmpeq	r0, r2
 80019a6:	d1ea      	bne.n	800197e <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 80019a8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b08a      	sub	sp, #40	; 0x28
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	460b      	mov	r3, r1
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 f864 	bl	8005aa4 <HAL_FLASHEx_Erase_IT>
 80019dc:	4603      	mov	r3, r0
 80019de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019e2:	e00a      	b.n	80019fa <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80019e4:	f107 0214 	add.w	r2, r7, #20
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 f800 	bl	80059f4 <HAL_FLASHEx_Erase>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80019fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <FLASH_IF_EraseByPages+0x62>
 8001a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d101      	bne.n	8001a0e <FLASH_IF_EraseByPages+0x5c>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e003      	b.n	8001a16 <FLASH_IF_EraseByPages+0x64>
 8001a0e:	f06f 0301 	mvn.w	r3, #1
 8001a12:	e000      	b.n	8001a16 <FLASH_IF_EraseByPages+0x64>
 8001a14:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b08a      	sub	sp, #40	; 0x28
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e020      	b.n	8001a7a <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f01b fa0f 	bl	801ce64 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001a46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4e:	bf08      	it	eq
 8001a50:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001a54:	d005      	beq.n	8001a62 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001a56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff88 	bl	8001970 <FLASH_IF_Write64>
 8001a60:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3308      	adds	r3, #8
 8001a66:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d108      	bne.n	8001a86 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3d9      	bcc.n	8001a38 <FLASH_IF_Write_Buffer+0x1a>
 8001a84:	e000      	b.n	8001a88 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001a86:	bf00      	nop
    }
  }

  return status;
 8001a88:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001a9c:	e00a      	b.n	8001ab4 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d001      	beq.n	8001aae <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e039      	b.n	8001b22 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ef      	bne.n	8001a9e <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	e010      	b.n	8001aea <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f103 0208 	add.w	r2, r3, #8
 8001ace:	60fa      	str	r2, [r7, #12]
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	bf08      	it	eq
 8001ada:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001ade:	d001      	beq.n	8001ae4 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e01e      	b.n	8001b22 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3e9      	bcc.n	8001ac8 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001b02:	e00a      	b.n	8001b1a <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2bff      	cmp	r3, #255	; 0xff
 8001b0e:	d001      	beq.n	8001b14 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e006      	b.n	8001b22 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f1      	bne.n	8001b04 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001b20:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <LL_AHB2_GRP1_EnableClock>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b50:	68fb      	ldr	r3, [r7, #12]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff ffdb 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2002      	movs	r0, #2
 8001b78:	f7ff ffd8 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f7ff ffd5 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001b88:	4825      	ldr	r0, [pc, #148]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001b8a:	f004 fa7d 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2120      	movs	r1, #32
 8001b92:	4823      	ldr	r0, [pc, #140]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001b94:	f004 fa78 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f240 2131 	movw	r1, #561	; 0x231
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f004 fa71 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 8001ba6:	2338      	movs	r3, #56	; 0x38
 8001ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4819      	ldr	r0, [pc, #100]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001bbc:	f004 f836 	bl	8005c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001bc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4812      	ldr	r0, [pc, #72]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001bd8:	f004 f828 	bl	8005c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001bdc:	2331      	movs	r3, #49	; 0x31
 8001bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf4:	f004 f81a 	bl	8005c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bfe:	2311      	movs	r3, #17
 8001c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c12:	f004 f80b 	bl	8005c2c <HAL_GPIO_Init>

}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	48000400 	.word	0x48000400

08001c24 <LL_AHB2_GRP1_EnableClock>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c48:	68fb      	ldr	r3, [r7, #12]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <LL_APB1_GRP1_EnableClock>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <MX_I2C2_Init+0x78>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c90:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <MX_I2C2_Init+0x7c>)
 8001c92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cbe:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cc0:	f004 fa12 	bl	80060e8 <HAL_I2C_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cca:	f000 fa49 	bl	8002160 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cd2:	f004 fef9 	bl	8006ac8 <HAL_I2CEx_ConfigAnalogFilter>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cdc:	f000 fa40 	bl	8002160 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001ce4:	f004 ff3a 	bl	8006b5c <HAL_I2CEx_ConfigDigitalFilter>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cee:	f000 fa37 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200001f8 	.word	0x200001f8
 8001cfc:	40005800 	.word	0x40005800
 8001d00:	00707cbb 	.word	0x00707cbb

08001d04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b096      	sub	sp, #88	; 0x58
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	2238      	movs	r2, #56	; 0x38
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f01c fb61 	bl	801e3ec <memset>
  if(i2cHandle->Instance==I2C2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_I2C_MspInit+0xb0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d13b      	bne.n	8001dac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d38:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	4618      	mov	r0, r3
 8001d44:	f006 f9e0 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d4e:	f000 fa07 	bl	8002160 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff ff66 	bl	8001c24 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f7ff ff63 	bl	8001c24 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d62:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d64:	2312      	movs	r3, #18
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d70:	2304      	movs	r3, #4
 8001d72:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7e:	f003 ff55 	bl	8005c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d86:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d88:	2312      	movs	r3, #18
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d90:	2301      	movs	r3, #1
 8001d92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d94:	2304      	movs	r3, #4
 8001d96:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_I2C_MspInit+0xb4>)
 8001da0:	f003 ff44 	bl	8005c2c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001da4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001da8:	f7ff ff54 	bl	8001c54 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001dac:	bf00      	nop
 8001dae:	3758      	adds	r7, #88	; 0x58
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40005800 	.word	0x40005800
 8001db8:	48000400 	.word	0x48000400

08001dbc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	f023 0218 	bic.w	r2, r3, #24
 8001dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dee:	f001 fe45 	bl	8003a7c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df2:	f000 f8e3 	bl	8001fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df6:	f7ff feb1 	bl	8001b5c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001dfa:	f00a ffe5 	bl	800cdc8 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001dfe:	f001 fa93 	bl	8003328 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001e02:	f7ff ff3f 	bl	8001c84 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001e06:	f000 fee9 	bl	8002bdc <MX_TIM16_Init>
  MX_TIM17_Init();
 8001e0a:	f000 ff1b 	bl	8002c44 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001e0e:	f000 fb0b 	bl	8002428 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8001e12:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <main+0x190>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]

  NRF24_Init();
 8001e18:	f7ff fa8a 	bl	8001330 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8001e1c:	210a      	movs	r1, #10
 8001e1e:	4857      	ldr	r0, [pc, #348]	; (8001f7c <main+0x194>)
 8001e20:	f7ff faad 	bl	800137e <NRF24_RxMode>


   NRF24_ReadAll(data);
 8001e24:	4856      	ldr	r0, [pc, #344]	; (8001f80 <main+0x198>)
 8001e26:	f7ff fb08 	bl	800143a <NRF24_ReadAll>

  F1_QueueIni(); // init Function queue
 8001e2a:	f000 f9a5 	bl	8002178 <F1_QueueIni>

  HAL_UART_Receive_IT(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001e2e:	2220      	movs	r2, #32
 8001e30:	4954      	ldr	r1, [pc, #336]	; (8001f84 <main+0x19c>)
 8001e32:	4855      	ldr	r0, [pc, #340]	; (8001f88 <main+0x1a0>)
 8001e34:	f008 fe76 	bl	800ab24 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f004 f921 	bl	8006088 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 8001e46:	4851      	ldr	r0, [pc, #324]	; (8001f8c <main+0x1a4>)
 8001e48:	f008 fbee 	bl	800a628 <HAL_TIM_Base_Start_IT>


  while (1)
  {
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001e4c:	2364      	movs	r3, #100	; 0x64
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <main+0x1a8>)
 8001e54:	2188      	movs	r1, #136	; 0x88
 8001e56:	484f      	ldr	r0, [pc, #316]	; (8001f94 <main+0x1ac>)
 8001e58:	f004 f9d6 	bl	8006208 <HAL_I2C_Master_Transmit>


    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001e5c:	f00a ffbc 	bl	800cdd8 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 8001e60:	f000 f9ce 	bl	8002200 <F1_pull>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4798      	blx	r3


    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8001e68:	2364      	movs	r3, #100	; 0x64
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <main+0x1b0>)
 8001e70:	2188      	movs	r1, #136	; 0x88
 8001e72:	4848      	ldr	r0, [pc, #288]	; (8001f94 <main+0x1ac>)
 8001e74:	f004 fabc 	bl	80063f0 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001e78:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <main+0x1b0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <main+0x1b0>)
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <main+0x1b4>)
 8001e8e:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <main+0x1b0>)
 8001e92:	78db      	ldrb	r3, [r3, #3]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <main+0x1b0>)
 8001e9c:	791b      	ldrb	r3, [r3, #4]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <main+0x1b8>)
 8001ea6:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001ea8:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <main+0x1b4>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe feef 	bl	8000c90 <__aeabi_ui2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe facb 	bl	8000450 <__aeabi_f2d>
 8001eba:	a32b      	add	r3, pc, #172	; (adr r3, 8001f68 <main+0x180>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fb1e 	bl	8000500 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	a328      	add	r3, pc, #160	; (adr r3, 8001f70 <main+0x188>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fc3f 	bl	8000754 <__aeabi_ddiv>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <main+0x1bc>)
 8001ee4:	f7fe f954 	bl	8000190 <__aeabi_dsub>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fdc8 	bl	8000a84 <__aeabi_d2f>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <main+0x1c0>)
 8001ef8:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <main+0x1b8>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fec6 	bl	8000c90 <__aeabi_ui2f>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe faa2 	bl	8000450 <__aeabi_f2d>
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <main+0x1c4>)
 8001f12:	f7fe faf5 	bl	8000500 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	a314      	add	r3, pc, #80	; (adr r3, 8001f70 <main+0x188>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fc16 	bl	8000754 <__aeabi_ddiv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <main+0x1c8>)
 8001f36:	f7fe f92b 	bl	8000190 <__aeabi_dsub>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fd9f 	bl	8000a84 <__aeabi_d2f>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <main+0x1cc>)
 8001f4a:	6013      	str	r3, [r2, #0]
    if(UART2_SET)MeasurePM_sens();
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <main+0x190>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <main+0x170>
 8001f54:	f000 f89c 	bl	8002090 <MeasurePM_sens>
    if (isDataAvailable(2) == 1)
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7ff fa4f 	bl	80013fc <isDataAvailable>
   	  {
 //  		  NRF24_Receive(RxData);
//   		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
   	  }

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001f5e:	2120      	movs	r1, #32
 8001f60:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <main+0x1d0>)
 8001f62:	f004 f8a8 	bl	80060b6 <HAL_GPIO_TogglePin>
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001f66:	e771      	b.n	8001e4c <main+0x64>
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	4065e000 	.word	0x4065e000
 8001f70:	00000000 	.word	0x00000000
 8001f74:	40efffe0 	.word	0x40efffe0
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	20000274 	.word	0x20000274
 8001f84:	20000244 	.word	0x20000244
 8001f88:	200004e0 	.word	0x200004e0
 8001f8c:	200003b0 	.word	0x200003b0
 8001f90:	20000009 	.word	0x20000009
 8001f94:	200001f8 	.word	0x200001f8
 8001f98:	200002a8 	.word	0x200002a8
 8001f9c:	200002ae 	.word	0x200002ae
 8001fa0:	200002b0 	.word	0x200002b0
 8001fa4:	40468000 	.word	0x40468000
 8001fa8:	20000268 	.word	0x20000268
 8001fac:	405f4000 	.word	0x405f4000
 8001fb0:	40180000 	.word	0x40180000
 8001fb4:	2000026c 	.word	0x2000026c
 8001fb8:	48000400 	.word	0x48000400

08001fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09a      	sub	sp, #104	; 0x68
 8001fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	2248      	movs	r2, #72	; 0x48
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f01c fa0e 	bl	801e3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fe2:	f004 fe07 	bl	8006bf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fee8 	bl	8001dbc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <SystemClock_Config+0xb8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <SystemClock_Config+0xb8>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <SystemClock_Config+0xb8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002008:	2307      	movs	r3, #7
 800200a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800200c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002012:	2381      	movs	r3, #129	; 0x81
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800201c:	2340      	movs	r3, #64	; 0x40
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002024:	2300      	movs	r3, #0
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	4618      	mov	r0, r3
 800202e:	f005 f92d 	bl	800728c <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002038:	f000 f892 	bl	8002160 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800203c:	234f      	movs	r3, #79	; 0x4f
 800203e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002040:	2302      	movs	r3, #2
 8002042:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002054:	f107 0308 	add.w	r3, r7, #8
 8002058:	2101      	movs	r1, #1
 800205a:	4618      	mov	r0, r3
 800205c:	f005 fcb2 	bl	80079c4 <HAL_RCC_ClockConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002066:	f000 f87b 	bl	8002160 <Error_Handler>
  }
}
 800206a:	bf00      	nop
 800206c:	3768      	adds	r7, #104	; 0x68
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	58000400 	.word	0x58000400

08002078 <EnablePM_sens>:

/* USER CODE BEGIN 4 */



void EnablePM_sens(void){
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f003 ffff 	bl	8006088 <HAL_GPIO_WritePin>

}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <MeasurePM_sens>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);


}

void MeasurePM_sens(void){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	if(aRXBufferUser[0]==0x02 && aRXBufferUser[31]== 0x03){
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MeasurePM_sens+0x40>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d111      	bne.n	80020c0 <MeasurePM_sens+0x30>
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MeasurePM_sens+0x40>)
 800209e:	7fdb      	ldrb	r3, [r3, #31]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d10d      	bne.n	80020c0 <MeasurePM_sens+0x30>

	PM2_5 = aRXBufferUser[5] + aRXBufferUser[6]*256 + aRXBufferUser[7]*65536;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MeasurePM_sens+0x40>)
 80020a6:	795b      	ldrb	r3, [r3, #5]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MeasurePM_sens+0x40>)
 80020ac:	799b      	ldrb	r3, [r3, #6]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	441a      	add	r2, r3
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MeasurePM_sens+0x40>)
 80020b4:	79db      	ldrb	r3, [r3, #7]
 80020b6:	041b      	lsls	r3, r3, #16
 80020b8:	4413      	add	r3, r2
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <MeasurePM_sens+0x44>)
 80020be:	601a      	str	r2, [r3, #0]
}
	       HAL_UART_Receive_IT(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 80020c0:	2220      	movs	r2, #32
 80020c2:	4903      	ldr	r1, [pc, #12]	; (80020d0 <MeasurePM_sens+0x40>)
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <MeasurePM_sens+0x48>)
 80020c6:	f008 fd2d 	bl	800ab24 <HAL_UART_Receive_IT>


}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000244 	.word	0x20000244
 80020d4:	20000264 	.word	0x20000264
 80020d8:	200004e0 	.word	0x200004e0

080020dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d12b      	bne.n	8002144 <HAL_TIM_PeriodElapsedCallback+0x68>
   {
	  counter++;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020f4:	6013      	str	r3, [r2, #0]
      switch(counter){
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80020fe:	d007      	beq.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x34>
 8002100:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002104:	dc0f      	bgt.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002106:	2b05      	cmp	r3, #5
 8002108:	d006      	beq.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x3c>
 800210a:	2b0a      	cmp	r3, #10
 800210c:	d008      	beq.n	8002120 <HAL_TIM_PeriodElapsedCallback+0x44>
 800210e:	e00a      	b.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 820:
    	  F1_push(EnablePM_sens);
 8002110:	4810      	ldr	r0, [pc, #64]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002112:	f000 f841 	bl	8002198 <F1_push>

    	  break;
 8002116:	e006      	b.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 5:
     	  PM_measure_flag = 1;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
    	//  F1_push(MeasurePM_sens);
    	  break;
 800211e:	e002      	b.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 10:
    	//  F1_push(DisablePM_sens);
    	  PM_measure_flag = 0;
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
      }

      counter %= 20;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800212c:	fb83 2301 	smull	r2, r3, r3, r1
 8002130:	10da      	asrs	r2, r3, #3
 8002132:	17cb      	asrs	r3, r1, #31
 8002134:	1ad2      	subs	r2, r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	1aca      	subs	r2, r1, r3
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002142:	601a      	str	r2, [r3, #0]
   }
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200003b0 	.word	0x200003b0
 8002150:	20000270 	.word	0x20000270
 8002154:	08002079 	.word	0x08002079
 8002158:	20000000 	.word	0x20000000
 800215c:	66666667 	.word	0x66666667

08002160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
}
 8002166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002168:	e7fe      	b.n	8002168 <Error_Handler+0x8>

0800216a <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
	...

08002178 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  F1_last = 0;
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <F1_QueueIni+0x18>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <F1_QueueIni+0x1c>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	200002b4 	.word	0x200002b4
 8002194:	200002b8 	.word	0x200002b8

08002198 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <F1_push+0x5c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	425a      	negs	r2, r3
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	f002 020f 	and.w	r2, r2, #15
 80021b0:	bf58      	it	pl
 80021b2:	4253      	negpl	r3, r2
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <F1_push+0x60>)
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d101      	bne.n	80021c0 <F1_push+0x28>
 80021bc:	2301      	movs	r3, #1
 80021be:	e014      	b.n	80021ea <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <F1_push+0x5c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	490b      	ldr	r1, [pc, #44]	; (80021f4 <F1_push+0x5c>)
 80021c8:	600a      	str	r2, [r1, #0]
 80021ca:	490c      	ldr	r1, [pc, #48]	; (80021fc <F1_push+0x64>)
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <F1_push+0x5c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	425a      	negs	r2, r3
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	f002 020f 	and.w	r2, r2, #15
 80021e0:	bf58      	it	pl
 80021e2:	4253      	negpl	r3, r2
 80021e4:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <F1_push+0x5c>)
 80021e6:	6013      	str	r3, [r2, #0]
  return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	200002b4 	.word	0x200002b4
 80021f8:	200002b8 	.word	0x200002b8
 80021fc:	200002bc 	.word	0x200002bc

08002200 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <F1_pull+0x4c>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <F1_pull+0x50>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d101      	bne.n	8002216 <F1_pull+0x16>
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <F1_pull+0x54>)
 8002214:	e014      	b.n	8002240 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <F1_pull+0x50>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <F1_pull+0x50>)
 800221e:	600a      	str	r2, [r1, #0]
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <F1_pull+0x58>)
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <F1_pull+0x50>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	425a      	negs	r2, r3
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	f002 020f 	and.w	r2, r2, #15
 8002236:	bf58      	it	pl
 8002238:	4253      	negpl	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <F1_pull+0x50>)
 800223c:	6013      	str	r3, [r2, #0]
  return pullVar;
 800223e:	687b      	ldr	r3, [r7, #4]
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	200002b4 	.word	0x200002b4
 8002250:	200002b8 	.word	0x200002b8
 8002254:	0800216b 	.word	0x0800216b
 8002258:	200002bc 	.word	0x200002bc

0800225c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800226c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <LL_APB1_GRP1_EnableClock>:
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800228a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4313      	orrs	r3, r2
 8002292:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022a0:	68fb      	ldr	r3, [r7, #12]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	; 0x30
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	222c      	movs	r2, #44	; 0x2c
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f01c f897 	bl	801e3ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <MX_RTC_Init+0x9c>)
 80022c0:	4a22      	ldr	r2, [pc, #136]	; (800234c <MX_RTC_Init+0xa0>)
 80022c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <MX_RTC_Init+0x9c>)
 80022c6:	221f      	movs	r2, #31
 80022c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <MX_RTC_Init+0x9c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <MX_RTC_Init+0x9c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <MX_RTC_Init+0x9c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <MX_RTC_Init+0x9c>)
 80022de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <MX_RTC_Init+0x9c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_RTC_Init+0x9c>)
 80022ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022f2:	4815      	ldr	r0, [pc, #84]	; (8002348 <MX_RTC_Init+0x9c>)
 80022f4:	f006 f822 	bl	800833c <HAL_RTC_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80022fe:	f7ff ff2f 	bl	8002160 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002302:	4811      	ldr	r0, [pc, #68]	; (8002348 <MX_RTC_Init+0x9c>)
 8002304:	f006 fb10 	bl	8008928 <HAL_RTCEx_SetSSRU_IT>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800230e:	f7ff ff27 	bl	8002160 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800231e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002322:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2200      	movs	r2, #0
 800232e:	4619      	mov	r1, r3
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_RTC_Init+0x9c>)
 8002332:	f006 f87d 	bl	8008430 <HAL_RTC_SetAlarm_IT>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800233c:	f7ff ff10 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	3730      	adds	r7, #48	; 0x30
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200002fc 	.word	0x200002fc
 800234c:	40002800 	.word	0x40002800

08002350 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b090      	sub	sp, #64	; 0x40
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	2238      	movs	r2, #56	; 0x38
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f01c f843 	bl	801e3ec <memset>
  if(rtcHandle->Instance==RTC)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_RTC_MspInit+0x74>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d125      	bne.n	80023bc <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002374:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	4618      	mov	r0, r3
 8002382:	f005 fec1 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800238c:	f7ff fee8 	bl	8002160 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002390:	f7ff ff64 	bl	800225c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002394:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002398:	f7ff ff70 	bl	800227c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	2002      	movs	r0, #2
 80023a2:	f002 fd2e 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80023a6:	2002      	movs	r0, #2
 80023a8:	f002 fd45 	bl	8004e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	202a      	movs	r0, #42	; 0x2a
 80023b2:	f002 fd26 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023b6:	202a      	movs	r0, #42	; 0x2a
 80023b8:	f002 fd3d 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3740      	adds	r7, #64	; 0x40
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40002800 	.word	0x40002800

080023c8 <LL_AHB2_GRP1_EnableClock>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4313      	orrs	r3, r2
 80023de:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ec:	68fb      	ldr	r3, [r7, #12]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <LL_APB1_GRP1_EnableClock>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800241c:	68fb      	ldr	r3, [r7, #12]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <MX_SPI2_Init+0x74>)
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <MX_SPI2_Init+0x78>)
 8002430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MX_SPI2_Init+0x74>)
 8002434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <MX_SPI2_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <MX_SPI2_Init+0x74>)
 8002442:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002446:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_SPI2_Init+0x74>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_SPI2_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_SPI2_Init+0x74>)
 8002456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_SPI2_Init+0x74>)
 800245e:	2218      	movs	r2, #24
 8002460:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_SPI2_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_SPI2_Init+0x74>)
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_SPI2_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_SPI2_Init+0x74>)
 8002476:	2207      	movs	r2, #7
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_SPI2_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_SPI2_Init+0x74>)
 8002482:	2208      	movs	r2, #8
 8002484:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_SPI2_Init+0x74>)
 8002488:	f006 fadc 	bl	8008a44 <HAL_SPI_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002492:	f7ff fe65 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000334 	.word	0x20000334
 80024a0:	40003800 	.word	0x40003800

080024a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b096      	sub	sp, #88	; 0x58
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	2238      	movs	r2, #56	; 0x38
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f01b ff91 	bl	801e3ec <memset>
  if(spiHandle->Instance==SPI2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_SPI_MspInit+0xb0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d13b      	bne.n	800254c <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80024d4:	2310      	movs	r3, #16
 80024d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80024d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024dc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	4618      	mov	r0, r3
 80024e4:	f005 fe10 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80024ee:	f7ff fe37 	bl	8002160 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024f6:	f7ff ff7f 	bl	80023f8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	2002      	movs	r0, #2
 80024fc:	f7ff ff64 	bl	80023c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff ff61 	bl	80023c8 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8002506:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002518:	2305      	movs	r3, #5
 800251a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002520:	4619      	mov	r1, r3
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <HAL_SPI_MspInit+0xb4>)
 8002524:	f003 fb82 	bl	8005c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800253a:	2305      	movs	r3, #5
 800253c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002542:	4619      	mov	r1, r3
 8002544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002548:	f003 fb70 	bl	8005c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800254c:	bf00      	nop
 800254e:	3758      	adds	r7, #88	; 0x58
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40003800 	.word	0x40003800
 8002558:	48000400 	.word	0x48000400

0800255c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002562:	2201      	movs	r2, #1
 8002564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	58000400 	.word	0x58000400

08002574 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002590:	f001 fa94 	bl	8003abc <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002594:	f7ff ffe2 	bl	800255c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002598:	2001      	movs	r0, #1
 800259a:	f004 fbbd 	bl	8006d18 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80025a6:	f001 fa97 	bl	8003ad8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80025aa:	f001 f905 	bl	80037b8 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80025b6:	f001 fa81 	bl	8003abc <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80025ba:	2101      	movs	r1, #1
 80025bc:	2000      	movs	r0, #0
 80025be:	f004 fb27 	bl	8006c10 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80025ca:	f001 fa85 	bl	8003ad8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <NMI_Handler+0x4>

080025e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <HardFault_Handler+0x4>

080025ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <MemManage_Handler+0x4>

080025f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <BusFault_Handler+0x4>

080025f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <UsageFault_Handler+0x4>

080025fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002632:	f006 f9b5 	bl	80089a0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002fc 	.word	0x200002fc

08002640 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <DMA1_Channel1_IRQHandler+0x10>)
 8002646:	f002 fe8d 	bl	8005364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000570 	.word	0x20000570

08002654 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <DMA1_Channel2_IRQHandler+0x10>)
 800265a:	f002 fe83 	bl	8005364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200005d0 	.word	0x200005d0

08002668 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <TIM16_IRQHandler+0x18>)
 800266e:	f008 f827 	bl	800a6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <TIM16_IRQHandler+0x1c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a02      	ldr	r2, [pc, #8]	; (8002684 <TIM16_IRQHandler+0x1c>)
 800267a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200003b0 	.word	0x200003b0
 8002684:	20000398 	.word	0x20000398

08002688 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800268c:	4804      	ldr	r0, [pc, #16]	; (80026a0 <TIM17_IRQHandler+0x18>)
 800268e:	f008 f817 	bl	800a6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <TIM17_IRQHandler+0x1c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	4a02      	ldr	r2, [pc, #8]	; (80026a4 <TIM17_IRQHandler+0x1c>)
 800269a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200003fc 	.word	0x200003fc
 80026a4:	2000039c 	.word	0x2000039c

080026a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <USART1_IRQHandler+0x10>)
 80026ae:	f008 fb21 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000450 	.word	0x20000450

080026bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <USART2_IRQHandler+0x10>)
 80026c2:	f008 fb17 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200004e0 	.word	0x200004e0

080026d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <RTC_Alarm_IRQHandler+0x10>)
 80026d6:	f006 f813 	bl	8008700 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200002fc 	.word	0x200002fc

080026e4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80026ea:	f007 fdaf 	bl	800a24c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200003a0 	.word	0x200003a0

080026f8 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <DMAMUX1_OVR_IRQHandler+0x10>)
 80026fe:	f002 ffe1 	bl	80056c4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200005d0 	.word	0x200005d0

0800270c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002718:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800271a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4313      	orrs	r3, r2
 8002722:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002730:	68fb      	ldr	r3, [r7, #12]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_SUBGHZ_Init+0x20>)
 8002742:	2208      	movs	r2, #8
 8002744:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_SUBGHZ_Init+0x20>)
 8002748:	f007 fb04 	bl	8009d54 <HAL_SUBGHZ_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002752:	f7ff fd05 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200003a0 	.word	0x200003a0

08002760 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002768:	2001      	movs	r0, #1
 800276a:	f7ff ffcf 	bl	800270c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	2032      	movs	r0, #50	; 0x32
 8002774:	f002 fb45 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002778:	2032      	movs	r0, #50	; 0x32
 800277a:	f002 fb5c 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <LL_FLASH_GetUDN+0x10>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	1fff7580 	.word	0x1fff7580

080027c0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <LL_FLASH_GetDeviceID+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	1fff7584 	.word	0x1fff7584

080027d8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <LL_FLASH_GetSTCompanyID+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0a1b      	lsrs	r3, r3, #8
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	1fff7584 	.word	0x1fff7584

080027f0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7ff ffc6 	bl	8002786 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80027fa:	f01b f8c1 	bl	801d980 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <SystemApp_Init+0x50>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002804:	f000 f988 	bl	8002b18 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002808:	f01b fb4a 	bl	801dea0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800280c:	480d      	ldr	r0, [pc, #52]	; (8002844 <SystemApp_Init+0x54>)
 800280e:	f01b fbf5 	bl	801dffc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <SystemApp_Init+0x58>)
 8002814:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002818:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800281a:	2002      	movs	r0, #2
 800281c:	f01b fbfc 	bl	801e018 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002820:	f7fe ff12 	bl	8001648 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002824:	f000 f9b0 	bl	8002b88 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002828:	f01a fa76 	bl	801cd18 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800282c:	2101      	movs	r1, #1
 800282e:	2001      	movs	r0, #1
 8002830:	f01a fab2 	bl	801cd98 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002834:	2101      	movs	r1, #1
 8002836:	2001      	movs	r0, #1
 8002838:	f01a fa7e 	bl	801cd38 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200003ac 	.word	0x200003ac
 8002844:	08002a11 	.word	0x08002a11
 8002848:	58004000 	.word	0x58004000

0800284c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002850:	f01a fad2 	bl	801cdf8 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002862:	f7fe feff 	bl	8001664 <SYS_GetBatteryLevel>
 8002866:	4603      	mov	r3, r0
 8002868:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800286a:	88bb      	ldrh	r3, [r7, #4]
 800286c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002870:	4293      	cmp	r3, r2
 8002872:	d902      	bls.n	800287a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002874:	23fe      	movs	r3, #254	; 0xfe
 8002876:	71fb      	strb	r3, [r7, #7]
 8002878:	e014      	b.n	80028a4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800287a:	88bb      	ldrh	r3, [r7, #4]
 800287c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002880:	d202      	bcs.n	8002888 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]
 8002886:	e00d      	b.n	80028a4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002888:	88bb      	ldrh	r3, [r7, #4]
 800288a:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800288e:	461a      	mov	r2, r3
 8002890:	4613      	mov	r3, r2
 8002892:	01db      	lsls	r3, r3, #7
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	461a      	mov	r2, r3
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <GetBatteryLevel+0x58>)
 800289c:	fba3 2302 	umull	r2, r3, r3, r2
 80028a0:	09db      	lsrs	r3, r3, #7
 80028a2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80028a4:	79fb      	ldrb	r3, [r7, #7]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	1b4e81b5 	.word	0x1b4e81b5

080028b4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f937 	bl	8002b34 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fa39 	bl	8000d40 <__aeabi_f2iz>
 80028ce:	4603      	mov	r3, r0
 80028d0:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80028d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3720      	adds	r7, #32
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80028de:	b590      	push	{r4, r7, lr}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80028ea:	f7ff ff5f 	bl	80027ac <LL_FLASH_GetUDN>
 80028ee:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d138      	bne.n	800296a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80028f8:	f001 f8fc 	bl	8003af4 <HAL_GetUIDw0>
 80028fc:	4604      	mov	r4, r0
 80028fe:	f001 f90d 	bl	8003b1c <HAL_GetUIDw2>
 8002902:	4603      	mov	r3, r0
 8002904:	4423      	add	r3, r4
 8002906:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002908:	f001 f8fe 	bl	8003b08 <HAL_GetUIDw1>
 800290c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	0e1a      	lsrs	r2, r3, #24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3307      	adds	r3, #7
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	0c1a      	lsrs	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3306      	adds	r3, #6
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	0a1a      	lsrs	r2, r3, #8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3305      	adds	r3, #5
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	0e1a      	lsrs	r2, r3, #24
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3303      	adds	r3, #3
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	0c1a      	lsrs	r2, r3, #16
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3302      	adds	r3, #2
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	0a1a      	lsrs	r2, r3, #8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3301      	adds	r3, #1
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002968:	e031      	b.n	80029ce <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3307      	adds	r3, #7
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	0a1a      	lsrs	r2, r3, #8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3306      	adds	r3, #6
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	0c1a      	lsrs	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3305      	adds	r3, #5
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	0e1a      	lsrs	r2, r3, #24
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002998:	f7ff ff12 	bl	80027c0 <LL_FLASH_GetDeviceID>
 800299c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3303      	adds	r3, #3
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80029a8:	f7ff ff16 	bl	80027d8 <LL_FLASH_GetSTCompanyID>
 80029ac:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3302      	adds	r3, #2
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	0a1a      	lsrs	r2, r3, #8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3301      	adds	r3, #1
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	701a      	strb	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}

080029d6 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 80029e0:	f7ff fee4 	bl	80027ac <LL_FLASH_GetUDN>
 80029e4:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d10b      	bne.n	8002a06 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80029ee:	f001 f881 	bl	8003af4 <HAL_GetUIDw0>
 80029f2:	4604      	mov	r4, r0
 80029f4:	f001 f888 	bl	8003b08 <HAL_GetUIDw1>
 80029f8:	4603      	mov	r3, r0
 80029fa:	405c      	eors	r4, r3
 80029fc:	f001 f88e 	bl	8003b1c <HAL_GetUIDw2>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4063      	eors	r3, r4
 8002a04:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8002a06:	687b      	ldr	r3, [r7, #4]

}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f01a fafa 	bl	801d018 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002a2a:	9200      	str	r2, [sp, #0]
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <TimestampNow+0x3c>)
 8002a2e:	2110      	movs	r1, #16
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f81d 	bl	8002a70 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fd fb9e 	bl	8000178 <strlen>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	0801e638 	.word	0x0801e638

08002a50 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002a54:	2101      	movs	r1, #1
 8002a56:	2002      	movs	r0, #2
 8002a58:	f01a f96e 	bl	801cd38 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002a64:	2100      	movs	r1, #0
 8002a66:	2002      	movs	r0, #2
 8002a68:	f01a f966 	bl	801cd38 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002a70:	b40c      	push	{r2, r3}
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002a82:	6839      	ldr	r1, [r7, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f01a fc97 	bl	801d3bc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a98:	b002      	add	sp, #8
 8002a9a:	4770      	bx	lr

08002a9c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_GetTick+0x24>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002ac2:	f000 f9dd 	bl	8002e80 <TIMER_IF_GetTimerValue>
 8002ac6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002ac8:	687b      	ldr	r3, [r7, #4]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200003ac 	.word	0x200003ac

08002ad8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fa53 	bl	8002f8e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <LL_EXTI_EnableIT_32_63+0x24>)
 8002afa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002afe:	4905      	ldr	r1, [pc, #20]	; (8002b14 <LL_EXTI_EnableIT_32_63+0x24>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	58000800 	.word	0x58000800

08002b18 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002b1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b20:	f7ff ffe6 	bl	8002af0 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002b24:	f001 f804 	bl	8003b30 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002b28:	f001 f808 	bl	8003b3c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002b2c:	f001 f80c 	bl	8003b48 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <EnvSensors_Read+0x40>)
 8002b3e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <EnvSensors_Read+0x44>)
 8002b42:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <EnvSensors_Read+0x48>)
 8002b46:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <EnvSensors_Read+0x4c>)
 8002b5e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <EnvSensors_Read+0x50>)
 8002b64:	611a      	str	r2, [r3, #16]

  return 0;
 8002b66:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	42480000 	.word	0x42480000
 8002b78:	41900000 	.word	0x41900000
 8002b7c:	447a0000 	.word	0x447a0000
 8002b80:	003e090d 	.word	0x003e090d
 8002b84:	000503ab 	.word	0x000503ab

08002b88 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002b92:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <LL_APB2_GRP1_EnableClock>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
	...

08002bdc <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <MX_TIM16_Init+0x64>)
 8002be4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002bf6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002bfa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002c0e:	480b      	ldr	r0, [pc, #44]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002c10:	f007 fcb2 	bl	800a578 <HAL_TIM_Base_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002c1a:	f7ff faa1 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002c1e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c22:	f7ff ffc2 	bl	8002baa <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	201c      	movs	r0, #28
 8002c2c:	f002 f8e9 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002c30:	201c      	movs	r0, #28
 8002c32:	f002 f900 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200003b0 	.word	0x200003b0
 8002c40:	40014400 	.word	0x40014400

08002c44 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c4a:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <MX_TIM17_Init+0x60>)
 8002c4c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c60:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002c74:	480a      	ldr	r0, [pc, #40]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c76:	f007 fc7f 	bl	800a578 <HAL_TIM_Base_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002c80:	f7ff fa6e 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002c84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c88:	f7ff ff8f 	bl	8002baa <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	201d      	movs	r0, #29
 8002c92:	f002 f8b6 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002c96:	201d      	movs	r0, #29
 8002c98:	f002 f8cd 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200003fc 	.word	0x200003fc
 8002ca4:	40014800 	.word	0x40014800

08002ca8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_TIM_Base_MspInit+0x58>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002cbe:	f7ff ff74 	bl	8002baa <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	201c      	movs	r0, #28
 8002cc8:	f002 f89b 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002ccc:	201c      	movs	r0, #28
 8002cce:	f002 f8b2 	bl	8004e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002cd2:	e010      	b.n	8002cf6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_TIM_Base_MspInit+0x5c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10b      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002cde:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ce2:	f7ff ff62 	bl	8002baa <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	201d      	movs	r0, #29
 8002cec:	f002 f889 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002cf0:	201d      	movs	r0, #29
 8002cf2:	f002 f8a0 	bl	8004e36 <HAL_NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40014400 	.word	0x40014400
 8002d04:	40014800 	.word	0x40014800

08002d08 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
	...

08002d20 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <TIMER_IF_Init+0x5c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	f083 0301 	eor.w	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <TIMER_IF_Init+0x60>)
 8002d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002d40:	f7ff fab4 	bl	80022ac <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002d44:	f000 f856 	bl	8002df4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <TIMER_IF_Init+0x60>)
 8002d4e:	f005 fc7b 	bl	8008648 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <TIMER_IF_Init+0x60>)
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002d5a:	4809      	ldr	r0, [pc, #36]	; (8002d80 <TIMER_IF_Init+0x60>)
 8002d5c:	f005 fdb2 	bl	80088c4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f000 f9d3 	bl	800310c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002d66:	f000 f85f 	bl	8002e28 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <TIMER_IF_Init+0x5c>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000448 	.word	0x20000448
 8002d80:	200002fc 	.word	0x200002fc

08002d84 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08e      	sub	sp, #56	; 0x38
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	222c      	movs	r2, #44	; 0x2c
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f01b fb26 	bl	801e3ec <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002da0:	f000 f828 	bl	8002df4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <TIMER_IF_StartTimer+0x68>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002dbc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002dc0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002dc8:	f107 0308 	add.w	r3, r7, #8
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4807      	ldr	r0, [pc, #28]	; (8002df0 <TIMER_IF_StartTimer+0x6c>)
 8002dd2:	f005 fb2d 	bl	8008430 <HAL_RTC_SetAlarm_IT>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002ddc:	f7ff f9c0 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002de0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3738      	adds	r7, #56	; 0x38
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	2000044c 	.word	0x2000044c
 8002df0:	200002fc 	.word	0x200002fc

08002df4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <TIMER_IF_StopTimer+0x2c>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e08:	4806      	ldr	r0, [pc, #24]	; (8002e24 <TIMER_IF_StopTimer+0x30>)
 8002e0a:	f005 fc1d 	bl	8008648 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <TIMER_IF_StopTimer+0x30>)
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002e16:	79fb      	ldrb	r3, [r7, #7]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40002800 	.word	0x40002800
 8002e24:	200002fc 	.word	0x200002fc

08002e28 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002e2c:	f000 f98e 	bl	800314c <GetTimerTicks>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <TIMER_IF_SetTimerContext+0x18>)
 8002e34:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002e36:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <TIMER_IF_SetTimerContext+0x18>)
 8002e38:	681b      	ldr	r3, [r3, #0]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000044c 	.word	0x2000044c

08002e44 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002e48:	4b02      	ldr	r3, [pc, #8]	; (8002e54 <TIMER_IF_GetTimerContext+0x10>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	2000044c 	.word	0x2000044c

08002e58 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002e62:	f000 f973 	bl	800314c <GetTimerTicks>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002e70:	687b      	ldr	r3, [r7, #4]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2000044c 	.word	0x2000044c

08002e80 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <TIMER_IF_GetTimerValue+0x24>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002e92:	f000 f95b 	bl	800314c <GetTimerTicks>
 8002e96:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000448 	.word	0x20000448

08002ea8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002eb6:	687b      	ldr	r3, [r7, #4]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002ec2:	b5b0      	push	{r4, r5, r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002eca:	2100      	movs	r1, #0
 8002ecc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	0d95      	lsrs	r5, r2, #22
 8002ed8:	0294      	lsls	r4, r2, #10
 8002eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f7fd ff51 	bl	8000d8c <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4613      	mov	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bdb0      	pop	{r4, r5, r7, pc}

08002efc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002efc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002f06:	2100      	movs	r1, #0
 8002f08:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	4605      	mov	r5, r0
 8002f12:	4620      	mov	r0, r4
 8002f14:	4629      	mov	r1, r5
 8002f16:	f04f 0a00 	mov.w	sl, #0
 8002f1a:	f04f 0b00 	mov.w	fp, #0
 8002f1e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002f22:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002f26:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002f2a:	4650      	mov	r0, sl
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	1b02      	subs	r2, r0, r4
 8002f30:	eb61 0305 	sbc.w	r3, r1, r5
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	0099      	lsls	r1, r3, #2
 8002f3e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002f42:	0090      	lsls	r0, r2, #2
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	eb12 0804 	adds.w	r8, r2, r4
 8002f4c:	eb43 0905 	adc.w	r9, r3, r5
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f64:	4690      	mov	r8, r2
 8002f66:	4699      	mov	r9, r3
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	0a82      	lsrs	r2, r0, #10
 8002f76:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002f7a:	0a8b      	lsrs	r3, r1, #10
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f8c:	4770      	bx	lr

08002f8e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ff93 	bl	8002ec2 <TIMER_IF_Convert_ms2Tick>
 8002f9c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002f9e:	f000 f8d5 	bl	800314c <GetTimerTicks>
 8002fa2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002fa4:	e000      	b.n	8002fa8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002fa6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002fa8:	f000 f8d0 	bl	800314c <GetTimerTicks>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d8f6      	bhi.n	8002fa6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002fca:	f01a fe27 	bl	801dc1c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002fde:	f000 f8a5 	bl	800312c <TIMER_IF_BkUp_Read_MSBticks>
 8002fe2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f88f 	bl	800310c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002ff6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8003004:	f000 f8a2 	bl	800314c <GetTimerTicks>
 8003008:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800300a:	f000 f88f 	bl	800312c <TIMER_IF_BkUp_Read_MSBticks>
 800300e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	2200      	movs	r2, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	60fa      	str	r2, [r7, #12]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	000b      	movs	r3, r1
 8003024:	2200      	movs	r2, #0
 8003026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003028:	2000      	movs	r0, #0
 800302a:	460c      	mov	r4, r1
 800302c:	4605      	mov	r5, r0
 800302e:	eb12 0804 	adds.w	r8, r2, r4
 8003032:	eb43 0905 	adc.w	r9, r3, r5
 8003036:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800303a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	0a82      	lsrs	r2, r0, #10
 8003048:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800304c:	0a8b      	lsrs	r3, r1, #10
 800304e:	4613      	mov	r3, r2
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2200      	movs	r2, #0
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003060:	f04f 0b00 	mov.w	fp, #0
 8003064:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff46 	bl	8002efc <TIMER_IF_Convert_Tick2ms>
 8003070:	4603      	mov	r3, r0
 8003072:	b29a      	uxth	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800307a:	4618      	mov	r0, r3
 800307c:	3730      	adds	r7, #48	; 0x30
 800307e:	46bd      	mov	sp, r7
 8003080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003084 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	2100      	movs	r1, #0
 8003090:	4803      	ldr	r0, [pc, #12]	; (80030a0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8003092:	f005 fca9 	bl	80089e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200002fc 	.word	0x200002fc

080030a4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	2101      	movs	r1, #1
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80030b2:	f005 fc99 	bl	80089e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200002fc 	.word	0x200002fc

080030c4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80030ce:	2100      	movs	r1, #0
 80030d0:	4804      	ldr	r0, [pc, #16]	; (80030e4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80030d2:	f005 fca1 	bl	8008a18 <HAL_RTCEx_BKUPRead>
 80030d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80030d8:	687b      	ldr	r3, [r7, #4]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200002fc 	.word	0x200002fc

080030e8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80030f2:	2101      	movs	r1, #1
 80030f4:	4804      	ldr	r0, [pc, #16]	; (8003108 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80030f6:	f005 fc8f 	bl	8008a18 <HAL_RTCEx_BKUPRead>
 80030fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80030fc:	687b      	ldr	r3, [r7, #4]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200002fc 	.word	0x200002fc

0800310c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	2102      	movs	r1, #2
 8003118:	4803      	ldr	r0, [pc, #12]	; (8003128 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800311a:	f005 fc65 	bl	80089e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	200002fc 	.word	0x200002fc

0800312c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8003132:	2102      	movs	r1, #2
 8003134:	4804      	ldr	r0, [pc, #16]	; (8003148 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8003136:	f005 fc6f 	bl	8008a18 <HAL_RTCEx_BKUPRead>
 800313a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800313c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200002fc 	.word	0x200002fc

0800314c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003152:	480b      	ldr	r0, [pc, #44]	; (8003180 <GetTimerTicks+0x34>)
 8003154:	f7ff fdd8 	bl	8002d08 <LL_RTC_TIME_GetSubSecond>
 8003158:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800315a:	e003      	b.n	8003164 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800315c:	4808      	ldr	r0, [pc, #32]	; (8003180 <GetTimerTicks+0x34>)
 800315e:	f7ff fdd3 	bl	8002d08 <LL_RTC_TIME_GetSubSecond>
 8003162:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003164:	4806      	ldr	r0, [pc, #24]	; (8003180 <GetTimerTicks+0x34>)
 8003166:	f7ff fdcf 	bl	8002d08 <LL_RTC_TIME_GetSubSecond>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4293      	cmp	r3, r2
 8003170:	d1f4      	bne.n	800315c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40002800 	.word	0x40002800

08003184 <LL_AHB2_GRP1_EnableClock>:
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4313      	orrs	r3, r2
 800319a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031a8:	68fb      	ldr	r3, [r7, #12]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <LL_APB1_GRP1_EnableClock>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4013      	ands	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <LL_APB1_GRP1_DisableClock>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031fa:	4013      	ands	r3, r2
 80031fc:	658b      	str	r3, [r1, #88]	; 0x58
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <LL_APB2_GRP1_EnableClock>:
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4313      	orrs	r3, r2
 800321e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800322c:	68fb      	ldr	r3, [r7, #12]
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <LL_APB2_GRP1_DisableClock>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	43db      	mvns	r3, r3
 800324a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324e:	4013      	ands	r3, r2
 8003250:	660b      	str	r3, [r1, #96]	; 0x60
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <LL_SYSCFG_EnableFastModePlus>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <LL_SYSCFG_EnableFastModePlus+0x20>)
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4904      	ldr	r1, [pc, #16]	; (800327c <LL_SYSCFG_EnableFastModePlus+0x20>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000

08003280 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003284:	4b26      	ldr	r3, [pc, #152]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 8003286:	4a27      	ldr	r2, [pc, #156]	; (8003324 <MX_USART1_UART_Init+0xa4>)
 8003288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 800328c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003292:	4b23      	ldr	r3, [pc, #140]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032a4:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032a6:	220c      	movs	r2, #12
 80032a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032bc:	4b18      	ldr	r3, [pc, #96]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80032c2:	4b17      	ldr	r3, [pc, #92]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032c4:	2240      	movs	r2, #64	; 0x40
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032d6:	4812      	ldr	r0, [pc, #72]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032d8:	f007 fbd4 	bl	800aa84 <HAL_UART_Init>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 80032e2:	f7fe ff3d 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032e6:	2100      	movs	r1, #0
 80032e8:	480d      	ldr	r0, [pc, #52]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032ea:	f009 fc82 	bl	800cbf2 <HAL_UARTEx_SetTxFifoThreshold>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 80032f4:	f7fe ff34 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032f8:	2100      	movs	r1, #0
 80032fa:	4809      	ldr	r0, [pc, #36]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032fc:	f009 fcb7 	bl	800cc6e <HAL_UARTEx_SetRxFifoThreshold>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003306:	f7fe ff2b 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800330a:	4805      	ldr	r0, [pc, #20]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 800330c:	f009 fbfe 	bl	800cb0c <HAL_UARTEx_EnableFifoMode>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8003316:	f7fe ff23 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000450 	.word	0x20000450
 8003324:	40013800 	.word	0x40013800

08003328 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800332c:	4b23      	ldr	r3, [pc, #140]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800332e:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <MX_USART2_UART_Init+0x98>)
 8003330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003340:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800334e:	220c      	movs	r2, #12
 8003350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003352:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800335a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800335e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003362:	2200      	movs	r2, #0
 8003364:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003368:	2200      	movs	r2, #0
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800336e:	2200      	movs	r2, #0
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003372:	4812      	ldr	r0, [pc, #72]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003374:	f007 fb86 	bl	800aa84 <HAL_UART_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800337e:	f7fe feef 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003382:	2100      	movs	r1, #0
 8003384:	480d      	ldr	r0, [pc, #52]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003386:	f009 fc34 	bl	800cbf2 <HAL_UARTEx_SetTxFifoThreshold>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003390:	f7fe fee6 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003394:	2100      	movs	r1, #0
 8003396:	4809      	ldr	r0, [pc, #36]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003398:	f009 fc69 	bl	800cc6e <HAL_UARTEx_SetRxFifoThreshold>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80033a2:	f7fe fedd 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80033a6:	4805      	ldr	r0, [pc, #20]	; (80033bc <MX_USART2_UART_Init+0x94>)
 80033a8:	f009 fbeb 	bl	800cb82 <HAL_UARTEx_DisableFifoMode>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80033b2:	f7fe fed5 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200004e0 	.word	0x200004e0
 80033c0:	40004400 	.word	0x40004400

080033c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b09a      	sub	sp, #104	; 0x68
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80033dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	2238      	movs	r2, #56	; 0x38
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f01a fffa 	bl	801e3ec <memset>
  if(uartHandle->Instance==USART1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a6f      	ldr	r2, [pc, #444]	; (80035bc <HAL_UART_MspInit+0x1f8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f040 80a3 	bne.w	800354a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003404:	2301      	movs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003408:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800340c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800340e:	f107 030c 	add.w	r3, r7, #12
 8003412:	4618      	mov	r0, r3
 8003414:	f004 fe78 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800341e:	f7fe fe9f 	bl	8002160 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003422:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003426:	f7ff feef 	bl	8003208 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	2002      	movs	r0, #2
 800342c:	f7ff feaa 	bl	8003184 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003430:	23c0      	movs	r3, #192	; 0xc0
 8003432:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003438:	2301      	movs	r3, #1
 800343a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800343c:	2301      	movs	r3, #1
 800343e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003440:	2307      	movs	r3, #7
 8003442:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003448:	4619      	mov	r1, r3
 800344a:	485d      	ldr	r0, [pc, #372]	; (80035c0 <HAL_UART_MspInit+0x1fc>)
 800344c:	f002 fbee 	bl	8005c2c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003450:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003454:	f7ff ff02 	bl	800325c <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003458:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800345c:	f7ff fefe 	bl	800325c <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003460:	4b58      	ldr	r3, [pc, #352]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003462:	4a59      	ldr	r2, [pc, #356]	; (80035c8 <HAL_UART_MspInit+0x204>)
 8003464:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003466:	4b57      	ldr	r3, [pc, #348]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003468:	2212      	movs	r2, #18
 800346a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800346c:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <HAL_UART_MspInit+0x200>)
 800346e:	2210      	movs	r2, #16
 8003470:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <HAL_UART_MspInit+0x200>)
 800347a:	2280      	movs	r2, #128	; 0x80
 800347c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800347e:	4b51      	ldr	r3, [pc, #324]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003480:	2200      	movs	r2, #0
 8003482:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003484:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003486:	2200      	movs	r2, #0
 8003488:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800348a:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <HAL_UART_MspInit+0x200>)
 800348c:	2200      	movs	r2, #0
 800348e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003490:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003492:	2200      	movs	r2, #0
 8003494:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003496:	484b      	ldr	r0, [pc, #300]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003498:	f001 fcea 	bl	8004e70 <HAL_DMA_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80034a2:	f7fe fe5d 	bl	8002160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a46      	ldr	r2, [pc, #280]	; (80035c4 <HAL_UART_MspInit+0x200>)
 80034aa:	679a      	str	r2, [r3, #120]	; 0x78
 80034ac:	4a45      	ldr	r2, [pc, #276]	; (80035c4 <HAL_UART_MspInit+0x200>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80034b2:	4b46      	ldr	r3, [pc, #280]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034b4:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <HAL_UART_MspInit+0x20c>)
 80034b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80034b8:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034ba:	2211      	movs	r2, #17
 80034bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034be:	4b43      	ldr	r3, [pc, #268]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c4:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ca:	4b40      	ldr	r3, [pc, #256]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d0:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034dc:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034e2:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034e8:	4838      	ldr	r0, [pc, #224]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034ea:	f001 fcc1 	bl	8004e70 <HAL_DMA_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80034f4:	f7fe fe34 	bl	8002160 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80034fc:	2300      	movs	r3, #0
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003500:	2300      	movs	r3, #0
 8003502:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 800350c:	2301      	movs	r3, #1
 800350e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003510:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003514:	4619      	mov	r1, r3
 8003516:	482d      	ldr	r0, [pc, #180]	; (80035cc <HAL_UART_MspInit+0x208>)
 8003518:	f002 f894 	bl	8005644 <HAL_DMAEx_ConfigMuxSync>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003522:	f7fe fe1d 	bl	8002160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a28      	ldr	r2, [pc, #160]	; (80035cc <HAL_UART_MspInit+0x208>)
 800352a:	67da      	str	r2, [r3, #124]	; 0x7c
 800352c:	4a27      	ldr	r2, [pc, #156]	; (80035cc <HAL_UART_MspInit+0x208>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2102      	movs	r1, #2
 8003536:	2024      	movs	r0, #36	; 0x24
 8003538:	f001 fc63 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800353c:	2024      	movs	r0, #36	; 0x24
 800353e:	f001 fc7a 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003542:	200c      	movs	r0, #12
 8003544:	f001 fc77 	bl	8004e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003548:	e033      	b.n	80035b2 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <HAL_UART_MspInit+0x210>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d12e      	bne.n	80035b2 <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003554:	2302      	movs	r3, #2
 8003556:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003558:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800355c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	4618      	mov	r0, r3
 8003564:	f004 fdd0 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 800356e:	f7fe fdf7 	bl	8002160 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003572:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003576:	f7ff fe1d 	bl	80031b4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357a:	2001      	movs	r0, #1
 800357c:	f7ff fe02 	bl	8003184 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003580:	230c      	movs	r3, #12
 8003582:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003588:	2301      	movs	r3, #1
 800358a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800358c:	2301      	movs	r3, #1
 800358e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003590:	2307      	movs	r3, #7
 8003592:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003598:	4619      	mov	r1, r3
 800359a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800359e:	f002 fb45 	bl	8005c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	2025      	movs	r0, #37	; 0x25
 80035a8:	f001 fc2b 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035ac:	2025      	movs	r0, #37	; 0x25
 80035ae:	f001 fc42 	bl	8004e36 <HAL_NVIC_EnableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3768      	adds	r7, #104	; 0x68
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40013800 	.word	0x40013800
 80035c0:	48000400 	.word	0x48000400
 80035c4:	20000570 	.word	0x20000570
 80035c8:	40020008 	.word	0x40020008
 80035cc:	200005d0 	.word	0x200005d0
 80035d0:	4002001c 	.word	0x4002001c
 80035d4:	40004400 	.word	0x40004400

080035d8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a16      	ldr	r2, [pc, #88]	; (8003640 <HAL_UART_MspDeInit+0x68>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d115      	bne.n	8003616 <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80035ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035ee:	f7ff fe23 	bl	8003238 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80035f2:	21c0      	movs	r1, #192	; 0xc0
 80035f4:	4813      	ldr	r0, [pc, #76]	; (8003644 <HAL_UART_MspDeInit+0x6c>)
 80035f6:	f002 fc79 	bl	8005eec <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fcde 	bl	8004fc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fcd9 	bl	8004fc0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800360e:	2024      	movs	r0, #36	; 0x24
 8003610:	f001 fc1f 	bl	8004e52 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003614:	e010      	b.n	8003638 <HAL_UART_MspDeInit+0x60>
  else if(uartHandle->Instance==USART2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <HAL_UART_MspDeInit+0x70>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10b      	bne.n	8003638 <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003620:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003624:	f7ff fdde 	bl	80031e4 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8003628:	210c      	movs	r1, #12
 800362a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800362e:	f002 fc5d 	bl	8005eec <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003632:	2025      	movs	r0, #37	; 0x25
 8003634:	f001 fc0d 	bl	8004e52 <HAL_NVIC_DisableIRQ>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40013800 	.word	0x40013800
 8003644:	48000400 	.word	0x48000400
 8003648:	40004400 	.word	0x40004400

0800364c <LL_APB2_GRP1_ForceReset>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4313      	orrs	r3, r2
 8003662:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <LL_APB2_GRP1_ReleaseReset>:
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	43db      	mvns	r3, r3
 8003680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003684:	4013      	ands	r3, r2
 8003686:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
	...

08003694 <LL_EXTI_EnableIT_0_31>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <LL_EXTI_EnableIT_0_31+0x24>)
 800369e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80036a2:	4905      	ldr	r1, [pc, #20]	; (80036b8 <LL_EXTI_EnableIT_0_31+0x24>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	58000800 	.word	0x58000800

080036bc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80036c4:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <vcom_Init+0x28>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80036ca:	f7fe f85d 	bl	8001788 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80036ce:	f7ff fdd7 	bl	8003280 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80036d2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80036d6:	f7ff ffdd 	bl	8003694 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80036da:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000634 	.word	0x20000634

080036e8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80036ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036f0:	f7ff ffac 	bl	800364c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80036f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036f8:	f7ff ffb9 	bl	800366e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80036fc:	4804      	ldr	r0, [pc, #16]	; (8003710 <vcom_DeInit+0x28>)
 80036fe:	f7ff ff6b 	bl	80035d8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003702:	200f      	movs	r0, #15
 8003704:	f001 fba5 	bl	8004e52 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003708:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000450 	.word	0x20000450

08003714 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	461a      	mov	r2, r3
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4804      	ldr	r0, [pc, #16]	; (8003738 <vcom_Trace_DMA+0x24>)
 8003728:	f007 fa52 	bl	800abd0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800372c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000450 	.word	0x20000450

0800373c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003744:	4a19      	ldr	r2, [pc, #100]	; (80037ac <vcom_ReceiveInit+0x70>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800374a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800374e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003750:	f107 0308 	add.w	r3, r7, #8
 8003754:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003758:	4815      	ldr	r0, [pc, #84]	; (80037b0 <vcom_ReceiveInit+0x74>)
 800375a:	f009 f94a 	bl	800c9f2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800375e:	bf00      	nop
 8003760:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <vcom_ReceiveInit+0x74>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d0f7      	beq.n	8003760 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003770:	bf00      	nop
 8003772:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <vcom_ReceiveInit+0x74>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003780:	d1f7      	bne.n	8003772 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <vcom_ReceiveInit+0x74>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <vcom_ReceiveInit+0x74>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003790:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003792:	4807      	ldr	r0, [pc, #28]	; (80037b0 <vcom_ReceiveInit+0x74>)
 8003794:	f009 f988 	bl	800caa8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003798:	2201      	movs	r2, #1
 800379a:	4906      	ldr	r1, [pc, #24]	; (80037b4 <vcom_ReceiveInit+0x78>)
 800379c:	4804      	ldr	r0, [pc, #16]	; (80037b0 <vcom_ReceiveInit+0x74>)
 800379e:	f007 f9c1 	bl	800ab24 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80037a2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000638 	.word	0x20000638
 80037b0:	20000450 	.word	0x20000450
 80037b4:	20000630 	.word	0x20000630

080037b8 <vcom_Resume>:

void vcom_Resume(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037bc:	4808      	ldr	r0, [pc, #32]	; (80037e0 <vcom_Resume+0x28>)
 80037be:	f007 f961 	bl	800aa84 <HAL_UART_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <vcom_Resume+0x14>
  {
    Error_Handler();
 80037c8:	f7fe fcca 	bl	8002160 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80037cc:	4805      	ldr	r0, [pc, #20]	; (80037e4 <vcom_Resume+0x2c>)
 80037ce:	f001 fb4f 	bl	8004e70 <HAL_DMA_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <vcom_Resume+0x24>
  {
    Error_Handler();
 80037d8:	f7fe fcc2 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000450 	.word	0x20000450
 80037e4:	20000570 	.word	0x20000570

080037e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a05      	ldr	r2, [pc, #20]	; (800380c <HAL_UART_TxCpltCallback+0x24>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d103      	bne.n	8003802 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_UART_TxCpltCallback+0x28>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2000      	movs	r0, #0
 8003800:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40013800 	.word	0x40013800
 8003810:	20000634 	.word	0x20000634

08003814 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a13      	ldr	r2, [pc, #76]	; (8003870 <HAL_UART_RxCpltCallback+0x5c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d113      	bne.n	800384e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_UART_RxCpltCallback+0x60>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_UART_RxCpltCallback+0x30>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_UART_RxCpltCallback+0x60>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2200      	movs	r2, #0
 800383e:	2101      	movs	r1, #1
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <HAL_UART_RxCpltCallback+0x64>)
 8003842:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003844:	2201      	movs	r2, #1
 8003846:	490c      	ldr	r1, [pc, #48]	; (8003878 <HAL_UART_RxCpltCallback+0x64>)
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f007 f96b 	bl	800ab24 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_UART_RxCpltCallback+0x68>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d106      	bne.n	8003866 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_UART_RxCpltCallback+0x6c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2210      	movs	r2, #16
 800385e:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_UART_RxCpltCallback+0x70>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40013800 	.word	0x40013800
 8003874:	20000638 	.word	0x20000638
 8003878:	20000630 	.word	0x20000630
 800387c:	40004400 	.word	0x40004400
 8003880:	200004e0 	.word	0x200004e0
 8003884:	20000010 	.word	0x20000010

08003888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003888:	480d      	ldr	r0, [pc, #52]	; (80038c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800388a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800388c:	f7ff f987 	bl	8002b9e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003890:	480c      	ldr	r0, [pc, #48]	; (80038c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003892:	490d      	ldr	r1, [pc, #52]	; (80038c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003894:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <LoopForever+0xe>)
  movs r3, #0
 8003896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003898:	e002      	b.n	80038a0 <LoopCopyDataInit>

0800389a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800389a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800389c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800389e:	3304      	adds	r3, #4

080038a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038a4:	d3f9      	bcc.n	800389a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038a8:	4c0a      	ldr	r4, [pc, #40]	; (80038d4 <LoopForever+0x16>)
  movs r3, #0
 80038aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038ac:	e001      	b.n	80038b2 <LoopFillZerobss>

080038ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038b0:	3204      	adds	r2, #4

080038b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038b4:	d3fb      	bcc.n	80038ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038b6:	f01a fda1 	bl	801e3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038ba:	f7fe fa95 	bl	8001de8 <main>

080038be <LoopForever>:

LoopForever:
    b LoopForever
 80038be:	e7fe      	b.n	80038be <LoopForever>
  ldr   r0, =_estack
 80038c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80038c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038c8:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80038cc:	0801f5c0 	.word	0x0801f5c0
  ldr r2, =_sbss
 80038d0:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80038d4:	20002774 	.word	0x20002774

080038d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038d8:	e7fe      	b.n	80038d8 <ADC_IRQHandler>

080038da <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80038ee:	2310      	movs	r3, #16
 80038f0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80038f2:	2301      	movs	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fa:	2303      	movs	r3, #3
 80038fc:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	4619      	mov	r1, r3
 8003902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003906:	f002 f991 	bl	8005c2c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800390a:	2320      	movs	r3, #32
 800390c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	4619      	mov	r1, r3
 8003912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003916:	f002 f989 	bl	8005c2c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800391a:	2200      	movs	r2, #0
 800391c:	2120      	movs	r1, #32
 800391e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003922:	f002 fbb1 	bl	8006088 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003926:	2200      	movs	r2, #0
 8003928:	2110      	movs	r1, #16
 800392a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392e:	f002 fbab 	bl	8006088 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d83f      	bhi.n	80039cc <BSP_RADIO_ConfigRFSwitch+0x90>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003965 	.word	0x08003965
 8003958:	0800397f 	.word	0x0800397f
 800395c:	08003999 	.word	0x08003999
 8003960:	080039b3 	.word	0x080039b3
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003964:	2200      	movs	r2, #0
 8003966:	2110      	movs	r1, #16
 8003968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800396c:	f002 fb8c 	bl	8006088 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003970:	2200      	movs	r2, #0
 8003972:	2120      	movs	r1, #32
 8003974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003978:	f002 fb86 	bl	8006088 <HAL_GPIO_WritePin>
      break;      
 800397c:	e027      	b.n	80039ce <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800397e:	2201      	movs	r2, #1
 8003980:	2110      	movs	r1, #16
 8003982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003986:	f002 fb7f 	bl	8006088 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800398a:	2200      	movs	r2, #0
 800398c:	2120      	movs	r1, #32
 800398e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003992:	f002 fb79 	bl	8006088 <HAL_GPIO_WritePin>
      break;
 8003996:	e01a      	b.n	80039ce <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003998:	2201      	movs	r2, #1
 800399a:	2110      	movs	r1, #16
 800399c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a0:	f002 fb72 	bl	8006088 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80039a4:	2201      	movs	r2, #1
 80039a6:	2120      	movs	r1, #32
 80039a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ac:	f002 fb6c 	bl	8006088 <HAL_GPIO_WritePin>
      break;
 80039b0:	e00d      	b.n	80039ce <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80039b2:	2200      	movs	r2, #0
 80039b4:	2110      	movs	r1, #16
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ba:	f002 fb65 	bl	8006088 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80039be:	2201      	movs	r2, #1
 80039c0:	2120      	movs	r1, #32
 80039c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c6:	f002 fb5f 	bl	8006088 <HAL_GPIO_WritePin>
      break;
 80039ca:	e000      	b.n	80039ce <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80039cc:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80039dc:	2302      	movs	r3, #2
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80039f8:	2301      	movs	r3, #1
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003a12:	230f      	movs	r3, #15
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e001      	b.n	8003a1c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003a18:	2316      	movs	r3, #22
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a03      	ldr	r2, [pc, #12]	; (8003a40 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6053      	str	r3, [r2, #4]
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	e0042000 	.word	0xe0042000

08003a44 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a03      	ldr	r2, [pc, #12]	; (8003a5c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003a4e:	f043 0302 	orr.w	r3, r3, #2
 8003a52:	6053      	str	r3, [r2, #4]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	e0042000 	.word	0xe0042000

08003a60 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a03      	ldr	r2, [pc, #12]	; (8003a78 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	6053      	str	r3, [r2, #4]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	e0042000 	.word	0xe0042000

08003a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a86:	2003      	movs	r0, #3
 8003a88:	f001 f9b0 	bl	8004dec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a8c:	f004 f95e 	bl	8007d4c <HAL_RCC_GetHCLKFreq>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <HAL_Init+0x3c>)
 8003a94:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a96:	200f      	movs	r0, #15
 8003a98:	f7ff f800 	bl	8002a9c <HAL_InitTick>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	71fb      	strb	r3, [r7, #7]
 8003aa6:	e001      	b.n	8003aac <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003aa8:	f7fe fd93 	bl	80025d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003aac:	79fb      	ldrb	r3, [r7, #7]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000000c 	.word	0x2000000c

08003abc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <HAL_SuspendTick+0x18>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <HAL_SuspendTick+0x18>)
 8003ac6:	f023 0302 	bic.w	r3, r3, #2
 8003aca:	6013      	str	r3, [r2, #0]
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	e000e010 	.word	0xe000e010

08003ad8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <HAL_ResumeTick+0x18>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a03      	ldr	r2, [pc, #12]	; (8003af0 <HAL_ResumeTick+0x18>)
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <HAL_GetUIDw0+0x10>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	1fff7590 	.word	0x1fff7590

08003b08 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <HAL_GetUIDw1+0x10>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	1fff7594 	.word	0x1fff7594

08003b1c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003b20:	4b02      	ldr	r3, [pc, #8]	; (8003b2c <HAL_GetUIDw2+0x10>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	1fff7598 	.word	0x1fff7598

08003b30 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003b34:	f7ff ff78 	bl	8003a28 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003b40:	f7ff ff80 	bl	8003a44 <LL_DBGMCU_EnableDBGStopMode>
}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003b4c:	f7ff ff88 	bl	8003a60 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2107      	movs	r1, #7
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2107      	movs	r1, #7
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	210f      	movs	r1, #15
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	401a      	ands	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	0e9b      	lsrs	r3, r3, #26
 8003c46:	f003 010f 	and.w	r1, r3, #15
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	0219      	lsls	r1, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	400b      	ands	r3, r1
 8003cce:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003cf6:	f023 0317 	bic.w	r3, r3, #23
 8003cfa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d1c:	f023 0317 	bic.w	r3, r3, #23
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6093      	str	r3, [r2, #8]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d42:	d101      	bne.n	8003d48 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d64:	f023 0317 	bic.w	r3, r3, #23
 8003d68:	f043 0201 	orr.w	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d8a:	f023 0317 	bic.w	r3, r3, #23
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <LL_ADC_IsEnabled+0x18>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <LL_ADC_IsEnabled+0x1a>
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d101      	bne.n	8003ddc <LL_ADC_IsDisableOngoing+0x18>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <LL_ADC_IsDisableOngoing+0x1a>
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003df8:	f023 0317 	bic.w	r3, r3, #23
 8003dfc:	f043 0204 	orr.w	r2, r3, #4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e1e:	f023 0317 	bic.w	r3, r3, #23
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d101      	bne.n	8003e4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e19e      	b.n	80041b8 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fd fbb5 	bl	80015f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff44 	bl	8003d2e <LL_ADC_IsInternalRegulatorEnabled>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d115      	bne.n	8003ed8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff18 	bl	8003ce6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eb6:	4b99      	ldr	r3, [pc, #612]	; (800411c <HAL_ADC_Init+0x2c4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	099b      	lsrs	r3, r3, #6
 8003ebc:	4a98      	ldr	r2, [pc, #608]	; (8004120 <HAL_ADC_Init+0x2c8>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eca:	e002      	b.n	8003ed2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f9      	bne.n	8003ecc <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff26 	bl	8003d2e <LL_ADC_IsInternalRegulatorEnabled>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10d      	bne.n	8003f04 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	f043 0210 	orr.w	r2, r3, #16
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff ff93 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8003f0e:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 8144 	bne.w	80041a6 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8140 	bne.w	80041a6 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff30 	bl	8003da0 <LL_ADC_IsEnabled>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 80a7 	bne.w	8004096 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7e1b      	ldrb	r3, [r3, #24]
 8003f50:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f52:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7e5b      	ldrb	r3, [r3, #25]
 8003f58:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f5a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7e9b      	ldrb	r3, [r3, #26]
 8003f60:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f62:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f68:	2a00      	cmp	r2, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_ADC_Init+0x11a>
 8003f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f70:	e000      	b.n	8003f74 <HAL_ADC_Init+0x11c>
 8003f72:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f74:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f7a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	da04      	bge.n	8003f8e <HAL_ADC_Init+0x136>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f8c:	e001      	b.n	8003f92 <HAL_ADC_Init+0x13a>
 8003f8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003f92:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f9a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f9c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d114      	bne.n	8003fd8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7e9b      	ldrb	r3, [r3, #26]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e00b      	b.n	8003fd8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fec:	4313      	orrs	r3, r2
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003ffe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	69b9      	ldr	r1, [r7, #24]
 8004008:	430b      	orrs	r3, r1
 800400a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004018:	4313      	orrs	r3, r2
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d111      	bne.n	800404e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004036:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800403c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004042:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_ADC_Init+0x2cc>)
 8004056:	4013      	ands	r3, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	6979      	ldr	r1, [r7, #20]
 800405e:	430b      	orrs	r3, r1
 8004060:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800406a:	d014      	beq.n	8004096 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d00f      	beq.n	8004096 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800407a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407e:	d00a      	beq.n	8004096 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004080:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_ADC_Init+0x2d0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004090:	4925      	ldr	r1, [pc, #148]	; (8004128 <HAL_ADC_Init+0x2d0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409e:	461a      	mov	r2, r3
 80040a0:	2100      	movs	r1, #0
 80040a2:	f7ff fd76 	bl	8003b92 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	461a      	mov	r2, r3
 80040b0:	491e      	ldr	r1, [pc, #120]	; (800412c <HAL_ADC_Init+0x2d4>)
 80040b2:	f7ff fd6e 	bl	8003b92 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f062 020f 	orn	r2, r2, #15
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
 80040ce:	e042      	b.n	8004156 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d8:	d13d      	bne.n	8004156 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	e00c      	b.n	80040fa <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	2b0f      	cmp	r3, #15
 80040f2:	d006      	beq.n	8004102 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	3301      	adds	r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d9ef      	bls.n	80040e0 <HAL_ADC_Init+0x288>
 8004100:	e000      	b.n	8004104 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8004102:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d112      	bne.n	8004130 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f062 020f 	orn	r2, r2, #15
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
 800411a:	e01c      	b.n	8004156 <HAL_ADC_Init+0x2fe>
 800411c:	2000000c 	.word	0x2000000c
 8004120:	053e2d63 	.word	0x053e2d63
 8004124:	1ffffc02 	.word	0x1ffffc02
 8004128:	40012708 	.word	0x40012708
 800412c:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	3b01      	subs	r3, #1
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	f003 031c 	and.w	r3, r3, #28
 8004142:	f06f 020f 	mvn.w	r2, #15
 8004146:	fa02 f103 	lsl.w	r1, r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fd36 	bl	8003bce <LL_ADC_GetSamplingTimeCommonChannels>
 8004162:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004168:	429a      	cmp	r2, r3
 800416a:	d10b      	bne.n	8004184 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	f043 0201 	orr.w	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004182:	e018      	b.n	80041b6 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f023 0312 	bic.w	r3, r3, #18
 800418c:	f043 0210 	orr.w	r2, r3, #16
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80041a4:	e007      	b.n	80041b6 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f043 0210 	orr.w	r2, r3, #16
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80041b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e06a      	b.n	80042a8 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fabe 	bl	8004760 <ADC_ConversionStop>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fb82 	bl	80048f8 <ADC_Disable>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fd7f 	bl	8003d0c <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800421c:	f023 0303 	bic.w	r3, r3, #3
 8004220:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f240 329f 	movw	r2, #927	; 0x39f
 800422a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <HAL_ADC_DeInit+0xf0>)
 8004238:	400b      	ands	r3, r1
 800423a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800424a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0207 	bic.w	r2, r2, #7
 800425a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800426a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_ADC_DeInit+0xf4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <HAL_ADC_DeInit+0xf4>)
 8004280:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004284:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fd f9ca 	bl	8001620 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	833e0200 	.word	0x833e0200
 80042b4:	40012708 	.word	0x40012708

080042b8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fdb5 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d132      	bne.n	8004336 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_ADC_Start+0x26>
 80042da:	2302      	movs	r3, #2
 80042dc:	e02e      	b.n	800433c <HAL_ADC_Start+0x84>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa80 	bl	80047ec <ADC_Enable>
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d11a      	bne.n	800432c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	221c      	movs	r2, #28
 8004316:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fd5f 	bl	8003de8 <LL_ADC_REG_StartConversion>
 800432a:	e006      	b.n	800433a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004334:	e001      	b.n	800433a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_ADC_Stop+0x16>
 8004356:	2302      	movs	r3, #2
 8004358:	e022      	b.n	80043a0 <HAL_ADC_Stop+0x5c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f9fc 	bl	8004760 <ADC_ConversionStop>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d111      	bne.n	8004396 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fac0 	bl	80048f8 <ADC_Disable>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d102      	bne.n	80043c0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80043ba:	2308      	movs	r3, #8
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e010      	b.n	80043e2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e077      	b.n	80044ce <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80043de:	2304      	movs	r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80043e2:	f7fe fb65 	bl	8002ab0 <HAL_GetTick>
 80043e6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043e8:	e021      	b.n	800442e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d01d      	beq.n	800442e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80043f2:	f7fe fb5d 	bl	8002ab0 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <HAL_ADC_PollForConversion+0x60>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d112      	bne.n	800442e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	f043 0204 	orr.w	r2, r3, #4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e04f      	b.n	80044ce <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0d6      	beq.n	80043ea <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fbd6 	bl	8003bfe <LL_ADC_REG_IsTriggerSourceSWStart>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d031      	beq.n	80044bc <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7e9b      	ldrb	r3, [r3, #26]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d12d      	bne.n	80044bc <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b08      	cmp	r3, #8
 800446c:	d126      	bne.n	80044bc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fcde 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d112      	bne.n	80044a4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 020c 	bic.w	r2, r2, #12
 800448c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	659a      	str	r2, [r3, #88]	; 0x58
 80044a2:	e00b      	b.n	80044bc <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b4:	f043 0201 	orr.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7e1b      	ldrb	r3, [r3, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	220c      	movs	r2, #12
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x28>
 8004514:	2302      	movs	r3, #2
 8004516:	e110      	b.n	800473a <HAL_ADC_ConfigChannel+0x24a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fc85 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 80f7 	bne.w	8004720 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b02      	cmp	r3, #2
 8004538:	f000 80b1 	beq.w	800469e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004544:	d004      	beq.n	8004550 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800454a:	4a7e      	ldr	r2, [pc, #504]	; (8004744 <HAL_ADC_ConfigChannel+0x254>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f7ff fb82 	bl	8003c64 <LL_ADC_REG_SetSequencerChAdd>
 8004560:	e041      	b.n	80045e6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	210f      	movs	r1, #15
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_ADC_ConfigChannel+0xa0>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0e9b      	lsrs	r3, r3, #26
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	e011      	b.n	80045b4 <HAL_ADC_ConfigChannel+0xc4>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	fa93 f3a3 	rbit	r3, r3
 800459c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80045a8:	2320      	movs	r3, #32
 80045aa:	e003      	b.n	80045b4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	6849      	ldr	r1, [r1, #4]
 80045b8:	f001 011f 	and.w	r1, r1, #31
 80045bc:	408b      	lsls	r3, r1
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	089b      	lsrs	r3, r3, #2
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d808      	bhi.n	80045e6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	f7ff fb1e 	bl	8003c22 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f7ff fb5b 	bl	8003cae <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f280 8097 	bge.w	8004730 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004602:	4851      	ldr	r0, [pc, #324]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004604:	f7ff fab8 	bl	8003b78 <LL_ADC_GetCommonPathInternalCh>
 8004608:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4f      	ldr	r2, [pc, #316]	; (800474c <HAL_ADC_ConfigChannel+0x25c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d120      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800461a:	2b00      	cmp	r3, #0
 800461c:	d11b      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004624:	4619      	mov	r1, r3
 8004626:	4848      	ldr	r0, [pc, #288]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004628:	f7ff fa94 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800462c:	4b48      	ldr	r3, [pc, #288]	; (8004750 <HAL_ADC_ConfigChannel+0x260>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	099b      	lsrs	r3, r3, #6
 8004632:	4a48      	ldr	r2, [pc, #288]	; (8004754 <HAL_ADC_ConfigChannel+0x264>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004646:	e002      	b.n	800464e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3b01      	subs	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f9      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004654:	e06c      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a3f      	ldr	r2, [pc, #252]	; (8004758 <HAL_ADC_ConfigChannel+0x268>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10c      	bne.n	800467a <HAL_ADC_ConfigChannel+0x18a>
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d107      	bne.n	800467a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004670:	4619      	mov	r1, r3
 8004672:	4835      	ldr	r0, [pc, #212]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004674:	f7ff fa6e 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 8004678:	e05a      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a37      	ldr	r2, [pc, #220]	; (800475c <HAL_ADC_ConfigChannel+0x26c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d155      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800468a:	2b00      	cmp	r3, #0
 800468c:	d150      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004694:	4619      	mov	r1, r3
 8004696:	482c      	ldr	r0, [pc, #176]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004698:	f7ff fa5c 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 800469c:	e048      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a6:	d004      	beq.n	80046b2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046ac:	4a25      	ldr	r2, [pc, #148]	; (8004744 <HAL_ADC_ConfigChannel+0x254>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d107      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4619      	mov	r1, r3
 80046bc:	4610      	mov	r0, r2
 80046be:	f7ff fae3 	bl	8003c88 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da32      	bge.n	8004730 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046ca:	481f      	ldr	r0, [pc, #124]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 80046cc:	f7ff fa54 	bl	8003b78 <LL_ADC_GetCommonPathInternalCh>
 80046d0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_ADC_ConfigChannel+0x25c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d107      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046e2:	4619      	mov	r1, r3
 80046e4:	4818      	ldr	r0, [pc, #96]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 80046e6:	f7ff fa35 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 80046ea:	e021      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_ADC_ConfigChannel+0x268>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d107      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046fc:	4619      	mov	r1, r3
 80046fe:	4812      	ldr	r0, [pc, #72]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004700:	f7ff fa28 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 8004704:	e014      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a14      	ldr	r2, [pc, #80]	; (800475c <HAL_ADC_ConfigChannel+0x26c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d10f      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004716:	4619      	mov	r1, r3
 8004718:	480b      	ldr	r0, [pc, #44]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 800471a:	f7ff fa1b 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 800471e:	e007      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004738:	7ffb      	ldrb	r3, [r7, #31]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	80000004 	.word	0x80000004
 8004748:	40012708 	.word	0x40012708
 800474c:	b0001000 	.word	0xb0001000
 8004750:	2000000c 	.word	0x2000000c
 8004754:	053e2d63 	.word	0x053e2d63
 8004758:	b8004000 	.word	0xb8004000
 800475c:	b4002000 	.word	0xb4002000

08004760 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fb61 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d033      	beq.n	80047e0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fb21 	bl	8003dc4 <LL_ADC_IsDisableOngoing>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fb3e 	bl	8003e0e <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004792:	f7fe f98d 	bl	8002ab0 <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004798:	e01b      	b.n	80047d2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800479a:	f7fe f989 	bl	8002ab0 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d914      	bls.n	80047d2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	f043 0210 	orr.w	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e007      	b.n	80047e2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1dc      	bne.n	800479a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff facf 	bl	8003da0 <LL_ADC_IsEnabled>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d169      	bne.n	80048dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	4b36      	ldr	r3, [pc, #216]	; (80048e8 <ADC_Enable+0xfc>)
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00d      	beq.n	8004832 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	f043 0210 	orr.w	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	f043 0201 	orr.w	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e055      	b.n	80048de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fa8c 	bl	8003d54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800483c:	482b      	ldr	r0, [pc, #172]	; (80048ec <ADC_Enable+0x100>)
 800483e:	f7ff f99b 	bl	8003b78 <LL_ADC_GetCommonPathInternalCh>
 8004842:	4603      	mov	r3, r0
 8004844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00f      	beq.n	800486c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800484c:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <ADC_Enable+0x104>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	4a28      	ldr	r2, [pc, #160]	; (80048f4 <ADC_Enable+0x108>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	3301      	adds	r3, #1
 800485c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800485e:	e002      	b.n	8004866 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	3b01      	subs	r3, #1
 8004864:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f9      	bne.n	8004860 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7e5b      	ldrb	r3, [r3, #25]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d033      	beq.n	80048dc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004874:	f7fe f91c 	bl	8002ab0 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800487a:	e028      	b.n	80048ce <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fa8d 	bl	8003da0 <LL_ADC_IsEnabled>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fa5f 	bl	8003d54 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004896:	f7fe f90b 	bl	8002ab0 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d914      	bls.n	80048ce <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d00d      	beq.n	80048ce <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	f043 0210 	orr.w	r2, r3, #16
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e007      	b.n	80048de <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d1cf      	bne.n	800487c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	80000017 	.word	0x80000017
 80048ec:	40012708 	.word	0x40012708
 80048f0:	2000000c 	.word	0x2000000c
 80048f4:	053e2d63 	.word	0x053e2d63

080048f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fa5d 	bl	8003dc4 <LL_ADC_IsDisableOngoing>
 800490a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fa45 	bl	8003da0 <LL_ADC_IsEnabled>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d047      	beq.n	80049ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d144      	bne.n	80049ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0305 	and.w	r3, r3, #5
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10c      	bne.n	800494a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fa20 	bl	8003d7a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2203      	movs	r2, #3
 8004940:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004942:	f7fe f8b5 	bl	8002ab0 <HAL_GetTick>
 8004946:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004948:	e029      	b.n	800499e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f043 0210 	orr.w	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	f043 0201 	orr.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e023      	b.n	80049ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004966:	f7fe f8a3 	bl	8002ab0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d914      	bls.n	800499e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	f043 0210 	orr.w	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e007      	b.n	80049ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1dc      	bne.n	8004966 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <LL_ADC_SetCalibrationFactor>:
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049c6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <LL_ADC_GetCalibrationFactor>:
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <LL_ADC_Enable>:
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a0a:	f023 0317 	bic.w	r3, r3, #23
 8004a0e:	f043 0201 	orr.w	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <LL_ADC_Disable>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a30:	f023 0317 	bic.w	r3, r3, #23
 8004a34:	f043 0202 	orr.w	r2, r3, #2
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <LL_ADC_IsEnabled>:
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <LL_ADC_IsEnabled+0x18>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <LL_ADC_IsEnabled+0x1a>
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <LL_ADC_StartCalibration>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a7a:	f023 0317 	bic.w	r3, r3, #23
 8004a7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	609a      	str	r2, [r3, #8]
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <LL_ADC_IsCalibrationOnGoing>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa4:	d101      	bne.n	8004aaa <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b088      	sub	sp, #32
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_ADCEx_Calibration_Start+0x1e>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e0b9      	b.n	8004c48 <HAL_ADCEx_Calibration_Start+0x192>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff0b 	bl	80048f8 <ADC_Disable>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ffab 	bl	8004a46 <LL_ADC_IsEnabled>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 809d 	bne.w	8004c32 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004b00:	f043 0202 	orr.w	r2, r3, #2
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	f248 0303 	movw	r3, #32771	; 0x8003
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b24:	f023 0303 	bic.w	r3, r3, #3
 8004b28:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	e02e      	b.n	8004b8e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ff98 	bl	8004a6a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b3a:	e014      	b.n	8004b66 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004b48:	d30d      	bcc.n	8004b66 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	f023 0312 	bic.w	r3, r3, #18
 8004b52:	f043 0210 	orr.w	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e070      	b.n	8004c48 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff90 	bl	8004a90 <LL_ADC_IsCalibrationOnGoing>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e2      	bne.n	8004b3c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff2f 	bl	80049de <LL_ADC_GetCalibrationFactor>
 8004b80:	4602      	mov	r2, r0
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b07      	cmp	r3, #7
 8004b92:	d9cd      	bls.n	8004b30 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ff29 	bl	80049fa <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69b9      	ldr	r1, [r7, #24]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ff01 	bl	80049b6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff31 	bl	8004a20 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bbe:	f7fd ff77 	bl	8002ab0 <HAL_GetTick>
 8004bc2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bc4:	e01c      	b.n	8004c00 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bc6:	f7fd ff73 	bl	8002ab0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d915      	bls.n	8004c00 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ff34 	bl	8004a46 <LL_ADC_IsEnabled>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be8:	f043 0210 	orr.w	r2, r3, #16
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	f043 0201 	orr.w	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e023      	b.n	8004c48 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff ff1e 	bl	8004a46 <LL_ADC_IsEnabled>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1da      	bne.n	8004bc6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68d9      	ldr	r1, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	f023 0303 	bic.w	r3, r3, #3
 8004c28:	f043 0201 	orr.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	659a      	str	r2, [r3, #88]	; 0x58
 8004c30:	e005      	b.n	8004c3e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	f043 0210 	orr.w	r2, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c82:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	60d3      	str	r3, [r2, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	f003 0307 	and.w	r3, r3, #7
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db0b      	blt.n	8004cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	f003 021f 	and.w	r2, r3, #31
 8004ccc:	4906      	ldr	r1, [pc, #24]	; (8004ce8 <__NVIC_EnableIRQ+0x34>)
 8004cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	e000e100 	.word	0xe000e100

08004cec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db12      	blt.n	8004d24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	f003 021f 	and.w	r2, r3, #31
 8004d04:	490a      	ldr	r1, [pc, #40]	; (8004d30 <__NVIC_DisableIRQ+0x44>)
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d12:	3320      	adds	r3, #32
 8004d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d18:	f3bf 8f4f 	dsb	sy
}
 8004d1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d1e:	f3bf 8f6f 	isb	sy
}
 8004d22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	e000e100 	.word	0xe000e100

08004d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	6039      	str	r1, [r7, #0]
 8004d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	db0a      	blt.n	8004d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	490c      	ldr	r1, [pc, #48]	; (8004d80 <__NVIC_SetPriority+0x4c>)
 8004d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d52:	0112      	lsls	r2, r2, #4
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	440b      	add	r3, r1
 8004d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d5c:	e00a      	b.n	8004d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	4908      	ldr	r1, [pc, #32]	; (8004d84 <__NVIC_SetPriority+0x50>)
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	3b04      	subs	r3, #4
 8004d6c:	0112      	lsls	r2, r2, #4
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	440b      	add	r3, r1
 8004d72:	761a      	strb	r2, [r3, #24]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e100 	.word	0xe000e100
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	; 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f1c3 0307 	rsb	r3, r3, #7
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf28      	it	cs
 8004da6:	2304      	movcs	r3, #4
 8004da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3304      	adds	r3, #4
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d902      	bls.n	8004db8 <NVIC_EncodePriority+0x30>
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	3b03      	subs	r3, #3
 8004db6:	e000      	b.n	8004dba <NVIC_EncodePriority+0x32>
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	401a      	ands	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	43d9      	mvns	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de0:	4313      	orrs	r3, r2
         );
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3724      	adds	r7, #36	; 0x24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff2b 	bl	8004c50 <__NVIC_SetPriorityGrouping>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	4603      	mov	r3, r0
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e10:	f7ff ff42 	bl	8004c98 <__NVIC_GetPriorityGrouping>
 8004e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	6978      	ldr	r0, [r7, #20]
 8004e1c:	f7ff ffb4 	bl	8004d88 <NVIC_EncodePriority>
 8004e20:	4602      	mov	r2, r0
 8004e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e26:	4611      	mov	r1, r2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff ff83 	bl	8004d34 <__NVIC_SetPriority>
}
 8004e2e:	bf00      	nop
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff ff35 	bl	8004cb4 <__NVIC_EnableIRQ>
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	4603      	mov	r3, r0
 8004e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff43 	bl	8004cec <__NVIC_DisableIRQ>
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e08e      	b.n	8004fa0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_DMA_Init+0x138>)
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d80f      	bhi.n	8004eae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	4b45      	ldr	r3, [pc, #276]	; (8004fac <HAL_DMA_Init+0x13c>)
 8004e96:	4413      	add	r3, r2
 8004e98:	4a45      	ldr	r2, [pc, #276]	; (8004fb0 <HAL_DMA_Init+0x140>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	009a      	lsls	r2, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a42      	ldr	r2, [pc, #264]	; (8004fb4 <HAL_DMA_Init+0x144>)
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8004eac:	e00e      	b.n	8004ecc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b40      	ldr	r3, [pc, #256]	; (8004fb8 <HAL_DMA_Init+0x148>)
 8004eb6:	4413      	add	r3, r2
 8004eb8:	4a3d      	ldr	r2, [pc, #244]	; (8004fb0 <HAL_DMA_Init+0x140>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	009a      	lsls	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a3c      	ldr	r2, [pc, #240]	; (8004fbc <HAL_DMA_Init+0x14c>)
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fb24 	bl	800556c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f2c:	d102      	bne.n	8004f34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f40:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f4a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <HAL_DMA_Init+0x106>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d80c      	bhi.n	8004f76 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fb4d 	bl	80055fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f72:	605a      	str	r2, [r3, #4]
 8004f74:	e008      	b.n	8004f88 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40020407 	.word	0x40020407
 8004fac:	bffdfff8 	.word	0xbffdfff8
 8004fb0:	cccccccd 	.word	0xcccccccd
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	bffdfbf8 	.word	0xbffdfbf8
 8004fbc:	40020400 	.word	0x40020400

08004fc0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e07b      	b.n	80050ca <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_DMA_DeInit+0x114>)
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d80f      	bhi.n	800500e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b38      	ldr	r3, [pc, #224]	; (80050d8 <HAL_DMA_DeInit+0x118>)
 8004ff6:	4413      	add	r3, r2
 8004ff8:	4a38      	ldr	r2, [pc, #224]	; (80050dc <HAL_DMA_DeInit+0x11c>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	009a      	lsls	r2, r3, #2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a35      	ldr	r2, [pc, #212]	; (80050e0 <HAL_DMA_DeInit+0x120>)
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
 800500c:	e00e      	b.n	800502c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <HAL_DMA_DeInit+0x124>)
 8005016:	4413      	add	r3, r2
 8005018:	4a30      	ldr	r2, [pc, #192]	; (80050dc <HAL_DMA_DeInit+0x11c>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	091b      	lsrs	r3, r3, #4
 8005020:	009a      	lsls	r2, r3, #2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2f      	ldr	r2, [pc, #188]	; (80050e8 <HAL_DMA_DeInit+0x128>)
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005038:	f003 021c 	and.w	r2, r3, #28
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f202 	lsl.w	r2, r1, r2
 8005046:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa8f 	bl	800556c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800505e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00f      	beq.n	8005088 <HAL_DMA_DeInit+0xc8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d80b      	bhi.n	8005088 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fac3 	bl	80055fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005086:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40020407 	.word	0x40020407
 80050d8:	bffdfff8 	.word	0xbffdfff8
 80050dc:	cccccccd 	.word	0xcccccccd
 80050e0:	40020000 	.word	0x40020000
 80050e4:	bffdfbf8 	.word	0xbffdfbf8
 80050e8:	40020400 	.word	0x40020400

080050ec <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_DMA_Start_IT+0x20>
 8005108:	2302      	movs	r3, #2
 800510a:	e069      	b.n	80051e0 <HAL_DMA_Start_IT+0xf4>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d155      	bne.n	80051cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f9d3 	bl	80054f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 020e 	orr.w	r2, r2, #14
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e00f      	b.n	8005184 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0204 	bic.w	r2, r2, #4
 8005172:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 020a 	orr.w	r2, r2, #10
 8005182:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e008      	b.n	80051de <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e04f      	b.n	800529a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d008      	beq.n	8005218 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2204      	movs	r2, #4
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e040      	b.n	800529a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 020e 	bic.w	r2, r2, #14
 8005226:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005236:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	f003 021c 	and.w	r2, r3, #28
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f202 	lsl.w	r2, r1, r2
 800525a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005264:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800527c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005286:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d005      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2204      	movs	r2, #4
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	73fb      	strb	r3, [r7, #15]
 80052c6:	e047      	b.n	8005358 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 020e 	bic.w	r2, r2, #14
 80052d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fc:	f003 021c 	and.w	r2, r3, #28
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f202 	lsl.w	r2, r1, r2
 800530a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005314:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800532c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005336:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
    }
  }
  return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005380:	f003 031c 	and.w	r3, r3, #28
 8005384:	2204      	movs	r2, #4
 8005386:	409a      	lsls	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d027      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x7c>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d022      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d107      	bne.n	80053b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	f003 021c 	and.w	r2, r3, #28
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	2104      	movs	r1, #4
 80053c6:	fa01 f202 	lsl.w	r2, r1, r2
 80053ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8081 	beq.w	80054d8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80053de:	e07b      	b.n	80054d8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	f003 031c 	and.w	r3, r3, #28
 80053e8:	2202      	movs	r2, #2
 80053ea:	409a      	lsls	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d03d      	beq.n	8005470 <HAL_DMA_IRQHandler+0x10c>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d038      	beq.n	8005470 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 020a 	bic.w	r2, r2, #10
 800541a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	4b2e      	ldr	r3, [pc, #184]	; (80054e4 <HAL_DMA_IRQHandler+0x180>)
 800542c:	429a      	cmp	r2, r3
 800542e:	d909      	bls.n	8005444 <HAL_DMA_IRQHandler+0xe0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	f003 031c 	and.w	r3, r3, #28
 8005438:	4a2b      	ldr	r2, [pc, #172]	; (80054e8 <HAL_DMA_IRQHandler+0x184>)
 800543a:	2102      	movs	r1, #2
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	6053      	str	r3, [r2, #4]
 8005442:	e008      	b.n	8005456 <HAL_DMA_IRQHandler+0xf2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005448:	f003 031c 	and.w	r3, r3, #28
 800544c:	4a27      	ldr	r2, [pc, #156]	; (80054ec <HAL_DMA_IRQHandler+0x188>)
 800544e:	2102      	movs	r1, #2
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d038      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800546e:	e033      	b.n	80054d8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005474:	f003 031c 	and.w	r3, r3, #28
 8005478:	2208      	movs	r2, #8
 800547a:	409a      	lsls	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4013      	ands	r3, r2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d02a      	beq.n	80054da <HAL_DMA_IRQHandler+0x176>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d025      	beq.n	80054da <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 020e 	bic.w	r2, r2, #14
 800549c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f003 021c 	and.w	r2, r3, #28
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2101      	movs	r1, #1
 80054ac:	fa01 f202 	lsl.w	r2, r1, r2
 80054b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
}
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40020080 	.word	0x40020080
 80054e8:	40020400 	.word	0x40020400
 80054ec:	40020000 	.word	0x40020000

080054f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005506:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005518:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	f003 021c 	and.w	r2, r3, #28
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f202 	lsl.w	r2, r1, r2
 800552c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b10      	cmp	r3, #16
 800553c:	d108      	bne.n	8005550 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800554e:	e007      	b.n	8005560 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
	...

0800556c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800557c:	429a      	cmp	r2, r3
 800557e:	d813      	bhi.n	80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800558c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	3b08      	subs	r3, #8
 800559c:	4a14      	ldr	r2, [pc, #80]	; (80055f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e011      	b.n	80055cc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	009a      	lsls	r2, r3, #2
 80055b0:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80055b2:	4413      	add	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	3b08      	subs	r3, #8
 80055c0:	4a0b      	ldr	r2, [pc, #44]	; (80055f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	3307      	adds	r3, #7
 80055ca:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80055d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	2201      	movs	r2, #1
 80055da:	409a      	lsls	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40020407 	.word	0x40020407
 80055f0:	cccccccd 	.word	0xcccccccd
 80055f4:	4002081c 	.word	0x4002081c
 80055f8:	40020880 	.word	0x40020880

080055fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	461a      	mov	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a08      	ldr	r2, [pc, #32]	; (8005640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005620:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3b01      	subs	r3, #1
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	2201      	movs	r2, #1
 800562c:	409a      	lsls	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr
 800563c:	1000823f 	.word	0x1000823f
 8005640:	40020940 	.word	0x40020940

08005644 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d12b      	bne.n	80056b2 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005664:	2302      	movs	r3, #2
 8005666:	e028      	b.n	80056ba <HAL_DMAEx_ConfigMuxSync+0x76>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	3b01      	subs	r3, #1
 8005684:	04db      	lsls	r3, r3, #19
 8005686:	431a      	orrs	r2, r3
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	431a      	orrs	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	7a1b      	ldrb	r3, [r3, #8]
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	431a      	orrs	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	7a5b      	ldrb	r3, [r3, #9]
 800569a:	025b      	lsls	r3, r3, #9
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a2:	430a      	orrs	r2, r1
 80056a4:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e003      	b.n	80056ba <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2280      	movs	r2, #128	; 0x80
 80056b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01a      	beq.n	8005712 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	2b00      	cmp	r3, #0
 8005718:	d022      	beq.n	8005760 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	4013      	ands	r3, r2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01a      	beq.n	8005760 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005738:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005742:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
      }
    }
  }
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005776:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <HAL_FLASH_Program+0x80>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_FLASH_Program+0x1a>
 800577e:	2302      	movs	r3, #2
 8005780:	e02d      	b.n	80057de <HAL_FLASH_Program+0x76>
 8005782:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <HAL_FLASH_Program+0x80>)
 8005784:	2201      	movs	r2, #1
 8005786:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <HAL_FLASH_Program+0x80>)
 800578a:	2200      	movs	r2, #0
 800578c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800578e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005792:	f000 f869 	bl	8005868 <FLASH_WaitForLastOperation>
 8005796:	4603      	mov	r3, r0
 8005798:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11a      	bne.n	80057d6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80057a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057aa:	68b8      	ldr	r0, [r7, #8]
 80057ac:	f000 f8be 	bl	800592c <FLASH_Program_DoubleWord>
 80057b0:	e004      	b.n	80057bc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	68b8      	ldr	r0, [r7, #8]
 80057b8:	f000 f8de 	bl	8005978 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80057bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057c0:	f000 f852 	bl	8005868 <FLASH_WaitForLastOperation>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80057c8:	4b08      	ldr	r3, [pc, #32]	; (80057ec <HAL_FLASH_Program+0x84>)
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	4906      	ldr	r1, [pc, #24]	; (80057ec <HAL_FLASH_Program+0x84>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80057d6:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_FLASH_Program+0x80>)
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	2000063c 	.word	0x2000063c
 80057ec:	58004000 	.word	0x58004000

080057f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <HAL_FLASH_Unlock+0x38>)
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da0b      	bge.n	800581a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_FLASH_Unlock+0x38>)
 8005804:	4a09      	ldr	r2, [pc, #36]	; (800582c <HAL_FLASH_Unlock+0x3c>)
 8005806:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <HAL_FLASH_Unlock+0x38>)
 800580a:	4a09      	ldr	r2, [pc, #36]	; (8005830 <HAL_FLASH_Unlock+0x40>)
 800580c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_FLASH_Unlock+0x38>)
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	da01      	bge.n	800581a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800581a:	79fb      	ldrb	r3, [r7, #7]
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	58004000 	.word	0x58004000
 800582c:	45670123 	.word	0x45670123
 8005830:	cdef89ab 	.word	0xcdef89ab

08005834 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_FLASH_Lock+0x30>)
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	4a08      	ldr	r2, [pc, #32]	; (8005864 <HAL_FLASH_Lock+0x30>)
 8005844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005848:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800584a:	4b06      	ldr	r3, [pc, #24]	; (8005864 <HAL_FLASH_Lock+0x30>)
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	db01      	blt.n	8005856 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005856:	79fb      	ldrb	r3, [r7, #7]
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	58004000 	.word	0x58004000

08005868 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005870:	f7fd f91e 	bl	8002ab0 <HAL_GetTick>
 8005874:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005876:	e009      	b.n	800588c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005878:	f7fd f91a 	bl	8002ab0 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	429a      	cmp	r2, r3
 8005886:	d801      	bhi.n	800588c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e047      	b.n	800591c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800588c:	4b25      	ldr	r3, [pc, #148]	; (8005924 <FLASH_WaitForLastOperation+0xbc>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d0ee      	beq.n	8005878 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800589a:	4b22      	ldr	r3, [pc, #136]	; (8005924 <FLASH_WaitForLastOperation+0xbc>)
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80058aa:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <FLASH_WaitForLastOperation+0xbc>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80058b6:	4013      	ands	r3, r2
 80058b8:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <FLASH_WaitForLastOperation+0x6c>
 80058c4:	4b17      	ldr	r3, [pc, #92]	; (8005924 <FLASH_WaitForLastOperation+0xbc>)
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80058ce:	4915      	ldr	r1, [pc, #84]	; (8005924 <FLASH_WaitForLastOperation+0xbc>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	618b      	str	r3, [r1, #24]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <FLASH_WaitForLastOperation+0x80>
 80058de:	4a11      	ldr	r2, [pc, #68]	; (8005924 <FLASH_WaitForLastOperation+0xbc>)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80058e6:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00e      	beq.n	800590c <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80058ee:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <FLASH_WaitForLastOperation+0xc0>)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e011      	b.n	800591c <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80058f8:	f7fd f8da 	bl	8002ab0 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d801      	bhi.n	800590c <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e007      	b.n	800591c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <FLASH_WaitForLastOperation+0xbc>)
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005914:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005918:	d0ee      	beq.n	80058f8 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	58004000 	.word	0x58004000
 8005928:	2000063c 	.word	0x2000063c

0800592c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005938:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <FLASH_Program_DoubleWord+0x48>)
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	4a0d      	ldr	r2, [pc, #52]	; (8005974 <FLASH_Program_DoubleWord+0x48>)
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800594a:	f3bf 8f6f 	isb	sy
}
 800594e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	000a      	movs	r2, r1
 800595e:	2300      	movs	r3, #0
 8005960:	68f9      	ldr	r1, [r7, #12]
 8005962:	3104      	adds	r1, #4
 8005964:	4613      	mov	r3, r2
 8005966:	600b      	str	r3, [r1, #0]
}
 8005968:	bf00      	nop
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	58004000 	.word	0x58004000

08005978 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005978:	b480      	push	{r7}
 800597a:	b089      	sub	sp, #36	; 0x24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005982:	2340      	movs	r3, #64	; 0x40
 8005984:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800598e:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <FLASH_Program_Fast+0x78>)
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	4a17      	ldr	r2, [pc, #92]	; (80059f0 <FLASH_Program_Fast+0x78>)
 8005994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005998:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800599a:	f3ef 8310 	mrs	r3, PRIMASK
 800599e:	60fb      	str	r3, [r7, #12]
  return(result);
 80059a0:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80059a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80059a4:	b672      	cpsid	i
}
 80059a6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	3304      	adds	r3, #4
 80059b4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	3304      	adds	r3, #4
 80059ba:	617b      	str	r3, [r7, #20]
    row_index--;
 80059bc:	7ffb      	ldrb	r3, [r7, #31]
 80059be:	3b01      	subs	r3, #1
 80059c0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80059c2:	7ffb      	ldrb	r3, [r7, #31]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1ef      	bne.n	80059a8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80059c8:	bf00      	nop
 80059ca:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <FLASH_Program_Fast+0x78>)
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d6:	d0f8      	beq.n	80059ca <FLASH_Program_Fast+0x52>
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f383 8810 	msr	PRIMASK, r3
}
 80059e2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80059e4:	bf00      	nop
 80059e6:	3724      	adds	r7, #36	; 0x24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	58004000 	.word	0x58004000

080059f4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059fe:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <HAL_FLASHEx_Erase+0xac>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_FLASHEx_Erase+0x16>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e046      	b.n	8005a98 <HAL_FLASHEx_Erase+0xa4>
 8005a0a:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <HAL_FLASHEx_Erase+0xac>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a10:	4b23      	ldr	r3, [pc, #140]	; (8005aa0 <HAL_FLASHEx_Erase+0xac>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a1a:	f7ff ff25 	bl	8005868 <FLASH_WaitForLastOperation>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d133      	bne.n	8005a90 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d108      	bne.n	8005a42 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005a30:	f000 f880 	bl	8005b34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a38:	f7ff ff16 	bl	8005868 <FLASH_WaitForLastOperation>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]
 8005a40:	e024      	b.n	8005a8c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	f04f 32ff 	mov.w	r2, #4294967295
 8005a48:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	e012      	b.n	8005a78 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005a52:	68b8      	ldr	r0, [r7, #8]
 8005a54:	f000 f87e 	bl	8005b54 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a5c:	f7ff ff04 	bl	8005868 <FLASH_WaitForLastOperation>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	601a      	str	r2, [r3, #0]
          break;
 8005a70:	e00a      	b.n	8005a88 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60bb      	str	r3, [r7, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4413      	add	r3, r2
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d3e4      	bcc.n	8005a52 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005a88:	f000 f8c0 	bl	8005c0c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a8c:	f000 f87a 	bl	8005b84 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_FLASHEx_Erase+0xac>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]

  return status;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	2000063c 	.word	0x2000063c

08005aa4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005aac:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <HAL_FLASHEx_Erase_IT+0x88>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_FLASHEx_Erase_IT+0x14>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e034      	b.n	8005b22 <HAL_FLASHEx_Erase_IT+0x7e>
 8005ab8:	4b1c      	ldr	r3, [pc, #112]	; (8005b2c <HAL_FLASHEx_Erase_IT+0x88>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <HAL_FLASHEx_Erase_IT+0x88>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <HAL_FLASHEx_Erase_IT+0x88>)
 8005aca:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ad0:	f7ff feca 	bl	8005868 <FLASH_WaitForLastOperation>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005ade:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <HAL_FLASHEx_Erase_IT+0x88>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	e01c      	b.n	8005b20 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005ae6:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	4a11      	ldr	r2, [pc, #68]	; (8005b30 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005aec:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8005af0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d105      	bne.n	8005b06 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <HAL_FLASHEx_Erase_IT+0x88>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8005b00:	f000 f818 	bl	8005b34 <FLASH_MassErase>
 8005b04:	e00c      	b.n	8005b20 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	4a08      	ldr	r2, [pc, #32]	; (8005b2c <HAL_FLASHEx_Erase_IT+0x88>)
 8005b0c:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4a06      	ldr	r2, [pc, #24]	; (8005b2c <HAL_FLASHEx_Erase_IT+0x88>)
 8005b14:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f81a 	bl	8005b54 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	2000063c 	.word	0x2000063c
 8005b30:	58004000 	.word	0x58004000

08005b34 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <FLASH_MassErase+0x1c>)
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	4a04      	ldr	r2, [pc, #16]	; (8005b50 <FLASH_MassErase+0x1c>)
 8005b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b42:	f043 0304 	orr.w	r3, r3, #4
 8005b46:	6153      	str	r3, [r2, #20]
#endif
}
 8005b48:	bf00      	nop
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr
 8005b50:	58004000 	.word	0x58004000

08005b54 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005b5c:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <FLASH_PageErase+0x2c>)
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <FLASH_PageErase+0x2c>)
 8005b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b70:	f043 0302 	orr.w	r3, r3, #2
 8005b74:	6153      	str	r3, [r2, #20]
#endif
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	58004000 	.word	0x58004000

08005b84 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d117      	bne.n	8005bc4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b94:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005b9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b9e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005ba0:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005ba6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b16      	ldr	r3, [pc, #88]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005bb8:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a12      	ldr	r2, [pc, #72]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc2:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005bc4:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d117      	bne.n	8005c00 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0c      	ldr	r2, [pc, #48]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bda:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a06      	ldr	r2, [pc, #24]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bf2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bf4:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a03      	ldr	r2, [pc, #12]	; (8005c08 <FLASH_FlushCaches+0x84>)
 8005bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bfe:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005c00:	bf00      	nop
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr
 8005c08:	58004000 	.word	0x58004000

08005c0c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <FLASH_AcknowledgePageErase+0x1c>)
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <FLASH_AcknowledgePageErase+0x1c>)
 8005c16:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005c1a:	f023 0302 	bic.w	r3, r3, #2
 8005c1e:	6153      	str	r3, [r2, #20]
#endif
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr
 8005c28:	58004000 	.word	0x58004000

08005c2c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c3a:	e140      	b.n	8005ebe <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	2101      	movs	r1, #1
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8132 	beq.w	8005eb8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d005      	beq.n	8005c6c <HAL_GPIO_Init+0x40>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d130      	bne.n	8005cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	2203      	movs	r2, #3
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	091b      	lsrs	r3, r3, #4
 8005cb8:	f003 0201 	and.w	r2, r3, #1
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d017      	beq.n	8005d0a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d123      	bne.n	8005d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	08da      	lsrs	r2, r3, #3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3208      	adds	r2, #8
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	220f      	movs	r2, #15
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43db      	mvns	r3, r3
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4013      	ands	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	08da      	lsrs	r2, r3, #3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3208      	adds	r2, #8
 8005d58:	6939      	ldr	r1, [r7, #16]
 8005d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	2203      	movs	r2, #3
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4013      	ands	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 0203 	and.w	r2, r3, #3
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 808c 	beq.w	8005eb8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005da0:	4a4e      	ldr	r2, [pc, #312]	; (8005edc <HAL_GPIO_Init+0x2b0>)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	089b      	lsrs	r3, r3, #2
 8005da6:	3302      	adds	r3, #2
 8005da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	2207      	movs	r2, #7
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005dca:	d00d      	beq.n	8005de8 <HAL_GPIO_Init+0x1bc>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a44      	ldr	r2, [pc, #272]	; (8005ee0 <HAL_GPIO_Init+0x2b4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d007      	beq.n	8005de4 <HAL_GPIO_Init+0x1b8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a43      	ldr	r2, [pc, #268]	; (8005ee4 <HAL_GPIO_Init+0x2b8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_GPIO_Init+0x1b4>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e004      	b.n	8005dea <HAL_GPIO_Init+0x1be>
 8005de0:	2307      	movs	r3, #7
 8005de2:	e002      	b.n	8005dea <HAL_GPIO_Init+0x1be>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <HAL_GPIO_Init+0x1be>
 8005de8:	2300      	movs	r3, #0
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	f002 0203 	and.w	r2, r2, #3
 8005df0:	0092      	lsls	r2, r2, #2
 8005df2:	4093      	lsls	r3, r2
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005dfa:	4938      	ldr	r1, [pc, #224]	; (8005edc <HAL_GPIO_Init+0x2b0>)
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	3302      	adds	r3, #2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e08:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <HAL_GPIO_Init+0x2bc>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	43db      	mvns	r3, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4013      	ands	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ee8 <HAL_GPIO_Init+0x2bc>)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e32:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <HAL_GPIO_Init+0x2bc>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e56:	4a24      	ldr	r2, [pc, #144]	; (8005ee8 <HAL_GPIO_Init+0x2bc>)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005e5c:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <HAL_GPIO_Init+0x2bc>)
 8005e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e62:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	43db      	mvns	r3, r3
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005e82:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <HAL_GPIO_Init+0x2bc>)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <HAL_GPIO_Init+0x2bc>)
 8005e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e90:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005eb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ee8 <HAL_GPIO_Init+0x2bc>)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f47f aeb7 	bne.w	8005c3c <HAL_GPIO_Init+0x10>
  }
}
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	48000400 	.word	0x48000400
 8005ee4:	48000800 	.word	0x48000800
 8005ee8:	58000800 	.word	0x58000800

08005eec <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005efa:	e0af      	b.n	800605c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005efc:	2201      	movs	r2, #1
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	4013      	ands	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80a2 	beq.w	8006056 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005f12:	4a59      	ldr	r2, [pc, #356]	; (8006078 <HAL_GPIO_DeInit+0x18c>)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	3302      	adds	r3, #2
 8005f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	2207      	movs	r2, #7
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4013      	ands	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f3a:	d00d      	beq.n	8005f58 <HAL_GPIO_DeInit+0x6c>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a4f      	ldr	r2, [pc, #316]	; (800607c <HAL_GPIO_DeInit+0x190>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d007      	beq.n	8005f54 <HAL_GPIO_DeInit+0x68>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a4e      	ldr	r2, [pc, #312]	; (8006080 <HAL_GPIO_DeInit+0x194>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d101      	bne.n	8005f50 <HAL_GPIO_DeInit+0x64>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e004      	b.n	8005f5a <HAL_GPIO_DeInit+0x6e>
 8005f50:	2307      	movs	r3, #7
 8005f52:	e002      	b.n	8005f5a <HAL_GPIO_DeInit+0x6e>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <HAL_GPIO_DeInit+0x6e>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	f002 0203 	and.w	r2, r2, #3
 8005f60:	0092      	lsls	r2, r2, #2
 8005f62:	4093      	lsls	r3, r2
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d136      	bne.n	8005fd8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005f6a:	4b46      	ldr	r3, [pc, #280]	; (8006084 <HAL_GPIO_DeInit+0x198>)
 8005f6c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	43db      	mvns	r3, r3
 8005f74:	4943      	ldr	r1, [pc, #268]	; (8006084 <HAL_GPIO_DeInit+0x198>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005f7c:	4b41      	ldr	r3, [pc, #260]	; (8006084 <HAL_GPIO_DeInit+0x198>)
 8005f7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	493f      	ldr	r1, [pc, #252]	; (8006084 <HAL_GPIO_DeInit+0x198>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005f8e:	4b3d      	ldr	r3, [pc, #244]	; (8006084 <HAL_GPIO_DeInit+0x198>)
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	493b      	ldr	r1, [pc, #236]	; (8006084 <HAL_GPIO_DeInit+0x198>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005f9c:	4b39      	ldr	r3, [pc, #228]	; (8006084 <HAL_GPIO_DeInit+0x198>)
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	4937      	ldr	r1, [pc, #220]	; (8006084 <HAL_GPIO_DeInit+0x198>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	2207      	movs	r2, #7
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005fba:	4a2f      	ldr	r2, [pc, #188]	; (8006078 <HAL_GPIO_DeInit+0x18c>)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	089b      	lsrs	r3, r3, #2
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	43da      	mvns	r2, r3
 8005fca:	482b      	ldr	r0, [pc, #172]	; (8006078 <HAL_GPIO_DeInit+0x18c>)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	089b      	lsrs	r3, r3, #2
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	2103      	movs	r1, #3
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	08da      	lsrs	r2, r3, #3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3208      	adds	r2, #8
 8005ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	220f      	movs	r2, #15
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43db      	mvns	r3, r3
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	08d2      	lsrs	r2, r2, #3
 800600c:	4019      	ands	r1, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3208      	adds	r2, #8
 8006012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	2103      	movs	r1, #3
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	2101      	movs	r1, #1
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	43db      	mvns	r3, r3
 800603a:	401a      	ands	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	2103      	movs	r1, #3
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	43db      	mvns	r3, r3
 8006050:	401a      	ands	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	3301      	adds	r3, #1
 800605a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	f47f af49 	bne.w	8005efc <HAL_GPIO_DeInit+0x10>
  }
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40010000 	.word	0x40010000
 800607c:	48000400 	.word	0x48000400
 8006080:	48000800 	.word	0x48000800
 8006084:	58000800 	.word	0x58000800

08006088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	807b      	strh	r3, [r7, #2]
 8006094:	4613      	mov	r3, r2
 8006096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006098:	787b      	ldrb	r3, [r7, #1]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060a4:	e002      	b.n	80060ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060a6:	887a      	ldrh	r2, [r7, #2]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	460b      	mov	r3, r1
 80060c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060c8:	887a      	ldrh	r2, [r7, #2]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4013      	ands	r3, r2
 80060ce:	041a      	lsls	r2, r3, #16
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	43d9      	mvns	r1, r3
 80060d4:	887b      	ldrh	r3, [r7, #2]
 80060d6:	400b      	ands	r3, r1
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	619a      	str	r2, [r3, #24]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e081      	b.n	80061fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fb fdf8 	bl	8001d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2224      	movs	r2, #36	; 0x24
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0201 	bic.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006138:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006148:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800615e:	609a      	str	r2, [r3, #8]
 8006160:	e006      	b.n	8006170 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800616e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d104      	bne.n	8006182 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006180:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006194:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69d9      	ldr	r1, [r3, #28]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af02      	add	r7, sp, #8
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	461a      	mov	r2, r3
 8006214:	460b      	mov	r3, r1
 8006216:	817b      	strh	r3, [r7, #10]
 8006218:	4613      	mov	r3, r2
 800621a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b20      	cmp	r3, #32
 8006226:	f040 80da 	bne.w	80063de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_I2C_Master_Transmit+0x30>
 8006234:	2302      	movs	r3, #2
 8006236:	e0d3      	b.n	80063e0 <HAL_I2C_Master_Transmit+0x1d8>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006240:	f7fc fc36 	bl	8002ab0 <HAL_GetTick>
 8006244:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	2319      	movs	r3, #25
 800624c:	2201      	movs	r2, #1
 800624e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f9e5 	bl	8006622 <I2C_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e0be      	b.n	80063e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2221      	movs	r2, #33	; 0x21
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2210      	movs	r2, #16
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	893a      	ldrh	r2, [r7, #8]
 8006282:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628e:	b29b      	uxth	r3, r3
 8006290:	2bff      	cmp	r3, #255	; 0xff
 8006292:	d90e      	bls.n	80062b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	22ff      	movs	r2, #255	; 0xff
 8006298:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	8979      	ldrh	r1, [r7, #10]
 80062a2:	4b51      	ldr	r3, [pc, #324]	; (80063e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 fbdc 	bl	8006a68 <I2C_TransferConfig>
 80062b0:	e06c      	b.n	800638c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	8979      	ldrh	r1, [r7, #10]
 80062c4:	4b48      	ldr	r3, [pc, #288]	; (80063e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fbcb 	bl	8006a68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80062d2:	e05b      	b.n	800638c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	6a39      	ldr	r1, [r7, #32]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f9e2 	bl	80066a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e07b      	b.n	80063e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	781a      	ldrb	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d034      	beq.n	800638c <HAL_I2C_Master_Transmit+0x184>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	d130      	bne.n	800638c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	2200      	movs	r2, #0
 8006332:	2180      	movs	r1, #128	; 0x80
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f974 	bl	8006622 <I2C_WaitOnFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e04d      	b.n	80063e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	2bff      	cmp	r3, #255	; 0xff
 800634c:	d90e      	bls.n	800636c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	22ff      	movs	r2, #255	; 0xff
 8006352:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006358:	b2da      	uxtb	r2, r3
 800635a:	8979      	ldrh	r1, [r7, #10]
 800635c:	2300      	movs	r3, #0
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fb7f 	bl	8006a68 <I2C_TransferConfig>
 800636a:	e00f      	b.n	800638c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637a:	b2da      	uxtb	r2, r3
 800637c:	8979      	ldrh	r1, [r7, #10]
 800637e:	2300      	movs	r3, #0
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 fb6e 	bl	8006a68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d19e      	bne.n	80062d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	6a39      	ldr	r1, [r7, #32]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f9c1 	bl	8006722 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e01a      	b.n	80063e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2220      	movs	r2, #32
 80063b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6859      	ldr	r1, [r3, #4]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_I2C_Master_Transmit+0x1e4>)
 80063be:	400b      	ands	r3, r1
 80063c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	80002000 	.word	0x80002000
 80063ec:	fe00e800 	.word	0xfe00e800

080063f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	607a      	str	r2, [r7, #4]
 80063fa:	461a      	mov	r2, r3
 80063fc:	460b      	mov	r3, r1
 80063fe:	817b      	strh	r3, [r7, #10]
 8006400:	4613      	mov	r3, r2
 8006402:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b20      	cmp	r3, #32
 800640e:	f040 80db 	bne.w	80065c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_I2C_Master_Receive+0x30>
 800641c:	2302      	movs	r3, #2
 800641e:	e0d4      	b.n	80065ca <HAL_I2C_Master_Receive+0x1da>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006428:	f7fc fb42 	bl	8002ab0 <HAL_GetTick>
 800642c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	2319      	movs	r3, #25
 8006434:	2201      	movs	r2, #1
 8006436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f8f1 	bl	8006622 <I2C_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e0bf      	b.n	80065ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2222      	movs	r2, #34	; 0x22
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2210      	movs	r2, #16
 8006456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	893a      	ldrh	r2, [r7, #8]
 800646a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006476:	b29b      	uxth	r3, r3
 8006478:	2bff      	cmp	r3, #255	; 0xff
 800647a:	d90e      	bls.n	800649a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006486:	b2da      	uxtb	r2, r3
 8006488:	8979      	ldrh	r1, [r7, #10]
 800648a:	4b52      	ldr	r3, [pc, #328]	; (80065d4 <HAL_I2C_Master_Receive+0x1e4>)
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fae8 	bl	8006a68 <I2C_TransferConfig>
 8006498:	e06d      	b.n	8006576 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	8979      	ldrh	r1, [r7, #10]
 80064ac:	4b49      	ldr	r3, [pc, #292]	; (80065d4 <HAL_I2C_Master_Receive+0x1e4>)
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fad7 	bl	8006a68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80064ba:	e05c      	b.n	8006576 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	6a39      	ldr	r1, [r7, #32]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f96b 	bl	800679c <I2C_WaitOnRXNEFlagUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e07c      	b.n	80065ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d034      	beq.n	8006576 <HAL_I2C_Master_Receive+0x186>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006510:	2b00      	cmp	r3, #0
 8006512:	d130      	bne.n	8006576 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	2200      	movs	r2, #0
 800651c:	2180      	movs	r1, #128	; 0x80
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f87f 	bl	8006622 <I2C_WaitOnFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e04d      	b.n	80065ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006532:	b29b      	uxth	r3, r3
 8006534:	2bff      	cmp	r3, #255	; 0xff
 8006536:	d90e      	bls.n	8006556 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	22ff      	movs	r2, #255	; 0xff
 800653c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006542:	b2da      	uxtb	r2, r3
 8006544:	8979      	ldrh	r1, [r7, #10]
 8006546:	2300      	movs	r3, #0
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fa8a 	bl	8006a68 <I2C_TransferConfig>
 8006554:	e00f      	b.n	8006576 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006564:	b2da      	uxtb	r2, r3
 8006566:	8979      	ldrh	r1, [r7, #10]
 8006568:	2300      	movs	r3, #0
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fa79 	bl	8006a68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d19d      	bne.n	80064bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	6a39      	ldr	r1, [r7, #32]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f8cc 	bl	8006722 <I2C_WaitOnSTOPFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e01a      	b.n	80065ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2220      	movs	r2, #32
 800659a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6859      	ldr	r1, [r3, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <HAL_I2C_Master_Receive+0x1e8>)
 80065a8:	400b      	ands	r3, r1
 80065aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	e000      	b.n	80065ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80065c8:	2302      	movs	r3, #2
  }
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	80002400 	.word	0x80002400
 80065d8:	fe00e800 	.word	0xfe00e800

080065dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d103      	bne.n	80065fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2200      	movs	r2, #0
 80065f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d007      	beq.n	8006618 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	619a      	str	r2, [r3, #24]
  }
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr

08006622 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	4613      	mov	r3, r2
 8006630:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006632:	e022      	b.n	800667a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663a:	d01e      	beq.n	800667a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663c:	f7fc fa38 	bl	8002ab0 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d302      	bcc.n	8006652 <I2C_WaitOnFlagUntilTimeout+0x30>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d113      	bne.n	800667a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	f043 0220 	orr.w	r2, r3, #32
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e00f      	b.n	800669a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699a      	ldr	r2, [r3, #24]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4013      	ands	r3, r2
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	429a      	cmp	r2, r3
 8006688:	bf0c      	ite	eq
 800668a:	2301      	moveq	r3, #1
 800668c:	2300      	movne	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	429a      	cmp	r2, r3
 8006696:	d0cd      	beq.n	8006634 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066ae:	e02c      	b.n	800670a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f8eb 	bl	8006890 <I2C_IsErrorOccurred>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e02a      	b.n	800671a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ca:	d01e      	beq.n	800670a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066cc:	f7fc f9f0 	bl	8002ab0 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d302      	bcc.n	80066e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d113      	bne.n	800670a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	f043 0220 	orr.w	r2, r3, #32
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e007      	b.n	800671a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b02      	cmp	r3, #2
 8006716:	d1cb      	bne.n	80066b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800672e:	e028      	b.n	8006782 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f8ab 	bl	8006890 <I2C_IsErrorOccurred>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e026      	b.n	8006792 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006744:	f7fc f9b4 	bl	8002ab0 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	429a      	cmp	r2, r3
 8006752:	d302      	bcc.n	800675a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d113      	bne.n	8006782 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	f043 0220 	orr.w	r2, r3, #32
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e007      	b.n	8006792 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b20      	cmp	r3, #32
 800678e:	d1cf      	bne.n	8006730 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067a8:	e064      	b.n	8006874 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f86e 	bl	8006890 <I2C_IsErrorOccurred>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e062      	b.n	8006884 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d138      	bne.n	800683e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d105      	bne.n	80067e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e04e      	b.n	8006884 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d107      	bne.n	8006804 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2210      	movs	r2, #16
 80067fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2204      	movs	r2, #4
 8006800:	645a      	str	r2, [r3, #68]	; 0x44
 8006802:	e002      	b.n	800680a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2220      	movs	r2, #32
 8006810:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6859      	ldr	r1, [r3, #4]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800681e:	400b      	ands	r3, r1
 8006820:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e022      	b.n	8006884 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683e:	f7fc f937 	bl	8002ab0 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	d302      	bcc.n	8006854 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10f      	bne.n	8006874 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006858:	f043 0220 	orr.w	r2, r3, #32
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e007      	b.n	8006884 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b04      	cmp	r3, #4
 8006880:	d193      	bne.n	80067aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	fe00e800 	.word	0xfe00e800

08006890 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	; 0x28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d075      	beq.n	80069a8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2210      	movs	r2, #16
 80068c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068c4:	e056      	b.n	8006974 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d052      	beq.n	8006974 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fc f8ef 	bl	8002ab0 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <I2C_IsErrorOccurred+0x54>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d147      	bne.n	8006974 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006906:	d12e      	bne.n	8006966 <I2C_IsErrorOccurred+0xd6>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800690e:	d02a      	beq.n	8006966 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006910:	7cfb      	ldrb	r3, [r7, #19]
 8006912:	2b20      	cmp	r3, #32
 8006914:	d027      	beq.n	8006966 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006924:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006926:	f7fc f8c3 	bl	8002ab0 <HAL_GetTick>
 800692a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800692c:	e01b      	b.n	8006966 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800692e:	f7fc f8bf 	bl	8002ab0 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b19      	cmp	r3, #25
 800693a:	d914      	bls.n	8006966 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	f043 0220 	orr.w	r2, r3, #32
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b20      	cmp	r3, #32
 8006972:	d1dc      	bne.n	800692e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b20      	cmp	r3, #32
 8006980:	d003      	beq.n	800698a <I2C_IsErrorOccurred+0xfa>
 8006982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006986:	2b00      	cmp	r3, #0
 8006988:	d09d      	beq.n	80068c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800698a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2220      	movs	r2, #32
 8006998:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	f043 0304 	orr.w	r3, r3, #4
 80069a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00b      	beq.n	80069d2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	f043 0308 	orr.w	r3, r3, #8
 80069e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	f043 0302 	orr.w	r3, r3, #2
 8006a04:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01c      	beq.n	8006a58 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7ff fddc 	bl	80065dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6859      	ldr	r1, [r3, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <I2C_IsErrorOccurred+0x1d4>)
 8006a30:	400b      	ands	r3, r1
 8006a32:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3728      	adds	r7, #40	; 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	fe00e800 	.word	0xfe00e800

08006a68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	460b      	mov	r3, r1
 8006a74:	817b      	strh	r3, [r7, #10]
 8006a76:	4613      	mov	r3, r2
 8006a78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a7a:	897b      	ldrh	r3, [r7, #10]
 8006a7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a80:	7a7b      	ldrb	r3, [r7, #9]
 8006a82:	041b      	lsls	r3, r3, #16
 8006a84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a88:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a96:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	0d5b      	lsrs	r3, r3, #21
 8006aa2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006aa6:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <I2C_TransferConfig+0x5c>)
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	ea02 0103 	and.w	r1, r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr
 8006ac4:	03ff63ff 	.word	0x03ff63ff

08006ac8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d138      	bne.n	8006b50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e032      	b.n	8006b52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2224      	movs	r2, #36	; 0x24
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0201 	bic.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6819      	ldr	r1, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e000      	b.n	8006b52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b50:	2302      	movs	r3, #2
  }
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d139      	bne.n	8006be6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e033      	b.n	8006be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2224      	movs	r2, #36	; 0x24
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0201 	bic.w	r2, r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr
	...

08006bf4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bf8:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <HAL_PWR_EnableBkUpAccess+0x18>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a03      	ldr	r2, [pc, #12]	; (8006c0c <HAL_PWR_EnableBkUpAccess+0x18>)
 8006bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c02:	6013      	str	r3, [r2, #0]
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr
 8006c0c:	58000400 	.word	0x58000400

08006c10 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10c      	bne.n	8006c3c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006c22:	4b13      	ldr	r3, [pc, #76]	; (8006c70 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c2e:	d10d      	bne.n	8006c4c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006c30:	f000 f83c 	bl	8006cac <HAL_PWREx_DisableLowPowerRunMode>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d008      	beq.n	8006c4c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006c3a:	e015      	b.n	8006c68 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006c3c:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006c48:	f000 f822 	bl	8006c90 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006c4c:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006c52:	f023 0304 	bic.w	r3, r3, #4
 8006c56:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006c5e:	bf30      	wfi
 8006c60:	e002      	b.n	8006c68 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006c62:	bf40      	sev
    __WFE();
 8006c64:	bf20      	wfe
    __WFE();
 8006c66:	bf20      	wfe
  }
}
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	58000400 	.word	0x58000400
 8006c74:	e000ed00 	.word	0xe000ed00

08006c78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006c7c:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <HAL_PWREx_GetVoltageRange+0x14>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr
 8006c8c:	58000400 	.word	0x58000400

08006c90 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006c94:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a03      	ldr	r2, [pc, #12]	; (8006ca8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c9e:	6013      	str	r3, [r2, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr
 8006ca8:	58000400 	.word	0x58000400

08006cac <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006cb2:	4b16      	ldr	r3, [pc, #88]	; (8006d0c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a15      	ldr	r2, [pc, #84]	; (8006d0c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006cb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cbc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8006cbe:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2232      	movs	r2, #50	; 0x32
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
 8006cc8:	4a12      	ldr	r2, [pc, #72]	; (8006d14 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006cca:	fba2 2303 	umull	r2, r3, r2, r3
 8006cce:	0c9b      	lsrs	r3, r3, #18
 8006cd0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006cd2:	e002      	b.n	8006cda <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006cda:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce6:	d102      	bne.n	8006cee <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f2      	bne.n	8006cd4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006cee:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cfa:	d101      	bne.n	8006d00 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e000      	b.n	8006d02 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr
 8006d0c:	58000400 	.word	0x58000400
 8006d10:	2000000c 	.word	0x2000000c
 8006d14:	431bde83 	.word	0x431bde83

08006d18 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006d22:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f023 0307 	bic.w	r3, r3, #7
 8006d2a:	4a0e      	ldr	r2, [pc, #56]	; (8006d64 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006d2c:	f043 0302 	orr.w	r3, r3, #2
 8006d30:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d32:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	4a0c      	ldr	r2, [pc, #48]	; (8006d68 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d38:	f043 0304 	orr.w	r3, r3, #4
 8006d3c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006d44:	bf30      	wfi
 8006d46:	e002      	b.n	8006d4e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006d48:	bf40      	sev
    __WFE();
 8006d4a:	bf20      	wfe
    __WFE();
 8006d4c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	4a05      	ldr	r2, [pc, #20]	; (8006d68 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d54:	f023 0304 	bic.w	r3, r3, #4
 8006d58:	6113      	str	r3, [r2, #16]
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr
 8006d64:	58000400 	.word	0x58000400
 8006d68:	e000ed00 	.word	0xe000ed00

08006d6c <LL_PWR_IsEnabledBkUpAccess>:
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7c:	d101      	bne.n	8006d82 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	58000400 	.word	0x58000400

08006d90 <LL_RCC_HSE_EnableTcxo>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006da2:	6013      	str	r3, [r2, #0]
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc80      	pop	{r7}
 8006daa:	4770      	bx	lr

08006dac <LL_RCC_HSE_DisableTcxo>:
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dbe:	6013      	str	r3, [r2, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dda:	d101      	bne.n	8006de0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr

08006dea <LL_RCC_HSE_Enable>:
{
 8006dea:	b480      	push	{r7}
 8006dec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfc:	6013      	str	r3, [r2, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <LL_RCC_HSE_Disable>:
{
 8006e06:	b480      	push	{r7}
 8006e08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e18:	6013      	str	r3, [r2, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr

08006e22 <LL_RCC_HSE_IsReady>:
{
 8006e22:	b480      	push	{r7}
 8006e24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e34:	d101      	bne.n	8006e3a <LL_RCC_HSE_IsReady+0x18>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <LL_RCC_HSE_IsReady+0x1a>
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <LL_RCC_HSI_Enable>:
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e56:	6013      	str	r3, [r2, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <LL_RCC_HSI_Disable>:
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e72:	6013      	str	r3, [r2, #0]
}
 8006e74:	bf00      	nop
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <LL_RCC_HSI_IsReady>:
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8e:	d101      	bne.n	8006e94 <LL_RCC_HSI_IsReady+0x18>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e000      	b.n	8006e96 <LL_RCC_HSI_IsReady+0x1a>
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr

08006e9e <LL_RCC_HSI_SetCalibTrimming>:
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	061b      	lsls	r3, r3, #24
 8006eb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	604b      	str	r3, [r1, #4]
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bc80      	pop	{r7}
 8006ec4:	4770      	bx	lr

08006ec6 <LL_RCC_LSE_IsReady>:
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d101      	bne.n	8006ede <LL_RCC_LSE_IsReady+0x18>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <LL_RCC_LSE_IsReady+0x1a>
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <LL_RCC_LSI_Enable>:
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ef8:	f043 0301 	orr.w	r3, r3, #1
 8006efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006f00:	bf00      	nop
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <LL_RCC_LSI_Disable>:
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006f20:	bf00      	nop
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <LL_RCC_LSI_IsReady>:
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d101      	bne.n	8006f40 <LL_RCC_LSI_IsReady+0x18>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <LL_RCC_LSI_IsReady+0x1a>
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr

08006f4a <LL_RCC_MSI_Enable>:
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	6013      	str	r3, [r2, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr

08006f66 <LL_RCC_MSI_Disable>:
{
 8006f66:	b480      	push	{r7}
 8006f68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	6013      	str	r3, [r2, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr

08006f82 <LL_RCC_MSI_IsReady>:
{
 8006f82:	b480      	push	{r7}
 8006f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d101      	bne.n	8006f98 <LL_RCC_MSI_IsReady+0x16>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <LL_RCC_MSI_IsReady+0x18>
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d101      	bne.n	8006fb8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bc80      	pop	{r7}
 8006fc0:	4770      	bx	lr

08006fc2 <LL_RCC_MSI_GetRange>:
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr

08006fd8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fe4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr

08006ff0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800700a:	4313      	orrs	r3, r2
 800700c:	604b      	str	r3, [r1, #4]
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr

08007018 <LL_RCC_SetSysClkSource>:
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 0203 	bic.w	r2, r3, #3
 800702a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr

0800703e <LL_RCC_GetSysClkSource>:
{
 800703e:	b480      	push	{r7}
 8007040:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 030c 	and.w	r3, r3, #12
}
 800704c:	4618      	mov	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <LL_RCC_SetAHBPrescaler>:
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800705c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4313      	orrs	r3, r2
 800706e:	608b      	str	r3, [r1, #8]
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr

0800707a <LL_RCC_SetAHB3Prescaler>:
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007086:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800708a:	f023 020f 	bic.w	r2, r3, #15
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	091b      	lsrs	r3, r3, #4
 8007092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr

080070a6 <LL_RCC_SetAPB1Prescaler>:
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80070ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4313      	orrs	r3, r2
 80070c0:	608b      	str	r3, [r1, #8]
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <LL_RCC_SetAPB2Prescaler>:
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80070d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	608b      	str	r3, [r1, #8]
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr

080070f2 <LL_RCC_GetAHBPrescaler>:
{
 80070f2:	b480      	push	{r7}
 80070f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80070f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007100:	4618      	mov	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <LL_RCC_GetAHB3Prescaler>:
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800710c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007110:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800711a:	4618      	mov	r0, r3
 800711c:	46bd      	mov	sp, r7
 800711e:	bc80      	pop	{r7}
 8007120:	4770      	bx	lr

08007122 <LL_RCC_GetAPB1Prescaler>:
{
 8007122:	b480      	push	{r7}
 8007124:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007130:	4618      	mov	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <LL_RCC_GetAPB2Prescaler>:
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800713c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007146:	4618      	mov	r0, r3
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr

0800714e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800714e:	b480      	push	{r7}
 8007150:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800715c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007160:	6013      	str	r3, [r2, #0]
}
 8007162:	bf00      	nop
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr

0800716a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800716a:	b480      	push	{r7}
 800716c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800716e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717c:	6013      	str	r3, [r2, #0]
}
 800717e:	bf00      	nop
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr

08007186 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007186:	b480      	push	{r7}
 8007188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800718a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007198:	d101      	bne.n	800719e <LL_RCC_PLL_IsReady+0x18>
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <LL_RCC_PLL_IsReady+0x1a>
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr

080071a8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80071ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	0a1b      	lsrs	r3, r3, #8
 80071b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr

080071c0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80071c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bc80      	pop	{r7}
 80071d4:	4770      	bx	lr

080071d6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80071d6:	b480      	push	{r7}
 80071d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80071da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr

080071ec <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80071f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f003 0303 	and.w	r3, r3, #3
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr

08007202 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007202:	b480      	push	{r7}
 8007204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007214:	d101      	bne.n	800721a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr

08007224 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800722c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007238:	d101      	bne.n	800723e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr

08007248 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800724c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800725a:	d101      	bne.n	8007260 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr

0800726a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800726a:	b480      	push	{r7}
 800726c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800726e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007278:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800727c:	d101      	bne.n	8007282 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e38b      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800729e:	f7ff fece 	bl	800703e <LL_RCC_GetSysClkSource>
 80072a2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072a4:	f7ff ffa2 	bl	80071ec <LL_RCC_PLL_GetMainSource>
 80072a8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80c9 	beq.w	800744a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <HAL_RCC_OscConfig+0x3e>
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	2b0c      	cmp	r3, #12
 80072c2:	d17b      	bne.n	80073bc <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d178      	bne.n	80073bc <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80072ca:	f7ff fe5a 	bl	8006f82 <LL_RCC_MSI_IsReady>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <HAL_RCC_OscConfig+0x54>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e36a      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <HAL_RCC_OscConfig+0x72>
 80072f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072fc:	e006      	b.n	800730c <HAL_RCC_OscConfig+0x80>
 80072fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007306:	091b      	lsrs	r3, r3, #4
 8007308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800730c:	4293      	cmp	r3, r2
 800730e:	d222      	bcs.n	8007356 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fd51 	bl	8007dbc <RCC_SetFlashLatencyFromMSIRange>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e348      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800732e:	f043 0308 	orr.w	r3, r3, #8
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fe4e 	bl	8006ff0 <LL_RCC_MSI_SetCalibTrimming>
 8007354:	e021      	b.n	800739a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007360:	f043 0308 	orr.w	r3, r3, #8
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007378:	4313      	orrs	r3, r2
 800737a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff fe35 	bl	8006ff0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fd16 	bl	8007dbc <RCC_SetFlashLatencyFromMSIRange>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e30d      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800739a:	f000 fcd7 	bl	8007d4c <HAL_RCC_GetHCLKFreq>
 800739e:	4603      	mov	r3, r0
 80073a0:	4aa1      	ldr	r2, [pc, #644]	; (8007628 <HAL_RCC_OscConfig+0x39c>)
 80073a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80073a4:	4ba1      	ldr	r3, [pc, #644]	; (800762c <HAL_RCC_OscConfig+0x3a0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fb fb77 	bl	8002a9c <HAL_InitTick>
 80073ae:	4603      	mov	r3, r0
 80073b0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80073b2:	7cfb      	ldrb	r3, [r7, #19]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d047      	beq.n	8007448 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80073b8:	7cfb      	ldrb	r3, [r7, #19]
 80073ba:	e2fc      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d02c      	beq.n	800741e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80073c4:	f7ff fdc1 	bl	8006f4a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073c8:	f7fb fb72 	bl	8002ab0 <HAL_GetTick>
 80073cc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073d0:	f7fb fb6e 	bl	8002ab0 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e2e9      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80073e2:	f7ff fdce 	bl	8006f82 <LL_RCC_MSI_IsReady>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0f1      	beq.n	80073d0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073f6:	f043 0308 	orr.w	r3, r3, #8
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800740e:	4313      	orrs	r3, r2
 8007410:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff fdea 	bl	8006ff0 <LL_RCC_MSI_SetCalibTrimming>
 800741c:	e015      	b.n	800744a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800741e:	f7ff fda2 	bl	8006f66 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007422:	f7fb fb45 	bl	8002ab0 <HAL_GetTick>
 8007426:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007428:	e008      	b.n	800743c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800742a:	f7fb fb41 	bl	8002ab0 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e2bc      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 800743c:	f7ff fda1 	bl	8006f82 <LL_RCC_MSI_IsReady>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f1      	bne.n	800742a <HAL_RCC_OscConfig+0x19e>
 8007446:	e000      	b.n	800744a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007448:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d05f      	beq.n	8007516 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	2b08      	cmp	r3, #8
 800745a:	d005      	beq.n	8007468 <HAL_RCC_OscConfig+0x1dc>
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	2b0c      	cmp	r3, #12
 8007460:	d10d      	bne.n	800747e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b03      	cmp	r3, #3
 8007466:	d10a      	bne.n	800747e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007468:	f7ff fcdb 	bl	8006e22 <LL_RCC_HSE_IsReady>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d050      	beq.n	8007514 <HAL_RCC_OscConfig+0x288>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d14c      	bne.n	8007514 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e29b      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800747e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007490:	4313      	orrs	r3, r2
 8007492:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749c:	d102      	bne.n	80074a4 <HAL_RCC_OscConfig+0x218>
 800749e:	f7ff fca4 	bl	8006dea <LL_RCC_HSE_Enable>
 80074a2:	e00d      	b.n	80074c0 <HAL_RCC_OscConfig+0x234>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80074ac:	d104      	bne.n	80074b8 <HAL_RCC_OscConfig+0x22c>
 80074ae:	f7ff fc6f 	bl	8006d90 <LL_RCC_HSE_EnableTcxo>
 80074b2:	f7ff fc9a 	bl	8006dea <LL_RCC_HSE_Enable>
 80074b6:	e003      	b.n	80074c0 <HAL_RCC_OscConfig+0x234>
 80074b8:	f7ff fca5 	bl	8006e06 <LL_RCC_HSE_Disable>
 80074bc:	f7ff fc76 	bl	8006dac <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d012      	beq.n	80074ee <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c8:	f7fb faf2 	bl	8002ab0 <HAL_GetTick>
 80074cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074d0:	f7fb faee 	bl	8002ab0 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b64      	cmp	r3, #100	; 0x64
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e269      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80074e2:	f7ff fc9e 	bl	8006e22 <LL_RCC_HSE_IsReady>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0f1      	beq.n	80074d0 <HAL_RCC_OscConfig+0x244>
 80074ec:	e013      	b.n	8007516 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ee:	f7fb fadf 	bl	8002ab0 <HAL_GetTick>
 80074f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80074f4:	e008      	b.n	8007508 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074f6:	f7fb fadb 	bl	8002ab0 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b64      	cmp	r3, #100	; 0x64
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e256      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007508:	f7ff fc8b 	bl	8006e22 <LL_RCC_HSE_IsReady>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f1      	bne.n	80074f6 <HAL_RCC_OscConfig+0x26a>
 8007512:	e000      	b.n	8007516 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007514:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d04b      	beq.n	80075ba <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	2b04      	cmp	r3, #4
 8007526:	d005      	beq.n	8007534 <HAL_RCC_OscConfig+0x2a8>
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	2b0c      	cmp	r3, #12
 800752c:	d113      	bne.n	8007556 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d110      	bne.n	8007556 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007534:	f7ff fca2 	bl	8006e7c <LL_RCC_HSI_IsReady>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <HAL_RCC_OscConfig+0x2be>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e235      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	4618      	mov	r0, r3
 8007550:	f7ff fca5 	bl	8006e9e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007554:	e031      	b.n	80075ba <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d019      	beq.n	8007592 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800755e:	f7ff fc71 	bl	8006e44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007562:	f7fb faa5 	bl	8002ab0 <HAL_GetTick>
 8007566:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007568:	e008      	b.n	800757c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800756a:	f7fb faa1 	bl	8002ab0 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e21c      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800757c:	f7ff fc7e 	bl	8006e7c <LL_RCC_HSI_IsReady>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0f1      	beq.n	800756a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fc87 	bl	8006e9e <LL_RCC_HSI_SetCalibTrimming>
 8007590:	e013      	b.n	80075ba <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007592:	f7ff fc65 	bl	8006e60 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007596:	f7fb fa8b 	bl	8002ab0 <HAL_GetTick>
 800759a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800759c:	e008      	b.n	80075b0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800759e:	f7fb fa87 	bl	8002ab0 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e202      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80075b0:	f7ff fc64 	bl	8006e7c <LL_RCC_HSI_IsReady>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1f1      	bne.n	800759e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d06f      	beq.n	80076a6 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d057      	beq.n	800767e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80075ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d036      	beq.n	8007654 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d006      	beq.n	80075fe <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e1db      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d018      	beq.n	800763a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8007608:	f7ff fc7e 	bl	8006f08 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800760c:	f7fb fa50 	bl	8002ab0 <HAL_GetTick>
 8007610:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007612:	e00d      	b.n	8007630 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007614:	f7fb fa4c 	bl	8002ab0 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b11      	cmp	r3, #17
 8007620:	d906      	bls.n	8007630 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e1c7      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
 8007626:	bf00      	nop
 8007628:	2000000c 	.word	0x2000000c
 800762c:	20000014 	.word	0x20000014
          while (LL_RCC_LSI_IsReady() != 0U)
 8007630:	f7ff fc7a 	bl	8006f28 <LL_RCC_LSI_IsReady>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1ec      	bne.n	8007614 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800763a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800763e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007642:	f023 0210 	bic.w	r2, r3, #16
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007654:	f7ff fc48 	bl	8006ee8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007658:	f7fb fa2a 	bl	8002ab0 <HAL_GetTick>
 800765c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007660:	f7fb fa26 	bl	8002ab0 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b11      	cmp	r3, #17
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e1a1      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007672:	f7ff fc59 	bl	8006f28 <LL_RCC_LSI_IsReady>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f1      	beq.n	8007660 <HAL_RCC_OscConfig+0x3d4>
 800767c:	e013      	b.n	80076a6 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800767e:	f7ff fc43 	bl	8006f08 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007682:	f7fb fa15 	bl	8002ab0 <HAL_GetTick>
 8007686:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800768a:	f7fb fa11 	bl	8002ab0 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b11      	cmp	r3, #17
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e18c      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800769c:	f7ff fc44 	bl	8006f28 <LL_RCC_LSI_IsReady>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f1      	bne.n	800768a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 80d8 	beq.w	8007864 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80076b4:	f7ff fb5a 	bl	8006d6c <LL_PWR_IsEnabledBkUpAccess>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d113      	bne.n	80076e6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80076be:	f7ff fa99 	bl	8006bf4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076c2:	f7fb f9f5 	bl	8002ab0 <HAL_GetTick>
 80076c6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80076c8:	e008      	b.n	80076dc <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076ca:	f7fb f9f1 	bl	8002ab0 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d901      	bls.n	80076dc <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e16c      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80076dc:	f7ff fb46 	bl	8006d6c <LL_PWR_IsEnabledBkUpAccess>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0f1      	beq.n	80076ca <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d07b      	beq.n	80077e6 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b85      	cmp	r3, #133	; 0x85
 80076f4:	d003      	beq.n	80076fe <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b05      	cmp	r3, #5
 80076fc:	d109      	bne.n	8007712 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80076fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800770a:	f043 0304 	orr.w	r3, r3, #4
 800770e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007712:	f7fb f9cd 	bl	8002ab0 <HAL_GetTick>
 8007716:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800771c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800772c:	e00a      	b.n	8007744 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800772e:	f7fb f9bf 	bl	8002ab0 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	f241 3288 	movw	r2, #5000	; 0x1388
 800773c:	4293      	cmp	r3, r2
 800773e:	d901      	bls.n	8007744 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e138      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007744:	f7ff fbbf 	bl	8006ec6 <LL_RCC_LSE_IsReady>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0ef      	beq.n	800772e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b81      	cmp	r3, #129	; 0x81
 8007754:	d003      	beq.n	800775e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	2b85      	cmp	r3, #133	; 0x85
 800775c:	d121      	bne.n	80077a2 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775e:	f7fb f9a7 	bl	8002ab0 <HAL_GetTick>
 8007762:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800776c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007778:	e00a      	b.n	8007790 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800777a:	f7fb f999 	bl	8002ab0 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	f241 3288 	movw	r2, #5000	; 0x1388
 8007788:	4293      	cmp	r3, r2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e112      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0ec      	beq.n	800777a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80077a0:	e060      	b.n	8007864 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a2:	f7fb f985 	bl	8002ab0 <HAL_GetTick>
 80077a6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80077a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80077bc:	e00a      	b.n	80077d4 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077be:	f7fb f977 	bl	8002ab0 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e0f0      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80077d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1ec      	bne.n	80077be <HAL_RCC_OscConfig+0x532>
 80077e4:	e03e      	b.n	8007864 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e6:	f7fb f963 	bl	8002ab0 <HAL_GetTick>
 80077ea:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80077ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007800:	e00a      	b.n	8007818 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007802:	f7fb f955 	bl	8002ab0 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007810:	4293      	cmp	r3, r2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e0ce      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800781c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1ec      	bne.n	8007802 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007828:	f7fb f942 	bl	8002ab0 <HAL_GetTick>
 800782c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800782e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800783a:	f023 0301 	bic.w	r3, r3, #1
 800783e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007842:	e00a      	b.n	800785a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007844:	f7fb f934 	bl	8002ab0 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007852:	4293      	cmp	r3, r2
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e0ad      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800785a:	f7ff fb34 	bl	8006ec6 <LL_RCC_LSE_IsReady>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1ef      	bne.n	8007844 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 80a3 	beq.w	80079b4 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	2b0c      	cmp	r3, #12
 8007872:	d076      	beq.n	8007962 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	2b02      	cmp	r3, #2
 800787a:	d14b      	bne.n	8007914 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800787c:	f7ff fc75 	bl	800716a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7fb f916 	bl	8002ab0 <HAL_GetTick>
 8007884:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007888:	f7fb f912 	bl	8002ab0 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b0a      	cmp	r3, #10
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e08d      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800789a:	f7ff fc74 	bl	8007186 <LL_RCC_PLL_IsReady>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f1      	bne.n	8007888 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	4b45      	ldr	r3, [pc, #276]	; (80079c0 <HAL_RCC_OscConfig+0x734>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80078b6:	4311      	orrs	r1, r2
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078bc:	0212      	lsls	r2, r2, #8
 80078be:	4311      	orrs	r1, r2
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80078c4:	4311      	orrs	r1, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80078ca:	4311      	orrs	r1, r2
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80078d0:	430a      	orrs	r2, r1
 80078d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078da:	f7ff fc38 	bl	800714e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ee:	f7fb f8df 	bl	8002ab0 <HAL_GetTick>
 80078f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f6:	f7fb f8db 	bl	8002ab0 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b0a      	cmp	r3, #10
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e056      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007908:	f7ff fc3d 	bl	8007186 <LL_RCC_PLL_IsReady>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0f1      	beq.n	80078f6 <HAL_RCC_OscConfig+0x66a>
 8007912:	e04f      	b.n	80079b4 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007914:	f7ff fc29 	bl	800716a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007922:	f023 0303 	bic.w	r3, r3, #3
 8007926:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8007928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007932:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800793a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7fb f8b8 	bl	8002ab0 <HAL_GetTick>
 8007940:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007944:	f7fb f8b4 	bl	8002ab0 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b0a      	cmp	r3, #10
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e02f      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007956:	f7ff fc16 	bl	8007186 <LL_RCC_PLL_IsReady>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f1      	bne.n	8007944 <HAL_RCC_OscConfig+0x6b8>
 8007960:	e028      	b.n	80079b4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e023      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800796e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f003 0203 	and.w	r2, r3, #3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	429a      	cmp	r2, r3
 8007982:	d115      	bne.n	80079b0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	429a      	cmp	r2, r3
 8007990:	d10e      	bne.n	80079b0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	429a      	cmp	r2, r3
 80079a0:	d106      	bne.n	80079b0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d001      	beq.n	80079b4 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3720      	adds	r7, #32
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	11c1808c 	.word	0x11c1808c

080079c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e10f      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079d8:	4b89      	ldr	r3, [pc, #548]	; (8007c00 <HAL_RCC_ClockConfig+0x23c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d91b      	bls.n	8007a1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e6:	4b86      	ldr	r3, [pc, #536]	; (8007c00 <HAL_RCC_ClockConfig+0x23c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f023 0207 	bic.w	r2, r3, #7
 80079ee:	4984      	ldr	r1, [pc, #528]	; (8007c00 <HAL_RCC_ClockConfig+0x23c>)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f6:	f7fb f85b 	bl	8002ab0 <HAL_GetTick>
 80079fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80079fe:	f7fb f857 	bl	8002ab0 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e0f3      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a10:	4b7b      	ldr	r3, [pc, #492]	; (8007c00 <HAL_RCC_ClockConfig+0x23c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d1ef      	bne.n	80079fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d016      	beq.n	8007a58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff fb10 	bl	8007054 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a34:	f7fb f83c 	bl	8002ab0 <HAL_GetTick>
 8007a38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a3c:	f7fb f838 	bl	8002ab0 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e0d4      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007a4e:	f7ff fbd8 	bl	8007202 <LL_RCC_IsActiveFlag_HPRE>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f1      	beq.n	8007a3c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d016      	beq.n	8007a92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fb06 	bl	800707a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a6e:	f7fb f81f 	bl	8002ab0 <HAL_GetTick>
 8007a72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007a74:	e008      	b.n	8007a88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a76:	f7fb f81b 	bl	8002ab0 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e0b7      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007a88:	f7ff fbcc 	bl	8007224 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0f1      	beq.n	8007a76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d016      	beq.n	8007acc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff faff 	bl	80070a6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007aa8:	f7fb f802 	bl	8002ab0 <HAL_GetTick>
 8007aac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ab0:	f7fa fffe 	bl	8002ab0 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e09a      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007ac2:	f7ff fbc1 	bl	8007248 <LL_RCC_IsActiveFlag_PPRE1>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0f1      	beq.n	8007ab0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d017      	beq.n	8007b08 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff faf4 	bl	80070cc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ae4:	f7fa ffe4 	bl	8002ab0 <HAL_GetTick>
 8007ae8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007aec:	f7fa ffe0 	bl	8002ab0 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e07c      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007afe:	f7ff fbb4 	bl	800726a <LL_RCC_IsActiveFlag_PPRE2>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0f1      	beq.n	8007aec <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d043      	beq.n	8007b9c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d106      	bne.n	8007b2a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007b1c:	f7ff f981 	bl	8006e22 <LL_RCC_HSE_IsReady>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d11e      	bne.n	8007b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e066      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d106      	bne.n	8007b40 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007b32:	f7ff fb28 	bl	8007186 <LL_RCC_PLL_IsReady>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d113      	bne.n	8007b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e05b      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007b48:	f7ff fa1b 	bl	8006f82 <LL_RCC_MSI_IsReady>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d108      	bne.n	8007b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e050      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007b56:	f7ff f991 	bl	8006e7c <LL_RCC_HSI_IsReady>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e049      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff fa55 	bl	8007018 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b6e:	f7fa ff9f 	bl	8002ab0 <HAL_GetTick>
 8007b72:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b74:	e00a      	b.n	8007b8c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b76:	f7fa ff9b 	bl	8002ab0 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e035      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b8c:	f7ff fa57 	bl	800703e <LL_RCC_GetSysClkSource>
 8007b90:	4602      	mov	r2, r0
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d1ec      	bne.n	8007b76 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b9c:	4b18      	ldr	r3, [pc, #96]	; (8007c00 <HAL_RCC_ClockConfig+0x23c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d21b      	bcs.n	8007be2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007baa:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <HAL_RCC_ClockConfig+0x23c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f023 0207 	bic.w	r2, r3, #7
 8007bb2:	4913      	ldr	r1, [pc, #76]	; (8007c00 <HAL_RCC_ClockConfig+0x23c>)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bba:	f7fa ff79 	bl	8002ab0 <HAL_GetTick>
 8007bbe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bc0:	e008      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007bc2:	f7fa ff75 	bl	8002ab0 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d901      	bls.n	8007bd4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e011      	b.n	8007bf8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <HAL_RCC_ClockConfig+0x23c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d1ef      	bne.n	8007bc2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007be2:	f000 f8b3 	bl	8007d4c <HAL_RCC_GetHCLKFreq>
 8007be6:	4603      	mov	r3, r0
 8007be8:	4a06      	ldr	r2, [pc, #24]	; (8007c04 <HAL_RCC_ClockConfig+0x240>)
 8007bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <HAL_RCC_ClockConfig+0x244>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fa ff53 	bl	8002a9c <HAL_InitTick>
 8007bf6:	4603      	mov	r3, r0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	58004000 	.word	0x58004000
 8007c04:	2000000c 	.word	0x2000000c
 8007c08:	20000014 	.word	0x20000014

08007c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c0c:	b590      	push	{r4, r7, lr}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c1a:	f7ff fa10 	bl	800703e <LL_RCC_GetSysClkSource>
 8007c1e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c20:	f7ff fae4 	bl	80071ec <LL_RCC_PLL_GetMainSource>
 8007c24:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <HAL_RCC_GetSysClockFreq+0x2c>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b0c      	cmp	r3, #12
 8007c30:	d139      	bne.n	8007ca6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d136      	bne.n	8007ca6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007c38:	f7ff f9b3 	bl	8006fa2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d115      	bne.n	8007c6e <HAL_RCC_GetSysClockFreq+0x62>
 8007c42:	f7ff f9ae 	bl	8006fa2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d106      	bne.n	8007c5a <HAL_RCC_GetSysClockFreq+0x4e>
 8007c4c:	f7ff f9b9 	bl	8006fc2 <LL_RCC_MSI_GetRange>
 8007c50:	4603      	mov	r3, r0
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	e005      	b.n	8007c66 <HAL_RCC_GetSysClockFreq+0x5a>
 8007c5a:	f7ff f9bd 	bl	8006fd8 <LL_RCC_MSI_GetRangeAfterStandby>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	0a1b      	lsrs	r3, r3, #8
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	4a36      	ldr	r2, [pc, #216]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x134>)
 8007c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c6c:	e014      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x8c>
 8007c6e:	f7ff f998 	bl	8006fa2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d106      	bne.n	8007c86 <HAL_RCC_GetSysClockFreq+0x7a>
 8007c78:	f7ff f9a3 	bl	8006fc2 <LL_RCC_MSI_GetRange>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	091b      	lsrs	r3, r3, #4
 8007c80:	f003 030f 	and.w	r3, r3, #15
 8007c84:	e005      	b.n	8007c92 <HAL_RCC_GetSysClockFreq+0x86>
 8007c86:	f7ff f9a7 	bl	8006fd8 <LL_RCC_MSI_GetRangeAfterStandby>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	091b      	lsrs	r3, r3, #4
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	4a2b      	ldr	r2, [pc, #172]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x134>)
 8007c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c98:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d115      	bne.n	8007ccc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007ca4:	e012      	b.n	8007ccc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d102      	bne.n	8007cb2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007cac:	4b25      	ldr	r3, [pc, #148]	; (8007d44 <HAL_RCC_GetSysClockFreq+0x138>)
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	e00c      	b.n	8007ccc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d109      	bne.n	8007ccc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007cb8:	f7ff f886 	bl	8006dc8 <LL_RCC_HSE_IsEnabledDiv2>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d102      	bne.n	8007cc8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007cc2:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <HAL_RCC_GetSysClockFreq+0x138>)
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	e001      	b.n	8007ccc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007cc8:	4b1f      	ldr	r3, [pc, #124]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007cca:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ccc:	f7ff f9b7 	bl	800703e <LL_RCC_GetSysClkSource>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b0c      	cmp	r3, #12
 8007cd4:	d12f      	bne.n	8007d36 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007cd6:	f7ff fa89 	bl	80071ec <LL_RCC_PLL_GetMainSource>
 8007cda:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d003      	beq.n	8007cea <HAL_RCC_GetSysClockFreq+0xde>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d003      	beq.n	8007cf0 <HAL_RCC_GetSysClockFreq+0xe4>
 8007ce8:	e00d      	b.n	8007d06 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007cea:	4b16      	ldr	r3, [pc, #88]	; (8007d44 <HAL_RCC_GetSysClockFreq+0x138>)
 8007cec:	60fb      	str	r3, [r7, #12]
        break;
 8007cee:	e00d      	b.n	8007d0c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007cf0:	f7ff f86a 	bl	8006dc8 <LL_RCC_HSE_IsEnabledDiv2>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d102      	bne.n	8007d00 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <HAL_RCC_GetSysClockFreq+0x138>)
 8007cfc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007cfe:	e005      	b.n	8007d0c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007d00:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007d02:	60fb      	str	r3, [r7, #12]
        break;
 8007d04:	e002      	b.n	8007d0c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	60fb      	str	r3, [r7, #12]
        break;
 8007d0a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007d0c:	f7ff fa4c 	bl	80071a8 <LL_RCC_PLL_GetN>
 8007d10:	4602      	mov	r2, r0
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	fb03 f402 	mul.w	r4, r3, r2
 8007d18:	f7ff fa5d 	bl	80071d6 <LL_RCC_PLL_GetDivider>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	091b      	lsrs	r3, r3, #4
 8007d20:	3301      	adds	r3, #1
 8007d22:	fbb4 f4f3 	udiv	r4, r4, r3
 8007d26:	f7ff fa4b 	bl	80071c0 <LL_RCC_PLL_GetR>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	0f5b      	lsrs	r3, r3, #29
 8007d2e:	3301      	adds	r3, #1
 8007d30:	fbb4 f3f3 	udiv	r3, r4, r3
 8007d34:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007d36:	697b      	ldr	r3, [r7, #20]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd90      	pop	{r4, r7, pc}
 8007d40:	0801efa4 	.word	0x0801efa4
 8007d44:	00f42400 	.word	0x00f42400
 8007d48:	01e84800 	.word	0x01e84800

08007d4c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d4c:	b598      	push	{r3, r4, r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007d50:	f7ff ff5c 	bl	8007c0c <HAL_RCC_GetSysClockFreq>
 8007d54:	4604      	mov	r4, r0
 8007d56:	f7ff f9cc 	bl	80070f2 <LL_RCC_GetAHBPrescaler>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	091b      	lsrs	r3, r3, #4
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	4a03      	ldr	r2, [pc, #12]	; (8007d70 <HAL_RCC_GetHCLKFreq+0x24>)
 8007d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d68:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	bd98      	pop	{r3, r4, r7, pc}
 8007d70:	0801ef44 	.word	0x0801ef44

08007d74 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d74:	b598      	push	{r3, r4, r7, lr}
 8007d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007d78:	f7ff ffe8 	bl	8007d4c <HAL_RCC_GetHCLKFreq>
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	f7ff f9d0 	bl	8007122 <LL_RCC_GetAPB1Prescaler>
 8007d82:	4603      	mov	r3, r0
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	4a03      	ldr	r2, [pc, #12]	; (8007d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	bd98      	pop	{r3, r4, r7, pc}
 8007d94:	0801ef84 	.word	0x0801ef84

08007d98 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d98:	b598      	push	{r3, r4, r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007d9c:	f7ff ffd6 	bl	8007d4c <HAL_RCC_GetHCLKFreq>
 8007da0:	4604      	mov	r4, r0
 8007da2:	f7ff f9c9 	bl	8007138 <LL_RCC_GetAPB2Prescaler>
 8007da6:	4603      	mov	r3, r0
 8007da8:	0adb      	lsrs	r3, r3, #11
 8007daa:	4a03      	ldr	r2, [pc, #12]	; (8007db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	bd98      	pop	{r3, r4, r7, pc}
 8007db8:	0801ef84 	.word	0x0801ef84

08007dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007dbc:	b590      	push	{r4, r7, lr}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	091b      	lsrs	r3, r3, #4
 8007dc8:	f003 030f 	and.w	r3, r3, #15
 8007dcc:	4a10      	ldr	r2, [pc, #64]	; (8007e10 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007dd4:	f7ff f998 	bl	8007108 <LL_RCC_GetAHB3Prescaler>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	091b      	lsrs	r3, r3, #4
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	4a0c      	ldr	r2, [pc, #48]	; (8007e14 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	0c9c      	lsrs	r4, r3, #18
 8007df8:	f7fe ff3e 	bl	8006c78 <HAL_PWREx_GetVoltageRange>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 f80b 	bl	8007e1c <RCC_SetFlashLatency>
 8007e06:	4603      	mov	r3, r0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd90      	pop	{r4, r7, pc}
 8007e10:	0801efa4 	.word	0x0801efa4
 8007e14:	0801ef44 	.word	0x0801ef44
 8007e18:	431bde83 	.word	0x431bde83

08007e1c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08e      	sub	sp, #56	; 0x38
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007e26:	4a3a      	ldr	r2, [pc, #232]	; (8007f10 <RCC_SetFlashLatency+0xf4>)
 8007e28:	f107 0320 	add.w	r3, r7, #32
 8007e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e30:	6018      	str	r0, [r3, #0]
 8007e32:	3304      	adds	r3, #4
 8007e34:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007e36:	4a37      	ldr	r2, [pc, #220]	; (8007f14 <RCC_SetFlashLatency+0xf8>)
 8007e38:	f107 0318 	add.w	r3, r7, #24
 8007e3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e40:	6018      	str	r0, [r3, #0]
 8007e42:	3304      	adds	r3, #4
 8007e44:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007e46:	4a34      	ldr	r2, [pc, #208]	; (8007f18 <RCC_SetFlashLatency+0xfc>)
 8007e48:	f107 030c 	add.w	r3, r7, #12
 8007e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5c:	d11b      	bne.n	8007e96 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	633b      	str	r3, [r7, #48]	; 0x30
 8007e62:	e014      	b.n	8007e8e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	3338      	adds	r3, #56	; 0x38
 8007e6a:	443b      	add	r3, r7
 8007e6c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007e70:	461a      	mov	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d807      	bhi.n	8007e88 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	3338      	adds	r3, #56	; 0x38
 8007e7e:	443b      	add	r3, r7
 8007e80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e86:	e021      	b.n	8007ecc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d9e7      	bls.n	8007e64 <RCC_SetFlashLatency+0x48>
 8007e94:	e01a      	b.n	8007ecc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007e96:	2300      	movs	r3, #0
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e9a:	e014      	b.n	8007ec6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	3338      	adds	r3, #56	; 0x38
 8007ea2:	443b      	add	r3, r7
 8007ea4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d807      	bhi.n	8007ec0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	3338      	adds	r3, #56	; 0x38
 8007eb6:	443b      	add	r3, r7
 8007eb8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ebe:	e005      	b.n	8007ecc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d9e7      	bls.n	8007e9c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ecc:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <RCC_SetFlashLatency+0x100>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f023 0207 	bic.w	r2, r3, #7
 8007ed4:	4911      	ldr	r1, [pc, #68]	; (8007f1c <RCC_SetFlashLatency+0x100>)
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007edc:	f7fa fde8 	bl	8002ab0 <HAL_GetTick>
 8007ee0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ee2:	e008      	b.n	8007ef6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007ee4:	f7fa fde4 	bl	8002ab0 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d901      	bls.n	8007ef6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e007      	b.n	8007f06 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <RCC_SetFlashLatency+0x100>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d1ef      	bne.n	8007ee4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3738      	adds	r7, #56	; 0x38
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	0801e644 	.word	0x0801e644
 8007f14:	0801e64c 	.word	0x0801e64c
 8007f18:	0801e654 	.word	0x0801e654
 8007f1c:	58004000 	.word	0x58004000

08007f20 <LL_RCC_LSE_IsReady>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d101      	bne.n	8007f38 <LL_RCC_LSE_IsReady+0x18>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <LL_RCC_LSE_IsReady+0x1a>
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr

08007f42 <LL_RCC_SetUSARTClockSource>:
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	0c1b      	lsrs	r3, r3, #16
 8007f56:	43db      	mvns	r3, r3
 8007f58:	401a      	ands	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f62:	4313      	orrs	r3, r2
 8007f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr

08007f72 <LL_RCC_SetI2SClockSource>:
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr

08007f9c <LL_RCC_SetLPUARTClockSource>:
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr

08007fc6 <LL_RCC_SetI2CClockSource>:
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	091b      	lsrs	r3, r3, #4
 8007fda:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	401a      	ands	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	011b      	lsls	r3, r3, #4
 8007fe6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <LL_RCC_SetLPTIMClockSource>:
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800800a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	0c1b      	lsrs	r3, r3, #16
 8008012:	041b      	lsls	r3, r3, #16
 8008014:	43db      	mvns	r3, r3
 8008016:	401a      	ands	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008020:	4313      	orrs	r3, r2
 8008022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	bc80      	pop	{r7}
 800802e:	4770      	bx	lr

08008030 <LL_RCC_SetRNGClockSource>:
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800803c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008040:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4313      	orrs	r3, r2
 800804c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr

0800805a <LL_RCC_SetADCClockSource>:
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800806e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4313      	orrs	r3, r2
 8008076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr

08008084 <LL_RCC_SetRTCClockSource>:
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800808c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4313      	orrs	r3, r2
 80080a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bc80      	pop	{r7}
 80080ac:	4770      	bx	lr

080080ae <LL_RCC_GetRTCClockSource>:
{
 80080ae:	b480      	push	{r7}
 80080b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80080b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80080be:	4618      	mov	r0, r3
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bc80      	pop	{r7}
 80080c4:	4770      	bx	lr

080080c6 <LL_RCC_ForceBackupDomainReset>:
{
 80080c6:	b480      	push	{r7}
 80080c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80080ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80080de:	bf00      	nop
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bc80      	pop	{r7}
 80080e4:	4770      	bx	lr

080080e6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80080e6:	b480      	push	{r7}
 80080e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80080ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80080fe:	bf00      	nop
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr
	...

08008108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8008114:	2300      	movs	r3, #0
 8008116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008118:	2300      	movs	r3, #0
 800811a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d058      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8008128:	f7fe fd64 	bl	8006bf4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800812c:	f7fa fcc0 	bl	8002ab0 <HAL_GetTick>
 8008130:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008132:	e009      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008134:	f7fa fcbc 	bl	8002ab0 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d902      	bls.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	74fb      	strb	r3, [r7, #19]
        break;
 8008146:	e006      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008148:	4b7b      	ldr	r3, [pc, #492]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008154:	d1ee      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008156:	7cfb      	ldrb	r3, [r7, #19]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d13c      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800815c:	f7ff ffa7 	bl	80080ae <LL_RCC_GetRTCClockSource>
 8008160:	4602      	mov	r2, r0
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008166:	429a      	cmp	r2, r3
 8008168:	d00f      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800816a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800816e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008176:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008178:	f7ff ffa5 	bl	80080c6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800817c:	f7ff ffb3 	bl	80080e6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d014      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008194:	f7fa fc8c 	bl	8002ab0 <HAL_GetTick>
 8008198:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800819a:	e00b      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800819c:	f7fa fc88 	bl	8002ab0 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d902      	bls.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	74fb      	strb	r3, [r7, #19]
            break;
 80081b2:	e004      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80081b4:	f7ff feb4 	bl	8007f20 <LL_RCC_LSE_IsReady>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d1ee      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80081be:	7cfb      	ldrb	r3, [r7, #19]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff ff5b 	bl	8008084 <LL_RCC_SetRTCClockSource>
 80081ce:	e004      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081d0:	7cfb      	ldrb	r3, [r7, #19]
 80081d2:	74bb      	strb	r3, [r7, #18]
 80081d4:	e001      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d6:	7cfb      	ldrb	r3, [r7, #19]
 80081d8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d004      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fea9 	bl	8007f42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d004      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff fe9e 	bl	8007f42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff fec0 	bl	8007f9c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff fee6 	bl	8007ffe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800823a:	2b00      	cmp	r3, #0
 800823c:	d004      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff fedb 	bl	8007ffe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff fed0 	bl	8007ffe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff fea9 	bl	8007fc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fe9e 	bl	8007fc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008292:	2b00      	cmp	r3, #0
 8008294:	d004      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff fe93 	bl	8007fc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d011      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fe5e 	bl	8007f72 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082be:	d107      	bne.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80082c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d010      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fea5 	bl	8008030 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d107      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80082ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d011      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff fea3 	bl	800805a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800831c:	d107      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800831e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800832c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800832e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	58000400 	.word	0x58000400

0800833c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d068      	beq.n	8008420 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7f9 fff4 	bl	8002350 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008370:	4b2e      	ldr	r3, [pc, #184]	; (800842c <HAL_RTC_Init+0xf0>)
 8008372:	22ca      	movs	r2, #202	; 0xca
 8008374:	625a      	str	r2, [r3, #36]	; 0x24
 8008376:	4b2d      	ldr	r3, [pc, #180]	; (800842c <HAL_RTC_Init+0xf0>)
 8008378:	2253      	movs	r2, #83	; 0x53
 800837a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fa0f 	bl	80087a0 <RTC_EnterInitMode>
 8008382:	4603      	mov	r3, r0
 8008384:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d13f      	bne.n	800840c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800838c:	4b27      	ldr	r3, [pc, #156]	; (800842c <HAL_RTC_Init+0xf0>)
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	4a26      	ldr	r2, [pc, #152]	; (800842c <HAL_RTC_Init+0xf0>)
 8008392:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800839c:	4b23      	ldr	r3, [pc, #140]	; (800842c <HAL_RTC_Init+0xf0>)
 800839e:	699a      	ldr	r2, [r3, #24]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6859      	ldr	r1, [r3, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	4319      	orrs	r1, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	430b      	orrs	r3, r1
 80083b0:	491e      	ldr	r1, [pc, #120]	; (800842c <HAL_RTC_Init+0xf0>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	041b      	lsls	r3, r3, #16
 80083c0:	491a      	ldr	r1, [pc, #104]	; (800842c <HAL_RTC_Init+0xf0>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80083c6:	4b19      	ldr	r3, [pc, #100]	; (800842c <HAL_RTC_Init+0xf0>)
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d6:	430b      	orrs	r3, r1
 80083d8:	4914      	ldr	r1, [pc, #80]	; (800842c <HAL_RTC_Init+0xf0>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa12 	bl	8008808 <RTC_ExitInitMode>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10e      	bne.n	800840c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80083ee:	4b0f      	ldr	r3, [pc, #60]	; (800842c <HAL_RTC_Init+0xf0>)
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a19      	ldr	r1, [r3, #32]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	4319      	orrs	r1, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	430b      	orrs	r3, r1
 8008406:	4909      	ldr	r1, [pc, #36]	; (800842c <HAL_RTC_Init+0xf0>)
 8008408:	4313      	orrs	r3, r2
 800840a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800840c:	4b07      	ldr	r3, [pc, #28]	; (800842c <HAL_RTC_Init+0xf0>)
 800840e:	22ff      	movs	r2, #255	; 0xff
 8008410:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	40002800 	.word	0x40002800

08008430 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008430:	b590      	push	{r4, r7, lr}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008446:	2b01      	cmp	r3, #1
 8008448:	d101      	bne.n	800844e <HAL_RTC_SetAlarm_IT+0x1e>
 800844a:	2302      	movs	r3, #2
 800844c:	e0f3      	b.n	8008636 <HAL_RTC_SetAlarm_IT+0x206>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2202      	movs	r2, #2
 800845a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800845e:	4b78      	ldr	r3, [pc, #480]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008466:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800846e:	d06a      	beq.n	8008546 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d13a      	bne.n	80084ec <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008476:	4b72      	ldr	r3, [pc, #456]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 f9f5 	bl	8008884 <RTC_ByteToBcd2>
 800849a:	4603      	mov	r3, r0
 800849c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f9ee 	bl	8008884 <RTC_ByteToBcd2>
 80084a8:	4603      	mov	r3, r0
 80084aa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80084ac:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	789b      	ldrb	r3, [r3, #2]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f9e6 	bl	8008884 <RTC_ByteToBcd2>
 80084b8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80084ba:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	78db      	ldrb	r3, [r3, #3]
 80084c2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80084c4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 f9d8 	bl	8008884 <RTC_ByteToBcd2>
 80084d4:	4603      	mov	r3, r0
 80084d6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80084d8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80084e0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	e02c      	b.n	8008546 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80084f4:	d00d      	beq.n	8008512 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084fe:	d008      	beq.n	8008512 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008500:	4b4f      	ldr	r3, [pc, #316]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2200      	movs	r2, #0
 8008510:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800851e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008524:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	78db      	ldrb	r3, [r3, #3]
 800852a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800852c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008534:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008536:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800853c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008546:	4b3e      	ldr	r3, [pc, #248]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008548:	22ca      	movs	r2, #202	; 0xca
 800854a:	625a      	str	r2, [r3, #36]	; 0x24
 800854c:	4b3c      	ldr	r3, [pc, #240]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 800854e:	2253      	movs	r2, #83	; 0x53
 8008550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800855a:	d12c      	bne.n	80085b6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800855c:	4b38      	ldr	r3, [pc, #224]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	4a37      	ldr	r2, [pc, #220]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008562:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008566:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008568:	4b35      	ldr	r3, [pc, #212]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 800856a:	2201      	movs	r2, #1
 800856c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008574:	d107      	bne.n	8008586 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	4930      	ldr	r1, [pc, #192]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008580:	4313      	orrs	r3, r2
 8008582:	644b      	str	r3, [r1, #68]	; 0x44
 8008584:	e006      	b.n	8008594 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008586:	4a2e      	ldr	r2, [pc, #184]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800858c:	4a2c      	ldr	r2, [pc, #176]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008594:	4a2a      	ldr	r2, [pc, #168]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	f043 0201 	orr.w	r2, r3, #1
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80085a8:	4b25      	ldr	r3, [pc, #148]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	4a24      	ldr	r2, [pc, #144]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 80085ae:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80085b2:	6193      	str	r3, [r2, #24]
 80085b4:	e02b      	b.n	800860e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80085b6:	4b22      	ldr	r3, [pc, #136]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	4a21      	ldr	r2, [pc, #132]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 80085bc:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80085c0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80085c2:	4b1f      	ldr	r3, [pc, #124]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 80085c4:	2202      	movs	r2, #2
 80085c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ce:	d107      	bne.n	80085e0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	699a      	ldr	r2, [r3, #24]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	4919      	ldr	r1, [pc, #100]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80085de:	e006      	b.n	80085ee <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80085e0:	4a17      	ldr	r2, [pc, #92]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80085e6:	4a16      	ldr	r2, [pc, #88]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80085ee:	4a14      	ldr	r2, [pc, #80]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	f043 0202 	orr.w	r2, r3, #2
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008602:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	4a0e      	ldr	r2, [pc, #56]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008608:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800860c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800860e:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <HAL_RTC_SetAlarm_IT+0x214>)
 8008610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008614:	4a0b      	ldr	r2, [pc, #44]	; (8008644 <HAL_RTC_SetAlarm_IT+0x214>)
 8008616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800861a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800861e:	4b08      	ldr	r3, [pc, #32]	; (8008640 <HAL_RTC_SetAlarm_IT+0x210>)
 8008620:	22ff      	movs	r2, #255	; 0xff
 8008622:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	371c      	adds	r7, #28
 800863a:	46bd      	mov	sp, r7
 800863c:	bd90      	pop	{r4, r7, pc}
 800863e:	bf00      	nop
 8008640:	40002800 	.word	0x40002800
 8008644:	58000800 	.word	0x58000800

08008648 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_RTC_DeactivateAlarm+0x18>
 800865c:	2302      	movs	r3, #2
 800865e:	e048      	b.n	80086f2 <HAL_RTC_DeactivateAlarm+0xaa>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008670:	4b22      	ldr	r3, [pc, #136]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008672:	22ca      	movs	r2, #202	; 0xca
 8008674:	625a      	str	r2, [r3, #36]	; 0x24
 8008676:	4b21      	ldr	r3, [pc, #132]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008678:	2253      	movs	r2, #83	; 0x53
 800867a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008682:	d115      	bne.n	80086b0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008684:	4b1d      	ldr	r3, [pc, #116]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	4a1c      	ldr	r2, [pc, #112]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 800868a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800868e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008690:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008694:	4a19      	ldr	r2, [pc, #100]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800869a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a0:	f023 0201 	bic.w	r2, r3, #1
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80086a8:	4b14      	ldr	r3, [pc, #80]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80086aa:	2201      	movs	r2, #1
 80086ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80086ae:	e014      	b.n	80086da <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80086b0:	4b12      	ldr	r3, [pc, #72]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	4a11      	ldr	r2, [pc, #68]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80086b6:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80086ba:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80086bc:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80086be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c0:	4a0e      	ldr	r2, [pc, #56]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80086c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086c6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086cc:	f023 0202 	bic.w	r2, r3, #2
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80086d4:	4b09      	ldr	r3, [pc, #36]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80086d6:	2202      	movs	r2, #2
 80086d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086da:	4b08      	ldr	r3, [pc, #32]	; (80086fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80086dc:	22ff      	movs	r2, #255	; 0xff
 80086de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr
 80086fc:	40002800 	.word	0x40002800

08008700 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008708:	4b11      	ldr	r3, [pc, #68]	; (8008750 <HAL_RTC_AlarmIRQHandler+0x50>)
 800870a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	4013      	ands	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800871e:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008720:	2201      	movs	r2, #1
 8008722:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fa fc4c 	bl	8002fc2 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008734:	4b06      	ldr	r3, [pc, #24]	; (8008750 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008736:	2202      	movs	r2, #2
 8008738:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f94a 	bl	80089d4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40002800 	.word	0x40002800

08008754 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800875c:	4b0f      	ldr	r3, [pc, #60]	; (800879c <HAL_RTC_WaitForSynchro+0x48>)
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	4a0e      	ldr	r2, [pc, #56]	; (800879c <HAL_RTC_WaitForSynchro+0x48>)
 8008762:	f023 0320 	bic.w	r3, r3, #32
 8008766:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008768:	f7fa f9a2 	bl	8002ab0 <HAL_GetTick>
 800876c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800876e:	e009      	b.n	8008784 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008770:	f7fa f99e 	bl	8002ab0 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800877e:	d901      	bls.n	8008784 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e006      	b.n	8008792 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008784:	4b05      	ldr	r3, [pc, #20]	; (800879c <HAL_RTC_WaitForSynchro+0x48>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0320 	and.w	r3, r3, #32
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0ef      	beq.n	8008770 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	40002800 	.word	0x40002800

080087a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80087ac:	4b15      	ldr	r3, [pc, #84]	; (8008804 <RTC_EnterInitMode+0x64>)
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d120      	bne.n	80087fa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80087b8:	4b12      	ldr	r3, [pc, #72]	; (8008804 <RTC_EnterInitMode+0x64>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a11      	ldr	r2, [pc, #68]	; (8008804 <RTC_EnterInitMode+0x64>)
 80087be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80087c4:	f7fa f974 	bl	8002ab0 <HAL_GetTick>
 80087c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80087ca:	e00d      	b.n	80087e8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80087cc:	f7fa f970 	bl	8002ab0 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087da:	d905      	bls.n	80087e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2203      	movs	r2, #3
 80087e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80087e8:	4b06      	ldr	r3, [pc, #24]	; (8008804 <RTC_EnterInitMode+0x64>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <RTC_EnterInitMode+0x5a>
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d1e8      	bne.n	80087cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	40002800 	.word	0x40002800

08008808 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008814:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <RTC_ExitInitMode+0x78>)
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	4a19      	ldr	r2, [pc, #100]	; (8008880 <RTC_ExitInitMode+0x78>)
 800881a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800881e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008820:	4b17      	ldr	r3, [pc, #92]	; (8008880 <RTC_ExitInitMode+0x78>)
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	f003 0320 	and.w	r3, r3, #32
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10c      	bne.n	8008846 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff ff91 	bl	8008754 <HAL_RTC_WaitForSynchro>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d01e      	beq.n	8008876 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2203      	movs	r2, #3
 800883c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	73fb      	strb	r3, [r7, #15]
 8008844:	e017      	b.n	8008876 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008846:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <RTC_ExitInitMode+0x78>)
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	4a0d      	ldr	r2, [pc, #52]	; (8008880 <RTC_ExitInitMode+0x78>)
 800884c:	f023 0320 	bic.w	r3, r3, #32
 8008850:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff ff7e 	bl	8008754 <HAL_RTC_WaitForSynchro>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d005      	beq.n	800886a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2203      	movs	r2, #3
 8008862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <RTC_ExitInitMode+0x78>)
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	4a04      	ldr	r2, [pc, #16]	; (8008880 <RTC_ExitInitMode+0x78>)
 8008870:	f043 0320 	orr.w	r3, r3, #32
 8008874:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	40002800 	.word	0x40002800

08008884 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008896:	e005      	b.n	80088a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3301      	adds	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	3b0a      	subs	r3, #10
 80088a2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	2b09      	cmp	r3, #9
 80088a8:	d8f6      	bhi.n	8008898 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	b2db      	uxtb	r3, r3
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr
	...

080088c4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <HAL_RTCEx_EnableBypassShadow+0x16>
 80088d6:	2302      	movs	r3, #2
 80088d8:	e01f      	b.n	800891a <HAL_RTCEx_EnableBypassShadow+0x56>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2202      	movs	r2, #2
 80088e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088ea:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80088ec:	22ca      	movs	r2, #202	; 0xca
 80088ee:	625a      	str	r2, [r3, #36]	; 0x24
 80088f0:	4b0c      	ldr	r3, [pc, #48]	; (8008924 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80088f2:	2253      	movs	r2, #83	; 0x53
 80088f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	4a0a      	ldr	r2, [pc, #40]	; (8008924 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80088fc:	f043 0320 	orr.w	r3, r3, #32
 8008900:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008902:	4b08      	ldr	r3, [pc, #32]	; (8008924 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008904:	22ff      	movs	r2, #255	; 0xff
 8008906:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	bc80      	pop	{r7}
 8008922:	4770      	bx	lr
 8008924:	40002800 	.word	0x40002800

08008928 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008936:	2b01      	cmp	r3, #1
 8008938:	d101      	bne.n	800893e <HAL_RTCEx_SetSSRU_IT+0x16>
 800893a:	2302      	movs	r3, #2
 800893c:	e027      	b.n	800898e <HAL_RTCEx_SetSSRU_IT+0x66>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2202      	movs	r2, #2
 800894a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008950:	22ca      	movs	r2, #202	; 0xca
 8008952:	625a      	str	r2, [r3, #36]	; 0x24
 8008954:	4b10      	ldr	r3, [pc, #64]	; (8008998 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008956:	2253      	movs	r2, #83	; 0x53
 8008958:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800895a:	4b0f      	ldr	r3, [pc, #60]	; (8008998 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	4a0e      	ldr	r2, [pc, #56]	; (8008998 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008964:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800896c:	4a0b      	ldr	r2, [pc, #44]	; (800899c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800896e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008972:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008976:	4b08      	ldr	r3, [pc, #32]	; (8008998 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008978:	22ff      	movs	r2, #255	; 0xff
 800897a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	bc80      	pop	{r7}
 8008996:	4770      	bx	lr
 8008998:	40002800 	.word	0x40002800
 800899c:	58000800 	.word	0x58000800

080089a0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80089a8:	4b09      	ldr	r3, [pc, #36]	; (80089d0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80089aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80089b4:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80089b6:	2240      	movs	r2, #64	; 0x40
 80089b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7fa fb0b 	bl	8002fd6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	40002800 	.word	0x40002800

080089d4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bc80      	pop	{r7}
 80089e4:	4770      	bx	lr
	...

080089e8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80089f4:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <HAL_RTCEx_BKUPWrite+0x2c>)
 80089f6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4413      	add	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	601a      	str	r2, [r3, #0]
}
 8008a08:	bf00      	nop
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc80      	pop	{r7}
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	4000b100 	.word	0x4000b100

08008a18 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <HAL_RTCEx_BKUPRead+0x28>)
 8008a24:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	4000b100 	.word	0x4000b100

08008a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e0c6      	b.n	8008be4 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d108      	bne.n	8008a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a66:	d009      	beq.n	8008a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	61da      	str	r2, [r3, #28]
 8008a6e:	e005      	b.n	8008a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d106      	bne.n	8008a96 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7f9 fd07 	bl	80024a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2202      	movs	r2, #2
 8008a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ab6:	d902      	bls.n	8008abe <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	e002      	b.n	8008ac4 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ac2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008acc:	d007      	beq.n	8008ade <HAL_SPI_Init+0x9a>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ad6:	d002      	beq.n	8008ade <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	431a      	orrs	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b20:	ea42 0103 	orr.w	r1, r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b3c:	d11b      	bne.n	8008b76 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10b      	bne.n	8008b5e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b4e:	d903      	bls.n	8008b58 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	631a      	str	r2, [r3, #48]	; 0x30
 8008b56:	e002      	b.n	8008b5e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d107      	bne.n	8008b76 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	0c1b      	lsrs	r3, r3, #16
 8008b7c:	f003 0204 	and.w	r2, r3, #4
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	f003 0310 	and.w	r3, r3, #16
 8008b88:	431a      	orrs	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8e:	f003 0308 	and.w	r3, r3, #8
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b9c:	ea42 0103 	orr.w	r1, r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb6:	d105      	bne.n	8008bc4 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	b292      	uxth	r2, r2
 8008bc2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	69da      	ldr	r2, [r3, #28]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d101      	bne.n	8008c0e <HAL_SPI_Transmit+0x22>
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	e17a      	b.n	8008f04 <HAL_SPI_Transmit+0x318>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c16:	f7f9 ff4b 	bl	8002ab0 <HAL_GetTick>
 8008c1a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d002      	beq.n	8008c32 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c30:	e15f      	b.n	8008ef2 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <HAL_SPI_Transmit+0x52>
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d102      	bne.n	8008c44 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c42:	e156      	b.n	8008ef2 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2203      	movs	r2, #3
 8008c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	88fa      	ldrh	r2, [r7, #6]
 8008c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	88fa      	ldrh	r2, [r7, #6]
 8008c62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c8e:	d10f      	bne.n	8008cb0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cae:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb8:	d10f      	bne.n	8008cda <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cd8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce4:	2b40      	cmp	r3, #64	; 0x40
 8008ce6:	d007      	beq.n	8008cf8 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d00:	d94b      	bls.n	8008d9a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <HAL_SPI_Transmit+0x124>
 8008d0a:	8afb      	ldrh	r3, [r7, #22]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d13e      	bne.n	8008d8e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	881a      	ldrh	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d20:	1c9a      	adds	r2, r3, #2
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d34:	e02b      	b.n	8008d8e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d112      	bne.n	8008d6a <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	881a      	ldrh	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	1c9a      	adds	r2, r3, #2
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d68:	e011      	b.n	8008d8e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d6a:	f7f9 fea1 	bl	8002ab0 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d803      	bhi.n	8008d82 <HAL_SPI_Transmit+0x196>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d80:	d102      	bne.n	8008d88 <HAL_SPI_Transmit+0x19c>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d8c:	e0b1      	b.n	8008ef2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1ce      	bne.n	8008d36 <HAL_SPI_Transmit+0x14a>
 8008d98:	e07c      	b.n	8008e94 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <HAL_SPI_Transmit+0x1bc>
 8008da2:	8afb      	ldrh	r3, [r7, #22]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d170      	bne.n	8008e8a <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d912      	bls.n	8008dd8 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	881a      	ldrh	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	1c9a      	adds	r2, r3, #2
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b02      	subs	r3, #2
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dd6:	e058      	b.n	8008e8a <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	330c      	adds	r3, #12
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	3b01      	subs	r3, #1
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008dfe:	e044      	b.n	8008e8a <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f003 0302 	and.w	r3, r3, #2
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d12b      	bne.n	8008e66 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d912      	bls.n	8008e3e <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	881a      	ldrh	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e28:	1c9a      	adds	r2, r3, #2
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b02      	subs	r3, #2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e3c:	e025      	b.n	8008e8a <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	330c      	adds	r3, #12
 8008e48:	7812      	ldrb	r2, [r2, #0]
 8008e4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e64:	e011      	b.n	8008e8a <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e66:	f7f9 fe23 	bl	8002ab0 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d803      	bhi.n	8008e7e <HAL_SPI_Transmit+0x292>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7c:	d102      	bne.n	8008e84 <HAL_SPI_Transmit+0x298>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e88:	e033      	b.n	8008ef2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1b5      	bne.n	8008e00 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e9c:	d107      	bne.n	8008eae <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eac:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 fe6e 	bl	8009b94 <SPI_EndRxTxTransaction>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ecc:	2300      	movs	r3, #0
 8008ece:	613b      	str	r3, [r7, #16]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	613b      	str	r3, [r7, #16]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	613b      	str	r3, [r7, #16]
 8008ee0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	77fb      	strb	r3, [r7, #31]
 8008eee:	e000      	b.n	8008ef2 <HAL_SPI_Transmit+0x306>
  }

error:
 8008ef0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08c      	sub	sp, #48	; 0x30
 8008f10:	af02      	add	r7, sp, #8
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f32:	d112      	bne.n	8008f5a <HAL_SPI_Receive+0x4e>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10e      	bne.n	8008f5a <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2204      	movs	r2, #4
 8008f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f44:	88fa      	ldrh	r2, [r7, #6]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 f9c4 	bl	80092de <HAL_SPI_TransmitReceive>
 8008f56:	4603      	mov	r3, r0
 8008f58:	e1bd      	b.n	80092d6 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d101      	bne.n	8008f68 <HAL_SPI_Receive+0x5c>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e1b6      	b.n	80092d6 <HAL_SPI_Receive+0x3ca>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f70:	f7f9 fd9e 	bl	8002ab0 <HAL_GetTick>
 8008f74:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d003      	beq.n	8008f8a <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8008f82:	2302      	movs	r3, #2
 8008f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8008f88:	e19b      	b.n	80092c2 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <HAL_SPI_Receive+0x8a>
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d103      	bne.n	8008f9e <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8008f9c:	e191      	b.n	80092c2 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2204      	movs	r2, #4
 8008fa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	88fa      	ldrh	r2, [r7, #6]
 8008fbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe8:	d118      	bne.n	800901c <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009008:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009024:	d908      	bls.n	8009038 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009034:	605a      	str	r2, [r3, #4]
 8009036:	e007      	b.n	8009048 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009046:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009050:	d10f      	bne.n	8009072 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009060:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009070:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907c:	2b40      	cmp	r3, #64	; 0x40
 800907e:	d007      	beq.n	8009090 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800908e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009098:	d869      	bhi.n	800916e <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800909a:	e031      	b.n	8009100 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d117      	bne.n	80090da <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f103 020c 	add.w	r2, r3, #12
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	7812      	ldrb	r2, [r2, #0]
 80090b8:	b2d2      	uxtb	r2, r2
 80090ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80090d8:	e012      	b.n	8009100 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090da:	f7f9 fce9 	bl	8002ab0 <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d803      	bhi.n	80090f2 <HAL_SPI_Receive+0x1e6>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f0:	d102      	bne.n	80090f8 <HAL_SPI_Receive+0x1ec>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80090fe:	e0e0      	b.n	80092c2 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009106:	b29b      	uxth	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1c7      	bne.n	800909c <HAL_SPI_Receive+0x190>
 800910c:	e035      	b.n	800917a <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b01      	cmp	r3, #1
 800911a:	d115      	bne.n	8009148 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	b292      	uxth	r2, r2
 8009128:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	1c9a      	adds	r2, r3, #2
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800913a:	b29b      	uxth	r3, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009146:	e012      	b.n	800916e <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009148:	f7f9 fcb2 	bl	8002ab0 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d803      	bhi.n	8009160 <HAL_SPI_Receive+0x254>
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915e:	d102      	bne.n	8009166 <HAL_SPI_Receive+0x25a>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800916c:	e0a9      	b.n	80092c2 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1c9      	bne.n	800910e <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009182:	d178      	bne.n	8009276 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009192:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2201      	movs	r2, #1
 800919c:	2101      	movs	r1, #1
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 fb82 	bl	80098a8 <SPI_WaitFlagStateUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80091b0:	e087      	b.n	80092c2 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091ba:	d907      	bls.n	80091cc <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68da      	ldr	r2, [r3, #12]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	b292      	uxth	r2, r2
 80091c8:	801a      	strh	r2, [r3, #0]
 80091ca:	e008      	b.n	80091de <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f103 020c 	add.w	r2, r3, #12
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d8:	7812      	ldrb	r2, [r2, #0]
 80091da:	b2d2      	uxtb	r2, r2
 80091dc:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2201      	movs	r2, #1
 80091e6:	2101      	movs	r1, #1
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 fb5d 	bl	80098a8 <SPI_WaitFlagStateUntilTimeout>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d009      	beq.n	8009208 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091f8:	f043 0202 	orr.w	r2, r3, #2
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8009206:	e05c      	b.n	80092c2 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009210:	d105      	bne.n	800921e <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	e02b      	b.n	8009276 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	330c      	adds	r3, #12
 8009224:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800922e:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009238:	d11d      	bne.n	8009276 <HAL_SPI_Receive+0x36a>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923e:	2b02      	cmp	r3, #2
 8009240:	d119      	bne.n	8009276 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2201      	movs	r2, #1
 800924a:	2101      	movs	r1, #1
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 fb2b 	bl	80098a8 <SPI_WaitFlagStateUntilTimeout>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d009      	beq.n	800926c <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925c:	f043 0202 	orr.w	r2, r3, #2
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800926a:	e02a      	b.n	80092c2 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009274:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009276:	6a3a      	ldr	r2, [r7, #32]
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fc32 	bl	8009ae4 <SPI_EndRxTransaction>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2220      	movs	r2, #32
 800928a:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0310 	and.w	r3, r3, #16
 8009296:	2b10      	cmp	r3, #16
 8009298:	d10a      	bne.n	80092b0 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800929e:	f043 0202 	orr.w	r2, r3, #2
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80092ae:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092be:	e000      	b.n	80092c2 <HAL_SPI_Receive+0x3b6>
  }

error :
 80092c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80092d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3728      	adds	r7, #40	; 0x28
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b092      	sub	sp, #72	; 0x48
 80092e2:	af02      	add	r7, sp, #8
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80092f4:	2301      	movs	r3, #1
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <HAL_SPI_TransmitReceive+0x2e>
 8009308:	2302      	movs	r3, #2
 800930a:	e2c8      	b.n	800989e <HAL_SPI_TransmitReceive+0x5c0>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009314:	f7f9 fbcc 	bl	8002ab0 <HAL_GetTick>
 8009318:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 800932a:	887b      	ldrh	r3, [r7, #2]
 800932c:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800932e:	887b      	ldrh	r3, [r7, #2]
 8009330:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009342:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009346:	2b01      	cmp	r3, #1
 8009348:	d00f      	beq.n	800936a <HAL_SPI_TransmitReceive+0x8c>
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009350:	d107      	bne.n	8009362 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d103      	bne.n	8009362 <HAL_SPI_TransmitReceive+0x84>
 800935a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800935e:	2b04      	cmp	r3, #4
 8009360:	d003      	beq.n	800936a <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8009362:	2302      	movs	r3, #2
 8009364:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009368:	e28f      	b.n	800988a <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d005      	beq.n	800937c <HAL_SPI_TransmitReceive+0x9e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <HAL_SPI_TransmitReceive+0x9e>
 8009376:	887b      	ldrh	r3, [r7, #2]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d103      	bne.n	8009384 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009382:	e282      	b.n	800988a <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b04      	cmp	r3, #4
 800938e:	d003      	beq.n	8009398 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2205      	movs	r2, #5
 8009394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	887a      	ldrh	r2, [r7, #2]
 80093a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	887a      	ldrh	r2, [r7, #2]
 80093b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	887a      	ldrh	r2, [r7, #2]
 80093be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	887a      	ldrh	r2, [r7, #2]
 80093c4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093da:	d10f      	bne.n	80093fc <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093fa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009404:	d802      	bhi.n	800940c <HAL_SPI_TransmitReceive+0x12e>
 8009406:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009408:	2b01      	cmp	r3, #1
 800940a:	d908      	bls.n	800941e <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800941a:	605a      	str	r2, [r3, #4]
 800941c:	e007      	b.n	800942e <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800942c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009438:	2b40      	cmp	r3, #64	; 0x40
 800943a:	d007      	beq.n	800944c <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800944a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009454:	f240 80a4 	bls.w	80095a0 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <HAL_SPI_TransmitReceive+0x18a>
 8009460:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009462:	2b01      	cmp	r3, #1
 8009464:	f040 808e 	bne.w	8009584 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	881a      	ldrh	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	1c9a      	adds	r2, r3, #2
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009482:	b29b      	uxth	r3, r3
 8009484:	3b01      	subs	r3, #1
 8009486:	b29a      	uxth	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800948c:	e07a      	b.n	8009584 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0302 	and.w	r3, r3, #2
 8009498:	2b02      	cmp	r3, #2
 800949a:	d13f      	bne.n	800951c <HAL_SPI_TransmitReceive+0x23e>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d03a      	beq.n	800951c <HAL_SPI_TransmitReceive+0x23e>
 80094a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d137      	bne.n	800951c <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	881a      	ldrh	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	1c9a      	adds	r2, r3, #2
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d11e      	bne.n	800951c <HAL_SPI_TransmitReceive+0x23e>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094e6:	d119      	bne.n	800951c <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	f003 0304 	and.w	r3, r3, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10c      	bne.n	800950c <HAL_SPI_TransmitReceive+0x22e>
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	f003 0308 	and.w	r3, r3, #8
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d007      	beq.n	800950c <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800950a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800951a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b01      	cmp	r3, #1
 8009528:	d11c      	bne.n	8009564 <HAL_SPI_TransmitReceive+0x286>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009530:	b29b      	uxth	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d016      	beq.n	8009564 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	b292      	uxth	r2, r2
 8009542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009548:	1c9a      	adds	r2, r3, #2
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009554:	b29b      	uxth	r3, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009560:	2301      	movs	r3, #1
 8009562:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009564:	f7f9 faa4 	bl	8002ab0 <HAL_GetTick>
 8009568:	4602      	mov	r2, r0
 800956a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009570:	429a      	cmp	r2, r3
 8009572:	d807      	bhi.n	8009584 <HAL_SPI_TransmitReceive+0x2a6>
 8009574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957a:	d003      	beq.n	8009584 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009582:	e182      	b.n	800988a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009588:	b29b      	uxth	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	f47f af7f 	bne.w	800948e <HAL_SPI_TransmitReceive+0x1b0>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009596:	b29b      	uxth	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	f47f af78 	bne.w	800948e <HAL_SPI_TransmitReceive+0x1b0>
 800959e:	e103      	b.n	80097a8 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <HAL_SPI_TransmitReceive+0x2d2>
 80095a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	f040 80ef 	bne.w	800978e <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d912      	bls.n	80095e0 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	881a      	ldrh	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ca:	1c9a      	adds	r2, r3, #2
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3b02      	subs	r3, #2
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095de:	e0d6      	b.n	800978e <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	330c      	adds	r3, #12
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	3b01      	subs	r3, #1
 8009600:	b29a      	uxth	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009606:	e0c2      	b.n	800978e <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b02      	cmp	r3, #2
 8009614:	d158      	bne.n	80096c8 <HAL_SPI_TransmitReceive+0x3ea>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800961a:	b29b      	uxth	r3, r3
 800961c:	2b00      	cmp	r3, #0
 800961e:	d053      	beq.n	80096c8 <HAL_SPI_TransmitReceive+0x3ea>
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	2b01      	cmp	r3, #1
 8009624:	d150      	bne.n	80096c8 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800962a:	b29b      	uxth	r3, r3
 800962c:	2b01      	cmp	r3, #1
 800962e:	d912      	bls.n	8009656 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009634:	881a      	ldrh	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	1c9a      	adds	r2, r3, #2
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b02      	subs	r3, #2
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009654:	e012      	b.n	800967c <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	330c      	adds	r3, #12
 8009660:	7812      	ldrb	r2, [r2, #0]
 8009662:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009672:	b29b      	uxth	r3, r3
 8009674:	3b01      	subs	r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009684:	b29b      	uxth	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d11e      	bne.n	80096c8 <HAL_SPI_TransmitReceive+0x3ea>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009692:	d119      	bne.n	80096c8 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10c      	bne.n	80096b8 <HAL_SPI_TransmitReceive+0x3da>
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	f003 0308 	and.w	r3, r3, #8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096b6:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80096c6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d148      	bne.n	8009768 <HAL_SPI_TransmitReceive+0x48a>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096dc:	b29b      	uxth	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d042      	beq.n	8009768 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d923      	bls.n	8009736 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68da      	ldr	r2, [r3, #12]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f8:	b292      	uxth	r2, r2
 80096fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	1c9a      	adds	r2, r3, #2
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800970c:	b29b      	uxth	r3, r3
 800970e:	3b02      	subs	r3, #2
 8009710:	b29a      	uxth	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800971e:	b29b      	uxth	r3, r3
 8009720:	2b01      	cmp	r3, #1
 8009722:	d81f      	bhi.n	8009764 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009732:	605a      	str	r2, [r3, #4]
 8009734:	e016      	b.n	8009764 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f103 020c 	add.w	r2, r3, #12
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	b2d2      	uxtb	r2, r2
 8009746:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009758:	b29b      	uxth	r3, r3
 800975a:	3b01      	subs	r3, #1
 800975c:	b29a      	uxth	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009764:	2301      	movs	r3, #1
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009768:	f7f9 f9a2 	bl	8002ab0 <HAL_GetTick>
 800976c:	4602      	mov	r2, r0
 800976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009774:	429a      	cmp	r2, r3
 8009776:	d803      	bhi.n	8009780 <HAL_SPI_TransmitReceive+0x4a2>
 8009778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800977a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977e:	d102      	bne.n	8009786 <HAL_SPI_TransmitReceive+0x4a8>
 8009780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009782:	2b00      	cmp	r3, #0
 8009784:	d103      	bne.n	800978e <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800978c:	e07d      	b.n	800988a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	f47f af37 	bne.w	8009608 <HAL_SPI_TransmitReceive+0x32a>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f47f af30 	bne.w	8009608 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b0:	d146      	bne.n	8009840 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80097b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b8:	2201      	movs	r2, #1
 80097ba:	2101      	movs	r1, #1
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 f873 	bl	80098a8 <SPI_WaitFlagStateUntilTimeout>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d009      	beq.n	80097dc <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097cc:	f043 0202 	orr.w	r2, r3, #2
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80097da:	e056      	b.n	800988a <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097e4:	d105      	bne.n	80097f2 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	e026      	b.n	8009840 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	330c      	adds	r3, #12
 80097f8:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009802:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009808:	2b02      	cmp	r3, #2
 800980a:	d119      	bne.n	8009840 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800980c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009812:	2201      	movs	r2, #1
 8009814:	2101      	movs	r1, #1
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 f846 	bl	80098a8 <SPI_WaitFlagStateUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d009      	beq.n	8009836 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009826:	f043 0202 	orr.w	r2, r3, #2
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8009834:	e029      	b.n	800988a <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800983e:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f003 0310 	and.w	r3, r3, #16
 800984a:	2b10      	cmp	r3, #16
 800984c:	d10d      	bne.n	800986a <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009852:	f043 0202 	orr.w	r2, r3, #2
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009862:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800986a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800986c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f990 	bl	8009b94 <SPI_EndRxTxTransaction>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d006      	beq.n	8009888 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2220      	movs	r2, #32
 8009884:	661a      	str	r2, [r3, #96]	; 0x60
 8009886:	e000      	b.n	800988a <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009888:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800989a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3740      	adds	r7, #64	; 0x40
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80098b8:	f7f9 f8fa 	bl	8002ab0 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	4413      	add	r3, r2
 80098c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80098c8:	f7f9 f8f2 	bl	8002ab0 <HAL_GetTick>
 80098cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80098ce:	4b39      	ldr	r3, [pc, #228]	; (80099b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	015b      	lsls	r3, r3, #5
 80098d4:	0d1b      	lsrs	r3, r3, #20
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	fb02 f303 	mul.w	r3, r2, r3
 80098dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098de:	e054      	b.n	800998a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d050      	beq.n	800998a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098e8:	f7f9 f8e2 	bl	8002ab0 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	69fa      	ldr	r2, [r7, #28]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d902      	bls.n	80098fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d13d      	bne.n	800997a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800990c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009916:	d111      	bne.n	800993c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009920:	d004      	beq.n	800992c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800992a:	d107      	bne.n	800993c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800993a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009944:	d10f      	bne.n	8009966 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009964:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e017      	b.n	80099aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	3b01      	subs	r3, #1
 8009988:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	4013      	ands	r3, r2
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	429a      	cmp	r2, r3
 8009998:	bf0c      	ite	eq
 800999a:	2301      	moveq	r3, #1
 800999c:	2300      	movne	r3, #0
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	461a      	mov	r2, r3
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d19b      	bne.n	80098e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2000000c 	.word	0x2000000c

080099b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08a      	sub	sp, #40	; 0x28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80099ca:	f7f9 f871 	bl	8002ab0 <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	1a9b      	subs	r3, r3, r2
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	4413      	add	r3, r2
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80099da:	f7f9 f869 	bl	8002ab0 <HAL_GetTick>
 80099de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	330c      	adds	r3, #12
 80099e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099e8:	4b3d      	ldr	r3, [pc, #244]	; (8009ae0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	4613      	mov	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	00da      	lsls	r2, r3, #3
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	0d1b      	lsrs	r3, r3, #20
 80099f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fa:	fb02 f303 	mul.w	r3, r2, r3
 80099fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a00:	e060      	b.n	8009ac4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a08:	d107      	bne.n	8009a1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d050      	beq.n	8009ac4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a22:	f7f9 f845 	bl	8002ab0 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d902      	bls.n	8009a38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d13d      	bne.n	8009ab4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a50:	d111      	bne.n	8009a76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a5a:	d004      	beq.n	8009a66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a64:	d107      	bne.n	8009a76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a7e:	d10f      	bne.n	8009aa0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e010      	b.n	8009ad6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	4013      	ands	r3, r2
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d196      	bne.n	8009a02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3728      	adds	r7, #40	; 0x28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	2000000c 	.word	0x2000000c

08009ae4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009af8:	d111      	bne.n	8009b1e <SPI_EndRxTransaction+0x3a>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b02:	d004      	beq.n	8009b0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b0c:	d107      	bne.n	8009b1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b1c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2200      	movs	r2, #0
 8009b26:	2180      	movs	r1, #128	; 0x80
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f7ff febd 	bl	80098a8 <SPI_WaitFlagStateUntilTimeout>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d007      	beq.n	8009b44 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b38:	f043 0220 	orr.w	r2, r3, #32
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e023      	b.n	8009b8c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b4c:	d11d      	bne.n	8009b8a <SPI_EndRxTransaction+0xa6>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b56:	d004      	beq.n	8009b62 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b60:	d113      	bne.n	8009b8a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7ff ff22 	bl	80099b8 <SPI_WaitFifoStateUntilTimeout>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b7e:	f043 0220 	orr.w	r2, r3, #32
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009b86:	2303      	movs	r3, #3
 8009b88:	e000      	b.n	8009b8c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f7ff ff03 	bl	80099b8 <SPI_WaitFifoStateUntilTimeout>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d007      	beq.n	8009bc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bbc:	f043 0220 	orr.w	r2, r3, #32
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e027      	b.n	8009c18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2180      	movs	r1, #128	; 0x80
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f7ff fe68 	bl	80098a8 <SPI_WaitFlagStateUntilTimeout>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d007      	beq.n	8009bee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009be2:	f043 0220 	orr.w	r2, r3, #32
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e014      	b.n	8009c18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f7ff fedc 	bl	80099b8 <SPI_WaitFifoStateUntilTimeout>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d007      	beq.n	8009c16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c0a:	f043 0220 	orr.w	r2, r3, #32
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e000      	b.n	8009c18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <LL_PWR_SetRadioBusyTrigger>:
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009c28:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c30:	4904      	ldr	r1, [pc, #16]	; (8009c44 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	608b      	str	r3, [r1, #8]
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bc80      	pop	{r7}
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	58000400 	.word	0x58000400

08009c48 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c52:	4a04      	ldr	r2, [pc, #16]	; (8009c64 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009c5c:	bf00      	nop
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bc80      	pop	{r7}
 8009c62:	4770      	bx	lr
 8009c64:	58000400 	.word	0x58000400

08009c68 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c72:	4a04      	ldr	r2, [pc, #16]	; (8009c84 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009c74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009c7c:	bf00      	nop
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr
 8009c84:	58000400 	.word	0x58000400

08009c88 <LL_PWR_ClearFlag_RFBUSY>:
{
 8009c88:	b480      	push	{r7}
 8009c8a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009c8c:	4b03      	ldr	r3, [pc, #12]	; (8009c9c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c92:	619a      	str	r2, [r3, #24]
}
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bc80      	pop	{r7}
 8009c9a:	4770      	bx	lr
 8009c9c:	58000400 	.word	0x58000400

08009ca0 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009ca4:	4b06      	ldr	r3, [pc, #24]	; (8009cc0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	f003 0302 	and.w	r3, r3, #2
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d101      	bne.n	8009cb4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e000      	b.n	8009cb6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bc80      	pop	{r7}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	58000400 	.word	0x58000400

08009cc4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009cc8:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	d101      	bne.n	8009cd8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e000      	b.n	8009cda <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bc80      	pop	{r7}
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	58000400 	.word	0x58000400

08009ce8 <LL_RCC_RF_DisableReset>:
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009d00:	bf00      	nop
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bc80      	pop	{r7}
 8009d06:	4770      	bx	lr

08009d08 <LL_RCC_IsRFUnderReset>:
{
 8009d08:	b480      	push	{r7}
 8009d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d1c:	d101      	bne.n	8009d22 <LL_RCC_IsRFUnderReset+0x1a>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <LL_RCC_IsRFUnderReset+0x1c>
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr

08009d2c <LL_EXTI_EnableIT_32_63>:
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009d34:	4b06      	ldr	r3, [pc, #24]	; (8009d50 <LL_EXTI_EnableIT_32_63+0x24>)
 8009d36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009d3a:	4905      	ldr	r1, [pc, #20]	; (8009d50 <LL_EXTI_EnableIT_32_63+0x24>)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bc80      	pop	{r7}
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	58000800 	.word	0x58000800

08009d54 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d103      	bne.n	8009d6a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	73fb      	strb	r3, [r7, #15]
    return status;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	e04b      	b.n	8009e02 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	799b      	ldrb	r3, [r3, #6]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d105      	bne.n	8009d84 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7f8 fcee 	bl	8002760 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2202      	movs	r2, #2
 8009d88:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8009d8a:	f7ff ffad 	bl	8009ce8 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009d8e:	4b1f      	ldr	r3, [pc, #124]	; (8009e0c <HAL_SUBGHZ_Init+0xb8>)
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	00db      	lsls	r3, r3, #3
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	0cdb      	lsrs	r3, r3, #19
 8009d9c:	2264      	movs	r2, #100	; 0x64
 8009d9e:	fb02 f303 	mul.w	r3, r2, r3
 8009da2:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d105      	bne.n	8009db6 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	609a      	str	r2, [r3, #8]
      break;
 8009db4:	e007      	b.n	8009dc6 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009dbc:	f7ff ffa4 	bl	8009d08 <LL_RCC_IsRFUnderReset>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1ee      	bne.n	8009da4 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8009dc6:	f7ff ff3f 	bl	8009c48 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009dca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009dce:	f7ff ffad 	bl	8009d2c <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009dd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009dd6:	f7ff ff23 	bl	8009c20 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009dda:	f7ff ff55 	bl	8009c88 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 faa5 	bl	800a338 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	719a      	strb	r2, [r3, #6]

  return status;
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	2000000c 	.word	0x2000000c

08009e10 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	607a      	str	r2, [r7, #4]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	817b      	strh	r3, [r7, #10]
 8009e20:	4613      	mov	r3, r2
 8009e22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	799b      	ldrb	r3, [r3, #6]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d14a      	bne.n	8009ec4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	795b      	ldrb	r3, [r3, #5]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e045      	b.n	8009ec6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2202      	movs	r2, #2
 8009e44:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 fb44 	bl	800a4d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009e4c:	f7ff ff0c 	bl	8009c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009e50:	210d      	movs	r1, #13
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 fa90 	bl	800a378 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009e58:	897b      	ldrh	r3, [r7, #10]
 8009e5a:	0a1b      	lsrs	r3, r3, #8
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	4619      	mov	r1, r3
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 fa88 	bl	800a378 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009e68:	897b      	ldrh	r3, [r7, #10]
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 fa82 	bl	800a378 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009e74:	2300      	movs	r3, #0
 8009e76:	82bb      	strh	r3, [r7, #20]
 8009e78:	e00a      	b.n	8009e90 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009e7a:	8abb      	ldrh	r3, [r7, #20]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	4413      	add	r3, r2
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	4619      	mov	r1, r3
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 fa77 	bl	800a378 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009e8a:	8abb      	ldrh	r3, [r7, #20]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	82bb      	strh	r3, [r7, #20]
 8009e90:	8aba      	ldrh	r2, [r7, #20]
 8009e92:	893b      	ldrh	r3, [r7, #8]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d3f0      	bcc.n	8009e7a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009e98:	f7ff fed6 	bl	8009c48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 fb3d 	bl	800a51c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	75fb      	strb	r3, [r7, #23]
 8009eae:	e001      	b.n	8009eb4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	715a      	strb	r2, [r3, #5]

    return status;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
 8009ec2:	e000      	b.n	8009ec6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009ec4:	2302      	movs	r3, #2
  }
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b088      	sub	sp, #32
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	460b      	mov	r3, r1
 8009edc:	817b      	strh	r3, [r7, #10]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	799b      	ldrb	r3, [r3, #6]
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d14a      	bne.n	8009f86 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	795b      	ldrb	r3, [r3, #5]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d101      	bne.n	8009efc <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e045      	b.n	8009f88 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2201      	movs	r2, #1
 8009f00:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 fae6 	bl	800a4d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009f08:	f7ff feae 	bl	8009c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009f0c:	211d      	movs	r1, #29
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f000 fa32 	bl	800a378 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009f14:	897b      	ldrh	r3, [r7, #10]
 8009f16:	0a1b      	lsrs	r3, r3, #8
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 fa2a 	bl	800a378 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009f24:	897b      	ldrh	r3, [r7, #10]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	4619      	mov	r1, r3
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 fa24 	bl	800a378 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009f30:	2100      	movs	r1, #0
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fa20 	bl	800a378 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	82fb      	strh	r3, [r7, #22]
 8009f3c:	e009      	b.n	8009f52 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009f3e:	69b9      	ldr	r1, [r7, #24]
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 fa6f 	bl	800a424 <SUBGHZSPI_Receive>
      pData++;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009f4c:	8afb      	ldrh	r3, [r7, #22]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	82fb      	strh	r3, [r7, #22]
 8009f52:	8afa      	ldrh	r2, [r7, #22]
 8009f54:	893b      	ldrh	r3, [r7, #8]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d3f1      	bcc.n	8009f3e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f5a:	f7ff fe75 	bl	8009c48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 fadc 	bl	800a51c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	77fb      	strb	r3, [r7, #31]
 8009f70:	e001      	b.n	8009f76 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	715a      	strb	r2, [r3, #5]

    return status;
 8009f82:	7ffb      	ldrb	r3, [r7, #31]
 8009f84:	e000      	b.n	8009f88 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8009f86:	2302      	movs	r3, #2
  }
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3720      	adds	r7, #32
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	607a      	str	r2, [r7, #4]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	72fb      	strb	r3, [r7, #11]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	799b      	ldrb	r3, [r3, #6]
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d14a      	bne.n	800a044 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	795b      	ldrb	r3, [r3, #5]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d101      	bne.n	8009fba <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	e045      	b.n	800a046 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 fa87 	bl	800a4d4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	2b84      	cmp	r3, #132	; 0x84
 8009fca:	d002      	beq.n	8009fd2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	2b94      	cmp	r3, #148	; 0x94
 8009fd0:	d103      	bne.n	8009fda <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	711a      	strb	r2, [r3, #4]
 8009fd8:	e002      	b.n	8009fe0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009fe0:	f7ff fe42 	bl	8009c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009fe4:	7afb      	ldrb	r3, [r7, #11]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f9c5 	bl	800a378 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009fee:	2300      	movs	r3, #0
 8009ff0:	82bb      	strh	r3, [r7, #20]
 8009ff2:	e00a      	b.n	800a00a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009ff4:	8abb      	ldrh	r3, [r7, #20]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f000 f9ba 	bl	800a378 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a004:	8abb      	ldrh	r3, [r7, #20]
 800a006:	3301      	adds	r3, #1
 800a008:	82bb      	strh	r3, [r7, #20]
 800a00a:	8aba      	ldrh	r2, [r7, #20]
 800a00c:	893b      	ldrh	r3, [r7, #8]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d3f0      	bcc.n	8009ff4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a012:	f7ff fe19 	bl	8009c48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a016:	7afb      	ldrb	r3, [r7, #11]
 800a018:	2b84      	cmp	r3, #132	; 0x84
 800a01a:	d002      	beq.n	800a022 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fa7d 	bl	800a51c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	75fb      	strb	r3, [r7, #23]
 800a02e:	e001      	b.n	800a034 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2201      	movs	r2, #1
 800a038:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	715a      	strb	r2, [r3, #5]

    return status;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	e000      	b.n	800a046 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a044:	2302      	movs	r3, #2
  }
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b088      	sub	sp, #32
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	607a      	str	r2, [r7, #4]
 800a058:	461a      	mov	r2, r3
 800a05a:	460b      	mov	r3, r1
 800a05c:	72fb      	strb	r3, [r7, #11]
 800a05e:	4613      	mov	r3, r2
 800a060:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	799b      	ldrb	r3, [r3, #6]
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d13d      	bne.n	800a0ec <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	795b      	ldrb	r3, [r3, #5]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d101      	bne.n	800a07c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a078:	2302      	movs	r3, #2
 800a07a:	e038      	b.n	800a0ee <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fa26 	bl	800a4d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a088:	f7ff fdee 	bl	8009c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a08c:	7afb      	ldrb	r3, [r7, #11]
 800a08e:	4619      	mov	r1, r3
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f971 	bl	800a378 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a096:	2100      	movs	r1, #0
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f96d 	bl	800a378 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a09e:	2300      	movs	r3, #0
 800a0a0:	82fb      	strh	r3, [r7, #22]
 800a0a2:	e009      	b.n	800a0b8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a0a4:	69b9      	ldr	r1, [r7, #24]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 f9bc 	bl	800a424 <SUBGHZSPI_Receive>
      pData++;
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a0b2:	8afb      	ldrh	r3, [r7, #22]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	82fb      	strh	r3, [r7, #22]
 800a0b8:	8afa      	ldrh	r2, [r7, #22]
 800a0ba:	893b      	ldrh	r3, [r7, #8]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d3f1      	bcc.n	800a0a4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a0c0:	f7ff fdc2 	bl	8009c48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 fa29 	bl	800a51c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	77fb      	strb	r3, [r7, #31]
 800a0d6:	e001      	b.n	800a0dc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	715a      	strb	r2, [r3, #5]

    return status;
 800a0e8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ea:	e000      	b.n	800a0ee <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a0ec:	2302      	movs	r3, #2
  }
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b086      	sub	sp, #24
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	461a      	mov	r2, r3
 800a102:	460b      	mov	r3, r1
 800a104:	72fb      	strb	r3, [r7, #11]
 800a106:	4613      	mov	r3, r2
 800a108:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	799b      	ldrb	r3, [r3, #6]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b01      	cmp	r3, #1
 800a112:	d13e      	bne.n	800a192 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	795b      	ldrb	r3, [r3, #5]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a11c:	2302      	movs	r3, #2
 800a11e:	e039      	b.n	800a194 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2201      	movs	r2, #1
 800a124:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 f9d4 	bl	800a4d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a12c:	f7ff fd9c 	bl	8009c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a130:	210e      	movs	r1, #14
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 f920 	bl	800a378 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	4619      	mov	r1, r3
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f91b 	bl	800a378 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a142:	2300      	movs	r3, #0
 800a144:	82bb      	strh	r3, [r7, #20]
 800a146:	e00a      	b.n	800a15e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a148:	8abb      	ldrh	r3, [r7, #20]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	4413      	add	r3, r2
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	4619      	mov	r1, r3
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 f910 	bl	800a378 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a158:	8abb      	ldrh	r3, [r7, #20]
 800a15a:	3301      	adds	r3, #1
 800a15c:	82bb      	strh	r3, [r7, #20]
 800a15e:	8aba      	ldrh	r2, [r7, #20]
 800a160:	893b      	ldrh	r3, [r7, #8]
 800a162:	429a      	cmp	r2, r3
 800a164:	d3f0      	bcc.n	800a148 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a166:	f7ff fd6f 	bl	8009c48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 f9d6 	bl	800a51c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]
 800a17c:	e001      	b.n	800a182 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	715a      	strb	r2, [r3, #5]

    return status;
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	e000      	b.n	800a194 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a192:	2302      	movs	r3, #2
  }
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	607a      	str	r2, [r7, #4]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	72fb      	strb	r3, [r7, #11]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	799b      	ldrb	r3, [r3, #6]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d141      	bne.n	800a242 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	795b      	ldrb	r3, [r3, #5]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d101      	bne.n	800a1ca <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	e03c      	b.n	800a244 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 f97f 	bl	800a4d4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a1d6:	f7ff fd47 	bl	8009c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a1da:	211e      	movs	r1, #30
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 f8cb 	bl	800a378 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 f8c6 	bl	800a378 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 f8c2 	bl	800a378 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	82fb      	strh	r3, [r7, #22]
 800a1f8:	e009      	b.n	800a20e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a1fa:	69b9      	ldr	r1, [r7, #24]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f911 	bl	800a424 <SUBGHZSPI_Receive>
      pData++;
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	3301      	adds	r3, #1
 800a206:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a208:	8afb      	ldrh	r3, [r7, #22]
 800a20a:	3301      	adds	r3, #1
 800a20c:	82fb      	strh	r3, [r7, #22]
 800a20e:	8afa      	ldrh	r2, [r7, #22]
 800a210:	893b      	ldrh	r3, [r7, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	d3f1      	bcc.n	800a1fa <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a216:	f7ff fd17 	bl	8009c48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f97e 	bl	800a51c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	77fb      	strb	r3, [r7, #31]
 800a22c:	e001      	b.n	800a232 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2201      	movs	r2, #1
 800a236:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	715a      	strb	r2, [r3, #5]

    return status;
 800a23e:	7ffb      	ldrb	r3, [r7, #31]
 800a240:	e000      	b.n	800a244 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a242:	2302      	movs	r3, #2
  }
}
 800a244:	4618      	mov	r0, r3
 800a246:	3720      	adds	r7, #32
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a254:	2300      	movs	r3, #0
 800a256:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a258:	f107 020c 	add.w	r2, r7, #12
 800a25c:	2302      	movs	r3, #2
 800a25e:	2112      	movs	r1, #18
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff fef4 	bl	800a04e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a266:	7b3b      	ldrb	r3, [r7, #12]
 800a268:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a26a:	89fb      	ldrh	r3, [r7, #14]
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	b21a      	sxth	r2, r3
 800a270:	7b7b      	ldrb	r3, [r7, #13]
 800a272:	b21b      	sxth	r3, r3
 800a274:	4313      	orrs	r3, r2
 800a276:	b21b      	sxth	r3, r3
 800a278:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a27a:	89fb      	ldrh	r3, [r7, #14]
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f012 fb7b 	bl	801c980 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a28a:	89fb      	ldrh	r3, [r7, #14]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f012 fb81 	bl	801c99c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a29a:	89fb      	ldrh	r3, [r7, #14]
 800a29c:	f003 0304 	and.w	r3, r3, #4
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f012 fbd1 	bl	801ca4c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a2aa:	89fb      	ldrh	r3, [r7, #14]
 800a2ac:	f003 0308 	and.w	r3, r3, #8
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f012 fbd7 	bl	801ca68 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a2ba:	89fb      	ldrh	r3, [r7, #14]
 800a2bc:	f003 0310 	and.w	r3, r3, #16
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f012 fbdd 	bl	801ca84 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a2ca:	89fb      	ldrh	r3, [r7, #14]
 800a2cc:	f003 0320 	and.w	r3, r3, #32
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f012 fbab 	bl	801ca30 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a2da:	89fb      	ldrh	r3, [r7, #14]
 800a2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f012 fb67 	bl	801c9b8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a2ea:	89fb      	ldrh	r3, [r7, #14]
 800a2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00d      	beq.n	800a310 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a2f4:	89fb      	ldrh	r3, [r7, #14]
 800a2f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a2fe:	2101      	movs	r1, #1
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f012 fb67 	bl	801c9d4 <HAL_SUBGHZ_CADStatusCallback>
 800a306:	e003      	b.n	800a310 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a308:	2100      	movs	r1, #0
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f012 fb62 	bl	801c9d4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a310:	89fb      	ldrh	r3, [r7, #14]
 800a312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f012 fb78 	bl	801ca10 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800a320:	f107 020c 	add.w	r2, r7, #12
 800a324:	2302      	movs	r3, #2
 800a326:	2102      	movs	r1, #2
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff fe31 	bl	8009f90 <HAL_SUBGHZ_ExecSetCmd>
}
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a340:	4b0c      	ldr	r3, [pc, #48]	; (800a374 <SUBGHZSPI_Init+0x3c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a0b      	ldr	r2, [pc, #44]	; (800a374 <SUBGHZSPI_Init+0x3c>)
 800a346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a34a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a34c:	4a09      	ldr	r2, [pc, #36]	; (800a374 <SUBGHZSPI_Init+0x3c>)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a354:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a356:	4b07      	ldr	r3, [pc, #28]	; (800a374 <SUBGHZSPI_Init+0x3c>)
 800a358:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a35c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a35e:	4b05      	ldr	r3, [pc, #20]	; (800a374 <SUBGHZSPI_Init+0x3c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a04      	ldr	r2, [pc, #16]	; (800a374 <SUBGHZSPI_Init+0x3c>)
 800a364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a368:	6013      	str	r3, [r2, #0]
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	bc80      	pop	{r7}
 800a372:	4770      	bx	lr
 800a374:	58010000 	.word	0x58010000

0800a378 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a378:	b480      	push	{r7}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a388:	4b23      	ldr	r3, [pc, #140]	; (800a418 <SUBGHZSPI_Transmit+0xa0>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	4613      	mov	r3, r2
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	1a9b      	subs	r3, r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	0cdb      	lsrs	r3, r3, #19
 800a396:	2264      	movs	r2, #100	; 0x64
 800a398:	fb02 f303 	mul.w	r3, r2, r3
 800a39c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d105      	bne.n	800a3b0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	609a      	str	r2, [r3, #8]
      break;
 800a3ae:	e008      	b.n	800a3c2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a3b6:	4b19      	ldr	r3, [pc, #100]	; (800a41c <SUBGHZSPI_Transmit+0xa4>)
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d1ed      	bne.n	800a39e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a3c2:	4b17      	ldr	r3, [pc, #92]	; (800a420 <SUBGHZSPI_Transmit+0xa8>)
 800a3c4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	78fa      	ldrb	r2, [r7, #3]
 800a3ca:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a3cc:	4b12      	ldr	r3, [pc, #72]	; (800a418 <SUBGHZSPI_Transmit+0xa0>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	0cdb      	lsrs	r3, r3, #19
 800a3da:	2264      	movs	r2, #100	; 0x64
 800a3dc:	fb02 f303 	mul.w	r3, r2, r3
 800a3e0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d105      	bne.n	800a3f4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	609a      	str	r2, [r3, #8]
      break;
 800a3f2:	e008      	b.n	800a406 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a3fa:	4b08      	ldr	r3, [pc, #32]	; (800a41c <SUBGHZSPI_Transmit+0xa4>)
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b01      	cmp	r3, #1
 800a404:	d1ed      	bne.n	800a3e2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a406:	4b05      	ldr	r3, [pc, #20]	; (800a41c <SUBGHZSPI_Transmit+0xa4>)
 800a408:	68db      	ldr	r3, [r3, #12]

  return status;
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	371c      	adds	r7, #28
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	2000000c 	.word	0x2000000c
 800a41c:	58010000 	.word	0x58010000
 800a420:	5801000c 	.word	0x5801000c

0800a424 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a432:	4b25      	ldr	r3, [pc, #148]	; (800a4c8 <SUBGHZSPI_Receive+0xa4>)
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	4613      	mov	r3, r2
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	1a9b      	subs	r3, r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	0cdb      	lsrs	r3, r3, #19
 800a440:	2264      	movs	r2, #100	; 0x64
 800a442:	fb02 f303 	mul.w	r3, r2, r3
 800a446:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d105      	bne.n	800a45a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2201      	movs	r2, #1
 800a456:	609a      	str	r2, [r3, #8]
      break;
 800a458:	e008      	b.n	800a46c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a460:	4b1a      	ldr	r3, [pc, #104]	; (800a4cc <SUBGHZSPI_Receive+0xa8>)
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f003 0302 	and.w	r3, r3, #2
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d1ed      	bne.n	800a448 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a46c:	4b18      	ldr	r3, [pc, #96]	; (800a4d0 <SUBGHZSPI_Receive+0xac>)
 800a46e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	22ff      	movs	r2, #255	; 0xff
 800a474:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a476:	4b14      	ldr	r3, [pc, #80]	; (800a4c8 <SUBGHZSPI_Receive+0xa4>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	4613      	mov	r3, r2
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	1a9b      	subs	r3, r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	0cdb      	lsrs	r3, r3, #19
 800a484:	2264      	movs	r2, #100	; 0x64
 800a486:	fb02 f303 	mul.w	r3, r2, r3
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d105      	bne.n	800a49e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	609a      	str	r2, [r3, #8]
      break;
 800a49c:	e008      	b.n	800a4b0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a4a4:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <SUBGHZSPI_Receive+0xa8>)
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d1ed      	bne.n	800a48c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a4b0:	4b06      	ldr	r3, [pc, #24]	; (800a4cc <SUBGHZSPI_Receive+0xa8>)
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	701a      	strb	r2, [r3, #0]

  return status;
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	371c      	adds	r7, #28
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bc80      	pop	{r7}
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	2000000c 	.word	0x2000000c
 800a4cc:	58010000 	.word	0x58010000
 800a4d0:	5801000c 	.word	0x5801000c

0800a4d4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	791b      	ldrb	r3, [r3, #4]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d111      	bne.n	800a508 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a4e4:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <SUBGHZ_CheckDeviceReady+0x44>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	4413      	add	r3, r2
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	0c1b      	lsrs	r3, r3, #16
 800a4f2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a4f4:	f7ff fbb8 	bl	8009c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1f9      	bne.n	800a4f8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a504:	f7ff fba0 	bl	8009c48 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f807 	bl	800a51c <SUBGHZ_WaitOnBusy>
 800a50e:	4603      	mov	r3, r0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	2000000c 	.word	0x2000000c

0800a51c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a528:	4b12      	ldr	r3, [pc, #72]	; (800a574 <SUBGHZ_WaitOnBusy+0x58>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	4613      	mov	r3, r2
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	4413      	add	r3, r2
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	0d1b      	lsrs	r3, r3, #20
 800a536:	2264      	movs	r2, #100	; 0x64
 800a538:	fb02 f303 	mul.w	r3, r2, r3
 800a53c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a53e:	f7ff fbc1 	bl	8009cc4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a542:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d105      	bne.n	800a556 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2202      	movs	r2, #2
 800a552:	609a      	str	r2, [r3, #8]
      break;
 800a554:	e009      	b.n	800a56a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3b01      	subs	r3, #1
 800a55a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a55c:	f7ff fba0 	bl	8009ca0 <LL_PWR_IsActiveFlag_RFBUSYS>
 800a560:	4602      	mov	r2, r0
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	4013      	ands	r3, r2
 800a566:	2b01      	cmp	r3, #1
 800a568:	d0e9      	beq.n	800a53e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	2000000c 	.word	0x2000000c

0800a578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	e049      	b.n	800a61e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d106      	bne.n	800a5a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7f8 fb82 	bl	8002ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f000 f9c6 	bl	800a948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d001      	beq.n	800a640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e036      	b.n	800a6ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f042 0201 	orr.w	r2, r2, #1
 800a656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a16      	ldr	r2, [pc, #88]	; (800a6b8 <HAL_TIM_Base_Start_IT+0x90>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d004      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x44>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a66a:	d115      	bne.n	800a698 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <HAL_TIM_Base_Start_IT+0x94>)
 800a674:	4013      	ands	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b06      	cmp	r3, #6
 800a67c:	d015      	beq.n	800a6aa <HAL_TIM_Base_Start_IT+0x82>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a684:	d011      	beq.n	800a6aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f042 0201 	orr.w	r2, r2, #1
 800a694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a696:	e008      	b.n	800a6aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 0201 	orr.w	r2, r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	e000      	b.n	800a6ac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3714      	adds	r7, #20
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bc80      	pop	{r7}
 800a6b6:	4770      	bx	lr
 800a6b8:	40012c00 	.word	0x40012c00
 800a6bc:	00010007 	.word	0x00010007

0800a6c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d122      	bne.n	800a71c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	f003 0302 	and.w	r3, r3, #2
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d11b      	bne.n	800a71c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f06f 0202 	mvn.w	r2, #2
 800a6ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	f003 0303 	and.w	r3, r3, #3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f904 	bl	800a910 <HAL_TIM_IC_CaptureCallback>
 800a708:	e005      	b.n	800a716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f8f7 	bl	800a8fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f906 	bl	800a922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	f003 0304 	and.w	r3, r3, #4
 800a726:	2b04      	cmp	r3, #4
 800a728:	d122      	bne.n	800a770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b04      	cmp	r3, #4
 800a736:	d11b      	bne.n	800a770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f06f 0204 	mvn.w	r2, #4
 800a740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2202      	movs	r2, #2
 800a746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a752:	2b00      	cmp	r3, #0
 800a754:	d003      	beq.n	800a75e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f8da 	bl	800a910 <HAL_TIM_IC_CaptureCallback>
 800a75c:	e005      	b.n	800a76a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f8cd 	bl	800a8fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f8dc 	bl	800a922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f003 0308 	and.w	r3, r3, #8
 800a77a:	2b08      	cmp	r3, #8
 800a77c:	d122      	bne.n	800a7c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	f003 0308 	and.w	r3, r3, #8
 800a788:	2b08      	cmp	r3, #8
 800a78a:	d11b      	bne.n	800a7c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f06f 0208 	mvn.w	r2, #8
 800a794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2204      	movs	r2, #4
 800a79a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	f003 0303 	and.w	r3, r3, #3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d003      	beq.n	800a7b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f8b0 	bl	800a910 <HAL_TIM_IC_CaptureCallback>
 800a7b0:	e005      	b.n	800a7be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f8a3 	bl	800a8fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f8b2 	bl	800a922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	f003 0310 	and.w	r3, r3, #16
 800a7ce:	2b10      	cmp	r3, #16
 800a7d0:	d122      	bne.n	800a818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f003 0310 	and.w	r3, r3, #16
 800a7dc:	2b10      	cmp	r3, #16
 800a7de:	d11b      	bne.n	800a818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f06f 0210 	mvn.w	r2, #16
 800a7e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2208      	movs	r2, #8
 800a7ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f886 	bl	800a910 <HAL_TIM_IC_CaptureCallback>
 800a804:	e005      	b.n	800a812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f879 	bl	800a8fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f888 	bl	800a922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b01      	cmp	r3, #1
 800a824:	d10e      	bne.n	800a844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b01      	cmp	r3, #1
 800a832:	d107      	bne.n	800a844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f06f 0201 	mvn.w	r2, #1
 800a83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7f7 fc4c 	bl	80020dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a84e:	2b80      	cmp	r3, #128	; 0x80
 800a850:	d10e      	bne.n	800a870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85c:	2b80      	cmp	r3, #128	; 0x80
 800a85e:	d107      	bne.n	800a870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f8d7 	bl	800aa1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87e:	d10e      	bne.n	800a89e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a88a:	2b80      	cmp	r3, #128	; 0x80
 800a88c:	d107      	bne.n	800a89e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f8c9 	bl	800aa30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a8:	2b40      	cmp	r3, #64	; 0x40
 800a8aa:	d10e      	bne.n	800a8ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b6:	2b40      	cmp	r3, #64	; 0x40
 800a8b8:	d107      	bne.n	800a8ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f835 	bl	800a934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	f003 0320 	and.w	r3, r3, #32
 800a8d4:	2b20      	cmp	r3, #32
 800a8d6:	d10e      	bne.n	800a8f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	f003 0320 	and.w	r3, r3, #32
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d107      	bne.n	800a8f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f06f 0220 	mvn.w	r2, #32
 800a8ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f88b 	bl	800aa0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8f6:	bf00      	nop
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8fe:	b480      	push	{r7}
 800a900:	b083      	sub	sp, #12
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bc80      	pop	{r7}
 800a90e:	4770      	bx	lr

0800a910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bc80      	pop	{r7}
 800a920:	4770      	bx	lr

0800a922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a922:	b480      	push	{r7}
 800a924:	b083      	sub	sp, #12
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	bc80      	pop	{r7}
 800a932:	4770      	bx	lr

0800a934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	bc80      	pop	{r7}
 800a944:	4770      	bx	lr
	...

0800a948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a29      	ldr	r2, [pc, #164]	; (800aa00 <TIM_Base_SetConfig+0xb8>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d003      	beq.n	800a968 <TIM_Base_SetConfig+0x20>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a966:	d108      	bne.n	800a97a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a96e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	4313      	orrs	r3, r2
 800a978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a20      	ldr	r2, [pc, #128]	; (800aa00 <TIM_Base_SetConfig+0xb8>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00b      	beq.n	800a99a <TIM_Base_SetConfig+0x52>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a988:	d007      	beq.n	800a99a <TIM_Base_SetConfig+0x52>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a1d      	ldr	r2, [pc, #116]	; (800aa04 <TIM_Base_SetConfig+0xbc>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d003      	beq.n	800a99a <TIM_Base_SetConfig+0x52>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a1c      	ldr	r2, [pc, #112]	; (800aa08 <TIM_Base_SetConfig+0xc0>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d108      	bne.n	800a9ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	689a      	ldr	r2, [r3, #8]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a0b      	ldr	r2, [pc, #44]	; (800aa00 <TIM_Base_SetConfig+0xb8>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d007      	beq.n	800a9e8 <TIM_Base_SetConfig+0xa0>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a0a      	ldr	r2, [pc, #40]	; (800aa04 <TIM_Base_SetConfig+0xbc>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d003      	beq.n	800a9e8 <TIM_Base_SetConfig+0xa0>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a09      	ldr	r2, [pc, #36]	; (800aa08 <TIM_Base_SetConfig+0xc0>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d103      	bne.n	800a9f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	691a      	ldr	r2, [r3, #16]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	615a      	str	r2, [r3, #20]
}
 800a9f6:	bf00      	nop
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bc80      	pop	{r7}
 800a9fe:	4770      	bx	lr
 800aa00:	40012c00 	.word	0x40012c00
 800aa04:	40014400 	.word	0x40014400
 800aa08:	40014800 	.word	0x40014800

0800aa0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bc80      	pop	{r7}
 800aa1c:	4770      	bx	lr

0800aa1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bc80      	pop	{r7}
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bc80      	pop	{r7}
 800aa40:	4770      	bx	lr

0800aa42 <LL_RCC_GetUSARTClockSource>:
{
 800aa42:	b480      	push	{r7}
 800aa44:	b083      	sub	sp, #12
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800aa4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	401a      	ands	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	041b      	lsls	r3, r3, #16
 800aa5a:	4313      	orrs	r3, r2
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bc80      	pop	{r7}
 800aa64:	4770      	bx	lr

0800aa66 <LL_RCC_GetLPUARTClockSource>:
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800aa6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4013      	ands	r3, r2
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bc80      	pop	{r7}
 800aa82:	4770      	bx	lr

0800aa84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e042      	b.n	800ab1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d106      	bne.n	800aaae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7f8 fc8b 	bl	80033c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2224      	movs	r2, #36	; 0x24
 800aab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f022 0201 	bic.w	r2, r2, #1
 800aac4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fc4a 	bl	800b360 <UART_SetConfig>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d101      	bne.n	800aad6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e022      	b.n	800ab1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d002      	beq.n	800aae4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 feb2 	bl	800b848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aaf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689a      	ldr	r2, [r3, #8]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f042 0201 	orr.w	r2, r2, #1
 800ab12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 ff38 	bl	800b98a <UART_CheckIdleState>
 800ab1a:	4603      	mov	r3, r0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08a      	sub	sp, #40	; 0x28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d142      	bne.n	800abc2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <HAL_UART_Receive_IT+0x24>
 800ab42:	88fb      	ldrh	r3, [r7, #6]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d101      	bne.n	800ab4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e03b      	b.n	800abc4 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d101      	bne.n	800ab5a <HAL_UART_Receive_IT+0x36>
 800ab56:	2302      	movs	r3, #2
 800ab58:	e034      	b.n	800abc4 <HAL_UART_Receive_IT+0xa0>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a17      	ldr	r2, [pc, #92]	; (800abcc <HAL_UART_Receive_IT+0xa8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d01f      	beq.n	800abb2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d018      	beq.n	800abb2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	e853 3f00 	ldrex	r3, [r3]
 800ab8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab94:	627b      	str	r3, [r7, #36]	; 0x24
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9e:	623b      	str	r3, [r7, #32]
 800aba0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba2:	69f9      	ldr	r1, [r7, #28]
 800aba4:	6a3a      	ldr	r2, [r7, #32]
 800aba6:	e841 2300 	strex	r3, r2, [r1]
 800abaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1e6      	bne.n	800ab80 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800abb2:	88fb      	ldrh	r3, [r7, #6]
 800abb4:	461a      	mov	r2, r3
 800abb6:	68b9      	ldr	r1, [r7, #8]
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 fff9 	bl	800bbb0 <UART_Start_Receive_IT>
 800abbe:	4603      	mov	r3, r0
 800abc0:	e000      	b.n	800abc4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800abc2:	2302      	movs	r3, #2
  }
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3728      	adds	r7, #40	; 0x28
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	40008000 	.word	0x40008000

0800abd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08a      	sub	sp, #40	; 0x28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	4613      	mov	r3, r2
 800abdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	d17a      	bne.n	800acde <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <HAL_UART_Transmit_DMA+0x24>
 800abee:	88fb      	ldrh	r3, [r7, #6]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e073      	b.n	800ace0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d101      	bne.n	800ac06 <HAL_UART_Transmit_DMA+0x36>
 800ac02:	2302      	movs	r3, #2
 800ac04:	e06c      	b.n	800ace0 <HAL_UART_Transmit_DMA+0x110>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	88fa      	ldrh	r2, [r7, #6]
 800ac18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	88fa      	ldrh	r2, [r7, #6]
 800ac20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2221      	movs	r2, #33	; 0x21
 800ac30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d02c      	beq.n	800ac96 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac40:	4a29      	ldr	r2, [pc, #164]	; (800ace8 <HAL_UART_Transmit_DMA+0x118>)
 800ac42:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac48:	4a28      	ldr	r2, [pc, #160]	; (800acec <HAL_UART_Transmit_DMA+0x11c>)
 800ac4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac50:	4a27      	ldr	r2, [pc, #156]	; (800acf0 <HAL_UART_Transmit_DMA+0x120>)
 800ac52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac58:	2200      	movs	r2, #0
 800ac5a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac64:	4619      	mov	r1, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3328      	adds	r3, #40	; 0x28
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	88fb      	ldrh	r3, [r7, #6]
 800ac70:	f7fa fa3c 	bl	80050ec <HAL_DMA_Start_IT>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00d      	beq.n	800ac96 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2210      	movs	r2, #16
 800ac7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e024      	b.n	800ace0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2240      	movs	r2, #64	; 0x40
 800ac9c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	613b      	str	r3, [r7, #16]
   return(result);
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acbc:	627b      	str	r3, [r7, #36]	; 0x24
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3308      	adds	r3, #8
 800acc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc6:	623a      	str	r2, [r7, #32]
 800acc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	69f9      	ldr	r1, [r7, #28]
 800accc:	6a3a      	ldr	r2, [r7, #32]
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	61bb      	str	r3, [r7, #24]
   return(result);
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e5      	bne.n	800aca6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	e000      	b.n	800ace0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800acde:	2302      	movs	r3, #2
  }
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3728      	adds	r7, #40	; 0x28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	0800bf4b 	.word	0x0800bf4b
 800acec:	0800bfe5 	.word	0x0800bfe5
 800acf0:	0800c001 	.word	0x0800c001

0800acf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b0ba      	sub	sp, #232	; 0xe8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad1e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad22:	4013      	ands	r3, r2
 800ad24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d11b      	bne.n	800ad68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad34:	f003 0320 	and.w	r3, r3, #32
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d015      	beq.n	800ad68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad40:	f003 0320 	and.w	r3, r3, #32
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d105      	bne.n	800ad54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d009      	beq.n	800ad68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 82d6 	beq.w	800b30a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	4798      	blx	r3
      }
      return;
 800ad66:	e2d0      	b.n	800b30a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 811f 	beq.w	800afb0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ad76:	4b8b      	ldr	r3, [pc, #556]	; (800afa4 <HAL_UART_IRQHandler+0x2b0>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d106      	bne.n	800ad8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ad82:	4b89      	ldr	r3, [pc, #548]	; (800afa8 <HAL_UART_IRQHandler+0x2b4>)
 800ad84:	4013      	ands	r3, r2
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 8112 	beq.w	800afb0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d011      	beq.n	800adbc <HAL_UART_IRQHandler+0xc8>
 800ad98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00b      	beq.n	800adbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2201      	movs	r2, #1
 800adaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adb2:	f043 0201 	orr.w	r2, r3, #1
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc0:	f003 0302 	and.w	r3, r3, #2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d011      	beq.n	800adec <HAL_UART_IRQHandler+0xf8>
 800adc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00b      	beq.n	800adec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2202      	movs	r2, #2
 800adda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ade2:	f043 0204 	orr.w	r2, r3, #4
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d011      	beq.n	800ae1c <HAL_UART_IRQHandler+0x128>
 800adf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00b      	beq.n	800ae1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2204      	movs	r2, #4
 800ae0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae12:	f043 0202 	orr.w	r2, r3, #2
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae20:	f003 0308 	and.w	r3, r3, #8
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d017      	beq.n	800ae58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae2c:	f003 0320 	and.w	r3, r3, #32
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d105      	bne.n	800ae40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ae38:	4b5a      	ldr	r3, [pc, #360]	; (800afa4 <HAL_UART_IRQHandler+0x2b0>)
 800ae3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00b      	beq.n	800ae58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2208      	movs	r2, #8
 800ae46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae4e:	f043 0208 	orr.w	r2, r3, #8
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d012      	beq.n	800ae8a <HAL_UART_IRQHandler+0x196>
 800ae64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00c      	beq.n	800ae8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae80:	f043 0220 	orr.w	r2, r3, #32
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 823c 	beq.w	800b30e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae9a:	f003 0320 	and.w	r3, r3, #32
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d013      	beq.n	800aeca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea6:	f003 0320 	and.w	r3, r3, #32
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d105      	bne.n	800aeba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aeae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aede:	2b40      	cmp	r3, #64	; 0x40
 800aee0:	d005      	beq.n	800aeee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aee6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d04f      	beq.n	800af8e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 ffc6 	bl	800be80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefe:	2b40      	cmp	r3, #64	; 0x40
 800af00:	d141      	bne.n	800af86 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3308      	adds	r3, #8
 800af08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af10:	e853 3f00 	ldrex	r3, [r3]
 800af14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3308      	adds	r3, #8
 800af2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af3e:	e841 2300 	strex	r3, r2, [r1]
 800af42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1d9      	bne.n	800af02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d013      	beq.n	800af7e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af5a:	4a14      	ldr	r2, [pc, #80]	; (800afac <HAL_UART_IRQHandler+0x2b8>)
 800af5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af62:	4618      	mov	r0, r3
 800af64:	f7fa f99e 	bl	80052a4 <HAL_DMA_Abort_IT>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d017      	beq.n	800af9e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800af78:	4610      	mov	r0, r2
 800af7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af7c:	e00f      	b.n	800af9e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f9d9 	bl	800b336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af84:	e00b      	b.n	800af9e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f9d5 	bl	800b336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8c:	e007      	b.n	800af9e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f9d1 	bl	800b336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800af9c:	e1b7      	b.n	800b30e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9e:	bf00      	nop
    return;
 800afa0:	e1b5      	b.n	800b30e <HAL_UART_IRQHandler+0x61a>
 800afa2:	bf00      	nop
 800afa4:	10000001 	.word	0x10000001
 800afa8:	04000120 	.word	0x04000120
 800afac:	0800c081 	.word	0x0800c081

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	f040 814a 	bne.w	800b24e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800afba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afbe:	f003 0310 	and.w	r3, r3, #16
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 8143 	beq.w	800b24e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800afc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afcc:	f003 0310 	and.w	r3, r3, #16
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 813c 	beq.w	800b24e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2210      	movs	r2, #16
 800afdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe8:	2b40      	cmp	r3, #64	; 0x40
 800afea:	f040 80b5 	bne.w	800b158 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800affa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 8187 	beq.w	800b312 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b00a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b00e:	429a      	cmp	r2, r3
 800b010:	f080 817f 	bcs.w	800b312 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b01a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0320 	and.w	r3, r3, #32
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f040 8086 	bne.w	800b13c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b03c:	e853 3f00 	ldrex	r3, [r3]
 800b040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b04c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	461a      	mov	r2, r3
 800b056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b05a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b05e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b066:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b06a:	e841 2300 	strex	r3, r2, [r1]
 800b06e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1da      	bne.n	800b030 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3308      	adds	r3, #8
 800b080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b08a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b08c:	f023 0301 	bic.w	r3, r3, #1
 800b090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3308      	adds	r3, #8
 800b09a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b09e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0aa:	e841 2300 	strex	r3, r2, [r1]
 800b0ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1e1      	bne.n	800b07a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3308      	adds	r3, #8
 800b0bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0c0:	e853 3f00 	ldrex	r3, [r3]
 800b0c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0e2:	e841 2300 	strex	r3, r2, [r1]
 800b0e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e3      	bne.n	800b0b6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b104:	e853 3f00 	ldrex	r3, [r3]
 800b108:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b10a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b10c:	f023 0310 	bic.w	r3, r3, #16
 800b110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	461a      	mov	r2, r3
 800b11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b11e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b120:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b122:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b126:	e841 2300 	strex	r3, r2, [r1]
 800b12a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1e4      	bne.n	800b0fc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b136:	4618      	mov	r0, r3
 800b138:	f7fa f856 	bl	80051e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b148:	b29b      	uxth	r3, r3
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f8f9 	bl	800b348 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b156:	e0dc      	b.n	800b312 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b164:	b29b      	uxth	r3, r3
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b172:	b29b      	uxth	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 80ce 	beq.w	800b316 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800b17a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f000 80c9 	beq.w	800b316 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	e853 3f00 	ldrex	r3, [r3]
 800b190:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b1a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1ae:	e841 2300 	strex	r3, r2, [r1]
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1e4      	bne.n	800b184 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3308      	adds	r3, #8
 800b1c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1d0:	f023 0301 	bic.w	r3, r3, #1
 800b1d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1e2:	633a      	str	r2, [r7, #48]	; 0x30
 800b1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ea:	e841 2300 	strex	r3, r2, [r1]
 800b1ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1e1      	bne.n	800b1ba <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	e853 3f00 	ldrex	r3, [r3]
 800b216:	60fb      	str	r3, [r7, #12]
   return(result);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 0310 	bic.w	r3, r3, #16
 800b21e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b22c:	61fb      	str	r3, [r7, #28]
 800b22e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b230:	69b9      	ldr	r1, [r7, #24]
 800b232:	69fa      	ldr	r2, [r7, #28]
 800b234:	e841 2300 	strex	r3, r2, [r1]
 800b238:	617b      	str	r3, [r7, #20]
   return(result);
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1e4      	bne.n	800b20a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f87e 	bl	800b348 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b24c:	e063      	b.n	800b316 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00e      	beq.n	800b278 <HAL_UART_IRQHandler+0x584>
 800b25a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b25e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d008      	beq.n	800b278 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b26e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f001 fba3 	bl	800c9bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b276:	e051      	b.n	800b31c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b27c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b280:	2b00      	cmp	r3, #0
 800b282:	d014      	beq.n	800b2ae <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d105      	bne.n	800b29c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d008      	beq.n	800b2ae <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d03a      	beq.n	800b31a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	4798      	blx	r3
    }
    return;
 800b2ac:	e035      	b.n	800b31a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <HAL_UART_IRQHandler+0x5da>
 800b2ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fef0 	bl	800c0ac <UART_EndTransmit_IT>
    return;
 800b2cc:	e026      	b.n	800b31c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d009      	beq.n	800b2ee <HAL_UART_IRQHandler+0x5fa>
 800b2da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d003      	beq.n	800b2ee <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 fb7a 	bl	800c9e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2ec:	e016      	b.n	800b31c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d010      	beq.n	800b31c <HAL_UART_IRQHandler+0x628>
 800b2fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	da0c      	bge.n	800b31c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f001 fb63 	bl	800c9ce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b308:	e008      	b.n	800b31c <HAL_UART_IRQHandler+0x628>
      return;
 800b30a:	bf00      	nop
 800b30c:	e006      	b.n	800b31c <HAL_UART_IRQHandler+0x628>
    return;
 800b30e:	bf00      	nop
 800b310:	e004      	b.n	800b31c <HAL_UART_IRQHandler+0x628>
      return;
 800b312:	bf00      	nop
 800b314:	e002      	b.n	800b31c <HAL_UART_IRQHandler+0x628>
      return;
 800b316:	bf00      	nop
 800b318:	e000      	b.n	800b31c <HAL_UART_IRQHandler+0x628>
    return;
 800b31a:	bf00      	nop
  }
}
 800b31c:	37e8      	adds	r7, #232	; 0xe8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop

0800b324 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	bc80      	pop	{r7}
 800b334:	4770      	bx	lr

0800b336 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	bc80      	pop	{r7}
 800b346:	4770      	bx	lr

0800b348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	460b      	mov	r3, r1
 800b352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	bc80      	pop	{r7}
 800b35c:	4770      	bx	lr
	...

0800b360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b364:	b08c      	sub	sp, #48	; 0x30
 800b366:	af00      	add	r7, sp, #0
 800b368:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	689a      	ldr	r2, [r3, #8]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	431a      	orrs	r2, r3
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	431a      	orrs	r2, r3
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	69db      	ldr	r3, [r3, #28]
 800b384:	4313      	orrs	r3, r2
 800b386:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	4b94      	ldr	r3, [pc, #592]	; (800b5e0 <UART_SetConfig+0x280>)
 800b390:	4013      	ands	r3, r2
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	6812      	ldr	r2, [r2, #0]
 800b396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b398:	430b      	orrs	r3, r1
 800b39a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	68da      	ldr	r2, [r3, #12]
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a89      	ldr	r2, [pc, #548]	; (800b5e4 <UART_SetConfig+0x284>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d004      	beq.n	800b3cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b3d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	6812      	ldr	r2, [r2, #0]
 800b3de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3e0:	430b      	orrs	r3, r1
 800b3e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ea:	f023 010f 	bic.w	r1, r3, #15
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	430a      	orrs	r2, r1
 800b3f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a7a      	ldr	r2, [pc, #488]	; (800b5e8 <UART_SetConfig+0x288>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d127      	bne.n	800b454 <UART_SetConfig+0xf4>
 800b404:	2003      	movs	r0, #3
 800b406:	f7ff fb1c 	bl	800aa42 <LL_RCC_GetUSARTClockSource>
 800b40a:	4603      	mov	r3, r0
 800b40c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b410:	2b03      	cmp	r3, #3
 800b412:	d81b      	bhi.n	800b44c <UART_SetConfig+0xec>
 800b414:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <UART_SetConfig+0xbc>)
 800b416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41a:	bf00      	nop
 800b41c:	0800b42d 	.word	0x0800b42d
 800b420:	0800b43d 	.word	0x0800b43d
 800b424:	0800b435 	.word	0x0800b435
 800b428:	0800b445 	.word	0x0800b445
 800b42c:	2301      	movs	r3, #1
 800b42e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b432:	e080      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b434:	2302      	movs	r3, #2
 800b436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b43a:	e07c      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b43c:	2304      	movs	r3, #4
 800b43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b442:	e078      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b444:	2308      	movs	r3, #8
 800b446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b44a:	e074      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b44c:	2310      	movs	r3, #16
 800b44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b452:	e070      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a64      	ldr	r2, [pc, #400]	; (800b5ec <UART_SetConfig+0x28c>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d138      	bne.n	800b4d0 <UART_SetConfig+0x170>
 800b45e:	200c      	movs	r0, #12
 800b460:	f7ff faef 	bl	800aa42 <LL_RCC_GetUSARTClockSource>
 800b464:	4603      	mov	r3, r0
 800b466:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b46a:	2b0c      	cmp	r3, #12
 800b46c:	d82c      	bhi.n	800b4c8 <UART_SetConfig+0x168>
 800b46e:	a201      	add	r2, pc, #4	; (adr r2, 800b474 <UART_SetConfig+0x114>)
 800b470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b474:	0800b4a9 	.word	0x0800b4a9
 800b478:	0800b4c9 	.word	0x0800b4c9
 800b47c:	0800b4c9 	.word	0x0800b4c9
 800b480:	0800b4c9 	.word	0x0800b4c9
 800b484:	0800b4b9 	.word	0x0800b4b9
 800b488:	0800b4c9 	.word	0x0800b4c9
 800b48c:	0800b4c9 	.word	0x0800b4c9
 800b490:	0800b4c9 	.word	0x0800b4c9
 800b494:	0800b4b1 	.word	0x0800b4b1
 800b498:	0800b4c9 	.word	0x0800b4c9
 800b49c:	0800b4c9 	.word	0x0800b4c9
 800b4a0:	0800b4c9 	.word	0x0800b4c9
 800b4a4:	0800b4c1 	.word	0x0800b4c1
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ae:	e042      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4b6:	e03e      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b4b8:	2304      	movs	r3, #4
 800b4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4be:	e03a      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b4c0:	2308      	movs	r3, #8
 800b4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c6:	e036      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b4c8:	2310      	movs	r3, #16
 800b4ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ce:	e032      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a43      	ldr	r2, [pc, #268]	; (800b5e4 <UART_SetConfig+0x284>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d12a      	bne.n	800b530 <UART_SetConfig+0x1d0>
 800b4da:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b4de:	f7ff fac2 	bl	800aa66 <LL_RCC_GetLPUARTClockSource>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4e8:	d01a      	beq.n	800b520 <UART_SetConfig+0x1c0>
 800b4ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4ee:	d81b      	bhi.n	800b528 <UART_SetConfig+0x1c8>
 800b4f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4f4:	d00c      	beq.n	800b510 <UART_SetConfig+0x1b0>
 800b4f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4fa:	d815      	bhi.n	800b528 <UART_SetConfig+0x1c8>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <UART_SetConfig+0x1a8>
 800b500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b504:	d008      	beq.n	800b518 <UART_SetConfig+0x1b8>
 800b506:	e00f      	b.n	800b528 <UART_SetConfig+0x1c8>
 800b508:	2300      	movs	r3, #0
 800b50a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b50e:	e012      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b510:	2302      	movs	r3, #2
 800b512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b516:	e00e      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b518:	2304      	movs	r3, #4
 800b51a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b51e:	e00a      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b520:	2308      	movs	r3, #8
 800b522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b526:	e006      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b528:	2310      	movs	r3, #16
 800b52a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b52e:	e002      	b.n	800b536 <UART_SetConfig+0x1d6>
 800b530:	2310      	movs	r3, #16
 800b532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a2a      	ldr	r2, [pc, #168]	; (800b5e4 <UART_SetConfig+0x284>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	f040 80a4 	bne.w	800b68a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b546:	2b08      	cmp	r3, #8
 800b548:	d823      	bhi.n	800b592 <UART_SetConfig+0x232>
 800b54a:	a201      	add	r2, pc, #4	; (adr r2, 800b550 <UART_SetConfig+0x1f0>)
 800b54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b550:	0800b575 	.word	0x0800b575
 800b554:	0800b593 	.word	0x0800b593
 800b558:	0800b57d 	.word	0x0800b57d
 800b55c:	0800b593 	.word	0x0800b593
 800b560:	0800b583 	.word	0x0800b583
 800b564:	0800b593 	.word	0x0800b593
 800b568:	0800b593 	.word	0x0800b593
 800b56c:	0800b593 	.word	0x0800b593
 800b570:	0800b58b 	.word	0x0800b58b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b574:	f7fc fbfe 	bl	8007d74 <HAL_RCC_GetPCLK1Freq>
 800b578:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b57a:	e010      	b.n	800b59e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b57c:	4b1c      	ldr	r3, [pc, #112]	; (800b5f0 <UART_SetConfig+0x290>)
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b580:	e00d      	b.n	800b59e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b582:	f7fc fb43 	bl	8007c0c <HAL_RCC_GetSysClockFreq>
 800b586:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b588:	e009      	b.n	800b59e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b58a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b58e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b590:	e005      	b.n	800b59e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b592:	2300      	movs	r3, #0
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b59c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 8137 	beq.w	800b814 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	4a12      	ldr	r2, [pc, #72]	; (800b5f4 <UART_SetConfig+0x294>)
 800b5ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	4413      	add	r3, r2
 800b5c4:	69ba      	ldr	r2, [r7, #24]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d305      	bcc.n	800b5d6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5d0:	69ba      	ldr	r2, [r7, #24]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d910      	bls.n	800b5f8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b5dc:	e11a      	b.n	800b814 <UART_SetConfig+0x4b4>
 800b5de:	bf00      	nop
 800b5e0:	cfff69f3 	.word	0xcfff69f3
 800b5e4:	40008000 	.word	0x40008000
 800b5e8:	40013800 	.word	0x40013800
 800b5ec:	40004400 	.word	0x40004400
 800b5f0:	00f42400 	.word	0x00f42400
 800b5f4:	0801f034 	.word	0x0801f034
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	60bb      	str	r3, [r7, #8]
 800b5fe:	60fa      	str	r2, [r7, #12]
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	4a8e      	ldr	r2, [pc, #568]	; (800b840 <UART_SetConfig+0x4e0>)
 800b606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	2200      	movs	r2, #0
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	607a      	str	r2, [r7, #4]
 800b612:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b616:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b61a:	f7f5 fbb7 	bl	8000d8c <__aeabi_uldivmod>
 800b61e:	4602      	mov	r2, r0
 800b620:	460b      	mov	r3, r1
 800b622:	4610      	mov	r0, r2
 800b624:	4619      	mov	r1, r3
 800b626:	f04f 0200 	mov.w	r2, #0
 800b62a:	f04f 0300 	mov.w	r3, #0
 800b62e:	020b      	lsls	r3, r1, #8
 800b630:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b634:	0202      	lsls	r2, r0, #8
 800b636:	6979      	ldr	r1, [r7, #20]
 800b638:	6849      	ldr	r1, [r1, #4]
 800b63a:	0849      	lsrs	r1, r1, #1
 800b63c:	2000      	movs	r0, #0
 800b63e:	460c      	mov	r4, r1
 800b640:	4605      	mov	r5, r0
 800b642:	eb12 0804 	adds.w	r8, r2, r4
 800b646:	eb43 0905 	adc.w	r9, r3, r5
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	469a      	mov	sl, r3
 800b652:	4693      	mov	fp, r2
 800b654:	4652      	mov	r2, sl
 800b656:	465b      	mov	r3, fp
 800b658:	4640      	mov	r0, r8
 800b65a:	4649      	mov	r1, r9
 800b65c:	f7f5 fb96 	bl	8000d8c <__aeabi_uldivmod>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4613      	mov	r3, r2
 800b666:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b66e:	d308      	bcc.n	800b682 <UART_SetConfig+0x322>
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b676:	d204      	bcs.n	800b682 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6a3a      	ldr	r2, [r7, #32]
 800b67e:	60da      	str	r2, [r3, #12]
 800b680:	e0c8      	b.n	800b814 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b688:	e0c4      	b.n	800b814 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b692:	d168      	bne.n	800b766 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b694:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b698:	2b08      	cmp	r3, #8
 800b69a:	d828      	bhi.n	800b6ee <UART_SetConfig+0x38e>
 800b69c:	a201      	add	r2, pc, #4	; (adr r2, 800b6a4 <UART_SetConfig+0x344>)
 800b69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a2:	bf00      	nop
 800b6a4:	0800b6c9 	.word	0x0800b6c9
 800b6a8:	0800b6d1 	.word	0x0800b6d1
 800b6ac:	0800b6d9 	.word	0x0800b6d9
 800b6b0:	0800b6ef 	.word	0x0800b6ef
 800b6b4:	0800b6df 	.word	0x0800b6df
 800b6b8:	0800b6ef 	.word	0x0800b6ef
 800b6bc:	0800b6ef 	.word	0x0800b6ef
 800b6c0:	0800b6ef 	.word	0x0800b6ef
 800b6c4:	0800b6e7 	.word	0x0800b6e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6c8:	f7fc fb54 	bl	8007d74 <HAL_RCC_GetPCLK1Freq>
 800b6cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6ce:	e014      	b.n	800b6fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6d0:	f7fc fb62 	bl	8007d98 <HAL_RCC_GetPCLK2Freq>
 800b6d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6d6:	e010      	b.n	800b6fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6d8:	4b5a      	ldr	r3, [pc, #360]	; (800b844 <UART_SetConfig+0x4e4>)
 800b6da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6dc:	e00d      	b.n	800b6fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6de:	f7fc fa95 	bl	8007c0c <HAL_RCC_GetSysClockFreq>
 800b6e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6e4:	e009      	b.n	800b6fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6ec:	e005      	b.n	800b6fa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b6f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f000 8089 	beq.w	800b814 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b706:	4a4e      	ldr	r2, [pc, #312]	; (800b840 <UART_SetConfig+0x4e0>)
 800b708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b70c:	461a      	mov	r2, r3
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	fbb3 f3f2 	udiv	r3, r3, r2
 800b714:	005a      	lsls	r2, r3, #1
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	085b      	lsrs	r3, r3, #1
 800b71c:	441a      	add	r2, r3
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	fbb2 f3f3 	udiv	r3, r2, r3
 800b726:	b29b      	uxth	r3, r3
 800b728:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	2b0f      	cmp	r3, #15
 800b72e:	d916      	bls.n	800b75e <UART_SetConfig+0x3fe>
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b736:	d212      	bcs.n	800b75e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	f023 030f 	bic.w	r3, r3, #15
 800b740:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	085b      	lsrs	r3, r3, #1
 800b746:	b29b      	uxth	r3, r3
 800b748:	f003 0307 	and.w	r3, r3, #7
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	8bfb      	ldrh	r3, [r7, #30]
 800b750:	4313      	orrs	r3, r2
 800b752:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	8bfa      	ldrh	r2, [r7, #30]
 800b75a:	60da      	str	r2, [r3, #12]
 800b75c:	e05a      	b.n	800b814 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b764:	e056      	b.n	800b814 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b766:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b76a:	2b08      	cmp	r3, #8
 800b76c:	d827      	bhi.n	800b7be <UART_SetConfig+0x45e>
 800b76e:	a201      	add	r2, pc, #4	; (adr r2, 800b774 <UART_SetConfig+0x414>)
 800b770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b774:	0800b799 	.word	0x0800b799
 800b778:	0800b7a1 	.word	0x0800b7a1
 800b77c:	0800b7a9 	.word	0x0800b7a9
 800b780:	0800b7bf 	.word	0x0800b7bf
 800b784:	0800b7af 	.word	0x0800b7af
 800b788:	0800b7bf 	.word	0x0800b7bf
 800b78c:	0800b7bf 	.word	0x0800b7bf
 800b790:	0800b7bf 	.word	0x0800b7bf
 800b794:	0800b7b7 	.word	0x0800b7b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b798:	f7fc faec 	bl	8007d74 <HAL_RCC_GetPCLK1Freq>
 800b79c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b79e:	e014      	b.n	800b7ca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7a0:	f7fc fafa 	bl	8007d98 <HAL_RCC_GetPCLK2Freq>
 800b7a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7a6:	e010      	b.n	800b7ca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7a8:	4b26      	ldr	r3, [pc, #152]	; (800b844 <UART_SetConfig+0x4e4>)
 800b7aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7ac:	e00d      	b.n	800b7ca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7ae:	f7fc fa2d 	bl	8007c0c <HAL_RCC_GetSysClockFreq>
 800b7b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7b4:	e009      	b.n	800b7ca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7bc:	e005      	b.n	800b7ca <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b7c8:	bf00      	nop
    }

    if (pclk != 0U)
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d021      	beq.n	800b814 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d4:	4a1a      	ldr	r2, [pc, #104]	; (800b840 <UART_SetConfig+0x4e0>)
 800b7d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	085b      	lsrs	r3, r3, #1
 800b7e8:	441a      	add	r2, r3
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	2b0f      	cmp	r3, #15
 800b7fa:	d908      	bls.n	800b80e <UART_SetConfig+0x4ae>
 800b7fc:	6a3b      	ldr	r3, [r7, #32]
 800b7fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b802:	d204      	bcs.n	800b80e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	6a3a      	ldr	r2, [r7, #32]
 800b80a:	60da      	str	r2, [r3, #12]
 800b80c:	e002      	b.n	800b814 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2201      	movs	r2, #1
 800b818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2201      	movs	r2, #1
 800b820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2200      	movs	r2, #0
 800b828:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2200      	movs	r2, #0
 800b82e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b830:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b834:	4618      	mov	r0, r3
 800b836:	3730      	adds	r7, #48	; 0x30
 800b838:	46bd      	mov	sp, r7
 800b83a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b83e:	bf00      	nop
 800b840:	0801f034 	.word	0x0801f034
 800b844:	00f42400 	.word	0x00f42400

0800b848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00a      	beq.n	800b872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	430a      	orrs	r2, r1
 800b870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b898:	f003 0304 	and.w	r3, r3, #4
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00a      	beq.n	800b8b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ba:	f003 0308 	and.w	r3, r3, #8
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00a      	beq.n	800b8d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	430a      	orrs	r2, r1
 800b8d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	f003 0310 	and.w	r3, r3, #16
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00a      	beq.n	800b8fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	430a      	orrs	r2, r1
 800b8f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fe:	f003 0320 	and.w	r3, r3, #32
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00a      	beq.n	800b91c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01a      	beq.n	800b95e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	430a      	orrs	r2, r1
 800b93c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b946:	d10a      	bne.n	800b95e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	430a      	orrs	r2, r1
 800b95c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00a      	beq.n	800b980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	430a      	orrs	r2, r1
 800b97e:	605a      	str	r2, [r3, #4]
  }
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	bc80      	pop	{r7}
 800b988:	4770      	bx	lr

0800b98a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b086      	sub	sp, #24
 800b98e:	af02      	add	r7, sp, #8
 800b990:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b99a:	f7f7 f889 	bl	8002ab0 <HAL_GetTick>
 800b99e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 0308 	and.w	r3, r3, #8
 800b9aa:	2b08      	cmp	r3, #8
 800b9ac:	d10e      	bne.n	800b9cc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f82f 	bl	800ba20 <UART_WaitOnFlagUntilTimeout>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e025      	b.n	800ba18 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f003 0304 	and.w	r3, r3, #4
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d10e      	bne.n	800b9f8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f819 	bl	800ba20 <UART_WaitOnFlagUntilTimeout>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d001      	beq.n	800b9f8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e00f      	b.n	800ba18 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2220      	movs	r2, #32
 800ba04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b09c      	sub	sp, #112	; 0x70
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba30:	e0a9      	b.n	800bb86 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba38:	f000 80a5 	beq.w	800bb86 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba3c:	f7f7 f838 	bl	8002ab0 <HAL_GetTick>
 800ba40:	4602      	mov	r2, r0
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d302      	bcc.n	800ba52 <UART_WaitOnFlagUntilTimeout+0x32>
 800ba4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d140      	bne.n	800bad4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba5a:	e853 3f00 	ldrex	r3, [r3]
 800ba5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba66:	667b      	str	r3, [r7, #100]	; 0x64
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba72:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba78:	e841 2300 	strex	r3, r2, [r1]
 800ba7c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ba7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1e6      	bne.n	800ba52 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3308      	adds	r3, #8
 800ba8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba8e:	e853 3f00 	ldrex	r3, [r3]
 800ba92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba96:	f023 0301 	bic.w	r3, r3, #1
 800ba9a:	663b      	str	r3, [r7, #96]	; 0x60
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3308      	adds	r3, #8
 800baa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800baa4:	64ba      	str	r2, [r7, #72]	; 0x48
 800baa6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800baaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baac:	e841 2300 	strex	r3, r2, [r1]
 800bab0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1e5      	bne.n	800ba84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2220      	movs	r2, #32
 800babc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2220      	movs	r2, #32
 800bac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e069      	b.n	800bba8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 0304 	and.w	r3, r3, #4
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d051      	beq.n	800bb86 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	69db      	ldr	r3, [r3, #28]
 800bae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baf0:	d149      	bne.n	800bb86 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bafa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	e853 3f00 	ldrex	r3, [r3]
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb22:	e841 2300 	strex	r3, r2, [r1]
 800bb26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1e6      	bne.n	800bafc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3308      	adds	r3, #8
 800bb34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	e853 3f00 	ldrex	r3, [r3]
 800bb3c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	f023 0301 	bic.w	r3, r3, #1
 800bb44:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	3308      	adds	r3, #8
 800bb4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb4e:	623a      	str	r2, [r7, #32]
 800bb50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb52:	69f9      	ldr	r1, [r7, #28]
 800bb54:	6a3a      	ldr	r2, [r7, #32]
 800bb56:	e841 2300 	strex	r3, r2, [r1]
 800bb5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1e5      	bne.n	800bb2e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2220      	movs	r2, #32
 800bb66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2220      	movs	r2, #32
 800bb6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2220      	movs	r2, #32
 800bb76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e010      	b.n	800bba8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69da      	ldr	r2, [r3, #28]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	4013      	ands	r3, r2
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	bf0c      	ite	eq
 800bb96:	2301      	moveq	r3, #1
 800bb98:	2300      	movne	r3, #0
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	79fb      	ldrb	r3, [r7, #7]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	f43f af46 	beq.w	800ba32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3770      	adds	r7, #112	; 0x70
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b0a3      	sub	sp, #140	; 0x8c
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	88fa      	ldrh	r2, [r7, #6]
 800bbc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	88fa      	ldrh	r2, [r7, #6]
 800bbd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbe2:	d10e      	bne.n	800bc02 <UART_Start_Receive_IT+0x52>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d105      	bne.n	800bbf8 <UART_Start_Receive_IT+0x48>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bbf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbf6:	e02d      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	22ff      	movs	r2, #255	; 0xff
 800bbfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc00:	e028      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10d      	bne.n	800bc26 <UART_Start_Receive_IT+0x76>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d104      	bne.n	800bc1c <UART_Start_Receive_IT+0x6c>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	22ff      	movs	r2, #255	; 0xff
 800bc16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc1a:	e01b      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	227f      	movs	r2, #127	; 0x7f
 800bc20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc24:	e016      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc2e:	d10d      	bne.n	800bc4c <UART_Start_Receive_IT+0x9c>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d104      	bne.n	800bc42 <UART_Start_Receive_IT+0x92>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	227f      	movs	r2, #127	; 0x7f
 800bc3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc40:	e008      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	223f      	movs	r2, #63	; 0x3f
 800bc46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc4a:	e003      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2222      	movs	r2, #34	; 0x22
 800bc60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	3308      	adds	r3, #8
 800bc6a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bc74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc76:	f043 0301 	orr.w	r3, r3, #1
 800bc7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3308      	adds	r3, #8
 800bc84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bc88:	673a      	str	r2, [r7, #112]	; 0x70
 800bc8a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bc8e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bc90:	e841 2300 	strex	r3, r2, [r1]
 800bc94:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bc96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e3      	bne.n	800bc64 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bca4:	d153      	bne.n	800bd4e <UART_Start_Receive_IT+0x19e>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bcac:	88fa      	ldrh	r2, [r7, #6]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d34d      	bcc.n	800bd4e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcba:	d107      	bne.n	800bccc <UART_Start_Receive_IT+0x11c>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d103      	bne.n	800bccc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4a4a      	ldr	r2, [pc, #296]	; (800bdf0 <UART_Start_Receive_IT+0x240>)
 800bcc8:	671a      	str	r2, [r3, #112]	; 0x70
 800bcca:	e002      	b.n	800bcd2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4a49      	ldr	r2, [pc, #292]	; (800bdf4 <UART_Start_Receive_IT+0x244>)
 800bcd0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d01a      	beq.n	800bd18 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcea:	e853 3f00 	ldrex	r3, [r3]
 800bcee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bcf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd04:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd06:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd0c:	e841 2300 	strex	r3, r2, [r1]
 800bd10:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1e4      	bne.n	800bce2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd22:	e853 3f00 	ldrex	r3, [r3]
 800bd26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3308      	adds	r3, #8
 800bd36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bd38:	64ba      	str	r2, [r7, #72]	; 0x48
 800bd3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd40:	e841 2300 	strex	r3, r2, [r1]
 800bd44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bd46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e5      	bne.n	800bd18 <UART_Start_Receive_IT+0x168>
 800bd4c:	e04a      	b.n	800bde4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd56:	d107      	bne.n	800bd68 <UART_Start_Receive_IT+0x1b8>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d103      	bne.n	800bd68 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4a25      	ldr	r2, [pc, #148]	; (800bdf8 <UART_Start_Receive_IT+0x248>)
 800bd64:	671a      	str	r2, [r3, #112]	; 0x70
 800bd66:	e002      	b.n	800bd6e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4a24      	ldr	r2, [pc, #144]	; (800bdfc <UART_Start_Receive_IT+0x24c>)
 800bd6c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d019      	beq.n	800bdb2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	e853 3f00 	ldrex	r3, [r3]
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bd92:	677b      	str	r3, [r7, #116]	; 0x74
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd9c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bda2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bda4:	e841 2300 	strex	r3, r2, [r1]
 800bda8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1e6      	bne.n	800bd7e <UART_Start_Receive_IT+0x1ce>
 800bdb0:	e018      	b.n	800bde4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	613b      	str	r3, [r7, #16]
   return(result);
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f043 0320 	orr.w	r3, r3, #32
 800bdc6:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdd0:	623b      	str	r3, [r7, #32]
 800bdd2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	69f9      	ldr	r1, [r7, #28]
 800bdd6:	6a3a      	ldr	r2, [r7, #32]
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e6      	bne.n	800bdb2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	378c      	adds	r7, #140	; 0x8c
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bc80      	pop	{r7}
 800bdee:	4770      	bx	lr
 800bdf0:	0800c6bd 	.word	0x0800c6bd
 800bdf4:	0800c3c5 	.word	0x0800c3c5
 800bdf8:	0800c263 	.word	0x0800c263
 800bdfc:	0800c103 	.word	0x0800c103

0800be00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be00:	b480      	push	{r7}
 800be02:	b08f      	sub	sp, #60	; 0x3c
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	e853 3f00 	ldrex	r3, [r3]
 800be14:	61fb      	str	r3, [r7, #28]
   return(result);
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be1c:	637b      	str	r3, [r7, #52]	; 0x34
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	461a      	mov	r2, r3
 800be24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be28:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be2e:	e841 2300 	strex	r3, r2, [r1]
 800be32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1e6      	bne.n	800be08 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3308      	adds	r3, #8
 800be40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	e853 3f00 	ldrex	r3, [r3]
 800be48:	60bb      	str	r3, [r7, #8]
   return(result);
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800be50:	633b      	str	r3, [r7, #48]	; 0x30
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3308      	adds	r3, #8
 800be58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5a:	61ba      	str	r2, [r7, #24]
 800be5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5e:	6979      	ldr	r1, [r7, #20]
 800be60:	69ba      	ldr	r2, [r7, #24]
 800be62:	e841 2300 	strex	r3, r2, [r1]
 800be66:	613b      	str	r3, [r7, #16]
   return(result);
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1e5      	bne.n	800be3a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2220      	movs	r2, #32
 800be72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800be76:	bf00      	nop
 800be78:	373c      	adds	r7, #60	; 0x3c
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bc80      	pop	{r7}
 800be7e:	4770      	bx	lr

0800be80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be80:	b480      	push	{r7}
 800be82:	b095      	sub	sp, #84	; 0x54
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be90:	e853 3f00 	ldrex	r3, [r3]
 800be94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea6:	643b      	str	r3, [r7, #64]	; 0x40
 800bea8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800beac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e6      	bne.n	800be88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3308      	adds	r3, #8
 800bec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec2:	6a3b      	ldr	r3, [r7, #32]
 800bec4:	e853 3f00 	ldrex	r3, [r3]
 800bec8:	61fb      	str	r3, [r7, #28]
   return(result);
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bed0:	f023 0301 	bic.w	r3, r3, #1
 800bed4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3308      	adds	r3, #8
 800bedc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bede:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bee0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bee6:	e841 2300 	strex	r3, r2, [r1]
 800beea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1e3      	bne.n	800beba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d118      	bne.n	800bf2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	e853 3f00 	ldrex	r3, [r3]
 800bf06:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	f023 0310 	bic.w	r3, r3, #16
 800bf0e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	461a      	mov	r2, r3
 800bf16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf18:	61bb      	str	r3, [r7, #24]
 800bf1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1c:	6979      	ldr	r1, [r7, #20]
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	e841 2300 	strex	r3, r2, [r1]
 800bf24:	613b      	str	r3, [r7, #16]
   return(result);
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1e6      	bne.n	800befa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2220      	movs	r2, #32
 800bf30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bf40:	bf00      	nop
 800bf42:	3754      	adds	r7, #84	; 0x54
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bc80      	pop	{r7}
 800bf48:	4770      	bx	lr

0800bf4a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b090      	sub	sp, #64	; 0x40
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 0320 	and.w	r3, r3, #32
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d137      	bne.n	800bfd6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bf66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3308      	adds	r3, #8
 800bf74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	623b      	str	r3, [r7, #32]
   return(result);
 800bf7e:	6a3b      	ldr	r3, [r7, #32]
 800bf80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf84:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf8e:	633a      	str	r2, [r7, #48]	; 0x30
 800bf90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e5      	bne.n	800bf6e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	e853 3f00 	ldrex	r3, [r3]
 800bfae:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb6:	637b      	str	r3, [r7, #52]	; 0x34
 800bfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc0:	61fb      	str	r3, [r7, #28]
 800bfc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc4:	69b9      	ldr	r1, [r7, #24]
 800bfc6:	69fa      	ldr	r2, [r7, #28]
 800bfc8:	e841 2300 	strex	r3, r2, [r1]
 800bfcc:	617b      	str	r3, [r7, #20]
   return(result);
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e6      	bne.n	800bfa2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bfd4:	e002      	b.n	800bfdc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bfd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bfd8:	f7f7 fc06 	bl	80037e8 <HAL_UART_TxCpltCallback>
}
 800bfdc:	bf00      	nop
 800bfde:	3740      	adds	r7, #64	; 0x40
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f7ff f996 	bl	800b324 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bff8:	bf00      	nop
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c014:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c01c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c028:	2b80      	cmp	r3, #128	; 0x80
 800c02a:	d109      	bne.n	800c040 <UART_DMAError+0x40>
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	2b21      	cmp	r3, #33	; 0x21
 800c030:	d106      	bne.n	800c040 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	2200      	movs	r2, #0
 800c036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c03a:	6978      	ldr	r0, [r7, #20]
 800c03c:	f7ff fee0 	bl	800be00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04a:	2b40      	cmp	r3, #64	; 0x40
 800c04c:	d109      	bne.n	800c062 <UART_DMAError+0x62>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2b22      	cmp	r3, #34	; 0x22
 800c052:	d106      	bne.n	800c062 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	2200      	movs	r2, #0
 800c058:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c05c:	6978      	ldr	r0, [r7, #20]
 800c05e:	f7ff ff0f 	bl	800be80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c068:	f043 0210 	orr.w	r2, r3, #16
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c072:	6978      	ldr	r0, [r7, #20]
 800c074:	f7ff f95f 	bl	800b336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c078:	bf00      	nop
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2200      	movs	r2, #0
 800c09a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f7ff f949 	bl	800b336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0a4:	bf00      	nop
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b088      	sub	sp, #32
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	e853 3f00 	ldrex	r3, [r3]
 800c0c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c8:	61fb      	str	r3, [r7, #28]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	61bb      	str	r3, [r7, #24]
 800c0d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d6:	6979      	ldr	r1, [r7, #20]
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	e841 2300 	strex	r3, r2, [r1]
 800c0de:	613b      	str	r3, [r7, #16]
   return(result);
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1e6      	bne.n	800c0b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7f7 fb77 	bl	80037e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0fa:	bf00      	nop
 800c0fc:	3720      	adds	r7, #32
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b096      	sub	sp, #88	; 0x58
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c110:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c11a:	2b22      	cmp	r3, #34	; 0x22
 800c11c:	f040 8095 	bne.w	800c24a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c126:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c12a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c12e:	b2d9      	uxtb	r1, r3
 800c130:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c134:	b2da      	uxtb	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c13a:	400a      	ands	r2, r1
 800c13c:	b2d2      	uxtb	r2, r2
 800c13e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c150:	b29b      	uxth	r3, r3
 800c152:	3b01      	subs	r3, #1
 800c154:	b29a      	uxth	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c162:	b29b      	uxth	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	d178      	bne.n	800c25a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	e853 3f00 	ldrex	r3, [r3]
 800c174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c17c:	653b      	str	r3, [r7, #80]	; 0x50
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	461a      	mov	r2, r3
 800c184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c186:	647b      	str	r3, [r7, #68]	; 0x44
 800c188:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c18c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c18e:	e841 2300 	strex	r3, r2, [r1]
 800c192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1e6      	bne.n	800c168 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3308      	adds	r3, #8
 800c1a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	e853 3f00 	ldrex	r3, [r3]
 800c1a8:	623b      	str	r3, [r7, #32]
   return(result);
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	f023 0301 	bic.w	r3, r3, #1
 800c1b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3308      	adds	r3, #8
 800c1b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1ba:	633a      	str	r2, [r7, #48]	; 0x30
 800c1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1c2:	e841 2300 	strex	r3, r2, [r1]
 800c1c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d1e5      	bne.n	800c19a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d12e      	bne.n	800c242 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	e853 3f00 	ldrex	r3, [r3]
 800c1f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f023 0310 	bic.w	r3, r3, #16
 800c1fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	461a      	mov	r2, r3
 800c206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c208:	61fb      	str	r3, [r7, #28]
 800c20a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20c:	69b9      	ldr	r1, [r7, #24]
 800c20e:	69fa      	ldr	r2, [r7, #28]
 800c210:	e841 2300 	strex	r3, r2, [r1]
 800c214:	617b      	str	r3, [r7, #20]
   return(result);
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1e6      	bne.n	800c1ea <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	f003 0310 	and.w	r3, r3, #16
 800c226:	2b10      	cmp	r3, #16
 800c228:	d103      	bne.n	800c232 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2210      	movs	r2, #16
 800c230:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff f884 	bl	800b348 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c240:	e00b      	b.n	800c25a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7f7 fae6 	bl	8003814 <HAL_UART_RxCpltCallback>
}
 800c248:	e007      	b.n	800c25a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	699a      	ldr	r2, [r3, #24]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f042 0208 	orr.w	r2, r2, #8
 800c258:	619a      	str	r2, [r3, #24]
}
 800c25a:	bf00      	nop
 800c25c:	3758      	adds	r7, #88	; 0x58
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b096      	sub	sp, #88	; 0x58
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c270:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c27a:	2b22      	cmp	r3, #34	; 0x22
 800c27c:	f040 8095 	bne.w	800c3aa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c286:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c28e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c290:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c294:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c298:	4013      	ands	r3, r2
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c29e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a4:	1c9a      	adds	r2, r3, #2
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d178      	bne.n	800c3ba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2e6:	643b      	str	r3, [r7, #64]	; 0x40
 800c2e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e6      	bne.n	800c2c8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3308      	adds	r3, #8
 800c300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	61fb      	str	r3, [r7, #28]
   return(result);
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	f023 0301 	bic.w	r3, r3, #1
 800c310:	64bb      	str	r3, [r7, #72]	; 0x48
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	3308      	adds	r3, #8
 800c318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c31a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c31c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c322:	e841 2300 	strex	r3, r2, [r1]
 800c326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1e5      	bne.n	800c2fa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2220      	movs	r2, #32
 800c332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c340:	2b01      	cmp	r3, #1
 800c342:	d12e      	bne.n	800c3a2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	60bb      	str	r3, [r7, #8]
   return(result);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	f023 0310 	bic.w	r3, r3, #16
 800c35e:	647b      	str	r3, [r7, #68]	; 0x44
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c368:	61bb      	str	r3, [r7, #24]
 800c36a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36c:	6979      	ldr	r1, [r7, #20]
 800c36e:	69ba      	ldr	r2, [r7, #24]
 800c370:	e841 2300 	strex	r3, r2, [r1]
 800c374:	613b      	str	r3, [r7, #16]
   return(result);
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1e6      	bne.n	800c34a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	69db      	ldr	r3, [r3, #28]
 800c382:	f003 0310 	and.w	r3, r3, #16
 800c386:	2b10      	cmp	r3, #16
 800c388:	d103      	bne.n	800c392 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2210      	movs	r2, #16
 800c390:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7fe ffd4 	bl	800b348 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3a0:	e00b      	b.n	800c3ba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7f7 fa36 	bl	8003814 <HAL_UART_RxCpltCallback>
}
 800c3a8:	e007      	b.n	800c3ba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	699a      	ldr	r2, [r3, #24]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f042 0208 	orr.w	r2, r2, #8
 800c3b8:	619a      	str	r2, [r3, #24]
}
 800c3ba:	bf00      	nop
 800c3bc:	3758      	adds	r7, #88	; 0x58
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b0a6      	sub	sp, #152	; 0x98
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3d2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	69db      	ldr	r3, [r3, #28]
 800c3dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3fa:	2b22      	cmp	r3, #34	; 0x22
 800c3fc:	f040 814f 	bne.w	800c69e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c406:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c40a:	e0f6      	b.n	800c5fa <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c412:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c416:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c41a:	b2d9      	uxtb	r1, r3
 800c41c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c420:	b2da      	uxtb	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c426:	400a      	ands	r2, r1
 800c428:	b2d2      	uxtb	r2, r2
 800c42a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	3b01      	subs	r3, #1
 800c440:	b29a      	uxth	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	69db      	ldr	r3, [r3, #28]
 800c44e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c456:	f003 0307 	and.w	r3, r3, #7
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d053      	beq.n	800c506 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c45e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c462:	f003 0301 	and.w	r3, r3, #1
 800c466:	2b00      	cmp	r3, #0
 800c468:	d011      	beq.n	800c48e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c46a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00b      	beq.n	800c48e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2201      	movs	r2, #1
 800c47c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c484:	f043 0201 	orr.w	r2, r3, #1
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c48e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c492:	f003 0302 	and.w	r3, r3, #2
 800c496:	2b00      	cmp	r3, #0
 800c498:	d011      	beq.n	800c4be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c49a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b4:	f043 0204 	orr.w	r2, r3, #4
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4c2:	f003 0304 	and.w	r3, r3, #4
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d011      	beq.n	800c4ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c4ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00b      	beq.n	800c4ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2204      	movs	r2, #4
 800c4dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4e4:	f043 0202 	orr.w	r2, r3, #2
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d006      	beq.n	800c506 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7fe ff1c 	bl	800b336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d173      	bne.n	800c5fa <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c51a:	e853 3f00 	ldrex	r3, [r3]
 800c51e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	461a      	mov	r2, r3
 800c530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c534:	66bb      	str	r3, [r7, #104]	; 0x68
 800c536:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c538:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c53a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c53c:	e841 2300 	strex	r3, r2, [r1]
 800c540:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1e4      	bne.n	800c512 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3308      	adds	r3, #8
 800c54e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c552:	e853 3f00 	ldrex	r3, [r3]
 800c556:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c55a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c55e:	f023 0301 	bic.w	r3, r3, #1
 800c562:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3308      	adds	r3, #8
 800c56a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c56c:	657a      	str	r2, [r7, #84]	; 0x54
 800c56e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c570:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c572:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c574:	e841 2300 	strex	r3, r2, [r1]
 800c578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1e3      	bne.n	800c548 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2220      	movs	r2, #32
 800c584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c592:	2b01      	cmp	r3, #1
 800c594:	d12e      	bne.n	800c5f4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	f023 0310 	bic.w	r3, r3, #16
 800c5b0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ba:	643b      	str	r3, [r7, #64]	; 0x40
 800c5bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5c2:	e841 2300 	strex	r3, r2, [r1]
 800c5c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1e6      	bne.n	800c59c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	69db      	ldr	r3, [r3, #28]
 800c5d4:	f003 0310 	and.w	r3, r3, #16
 800c5d8:	2b10      	cmp	r3, #16
 800c5da:	d103      	bne.n	800c5e4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2210      	movs	r2, #16
 800c5e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7fe feab 	bl	800b348 <HAL_UARTEx_RxEventCallback>
 800c5f2:	e002      	b.n	800c5fa <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7f7 f90d 	bl	8003814 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c5fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d006      	beq.n	800c610 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800c602:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c606:	f003 0320 	and.w	r3, r3, #32
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f47f aefe 	bne.w	800c40c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c616:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c61a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d045      	beq.n	800c6ae <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c628:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d23e      	bcs.n	800c6ae <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	3308      	adds	r3, #8
 800c636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c638:	6a3b      	ldr	r3, [r7, #32]
 800c63a:	e853 3f00 	ldrex	r3, [r3]
 800c63e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c646:	673b      	str	r3, [r7, #112]	; 0x70
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	3308      	adds	r3, #8
 800c64e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c650:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c658:	e841 2300 	strex	r3, r2, [r1]
 800c65c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1e5      	bne.n	800c630 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a14      	ldr	r2, [pc, #80]	; (800c6b8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c668:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	e853 3f00 	ldrex	r3, [r3]
 800c676:	60bb      	str	r3, [r7, #8]
   return(result);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	f043 0320 	orr.w	r3, r3, #32
 800c67e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	461a      	mov	r2, r3
 800c686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c688:	61bb      	str	r3, [r7, #24]
 800c68a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68c:	6979      	ldr	r1, [r7, #20]
 800c68e:	69ba      	ldr	r2, [r7, #24]
 800c690:	e841 2300 	strex	r3, r2, [r1]
 800c694:	613b      	str	r3, [r7, #16]
   return(result);
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1e6      	bne.n	800c66a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c69c:	e007      	b.n	800c6ae <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	699a      	ldr	r2, [r3, #24]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f042 0208 	orr.w	r2, r2, #8
 800c6ac:	619a      	str	r2, [r3, #24]
}
 800c6ae:	bf00      	nop
 800c6b0:	3798      	adds	r7, #152	; 0x98
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	0800c103 	.word	0x0800c103

0800c6bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b0a8      	sub	sp, #160	; 0xa0
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6ca:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	69db      	ldr	r3, [r3, #28]
 800c6d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6f2:	2b22      	cmp	r3, #34	; 0x22
 800c6f4:	f040 8153 	bne.w	800c99e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c702:	e0fa      	b.n	800c8fa <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c716:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c71a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c71e:	4013      	ands	r3, r2
 800c720:	b29a      	uxth	r2, r3
 800c722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c726:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c72c:	1c9a      	adds	r2, r3, #2
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c738:	b29b      	uxth	r3, r3
 800c73a:	3b01      	subs	r3, #1
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	69db      	ldr	r3, [r3, #28]
 800c74a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c74e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c752:	f003 0307 	and.w	r3, r3, #7
 800c756:	2b00      	cmp	r3, #0
 800c758:	d053      	beq.n	800c802 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c75a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c75e:	f003 0301 	and.w	r3, r3, #1
 800c762:	2b00      	cmp	r3, #0
 800c764:	d011      	beq.n	800c78a <UART_RxISR_16BIT_FIFOEN+0xce>
 800c766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00b      	beq.n	800c78a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2201      	movs	r2, #1
 800c778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c780:	f043 0201 	orr.w	r2, r3, #1
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c78a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c78e:	f003 0302 	and.w	r3, r3, #2
 800c792:	2b00      	cmp	r3, #0
 800c794:	d011      	beq.n	800c7ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00b      	beq.n	800c7ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7b0:	f043 0204 	orr.w	r2, r3, #4
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7be:	f003 0304 	and.w	r3, r3, #4
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d011      	beq.n	800c7ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c7c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7ca:	f003 0301 	and.w	r3, r3, #1
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00b      	beq.n	800c7ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7e0:	f043 0202 	orr.w	r2, r3, #2
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d006      	beq.n	800c802 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7fe fd9e 	bl	800b336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c808:	b29b      	uxth	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d175      	bne.n	800c8fa <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c816:	e853 3f00 	ldrex	r3, [r3]
 800c81a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c81c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c81e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c830:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c832:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c834:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c836:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c838:	e841 2300 	strex	r3, r2, [r1]
 800c83c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c83e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1e4      	bne.n	800c80e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3308      	adds	r3, #8
 800c84a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c84e:	e853 3f00 	ldrex	r3, [r3]
 800c852:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c85a:	f023 0301 	bic.w	r3, r3, #1
 800c85e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3308      	adds	r3, #8
 800c868:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c86c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c86e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c874:	e841 2300 	strex	r3, r2, [r1]
 800c878:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1e1      	bne.n	800c844 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2220      	movs	r2, #32
 800c884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c892:	2b01      	cmp	r3, #1
 800c894:	d12e      	bne.n	800c8f4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ac:	f023 0310 	bic.w	r3, r3, #16
 800c8b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c8ba:	647b      	str	r3, [r7, #68]	; 0x44
 800c8bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8c2:	e841 2300 	strex	r3, r2, [r1]
 800c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1e6      	bne.n	800c89c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	69db      	ldr	r3, [r3, #28]
 800c8d4:	f003 0310 	and.w	r3, r3, #16
 800c8d8:	2b10      	cmp	r3, #16
 800c8da:	d103      	bne.n	800c8e4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2210      	movs	r2, #16
 800c8e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7fe fd2b 	bl	800b348 <HAL_UARTEx_RxEventCallback>
 800c8f2:	e002      	b.n	800c8fa <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7f6 ff8d 	bl	8003814 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d006      	beq.n	800c910 <UART_RxISR_16BIT_FIFOEN+0x254>
 800c902:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c906:	f003 0320 	and.w	r3, r3, #32
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f47f aefa 	bne.w	800c704 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c916:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c91a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d045      	beq.n	800c9ae <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c928:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d23e      	bcs.n	800c9ae <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	3308      	adds	r3, #8
 800c936:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	e853 3f00 	ldrex	r3, [r3]
 800c93e:	623b      	str	r3, [r7, #32]
   return(result);
 800c940:	6a3b      	ldr	r3, [r7, #32]
 800c942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c946:	677b      	str	r3, [r7, #116]	; 0x74
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	3308      	adds	r3, #8
 800c94e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c950:	633a      	str	r2, [r7, #48]	; 0x30
 800c952:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c954:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c958:	e841 2300 	strex	r3, r2, [r1]
 800c95c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1e5      	bne.n	800c930 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4a14      	ldr	r2, [pc, #80]	; (800c9b8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c968:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	e853 3f00 	ldrex	r3, [r3]
 800c976:	60fb      	str	r3, [r7, #12]
   return(result);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f043 0320 	orr.w	r3, r3, #32
 800c97e:	673b      	str	r3, [r7, #112]	; 0x70
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	461a      	mov	r2, r3
 800c986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c988:	61fb      	str	r3, [r7, #28]
 800c98a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98c:	69b9      	ldr	r1, [r7, #24]
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	e841 2300 	strex	r3, r2, [r1]
 800c994:	617b      	str	r3, [r7, #20]
   return(result);
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1e6      	bne.n	800c96a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c99c:	e007      	b.n	800c9ae <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	699a      	ldr	r2, [r3, #24]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f042 0208 	orr.w	r2, r2, #8
 800c9ac:	619a      	str	r2, [r3, #24]
}
 800c9ae:	bf00      	nop
 800c9b0:	37a0      	adds	r7, #160	; 0xa0
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	0800c263 	.word	0x0800c263

0800c9bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c9c4:	bf00      	nop
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bc80      	pop	{r7}
 800c9cc:	4770      	bx	lr

0800c9ce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b083      	sub	sp, #12
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c9d6:	bf00      	nop
 800c9d8:	370c      	adds	r7, #12
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bc80      	pop	{r7}
 800c9de:	4770      	bx	lr

0800c9e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c9e8:	bf00      	nop
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bc80      	pop	{r7}
 800c9f0:	4770      	bx	lr

0800c9f2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b088      	sub	sp, #32
 800c9f6:	af02      	add	r7, sp, #8
 800c9f8:	60f8      	str	r0, [r7, #12]
 800c9fa:	1d3b      	adds	r3, r7, #4
 800c9fc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d101      	bne.n	800ca12 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800ca0e:	2302      	movs	r3, #2
 800ca10:	e046      	b.n	800caa0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2224      	movs	r2, #36	; 0x24
 800ca1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f022 0201 	bic.w	r2, r2, #1
 800ca30:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	430a      	orrs	r2, r1
 800ca44:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d105      	bne.n	800ca58 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800ca4c:	1d3b      	adds	r3, r7, #4
 800ca4e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f000 f949 	bl	800ccea <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f042 0201 	orr.w	r2, r2, #1
 800ca66:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca68:	f7f6 f822 	bl	8002ab0 <HAL_GetTick>
 800ca6c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f7fe ffcf 	bl	800ba20 <UART_WaitOnFlagUntilTimeout>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d002      	beq.n	800ca8e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	75fb      	strb	r3, [r7, #23]
 800ca8c:	e003      	b.n	800ca96 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2220      	movs	r2, #32
 800ca92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800ca9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b089      	sub	sp, #36	; 0x24
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d101      	bne.n	800cabe <HAL_UARTEx_EnableStopMode+0x16>
 800caba:	2302      	movs	r3, #2
 800cabc:	e021      	b.n	800cb02 <HAL_UARTEx_EnableStopMode+0x5a>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2201      	movs	r2, #1
 800cac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	e853 3f00 	ldrex	r3, [r3]
 800cad2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	f043 0302 	orr.w	r3, r3, #2
 800cada:	61fb      	str	r3, [r7, #28]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	461a      	mov	r2, r3
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	61bb      	str	r3, [r7, #24]
 800cae6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae8:	6979      	ldr	r1, [r7, #20]
 800caea:	69ba      	ldr	r2, [r7, #24]
 800caec:	e841 2300 	strex	r3, r2, [r1]
 800caf0:	613b      	str	r3, [r7, #16]
   return(result);
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1e6      	bne.n	800cac6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3724      	adds	r7, #36	; 0x24
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bc80      	pop	{r7}
 800cb0a:	4770      	bx	lr

0800cb0c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d101      	bne.n	800cb22 <HAL_UARTEx_EnableFifoMode+0x16>
 800cb1e:	2302      	movs	r3, #2
 800cb20:	e02b      	b.n	800cb7a <HAL_UARTEx_EnableFifoMode+0x6e>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2224      	movs	r2, #36	; 0x24
 800cb2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f022 0201 	bic.w	r2, r2, #1
 800cb48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800cb58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f8e4 	bl	800cd30 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2220      	movs	r2, #32
 800cb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb82:	b480      	push	{r7}
 800cb84:	b085      	sub	sp, #20
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d101      	bne.n	800cb98 <HAL_UARTEx_DisableFifoMode+0x16>
 800cb94:	2302      	movs	r3, #2
 800cb96:	e027      	b.n	800cbe8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2224      	movs	r2, #36	; 0x24
 800cba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f022 0201 	bic.w	r2, r2, #1
 800cbbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cbc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2220      	movs	r2, #32
 800cbda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bc80      	pop	{r7}
 800cbf0:	4770      	bx	lr

0800cbf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d101      	bne.n	800cc0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc06:	2302      	movs	r3, #2
 800cc08:	e02d      	b.n	800cc66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2224      	movs	r2, #36	; 0x24
 800cc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f022 0201 	bic.w	r2, r2, #1
 800cc30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	683a      	ldr	r2, [r7, #0]
 800cc42:	430a      	orrs	r2, r1
 800cc44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f872 	bl	800cd30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2220      	movs	r2, #32
 800cc58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d101      	bne.n	800cc86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc82:	2302      	movs	r3, #2
 800cc84:	e02d      	b.n	800cce2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2224      	movs	r2, #36	; 0x24
 800cc92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f022 0201 	bic.w	r2, r2, #1
 800ccac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f834 	bl	800cd30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ccea:	b480      	push	{r7}
 800ccec:	b085      	sub	sp, #20
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	60f8      	str	r0, [r7, #12]
 800ccf2:	1d3b      	adds	r3, r7, #4
 800ccf4:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	f023 0210 	bic.w	r2, r3, #16
 800cd02:	893b      	ldrh	r3, [r7, #8]
 800cd04:	4619      	mov	r1, r3
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	430a      	orrs	r2, r1
 800cd0c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800cd18:	7abb      	ldrb	r3, [r7, #10]
 800cd1a:	061a      	lsls	r2, r3, #24
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	430a      	orrs	r2, r1
 800cd22:	605a      	str	r2, [r3, #4]
}
 800cd24:	bf00      	nop
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bc80      	pop	{r7}
 800cd2c:	4770      	bx	lr
	...

0800cd30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d108      	bne.n	800cd52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd50:	e031      	b.n	800cdb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd52:	2308      	movs	r3, #8
 800cd54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd56:	2308      	movs	r3, #8
 800cd58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	0e5b      	lsrs	r3, r3, #25
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	f003 0307 	and.w	r3, r3, #7
 800cd68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	0f5b      	lsrs	r3, r3, #29
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	f003 0307 	and.w	r3, r3, #7
 800cd78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd7a:	7bbb      	ldrb	r3, [r7, #14]
 800cd7c:	7b3a      	ldrb	r2, [r7, #12]
 800cd7e:	4910      	ldr	r1, [pc, #64]	; (800cdc0 <UARTEx_SetNbDataToProcess+0x90>)
 800cd80:	5c8a      	ldrb	r2, [r1, r2]
 800cd82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd86:	7b3a      	ldrb	r2, [r7, #12]
 800cd88:	490e      	ldr	r1, [pc, #56]	; (800cdc4 <UARTEx_SetNbDataToProcess+0x94>)
 800cd8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
 800cd9a:	7b7a      	ldrb	r2, [r7, #13]
 800cd9c:	4908      	ldr	r1, [pc, #32]	; (800cdc0 <UARTEx_SetNbDataToProcess+0x90>)
 800cd9e:	5c8a      	ldrb	r2, [r1, r2]
 800cda0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cda4:	7b7a      	ldrb	r2, [r7, #13]
 800cda6:	4907      	ldr	r1, [pc, #28]	; (800cdc4 <UARTEx_SetNbDataToProcess+0x94>)
 800cda8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cdb6:	bf00      	nop
 800cdb8:	3714      	adds	r7, #20
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bc80      	pop	{r7}
 800cdbe:	4770      	bx	lr
 800cdc0:	0801f04c 	.word	0x0801f04c
 800cdc4:	0801f054 	.word	0x0801f054

0800cdc8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800cdcc:	f7f5 fd10 	bl	80027f0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800cdd0:	f000 f820 	bl	800ce14 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800cdd4:	bf00      	nop
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800cddc:	f04f 30ff 	mov.w	r0, #4294967295
 800cde0:	f010 fc3e 	bl	801d660 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800cde4:	bf00      	nop
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cde8:	b480      	push	{r7}
 800cdea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cdec:	f3bf 8f4f 	dsb	sy
}
 800cdf0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cdf2:	4b06      	ldr	r3, [pc, #24]	; (800ce0c <__NVIC_SystemReset+0x24>)
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cdfa:	4904      	ldr	r1, [pc, #16]	; (800ce0c <__NVIC_SystemReset+0x24>)
 800cdfc:	4b04      	ldr	r3, [pc, #16]	; (800ce10 <__NVIC_SystemReset+0x28>)
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ce02:	f3bf 8f4f 	dsb	sy
}
 800ce06:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ce08:	bf00      	nop
 800ce0a:	e7fd      	b.n	800ce08 <__NVIC_SystemReset+0x20>
 800ce0c:	e000ed00 	.word	0xe000ed00
 800ce10:	05fa0004 	.word	0x05fa0004

0800ce14 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800ce1e:	2300      	movs	r3, #0
 800ce20:	9302      	str	r3, [sp, #8]
 800ce22:	2302      	movs	r3, #2
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	2301      	movs	r3, #1
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	4b5a      	ldr	r3, [pc, #360]	; (800cf94 <LoRaWAN_Init+0x180>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2100      	movs	r1, #0
 800ce30:	2002      	movs	r0, #2
 800ce32:	f011 f863 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800ce36:	2300      	movs	r3, #0
 800ce38:	9302      	str	r3, [sp, #8]
 800ce3a:	2304      	movs	r3, #4
 800ce3c:	9301      	str	r3, [sp, #4]
 800ce3e:	2302      	movs	r3, #2
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	4b55      	ldr	r3, [pc, #340]	; (800cf98 <LoRaWAN_Init+0x184>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	2100      	movs	r1, #0
 800ce48:	2002      	movs	r0, #2
 800ce4a:	f011 f857 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800ce4e:	2300      	movs	r3, #0
 800ce50:	9302      	str	r3, [sp, #8]
 800ce52:	2302      	movs	r3, #2
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	2301      	movs	r3, #1
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	4b50      	ldr	r3, [pc, #320]	; (800cf9c <LoRaWAN_Init+0x188>)
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2100      	movs	r1, #0
 800ce60:	2002      	movs	r0, #2
 800ce62:	f011 f84b 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800ce66:	1d3b      	adds	r3, r7, #4
 800ce68:	4619      	mov	r1, r3
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	f003 f8ee 	bl	801004c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	0e1b      	lsrs	r3, r3, #24
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	461a      	mov	r2, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	0c1b      	lsrs	r3, r3, #16
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	4619      	mov	r1, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	0a1b      	lsrs	r3, r3, #8
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	9302      	str	r3, [sp, #8]
 800ce88:	9101      	str	r1, [sp, #4]
 800ce8a:	9200      	str	r2, [sp, #0]
 800ce8c:	4b44      	ldr	r3, [pc, #272]	; (800cfa0 <LoRaWAN_Init+0x18c>)
 800ce8e:	2200      	movs	r2, #0
 800ce90:	2100      	movs	r1, #0
 800ce92:	2002      	movs	r0, #2
 800ce94:	f011 f832 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800ce98:	1d3b      	adds	r3, r7, #4
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	2001      	movs	r0, #1
 800ce9e:	f003 f8d5 	bl	801004c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	0e1b      	lsrs	r3, r3, #24
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	461a      	mov	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	0c1b      	lsrs	r3, r3, #16
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	0a1b      	lsrs	r3, r3, #8
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	b2c0      	uxtb	r0, r0
 800cebc:	9003      	str	r0, [sp, #12]
 800cebe:	9302      	str	r3, [sp, #8]
 800cec0:	9101      	str	r1, [sp, #4]
 800cec2:	9200      	str	r2, [sp, #0]
 800cec4:	4b37      	ldr	r3, [pc, #220]	; (800cfa4 <LoRaWAN_Init+0x190>)
 800cec6:	2200      	movs	r2, #0
 800cec8:	2100      	movs	r1, #0
 800ceca:	2002      	movs	r0, #2
 800cecc:	f011 f816 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800ced0:	2300      	movs	r3, #0
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	4b34      	ldr	r3, [pc, #208]	; (800cfa8 <LoRaWAN_Init+0x194>)
 800ced6:	2200      	movs	r2, #0
 800ced8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cedc:	4833      	ldr	r0, [pc, #204]	; (800cfac <LoRaWAN_Init+0x198>)
 800cede:	f010 fd5f 	bl	801d9a0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800cee2:	2300      	movs	r3, #0
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	4b32      	ldr	r3, [pc, #200]	; (800cfb0 <LoRaWAN_Init+0x19c>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ceee:	4831      	ldr	r0, [pc, #196]	; (800cfb4 <LoRaWAN_Init+0x1a0>)
 800cef0:	f010 fd56 	bl	801d9a0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800cef4:	2300      	movs	r3, #0
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	4b2f      	ldr	r3, [pc, #188]	; (800cfb8 <LoRaWAN_Init+0x1a4>)
 800cefa:	2201      	movs	r2, #1
 800cefc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cf00:	482e      	ldr	r0, [pc, #184]	; (800cfbc <LoRaWAN_Init+0x1a8>)
 800cf02:	f010 fd4d 	bl	801d9a0 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800cf06:	2300      	movs	r3, #0
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	4b2d      	ldr	r3, [pc, #180]	; (800cfc0 <LoRaWAN_Init+0x1ac>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800cf12:	482c      	ldr	r0, [pc, #176]	; (800cfc4 <LoRaWAN_Init+0x1b0>)
 800cf14:	f010 fd44 	bl	801d9a0 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800cf18:	4a2b      	ldr	r2, [pc, #172]	; (800cfc8 <LoRaWAN_Init+0x1b4>)
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	2001      	movs	r0, #1
 800cf1e:	f010 fc9b 	bl	801d858 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800cf22:	4a2a      	ldr	r2, [pc, #168]	; (800cfcc <LoRaWAN_Init+0x1b8>)
 800cf24:	2100      	movs	r1, #0
 800cf26:	2002      	movs	r0, #2
 800cf28:	f010 fc96 	bl	801d858 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800cf2c:	4a28      	ldr	r2, [pc, #160]	; (800cfd0 <LoRaWAN_Init+0x1bc>)
 800cf2e:	2100      	movs	r1, #0
 800cf30:	2004      	movs	r0, #4
 800cf32:	f010 fc91 	bl	801d858 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800cf36:	4a27      	ldr	r2, [pc, #156]	; (800cfd4 <LoRaWAN_Init+0x1c0>)
 800cf38:	2100      	movs	r1, #0
 800cf3a:	2008      	movs	r0, #8
 800cf3c:	f010 fc8c 	bl	801d858 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800cf40:	f000 fcc2 	bl	800d8c8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800cf44:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800cf48:	4823      	ldr	r0, [pc, #140]	; (800cfd8 <LoRaWAN_Init+0x1c4>)
 800cf4a:	f002 f98d 	bl	800f268 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800cf4e:	4823      	ldr	r0, [pc, #140]	; (800cfdc <LoRaWAN_Init+0x1c8>)
 800cf50:	f002 f9d6 	bl	800f300 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800cf54:	4819      	ldr	r0, [pc, #100]	; (800cfbc <LoRaWAN_Init+0x1a8>)
 800cf56:	f010 fd59 	bl	801da0c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800cf5a:	4b21      	ldr	r3, [pc, #132]	; (800cfe0 <LoRaWAN_Init+0x1cc>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	4a21      	ldr	r2, [pc, #132]	; (800cfe4 <LoRaWAN_Init+0x1d0>)
 800cf60:	7812      	ldrb	r2, [r2, #0]
 800cf62:	4611      	mov	r1, r2
 800cf64:	4618      	mov	r0, r3
 800cf66:	f002 fb1d 	bl	800f5a4 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800cf6a:	4b1f      	ldr	r3, [pc, #124]	; (800cfe8 <LoRaWAN_Init+0x1d4>)
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10b      	bne.n	800cf8a <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800cf72:	4b1e      	ldr	r3, [pc, #120]	; (800cfec <LoRaWAN_Init+0x1d8>)
 800cf74:	6819      	ldr	r1, [r3, #0]
 800cf76:	2300      	movs	r3, #0
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	4b1d      	ldr	r3, [pc, #116]	; (800cff0 <LoRaWAN_Init+0x1dc>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	481d      	ldr	r0, [pc, #116]	; (800cff4 <LoRaWAN_Init+0x1e0>)
 800cf80:	f010 fd0e 	bl	801d9a0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800cf84:	481b      	ldr	r0, [pc, #108]	; (800cff4 <LoRaWAN_Init+0x1e0>)
 800cf86:	f010 fd41 	bl	801da0c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800cf8a:	bf00      	nop
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	0801e680 	.word	0x0801e680
 800cf98:	0801e6a4 	.word	0x0801e6a4
 800cf9c:	0801e6c4 	.word	0x0801e6c4
 800cfa0:	0801e6e4 	.word	0x0801e6e4
 800cfa4:	0801e708 	.word	0x0801e708
 800cfa8:	0800d3c5 	.word	0x0800d3c5
 800cfac:	2000077c 	.word	0x2000077c
 800cfb0:	0800d3d7 	.word	0x0800d3d7
 800cfb4:	20000794 	.word	0x20000794
 800cfb8:	0800d3e9 	.word	0x0800d3e9
 800cfbc:	200007ac 	.word	0x200007ac
 800cfc0:	0800d791 	.word	0x0800d791
 800cfc4:	20000670 	.word	0x20000670
 800cfc8:	0800f581 	.word	0x0800f581
 800cfcc:	0800d141 	.word	0x0800d141
 800cfd0:	0800d7b5 	.word	0x0800d7b5
 800cfd4:	0800d711 	.word	0x0800d711
 800cfd8:	20000034 	.word	0x20000034
 800cfdc:	20000080 	.word	0x20000080
 800cfe0:	20000030 	.word	0x20000030
 800cfe4:	20000031 	.word	0x20000031
 800cfe8:	20000654 	.word	0x20000654
 800cfec:	20000094 	.word	0x20000094
 800cff0:	0800d3a1 	.word	0x0800d3a1
 800cff4:	20000658 	.word	0x20000658

0800cff8 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800cff8:	b5b0      	push	{r4, r5, r7, lr}
 800cffa:	b08a      	sub	sp, #40	; 0x28
 800cffc:	af06      	add	r7, sp, #24
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800d002:	2300      	movs	r3, #0
 800d004:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 8086 	beq.w	800d11a <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800d00e:	4845      	ldr	r0, [pc, #276]	; (800d124 <OnRxData+0x12c>)
 800d010:	f010 fcfc 	bl	801da0c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d05a      	beq.n	800d0d2 <OnRxData+0xda>
    {
      if (appData != NULL)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d057      	beq.n	800d0d2 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d050      	beq.n	800d0d2 <OnRxData+0xda>
        {
    switch (appData->Port)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	2b02      	cmp	r3, #2
 800d036:	d01f      	beq.n	800d078 <OnRxData+0x80>
 800d038:	2b03      	cmp	r3, #3
 800d03a:	d145      	bne.n	800d0c8 <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	785b      	ldrb	r3, [r3, #1]
 800d040:	2b01      	cmp	r3, #1
 800d042:	d143      	bne.n	800d0cc <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2b02      	cmp	r3, #2
 800d04c:	d00e      	beq.n	800d06c <OnRxData+0x74>
 800d04e:	2b02      	cmp	r3, #2
 800d050:	dc10      	bgt.n	800d074 <OnRxData+0x7c>
 800d052:	2b00      	cmp	r3, #0
 800d054:	d002      	beq.n	800d05c <OnRxData+0x64>
 800d056:	2b01      	cmp	r3, #1
 800d058:	d004      	beq.n	800d064 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800d05a:	e00b      	b.n	800d074 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800d05c:	2000      	movs	r0, #0
 800d05e:	f002 fc3d 	bl	800f8dc <LmHandlerRequestClass>
              break;
 800d062:	e008      	b.n	800d076 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800d064:	2001      	movs	r0, #1
 800d066:	f002 fc39 	bl	800f8dc <LmHandlerRequestClass>
              break;
 800d06a:	e004      	b.n	800d076 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800d06c:	2002      	movs	r0, #2
 800d06e:	f002 fc35 	bl	800f8dc <LmHandlerRequestClass>
              break;
 800d072:	e000      	b.n	800d076 <OnRxData+0x7e>
              break;
 800d074:	bf00      	nop
          }
        }
        break;
 800d076:	e029      	b.n	800d0cc <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	785b      	ldrb	r3, [r3, #1]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d127      	bne.n	800d0d0 <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	f003 0301 	and.w	r3, r3, #1
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	4b26      	ldr	r3, [pc, #152]	; (800d128 <OnRxData+0x130>)
 800d08e:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800d090:	4b25      	ldr	r3, [pc, #148]	; (800d128 <OnRxData+0x130>)
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d10b      	bne.n	800d0b0 <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800d098:	4b24      	ldr	r3, [pc, #144]	; (800d12c <OnRxData+0x134>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	2100      	movs	r1, #0
 800d09e:	2003      	movs	r0, #3
 800d0a0:	f010 ff2c 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	2120      	movs	r1, #32
 800d0a8:	4821      	ldr	r0, [pc, #132]	; (800d130 <OnRxData+0x138>)
 800d0aa:	f7f8 ffed 	bl	8006088 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800d0ae:	e00f      	b.n	800d0d0 <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d0b0:	4b20      	ldr	r3, [pc, #128]	; (800d134 <OnRxData+0x13c>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	2003      	movs	r0, #3
 800d0b8:	f010 ff20 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2120      	movs	r1, #32
 800d0c0:	481b      	ldr	r0, [pc, #108]	; (800d130 <OnRxData+0x138>)
 800d0c2:	f7f8 ffe1 	bl	8006088 <HAL_GPIO_WritePin>
        break;
 800d0c6:	e003      	b.n	800d0d0 <OnRxData+0xd8>

      default:

        break;
 800d0c8:	bf00      	nop
 800d0ca:	e002      	b.n	800d0d2 <OnRxData+0xda>
        break;
 800d0cc:	bf00      	nop
 800d0ce:	e000      	b.n	800d0d2 <OnRxData+0xda>
        break;
 800d0d0:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	7c1b      	ldrb	r3, [r3, #16]
 800d0d6:	2b05      	cmp	r3, #5
 800d0d8:	d81f      	bhi.n	800d11a <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	7bfa      	ldrb	r2, [r7, #15]
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	6839      	ldr	r1, [r7, #0]
 800d0ea:	7c09      	ldrb	r1, [r1, #16]
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	4912      	ldr	r1, [pc, #72]	; (800d138 <OnRxData+0x140>)
 800d0f0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d0f4:	6838      	ldr	r0, [r7, #0]
 800d0f6:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	6838      	ldr	r0, [r7, #0]
 800d0fe:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d102:	9005      	str	r0, [sp, #20]
 800d104:	9504      	str	r5, [sp, #16]
 800d106:	9103      	str	r1, [sp, #12]
 800d108:	9402      	str	r4, [sp, #8]
 800d10a:	9201      	str	r2, [sp, #4]
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	4b0b      	ldr	r3, [pc, #44]	; (800d13c <OnRxData+0x144>)
 800d110:	2200      	movs	r2, #0
 800d112:	2100      	movs	r1, #0
 800d114:	2003      	movs	r0, #3
 800d116:	f010 fef1 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d11a:	bf00      	nop
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bdb0      	pop	{r4, r5, r7, pc}
 800d122:	bf00      	nop
 800d124:	20000794 	.word	0x20000794
 800d128:	2000077a 	.word	0x2000077a
 800d12c:	0801e72c 	.word	0x0801e72c
 800d130:	48000400 	.word	0x48000400
 800d134:	0801e738 	.word	0x0801e738
 800d138:	20000018 	.word	0x20000018
 800d13c:	0801e744 	.word	0x0801e744

0800d140 <SendTxData>:

static void SendTxData(void)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08c      	sub	sp, #48	; 0x30
 800d144:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d146:	23ff      	movs	r3, #255	; 0xff
 800d148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800d14c:	f7f5 fb84 	bl	8002858 <GetBatteryLevel>
 800d150:	4603      	mov	r3, r0
 800d152:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800d162:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	4b7d      	ldr	r3, [pc, #500]	; (800d360 <SendTxData+0x220>)
 800d16a:	2201      	movs	r2, #1
 800d16c:	2100      	movs	r1, #0
 800d16e:	2002      	movs	r0, #2
 800d170:	f010 fec4 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4618      	mov	r0, r3
 800d178:	f7f3 fde2 	bl	8000d40 <__aeabi_f2iz>
 800d17c:	4603      	mov	r3, r0
 800d17e:	b21b      	sxth	r3, r3
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	4b78      	ldr	r3, [pc, #480]	; (800d364 <SendTxData+0x224>)
 800d184:	2201      	movs	r2, #1
 800d186:	2100      	movs	r1, #0
 800d188:	2002      	movs	r0, #2
 800d18a:	f010 feb7 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d18e:	4b76      	ldr	r3, [pc, #472]	; (800d368 <SendTxData+0x228>)
 800d190:	2202      	movs	r2, #2
 800d192:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800d194:	4b75      	ldr	r3, [pc, #468]	; (800d36c <SendTxData+0x22c>)
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	4a75      	ldr	r2, [pc, #468]	; (800d370 <SendTxData+0x230>)
 800d19a:	fba2 2303 	umull	r2, r3, r2, r3
 800d19e:	095b      	lsrs	r3, r3, #5
 800d1a0:	b298      	uxth	r0, r3
 800d1a2:	4b71      	ldr	r3, [pc, #452]	; (800d368 <SendTxData+0x228>)
 800d1a4:	685a      	ldr	r2, [r3, #4]
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	1c59      	adds	r1, r3, #1
 800d1aa:	61f9      	str	r1, [r7, #28]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	b2c2      	uxtb	r2, r0
 800d1b0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800d1b2:	4b6e      	ldr	r3, [pc, #440]	; (800d36c <SendTxData+0x22c>)
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	4a6e      	ldr	r2, [pc, #440]	; (800d370 <SendTxData+0x230>)
 800d1b8:	fba2 1203 	umull	r1, r2, r2, r3
 800d1bc:	0952      	lsrs	r2, r2, #5
 800d1be:	2164      	movs	r1, #100	; 0x64
 800d1c0:	fb01 f202 	mul.w	r2, r1, r2
 800d1c4:	1a9b      	subs	r3, r3, r2
 800d1c6:	b298      	uxth	r0, r3
 800d1c8:	4b67      	ldr	r3, [pc, #412]	; (800d368 <SendTxData+0x228>)
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	1c59      	adds	r1, r3, #1
 800d1d0:	61f9      	str	r1, [r7, #28]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	b2c2      	uxtb	r2, r0
 800d1d6:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800d1d8:	4b66      	ldr	r3, [pc, #408]	; (800d374 <SendTxData+0x234>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7f3 f937 	bl	8000450 <__aeabi_f2d>
 800d1e2:	f04f 0200 	mov.w	r2, #0
 800d1e6:	4b64      	ldr	r3, [pc, #400]	; (800d378 <SendTxData+0x238>)
 800d1e8:	f7f3 f98a 	bl	8000500 <__aeabi_dmul>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	f7f3 fc1e 	bl	8000a34 <__aeabi_d2iz>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d1fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d200:	4a5b      	ldr	r2, [pc, #364]	; (800d370 <SendTxData+0x230>)
 800d202:	fb82 1203 	smull	r1, r2, r2, r3
 800d206:	1152      	asrs	r2, r2, #5
 800d208:	17db      	asrs	r3, r3, #31
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	b218      	sxth	r0, r3
 800d20e:	4b56      	ldr	r3, [pc, #344]	; (800d368 <SendTxData+0x228>)
 800d210:	685a      	ldr	r2, [r3, #4]
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	1c59      	adds	r1, r3, #1
 800d216:	61f9      	str	r1, [r7, #28]
 800d218:	4413      	add	r3, r2
 800d21a:	b2c2      	uxtb	r2, r0
 800d21c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d21e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d222:	4a53      	ldr	r2, [pc, #332]	; (800d370 <SendTxData+0x230>)
 800d224:	fb82 1203 	smull	r1, r2, r2, r3
 800d228:	1151      	asrs	r1, r2, #5
 800d22a:	17da      	asrs	r2, r3, #31
 800d22c:	1a8a      	subs	r2, r1, r2
 800d22e:	2164      	movs	r1, #100	; 0x64
 800d230:	fb01 f202 	mul.w	r2, r1, r2
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	b218      	sxth	r0, r3
 800d238:	4b4b      	ldr	r3, [pc, #300]	; (800d368 <SendTxData+0x228>)
 800d23a:	685a      	ldr	r2, [r3, #4]
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	1c59      	adds	r1, r3, #1
 800d240:	61f9      	str	r1, [r7, #28]
 800d242:	4413      	add	r3, r2
 800d244:	b2c2      	uxtb	r2, r0
 800d246:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d248:	4b4c      	ldr	r3, [pc, #304]	; (800d37c <SendTxData+0x23c>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7f3 f8ff 	bl	8000450 <__aeabi_f2d>
 800d252:	f04f 0200 	mov.w	r2, #0
 800d256:	4b48      	ldr	r3, [pc, #288]	; (800d378 <SendTxData+0x238>)
 800d258:	f7f3 f952 	bl	8000500 <__aeabi_dmul>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	4610      	mov	r0, r2
 800d262:	4619      	mov	r1, r3
 800d264:	f7f3 fbe6 	bl	8000a34 <__aeabi_d2iz>
 800d268:	4603      	mov	r3, r0
 800d26a:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d26c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d270:	4a3f      	ldr	r2, [pc, #252]	; (800d370 <SendTxData+0x230>)
 800d272:	fb82 1203 	smull	r1, r2, r2, r3
 800d276:	1152      	asrs	r2, r2, #5
 800d278:	17db      	asrs	r3, r3, #31
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	b218      	sxth	r0, r3
 800d27e:	4b3a      	ldr	r3, [pc, #232]	; (800d368 <SendTxData+0x228>)
 800d280:	685a      	ldr	r2, [r3, #4]
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	1c59      	adds	r1, r3, #1
 800d286:	61f9      	str	r1, [r7, #28]
 800d288:	4413      	add	r3, r2
 800d28a:	b2c2      	uxtb	r2, r0
 800d28c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d28e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d292:	4a37      	ldr	r2, [pc, #220]	; (800d370 <SendTxData+0x230>)
 800d294:	fb82 1203 	smull	r1, r2, r2, r3
 800d298:	1151      	asrs	r1, r2, #5
 800d29a:	17da      	asrs	r2, r3, #31
 800d29c:	1a8a      	subs	r2, r1, r2
 800d29e:	2164      	movs	r1, #100	; 0x64
 800d2a0:	fb01 f202 	mul.w	r2, r1, r2
 800d2a4:	1a9b      	subs	r3, r3, r2
 800d2a6:	b218      	sxth	r0, r3
 800d2a8:	4b2f      	ldr	r3, [pc, #188]	; (800d368 <SendTxData+0x228>)
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	1c59      	adds	r1, r3, #1
 800d2b0:	61f9      	str	r1, [r7, #28]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	b2c2      	uxtb	r2, r0
 800d2b6:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	b2da      	uxtb	r2, r3
 800d2bc:	4b2a      	ldr	r3, [pc, #168]	; (800d368 <SendTxData+0x228>)
 800d2be:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d2c0:	4b2f      	ldr	r3, [pc, #188]	; (800d380 <SendTxData+0x240>)
 800d2c2:	7a5b      	ldrb	r3, [r3, #9]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d007      	beq.n	800d2d8 <SendTxData+0x198>
 800d2c8:	f002 f9ec 	bl	800f6a4 <LmHandlerJoinStatus>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d102      	bne.n	800d2d8 <SendTxData+0x198>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d2d2:	482b      	ldr	r0, [pc, #172]	; (800d380 <SendTxData+0x240>)
 800d2d4:	f010 fc08 	bl	801dae8 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d2d8:	4b2a      	ldr	r3, [pc, #168]	; (800d384 <SendTxData+0x244>)
 800d2da:	78db      	ldrb	r3, [r3, #3]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4821      	ldr	r0, [pc, #132]	; (800d368 <SendTxData+0x228>)
 800d2e2:	f002 f9fb 	bl	800f6dc <LmHandlerSend>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d2ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d106      	bne.n	800d302 <SendTxData+0x1c2>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d2f4:	4b24      	ldr	r3, [pc, #144]	; (800d388 <SendTxData+0x248>)
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	2001      	movs	r0, #1
 800d2fc:	f010 fdfe 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800d300:	e016      	b.n	800d330 <SendTxData+0x1f0>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d302:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d306:	f113 0f06 	cmn.w	r3, #6
 800d30a:	d111      	bne.n	800d330 <SendTxData+0x1f0>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d30c:	f002 f940 	bl	800f590 <LmHandlerGetDutyCycleWaitTime>
 800d310:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00b      	beq.n	800d330 <SendTxData+0x1f0>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	4a1c      	ldr	r2, [pc, #112]	; (800d38c <SendTxData+0x24c>)
 800d31c:	fba2 2303 	umull	r2, r3, r2, r3
 800d320:	099b      	lsrs	r3, r3, #6
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	4b1a      	ldr	r3, [pc, #104]	; (800d390 <SendTxData+0x250>)
 800d326:	2201      	movs	r2, #1
 800d328:	2100      	movs	r1, #0
 800d32a:	2001      	movs	r0, #1
 800d32c:	f010 fde6 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d330:	4b18      	ldr	r3, [pc, #96]	; (800d394 <SendTxData+0x254>)
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10f      	bne.n	800d358 <SendTxData+0x218>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d338:	4817      	ldr	r0, [pc, #92]	; (800d398 <SendTxData+0x258>)
 800d33a:	f010 fbd5 	bl	801dae8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d33e:	4b17      	ldr	r3, [pc, #92]	; (800d39c <SendTxData+0x25c>)
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	4293      	cmp	r3, r2
 800d346:	bf38      	it	cc
 800d348:	4613      	movcc	r3, r2
 800d34a:	4619      	mov	r1, r3
 800d34c:	4812      	ldr	r0, [pc, #72]	; (800d398 <SendTxData+0x258>)
 800d34e:	f010 fc3b 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d352:	4811      	ldr	r0, [pc, #68]	; (800d398 <SendTxData+0x258>)
 800d354:	f010 fb5a 	bl	801da0c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d358:	bf00      	nop
 800d35a:	3728      	adds	r7, #40	; 0x28
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	0801e78c 	.word	0x0801e78c
 800d364:	0801e798 	.word	0x0801e798
 800d368:	20000098 	.word	0x20000098
 800d36c:	20000264 	.word	0x20000264
 800d370:	51eb851f 	.word	0x51eb851f
 800d374:	20000268 	.word	0x20000268
 800d378:	40590000 	.word	0x40590000
 800d37c:	2000026c 	.word	0x2000026c
 800d380:	200007ac 	.word	0x200007ac
 800d384:	20000080 	.word	0x20000080
 800d388:	0801e7a4 	.word	0x0801e7a4
 800d38c:	10624dd3 	.word	0x10624dd3
 800d390:	0801e7b4 	.word	0x0801e7b4
 800d394:	20000654 	.word	0x20000654
 800d398:	20000658 	.word	0x20000658
 800d39c:	20000094 	.word	0x20000094

0800d3a0 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	2002      	movs	r0, #2
 800d3ac:	f010 fa76 	bl	801d89c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d3b0:	4803      	ldr	r0, [pc, #12]	; (800d3c0 <OnTxTimerEvent+0x20>)
 800d3b2:	f010 fb2b 	bl	801da0c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d3b6:	bf00      	nop
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	20000658 	.word	0x20000658

0800d3c4 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d3cc:	bf00      	nop
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bc80      	pop	{r7}
 800d3d4:	4770      	bx	lr

0800d3d6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b083      	sub	sp, #12
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d3de:	bf00      	nop
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bc80      	pop	{r7}
 800d3e6:	4770      	bx	lr

0800d3e8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d3f0:	bf00      	nop
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bc80      	pop	{r7}
 800d3f8:	4770      	bx	lr
	...

0800d3fc <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af04      	add	r7, sp, #16
 800d402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d041      	beq.n	800d48e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d03d      	beq.n	800d48e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d412:	4821      	ldr	r0, [pc, #132]	; (800d498 <OnTxData+0x9c>)
 800d414:	f010 fafa 	bl	801da0c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d418:	4b20      	ldr	r3, [pc, #128]	; (800d49c <OnTxData+0xa0>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	2100      	movs	r1, #0
 800d41e:	2002      	movs	r0, #2
 800d420:	f010 fd6c 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	7c12      	ldrb	r2, [r2, #16]
 800d42c:	4611      	mov	r1, r2
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d434:	4610      	mov	r0, r2
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d43c:	9203      	str	r2, [sp, #12]
 800d43e:	9002      	str	r0, [sp, #8]
 800d440:	9101      	str	r1, [sp, #4]
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	4b16      	ldr	r3, [pc, #88]	; (800d4a0 <OnTxData+0xa4>)
 800d446:	2200      	movs	r2, #0
 800d448:	2100      	movs	r1, #0
 800d44a:	2003      	movs	r0, #3
 800d44c:	f010 fd56 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d450:	4b14      	ldr	r3, [pc, #80]	; (800d4a4 <OnTxData+0xa8>)
 800d452:	2200      	movs	r2, #0
 800d454:	2100      	movs	r1, #0
 800d456:	2003      	movs	r0, #3
 800d458:	f010 fd50 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7a1b      	ldrb	r3, [r3, #8]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d10e      	bne.n	800d482 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	7a5b      	ldrb	r3, [r3, #9]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <OnTxData+0x74>
 800d46c:	4b0e      	ldr	r3, [pc, #56]	; (800d4a8 <OnTxData+0xac>)
 800d46e:	e000      	b.n	800d472 <OnTxData+0x76>
 800d470:	4b0e      	ldr	r3, [pc, #56]	; (800d4ac <OnTxData+0xb0>)
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	4b0e      	ldr	r3, [pc, #56]	; (800d4b0 <OnTxData+0xb4>)
 800d476:	2200      	movs	r2, #0
 800d478:	2100      	movs	r1, #0
 800d47a:	2003      	movs	r0, #3
 800d47c:	f010 fd3e 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d480:	e005      	b.n	800d48e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d482:	4b0c      	ldr	r3, [pc, #48]	; (800d4b4 <OnTxData+0xb8>)
 800d484:	2200      	movs	r2, #0
 800d486:	2100      	movs	r1, #0
 800d488:	2003      	movs	r0, #3
 800d48a:	f010 fd37 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 800d48e:	bf00      	nop
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	2000077c 	.word	0x2000077c
 800d49c:	0801e7d4 	.word	0x0801e7d4
 800d4a0:	0801e808 	.word	0x0801e808
 800d4a4:	0801e83c 	.word	0x0801e83c
 800d4a8:	0801e84c 	.word	0x0801e84c
 800d4ac:	0801e850 	.word	0x0801e850
 800d4b0:	0801e858 	.word	0x0801e858
 800d4b4:	0801e86c 	.word	0x0801e86c

0800d4b8 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d035      	beq.n	800d532 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d11a      	bne.n	800d506 <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d4d0:	481a      	ldr	r0, [pc, #104]	; (800d53c <OnJoinRequest+0x84>)
 800d4d2:	f010 fb09 	bl	801dae8 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d4d6:	4b1a      	ldr	r3, [pc, #104]	; (800d540 <OnJoinRequest+0x88>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2100      	movs	r1, #0
 800d4dc:	2002      	movs	r0, #2
 800d4de:	f010 fd0d 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	799b      	ldrb	r3, [r3, #6]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d106      	bne.n	800d4f8 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d4ea:	4b16      	ldr	r3, [pc, #88]	; (800d544 <OnJoinRequest+0x8c>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	2002      	movs	r0, #2
 800d4f2:	f010 fd03 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d4f6:	e01c      	b.n	800d532 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d4f8:	4b13      	ldr	r3, [pc, #76]	; (800d548 <OnJoinRequest+0x90>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	2002      	movs	r0, #2
 800d500:	f010 fcfc 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 800d504:	e015      	b.n	800d532 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d506:	4b11      	ldr	r3, [pc, #68]	; (800d54c <OnJoinRequest+0x94>)
 800d508:	2200      	movs	r2, #0
 800d50a:	2100      	movs	r1, #0
 800d50c:	2002      	movs	r0, #2
 800d50e:	f010 fcf5 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	799b      	ldrb	r3, [r3, #6]
 800d516:	2b02      	cmp	r3, #2
 800d518:	d10b      	bne.n	800d532 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d51a:	4b0d      	ldr	r3, [pc, #52]	; (800d550 <OnJoinRequest+0x98>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	2100      	movs	r1, #0
 800d520:	2002      	movs	r0, #2
 800d522:	f010 fceb 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d526:	4b0b      	ldr	r3, [pc, #44]	; (800d554 <OnJoinRequest+0x9c>)
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2101      	movs	r1, #1
 800d52c:	4618      	mov	r0, r3
 800d52e:	f002 f839 	bl	800f5a4 <LmHandlerJoin>
}
 800d532:	bf00      	nop
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	200007ac 	.word	0x200007ac
 800d540:	0801e87c 	.word	0x0801e87c
 800d544:	0801e894 	.word	0x0801e894
 800d548:	0801e8b4 	.word	0x0801e8b4
 800d54c:	0801e8d4 	.word	0x0801e8d4
 800d550:	0801e8f0 	.word	0x0801e8f0
 800d554:	20000030 	.word	0x20000030

0800d558 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d55a:	b093      	sub	sp, #76	; 0x4c
 800d55c:	af0c      	add	r7, sp, #48	; 0x30
 800d55e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d056      	beq.n	800d614 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	785b      	ldrb	r3, [r3, #1]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d008      	beq.n	800d580 <OnBeaconStatusChange+0x28>
 800d56e:	2b03      	cmp	r3, #3
 800d570:	d049      	beq.n	800d606 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d572:	4b2a      	ldr	r3, [pc, #168]	; (800d61c <OnBeaconStatusChange+0xc4>)
 800d574:	2200      	movs	r2, #0
 800d576:	2100      	movs	r1, #0
 800d578:	2002      	movs	r0, #2
 800d57a:	f010 fcbf 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d57e:	e049      	b.n	800d614 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	7c1b      	ldrb	r3, [r3, #16]
 800d584:	4618      	mov	r0, r3
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d58c:	461c      	mov	r4, r3
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d594:	461d      	mov	r5, r3
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	6852      	ldr	r2, [r2, #4]
 800d59e:	6979      	ldr	r1, [r7, #20]
 800d5a0:	7d49      	ldrb	r1, [r1, #21]
 800d5a2:	460e      	mov	r6, r1
 800d5a4:	6979      	ldr	r1, [r7, #20]
 800d5a6:	7d89      	ldrb	r1, [r1, #22]
 800d5a8:	6139      	str	r1, [r7, #16]
 800d5aa:	6979      	ldr	r1, [r7, #20]
 800d5ac:	7dc9      	ldrb	r1, [r1, #23]
 800d5ae:	60f9      	str	r1, [r7, #12]
 800d5b0:	6979      	ldr	r1, [r7, #20]
 800d5b2:	7e09      	ldrb	r1, [r1, #24]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	6979      	ldr	r1, [r7, #20]
 800d5b8:	7e49      	ldrb	r1, [r1, #25]
 800d5ba:	6079      	str	r1, [r7, #4]
 800d5bc:	6979      	ldr	r1, [r7, #20]
 800d5be:	7e89      	ldrb	r1, [r1, #26]
 800d5c0:	6039      	str	r1, [r7, #0]
 800d5c2:	6979      	ldr	r1, [r7, #20]
 800d5c4:	7ec9      	ldrb	r1, [r1, #27]
 800d5c6:	910b      	str	r1, [sp, #44]	; 0x2c
 800d5c8:	f8d7 c000 	ldr.w	ip, [r7]
 800d5cc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d5d0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d5d4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d5d8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d5dc:	f8cd c020 	str.w	ip, [sp, #32]
 800d5e0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d5e4:	f8cd c01c 	str.w	ip, [sp, #28]
 800d5e8:	6939      	ldr	r1, [r7, #16]
 800d5ea:	9106      	str	r1, [sp, #24]
 800d5ec:	9605      	str	r6, [sp, #20]
 800d5ee:	9204      	str	r2, [sp, #16]
 800d5f0:	9303      	str	r3, [sp, #12]
 800d5f2:	9502      	str	r5, [sp, #8]
 800d5f4:	9401      	str	r4, [sp, #4]
 800d5f6:	9000      	str	r0, [sp, #0]
 800d5f8:	4b09      	ldr	r3, [pc, #36]	; (800d620 <OnBeaconStatusChange+0xc8>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	2002      	movs	r0, #2
 800d600:	f010 fc7c 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d604:	e006      	b.n	800d614 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d606:	4b07      	ldr	r3, [pc, #28]	; (800d624 <OnBeaconStatusChange+0xcc>)
 800d608:	2200      	movs	r2, #0
 800d60a:	2100      	movs	r1, #0
 800d60c:	2002      	movs	r0, #2
 800d60e:	f010 fc75 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d612:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d614:	bf00      	nop
 800d616:	371c      	adds	r7, #28
 800d618:	46bd      	mov	sp, r7
 800d61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d61c:	0801e914 	.word	0x0801e914
 800d620:	0801e92c 	.word	0x0801e92c
 800d624:	0801e9a0 	.word	0x0801e9a0

0800d628 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af02      	add	r7, sp, #8
 800d62e:	4603      	mov	r3, r0
 800d630:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d632:	79fb      	ldrb	r3, [r7, #7]
 800d634:	4a06      	ldr	r2, [pc, #24]	; (800d650 <OnClassChange+0x28>)
 800d636:	5cd3      	ldrb	r3, [r2, r3]
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	4b06      	ldr	r3, [pc, #24]	; (800d654 <OnClassChange+0x2c>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	2100      	movs	r1, #0
 800d640:	2002      	movs	r0, #2
 800d642:	f010 fc5b 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d646:	bf00      	nop
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	0801e9dc 	.word	0x0801e9dc
 800d654:	0801e9c0 	.word	0x0801e9c0

0800d658 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d65c:	2100      	movs	r1, #0
 800d65e:	2001      	movs	r0, #1
 800d660:	f010 f91c 	bl	801d89c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d664:	bf00      	nop
 800d666:	bd80      	pop	{r7, pc}

0800d668 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800d670:	4a0d      	ldr	r2, [pc, #52]	; (800d6a8 <OnTxPeriodicityChanged+0x40>)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800d676:	4b0c      	ldr	r3, [pc, #48]	; (800d6a8 <OnTxPeriodicityChanged+0x40>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d103      	bne.n	800d686 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800d67e:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <OnTxPeriodicityChanged+0x40>)
 800d680:	f242 7210 	movw	r2, #10000	; 0x2710
 800d684:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800d686:	4809      	ldr	r0, [pc, #36]	; (800d6ac <OnTxPeriodicityChanged+0x44>)
 800d688:	f010 fa2e 	bl	801dae8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800d68c:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <OnTxPeriodicityChanged+0x40>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4619      	mov	r1, r3
 800d692:	4806      	ldr	r0, [pc, #24]	; (800d6ac <OnTxPeriodicityChanged+0x44>)
 800d694:	f010 fa98 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800d698:	4804      	ldr	r0, [pc, #16]	; (800d6ac <OnTxPeriodicityChanged+0x44>)
 800d69a:	f010 f9b7 	bl	801da0c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800d69e:	bf00      	nop
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20000094 	.word	0x20000094
 800d6ac:	20000658 	.word	0x20000658

0800d6b0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d6ba:	4a04      	ldr	r2, [pc, #16]	; (800d6cc <OnTxFrameCtrlChanged+0x1c>)
 800d6bc:	79fb      	ldrb	r3, [r7, #7]
 800d6be:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800d6c0:	bf00      	nop
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bc80      	pop	{r7}
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	20000080 	.word	0x20000080

0800d6d0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d6da:	4a04      	ldr	r2, [pc, #16]	; (800d6ec <OnPingSlotPeriodicityChanged+0x1c>)
 800d6dc:	79fb      	ldrb	r3, [r7, #7]
 800d6de:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bc80      	pop	{r7}
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	20000080 	.word	0x20000080

0800d6f0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d6f4:	f002 fcdb 	bl	80100ae <LmHandlerHalt>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d106      	bne.n	800d70c <OnSystemReset+0x1c>
 800d6fe:	f001 ffd1 	bl	800f6a4 <LmHandlerJoinStatus>
 800d702:	4603      	mov	r3, r0
 800d704:	2b01      	cmp	r3, #1
 800d706:	d101      	bne.n	800d70c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800d708:	f7ff fb6e 	bl	800cde8 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800d70c:	bf00      	nop
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <StopJoin>:

static void StopJoin(void)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800d714:	4817      	ldr	r0, [pc, #92]	; (800d774 <StopJoin+0x64>)
 800d716:	f010 f9e7 	bl	801dae8 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800d71a:	f002 fcbb 	bl	8010094 <LmHandlerStop>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d006      	beq.n	800d732 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800d724:	4b14      	ldr	r3, [pc, #80]	; (800d778 <StopJoin+0x68>)
 800d726:	2200      	movs	r2, #0
 800d728:	2100      	movs	r1, #0
 800d72a:	2002      	movs	r0, #2
 800d72c:	f010 fbe6 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800d730:	e01a      	b.n	800d768 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800d732:	4b12      	ldr	r3, [pc, #72]	; (800d77c <StopJoin+0x6c>)
 800d734:	2200      	movs	r2, #0
 800d736:	2100      	movs	r1, #0
 800d738:	2002      	movs	r0, #2
 800d73a:	f010 fbdf 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800d73e:	4b10      	ldr	r3, [pc, #64]	; (800d780 <StopJoin+0x70>)
 800d740:	2201      	movs	r2, #1
 800d742:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800d744:	4b0f      	ldr	r3, [pc, #60]	; (800d784 <StopJoin+0x74>)
 800d746:	2200      	movs	r2, #0
 800d748:	2100      	movs	r1, #0
 800d74a:	2002      	movs	r0, #2
 800d74c:	f010 fbd6 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800d750:	480d      	ldr	r0, [pc, #52]	; (800d788 <StopJoin+0x78>)
 800d752:	f001 fdd5 	bl	800f300 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800d756:	4b0a      	ldr	r3, [pc, #40]	; (800d780 <StopJoin+0x70>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	2101      	movs	r1, #1
 800d75c:	4618      	mov	r0, r3
 800d75e:	f001 ff21 	bl	800f5a4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800d762:	4804      	ldr	r0, [pc, #16]	; (800d774 <StopJoin+0x64>)
 800d764:	f010 f952 	bl	801da0c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800d768:	4808      	ldr	r0, [pc, #32]	; (800d78c <StopJoin+0x7c>)
 800d76a:	f010 f94f 	bl	801da0c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800d76e:	bf00      	nop
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	20000658 	.word	0x20000658
 800d778:	0801e9e0 	.word	0x0801e9e0
 800d77c:	0801ea00 	.word	0x0801ea00
 800d780:	20000030 	.word	0x20000030
 800d784:	0801ea14 	.word	0x0801ea14
 800d788:	20000080 	.word	0x20000080
 800d78c:	20000670 	.word	0x20000670

0800d790 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800d798:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <OnStopJoinTimerEvent+0x20>)
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d103      	bne.n	800d7a8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	2008      	movs	r0, #8
 800d7a4:	f010 f87a 	bl	801d89c <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20000030 	.word	0x20000030

0800d7b4 <StoreContext>:

static void StoreContext(void)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d7ba:	23ff      	movs	r3, #255	; 0xff
 800d7bc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800d7be:	f002 fc83 	bl	80100c8 <LmHandlerNvmDataStore>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800d7c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7ca:	f113 0f08 	cmn.w	r3, #8
 800d7ce:	d106      	bne.n	800d7de <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800d7d0:	4b0a      	ldr	r3, [pc, #40]	; (800d7fc <StoreContext+0x48>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	2002      	movs	r0, #2
 800d7d8:	f010 fb90 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800d7dc:	e00a      	b.n	800d7f4 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800d7de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e6:	d105      	bne.n	800d7f4 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800d7e8:	4b05      	ldr	r3, [pc, #20]	; (800d800 <StoreContext+0x4c>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	2002      	movs	r0, #2
 800d7f0:	f010 fb84 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 800d7f4:	bf00      	nop
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	0801ea34 	.word	0x0801ea34
 800d800:	0801ea4c 	.word	0x0801ea4c

0800d804 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4603      	mov	r3, r0
 800d80c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800d80e:	79fb      	ldrb	r3, [r7, #7]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d106      	bne.n	800d822 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800d814:	4b08      	ldr	r3, [pc, #32]	; (800d838 <OnNvmDataChange+0x34>)
 800d816:	2200      	movs	r2, #0
 800d818:	2100      	movs	r1, #0
 800d81a:	2002      	movs	r0, #2
 800d81c:	f010 fb6e 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800d820:	e005      	b.n	800d82e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800d822:	4b06      	ldr	r3, [pc, #24]	; (800d83c <OnNvmDataChange+0x38>)
 800d824:	2200      	movs	r2, #0
 800d826:	2100      	movs	r1, #0
 800d828:	2002      	movs	r0, #2
 800d82a:	f010 fb67 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 800d82e:	bf00      	nop
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	0801ea64 	.word	0x0801ea64
 800d83c:	0801ea78 	.word	0x0801ea78

0800d840 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800d84a:	f7f7 ffd1 	bl	80057f0 <HAL_FLASH_Unlock>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d11c      	bne.n	800d88e <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800d854:	4b10      	ldr	r3, [pc, #64]	; (800d898 <OnStoreContextRequest+0x58>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	029a      	lsls	r2, r3, #10
 800d85a:	4b10      	ldr	r3, [pc, #64]	; (800d89c <OnStoreContextRequest+0x5c>)
 800d85c:	4013      	ands	r3, r2
 800d85e:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800d862:	fbb2 f1f3 	udiv	r1, r2, r3
 800d866:	fb01 f303 	mul.w	r3, r1, r3
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	0adb      	lsrs	r3, r3, #11
 800d86e:	2200      	movs	r2, #0
 800d870:	2101      	movs	r1, #1
 800d872:	4618      	mov	r0, r3
 800d874:	f7f4 f89d 	bl	80019b2 <FLASH_IF_EraseByPages>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d105      	bne.n	800d88a <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800d87e:	2300      	movs	r3, #0
 800d880:	683a      	ldr	r2, [r7, #0]
 800d882:	6879      	ldr	r1, [r7, #4]
 800d884:	4806      	ldr	r0, [pc, #24]	; (800d8a0 <OnStoreContextRequest+0x60>)
 800d886:	f7f3 ffb3 	bl	80017f0 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800d88a:	f7f7 ffd3 	bl	8005834 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800d88e:	bf00      	nop
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	1fff75e0 	.word	0x1fff75e0
 800d89c:	03fffc00 	.word	0x03fffc00
 800d8a0:	0803f000 	.word	0x0803f000

0800d8a4 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	4903      	ldr	r1, [pc, #12]	; (800d8c4 <OnRestoreContextRequest+0x20>)
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f00f fad4 	bl	801ce64 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800d8bc:	bf00      	nop
 800d8be:	3708      	adds	r7, #8
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	0803f000 	.word	0x0803f000

0800d8c8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800d8cc:	4b15      	ldr	r3, [pc, #84]	; (800d924 <LoraInfo_Init+0x5c>)
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800d8d2:	4b14      	ldr	r3, [pc, #80]	; (800d924 <LoraInfo_Init+0x5c>)
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800d8d8:	4b12      	ldr	r3, [pc, #72]	; (800d924 <LoraInfo_Init+0x5c>)
 800d8da:	2200      	movs	r2, #0
 800d8dc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800d8de:	4b11      	ldr	r3, [pc, #68]	; (800d924 <LoraInfo_Init+0x5c>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800d8e4:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <LoraInfo_Init+0x5c>)
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	f043 0320 	orr.w	r3, r3, #32
 800d8ec:	4a0d      	ldr	r2, [pc, #52]	; (800d924 <LoraInfo_Init+0x5c>)
 800d8ee:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800d8f0:	4b0c      	ldr	r3, [pc, #48]	; (800d924 <LoraInfo_Init+0x5c>)
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10c      	bne.n	800d912 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800d8f8:	4b0b      	ldr	r3, [pc, #44]	; (800d928 <LoraInfo_Init+0x60>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	2000      	movs	r0, #0
 800d900:	f010 fafc 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800d904:	bf00      	nop
 800d906:	f010 fae7 	bl	801ded8 <UTIL_ADV_TRACE_IsBufferEmpty>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d1fa      	bne.n	800d906 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800d910:	e7fe      	b.n	800d910 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800d912:	4b04      	ldr	r3, [pc, #16]	; (800d924 <LoraInfo_Init+0x5c>)
 800d914:	2200      	movs	r2, #0
 800d916:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800d918:	4b02      	ldr	r3, [pc, #8]	; (800d924 <LoraInfo_Init+0x5c>)
 800d91a:	2203      	movs	r2, #3
 800d91c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800d91e:	bf00      	nop
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	200007c4 	.word	0x200007c4
 800d928:	0801ea8c 	.word	0x0801ea8c

0800d92c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800d92c:	b480      	push	{r7}
 800d92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800d930:	4b02      	ldr	r3, [pc, #8]	; (800d93c <LoraInfo_GetPtr+0x10>)
}
 800d932:	4618      	mov	r0, r3
 800d934:	46bd      	mov	sp, r7
 800d936:	bc80      	pop	{r7}
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	200007c4 	.word	0x200007c4

0800d940 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800d944:	f7f5 ffc9 	bl	80038da <BSP_RADIO_Init>
 800d948:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	4603      	mov	r3, r0
 800d956:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800d958:	79fb      	ldrb	r3, [r7, #7]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7f5 ffee 	bl	800393c <BSP_RADIO_ConfigRFSwitch>
 800d960:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d962:	4618      	mov	r0, r3
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d96a:	b580      	push	{r7, lr}
 800d96c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800d96e:	f7f6 f833 	bl	80039d8 <BSP_RADIO_GetTxConfig>
 800d972:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d974:	4618      	mov	r0, r3
 800d976:	bd80      	pop	{r7, pc}

0800d978 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800d97c:	f7f6 f833 	bl	80039e6 <BSP_RADIO_IsTCXO>
 800d980:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d982:	4618      	mov	r0, r3
 800d984:	bd80      	pop	{r7, pc}

0800d986 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800d98a:	f7f6 f833 	bl	80039f4 <BSP_RADIO_IsDCDC>
 800d98e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d990:	4618      	mov	r0, r3
 800d992:	bd80      	pop	{r7, pc}

0800d994 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	4603      	mov	r3, r0
 800d99c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800d99e:	79fb      	ldrb	r3, [r7, #7]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7f6 f82e 	bl	8003a02 <BSP_RADIO_GetRFOMaxPowerConfig>
 800d9a6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	33f1      	adds	r3, #241	; 0xf1
 800d9bc:	2210      	movs	r2, #16
 800d9be:	2100      	movs	r1, #0
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f00b ff83 	bl	80198cc <memset1>
    ctx->M_n = 0;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	22f0      	movs	r2, #240	; 0xf0
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f00b ff79 	bl	80198cc <memset1>
}
 800d9da:	bf00      	nop
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	2110      	movs	r1, #16
 800d9f2:	6838      	ldr	r0, [r7, #0]
 800d9f4:	f000 fe5c 	bl	800e6b0 <lorawan_aes_set_key>
}
 800d9f8:	bf00      	nop
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08c      	sub	sp, #48	; 0x30
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800da12:	2b00      	cmp	r3, #0
 800da14:	f000 80a1 	beq.w	800db5a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800da1e:	f1c3 0310 	rsb	r3, r3, #16
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	4293      	cmp	r3, r2
 800da26:	bf28      	it	cs
 800da28:	4613      	movcs	r3, r2
 800da2a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f203 1201 	addw	r2, r3, #257	; 0x101
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800da38:	4413      	add	r3, r2
 800da3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da3c:	b292      	uxth	r2, r2
 800da3e:	68b9      	ldr	r1, [r7, #8]
 800da40:	4618      	mov	r0, r3
 800da42:	f00b ff08 	bl	8019856 <memcpy1>
        ctx->M_n += mlen;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	441a      	add	r2, r3
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800da5c:	2b0f      	cmp	r3, #15
 800da5e:	f240 808d 	bls.w	800db7c <AES_CMAC_Update+0x17c>
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	429a      	cmp	r2, r3
 800da68:	f000 8088 	beq.w	800db7c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800da6c:	2300      	movs	r3, #0
 800da6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da70:	e015      	b.n	800da9e <AES_CMAC_Update+0x9e>
 800da72:	68fa      	ldr	r2, [r7, #12]
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	4413      	add	r3, r2
 800da78:	33f1      	adds	r3, #241	; 0xf1
 800da7a:	781a      	ldrb	r2, [r3, #0]
 800da7c:	68f9      	ldr	r1, [r7, #12]
 800da7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da80:	440b      	add	r3, r1
 800da82:	f203 1301 	addw	r3, r3, #257	; 0x101
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	4053      	eors	r3, r2
 800da8a:	b2d9      	uxtb	r1, r3
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da90:	4413      	add	r3, r2
 800da92:	33f1      	adds	r3, #241	; 0xf1
 800da94:	460a      	mov	r2, r1
 800da96:	701a      	strb	r2, [r3, #0]
 800da98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9a:	3301      	adds	r3, #1
 800da9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa0:	2b0f      	cmp	r3, #15
 800daa2:	dde6      	ble.n	800da72 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800daaa:	f107 0314 	add.w	r3, r7, #20
 800daae:	2210      	movs	r2, #16
 800dab0:	4618      	mov	r0, r3
 800dab2:	f00b fed0 	bl	8019856 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	f107 0114 	add.w	r1, r7, #20
 800dabc:	f107 0314 	add.w	r3, r7, #20
 800dac0:	4618      	mov	r0, r3
 800dac2:	f000 fed3 	bl	800e86c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	33f1      	adds	r3, #241	; 0xf1
 800daca:	f107 0114 	add.w	r1, r7, #20
 800dace:	2210      	movs	r2, #16
 800dad0:	4618      	mov	r0, r3
 800dad2:	f00b fec0 	bl	8019856 <memcpy1>

        data += mlen;
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	4413      	add	r3, r2
 800dadc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800dae6:	e038      	b.n	800db5a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800dae8:	2300      	movs	r3, #0
 800daea:	62bb      	str	r3, [r7, #40]	; 0x28
 800daec:	e013      	b.n	800db16 <AES_CMAC_Update+0x116>
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	4413      	add	r3, r2
 800daf4:	33f1      	adds	r3, #241	; 0xf1
 800daf6:	781a      	ldrb	r2, [r3, #0]
 800daf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafa:	68b9      	ldr	r1, [r7, #8]
 800dafc:	440b      	add	r3, r1
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	4053      	eors	r3, r2
 800db02:	b2d9      	uxtb	r1, r3
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db08:	4413      	add	r3, r2
 800db0a:	33f1      	adds	r3, #241	; 0xf1
 800db0c:	460a      	mov	r2, r1
 800db0e:	701a      	strb	r2, [r3, #0]
 800db10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db12:	3301      	adds	r3, #1
 800db14:	62bb      	str	r3, [r7, #40]	; 0x28
 800db16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db18:	2b0f      	cmp	r3, #15
 800db1a:	dde8      	ble.n	800daee <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800db22:	f107 0314 	add.w	r3, r7, #20
 800db26:	2210      	movs	r2, #16
 800db28:	4618      	mov	r0, r3
 800db2a:	f00b fe94 	bl	8019856 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	f107 0114 	add.w	r1, r7, #20
 800db34:	f107 0314 	add.w	r3, r7, #20
 800db38:	4618      	mov	r0, r3
 800db3a:	f000 fe97 	bl	800e86c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	33f1      	adds	r3, #241	; 0xf1
 800db42:	f107 0114 	add.w	r1, r7, #20
 800db46:	2210      	movs	r2, #16
 800db48:	4618      	mov	r0, r3
 800db4a:	f00b fe84 	bl	8019856 <memcpy1>

        data += 16;
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	3310      	adds	r3, #16
 800db52:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	3b10      	subs	r3, #16
 800db58:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b10      	cmp	r3, #16
 800db5e:	d8c3      	bhi.n	800dae8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f203 1301 	addw	r3, r3, #257	; 0x101
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	b292      	uxth	r2, r2
 800db6a:	68b9      	ldr	r1, [r7, #8]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f00b fe72 	bl	8019856 <memcpy1>
    ctx->M_n = len;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800db7a:	e000      	b.n	800db7e <AES_CMAC_Update+0x17e>
            return;
 800db7c:	bf00      	nop
}
 800db7e:	3730      	adds	r7, #48	; 0x30
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b092      	sub	sp, #72	; 0x48
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800db8e:	f107 031c 	add.w	r3, r7, #28
 800db92:	2210      	movs	r2, #16
 800db94:	2100      	movs	r1, #0
 800db96:	4618      	mov	r0, r3
 800db98:	f00b fe98 	bl	80198cc <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800db9c:	683a      	ldr	r2, [r7, #0]
 800db9e:	f107 011c 	add.w	r1, r7, #28
 800dba2:	f107 031c 	add.w	r3, r7, #28
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 fe60 	bl	800e86c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800dbac:	7f3b      	ldrb	r3, [r7, #28]
 800dbae:	b25b      	sxtb	r3, r3
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	da30      	bge.n	800dc16 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	647b      	str	r3, [r7, #68]	; 0x44
 800dbb8:	e01b      	b.n	800dbf2 <AES_CMAC_Final+0x6e>
 800dbba:	f107 021c 	add.w	r2, r7, #28
 800dbbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbc0:	4413      	add	r3, r2
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	b25a      	sxtb	r2, r3
 800dbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbca:	3301      	adds	r3, #1
 800dbcc:	3348      	adds	r3, #72	; 0x48
 800dbce:	443b      	add	r3, r7
 800dbd0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dbd4:	09db      	lsrs	r3, r3, #7
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	b25b      	sxtb	r3, r3
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	b25b      	sxtb	r3, r3
 800dbde:	b2d9      	uxtb	r1, r3
 800dbe0:	f107 021c 	add.w	r2, r7, #28
 800dbe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbe6:	4413      	add	r3, r2
 800dbe8:	460a      	mov	r2, r1
 800dbea:	701a      	strb	r2, [r3, #0]
 800dbec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbee:	3301      	adds	r3, #1
 800dbf0:	647b      	str	r3, [r7, #68]	; 0x44
 800dbf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbf4:	2b0e      	cmp	r3, #14
 800dbf6:	dde0      	ble.n	800dbba <AES_CMAC_Final+0x36>
 800dbf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbfc:	005b      	lsls	r3, r3, #1
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800dc04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc08:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dc0c:	43db      	mvns	r3, r3
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dc14:	e027      	b.n	800dc66 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800dc16:	2300      	movs	r3, #0
 800dc18:	643b      	str	r3, [r7, #64]	; 0x40
 800dc1a:	e01b      	b.n	800dc54 <AES_CMAC_Final+0xd0>
 800dc1c:	f107 021c 	add.w	r2, r7, #28
 800dc20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc22:	4413      	add	r3, r2
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	b25a      	sxtb	r2, r3
 800dc2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	3348      	adds	r3, #72	; 0x48
 800dc30:	443b      	add	r3, r7
 800dc32:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dc36:	09db      	lsrs	r3, r3, #7
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	b25b      	sxtb	r3, r3
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	b25b      	sxtb	r3, r3
 800dc40:	b2d9      	uxtb	r1, r3
 800dc42:	f107 021c 	add.w	r2, r7, #28
 800dc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc48:	4413      	add	r3, r2
 800dc4a:	460a      	mov	r2, r1
 800dc4c:	701a      	strb	r2, [r3, #0]
 800dc4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc50:	3301      	adds	r3, #1
 800dc52:	643b      	str	r3, [r7, #64]	; 0x40
 800dc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc56:	2b0e      	cmp	r3, #14
 800dc58:	dde0      	ble.n	800dc1c <AES_CMAC_Final+0x98>
 800dc5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc5e:	005b      	lsls	r3, r3, #1
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dc6c:	2b10      	cmp	r3, #16
 800dc6e:	d11d      	bne.n	800dcac <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800dc70:	2300      	movs	r3, #0
 800dc72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc74:	e016      	b.n	800dca4 <AES_CMAC_Final+0x120>
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc7a:	4413      	add	r3, r2
 800dc7c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dc80:	781a      	ldrb	r2, [r3, #0]
 800dc82:	f107 011c 	add.w	r1, r7, #28
 800dc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc88:	440b      	add	r3, r1
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	4053      	eors	r3, r2
 800dc8e:	b2d9      	uxtb	r1, r3
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc94:	4413      	add	r3, r2
 800dc96:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dc9a:	460a      	mov	r2, r1
 800dc9c:	701a      	strb	r2, [r3, #0]
 800dc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dca0:	3301      	adds	r3, #1
 800dca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dca6:	2b0f      	cmp	r3, #15
 800dca8:	dde5      	ble.n	800dc76 <AES_CMAC_Final+0xf2>
 800dcaa:	e096      	b.n	800ddda <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800dcac:	7f3b      	ldrb	r3, [r7, #28]
 800dcae:	b25b      	sxtb	r3, r3
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	da30      	bge.n	800dd16 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800dcb8:	e01b      	b.n	800dcf2 <AES_CMAC_Final+0x16e>
 800dcba:	f107 021c 	add.w	r2, r7, #28
 800dcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc0:	4413      	add	r3, r2
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	005b      	lsls	r3, r3, #1
 800dcc6:	b25a      	sxtb	r2, r3
 800dcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcca:	3301      	adds	r3, #1
 800dccc:	3348      	adds	r3, #72	; 0x48
 800dcce:	443b      	add	r3, r7
 800dcd0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dcd4:	09db      	lsrs	r3, r3, #7
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	b25b      	sxtb	r3, r3
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	b25b      	sxtb	r3, r3
 800dcde:	b2d9      	uxtb	r1, r3
 800dce0:	f107 021c 	add.w	r2, r7, #28
 800dce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce6:	4413      	add	r3, r2
 800dce8:	460a      	mov	r2, r1
 800dcea:	701a      	strb	r2, [r3, #0]
 800dcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcee:	3301      	adds	r3, #1
 800dcf0:	63bb      	str	r3, [r7, #56]	; 0x38
 800dcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf4:	2b0e      	cmp	r3, #14
 800dcf6:	dde0      	ble.n	800dcba <AES_CMAC_Final+0x136>
 800dcf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800dd04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd08:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dd0c:	43db      	mvns	r3, r3
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd14:	e027      	b.n	800dd66 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800dd16:	2300      	movs	r3, #0
 800dd18:	637b      	str	r3, [r7, #52]	; 0x34
 800dd1a:	e01b      	b.n	800dd54 <AES_CMAC_Final+0x1d0>
 800dd1c:	f107 021c 	add.w	r2, r7, #28
 800dd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd22:	4413      	add	r3, r2
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	005b      	lsls	r3, r3, #1
 800dd28:	b25a      	sxtb	r2, r3
 800dd2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	3348      	adds	r3, #72	; 0x48
 800dd30:	443b      	add	r3, r7
 800dd32:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dd36:	09db      	lsrs	r3, r3, #7
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	b25b      	sxtb	r3, r3
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	b25b      	sxtb	r3, r3
 800dd40:	b2d9      	uxtb	r1, r3
 800dd42:	f107 021c 	add.w	r2, r7, #28
 800dd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd48:	4413      	add	r3, r2
 800dd4a:	460a      	mov	r2, r1
 800dd4c:	701a      	strb	r2, [r3, #0]
 800dd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd50:	3301      	adds	r3, #1
 800dd52:	637b      	str	r3, [r7, #52]	; 0x34
 800dd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd56:	2b0e      	cmp	r3, #14
 800dd58:	dde0      	ble.n	800dd1c <AES_CMAC_Final+0x198>
 800dd5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd5e:	005b      	lsls	r3, r3, #1
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd6c:	683a      	ldr	r2, [r7, #0]
 800dd6e:	4413      	add	r3, r2
 800dd70:	2280      	movs	r2, #128	; 0x80
 800dd72:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dd76:	e007      	b.n	800dd88 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd7e:	683a      	ldr	r2, [r7, #0]
 800dd80:	4413      	add	r3, r2
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd8e:	1c5a      	adds	r2, r3, #1
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd9c:	2b0f      	cmp	r3, #15
 800dd9e:	d9eb      	bls.n	800dd78 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800dda0:	2300      	movs	r3, #0
 800dda2:	633b      	str	r3, [r7, #48]	; 0x30
 800dda4:	e016      	b.n	800ddd4 <AES_CMAC_Final+0x250>
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	4413      	add	r3, r2
 800ddac:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ddb0:	781a      	ldrb	r2, [r3, #0]
 800ddb2:	f107 011c 	add.w	r1, r7, #28
 800ddb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb8:	440b      	add	r3, r1
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	4053      	eors	r3, r2
 800ddbe:	b2d9      	uxtb	r1, r3
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ddca:	460a      	mov	r2, r1
 800ddcc:	701a      	strb	r2, [r3, #0]
 800ddce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	633b      	str	r3, [r7, #48]	; 0x30
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd6:	2b0f      	cmp	r3, #15
 800ddd8:	dde5      	ble.n	800dda6 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800ddda:	2300      	movs	r3, #0
 800dddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddde:	e015      	b.n	800de0c <AES_CMAC_Final+0x288>
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	4413      	add	r3, r2
 800dde6:	33f1      	adds	r3, #241	; 0xf1
 800dde8:	781a      	ldrb	r2, [r3, #0]
 800ddea:	6839      	ldr	r1, [r7, #0]
 800ddec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddee:	440b      	add	r3, r1
 800ddf0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	4053      	eors	r3, r2
 800ddf8:	b2d9      	uxtb	r1, r3
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfe:	4413      	add	r3, r2
 800de00:	33f1      	adds	r3, #241	; 0xf1
 800de02:	460a      	mov	r2, r1
 800de04:	701a      	strb	r2, [r3, #0]
 800de06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de08:	3301      	adds	r3, #1
 800de0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	2b0f      	cmp	r3, #15
 800de10:	dde6      	ble.n	800dde0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800de18:	f107 030c 	add.w	r3, r7, #12
 800de1c:	2210      	movs	r2, #16
 800de1e:	4618      	mov	r0, r3
 800de20:	f00b fd19 	bl	8019856 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	f107 030c 	add.w	r3, r7, #12
 800de2a:	6879      	ldr	r1, [r7, #4]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f000 fd1d 	bl	800e86c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800de32:	f107 031c 	add.w	r3, r7, #28
 800de36:	2210      	movs	r2, #16
 800de38:	2100      	movs	r1, #0
 800de3a:	4618      	mov	r0, r3
 800de3c:	f00b fd46 	bl	80198cc <memset1>
}
 800de40:	bf00      	nop
 800de42:	3748      	adds	r7, #72	; 0x48
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	781a      	ldrb	r2, [r3, #0]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	3301      	adds	r3, #1
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	7852      	ldrb	r2, [r2, #1]
 800de62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3302      	adds	r3, #2
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	7892      	ldrb	r2, [r2, #2]
 800de6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	3303      	adds	r3, #3
 800de72:	683a      	ldr	r2, [r7, #0]
 800de74:	78d2      	ldrb	r2, [r2, #3]
 800de76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	3304      	adds	r3, #4
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	7912      	ldrb	r2, [r2, #4]
 800de80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	3305      	adds	r3, #5
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	7952      	ldrb	r2, [r2, #5]
 800de8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	3306      	adds	r3, #6
 800de90:	683a      	ldr	r2, [r7, #0]
 800de92:	7992      	ldrb	r2, [r2, #6]
 800de94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	3307      	adds	r3, #7
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	79d2      	ldrb	r2, [r2, #7]
 800de9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	3308      	adds	r3, #8
 800dea4:	683a      	ldr	r2, [r7, #0]
 800dea6:	7a12      	ldrb	r2, [r2, #8]
 800dea8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	3309      	adds	r3, #9
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	7a52      	ldrb	r2, [r2, #9]
 800deb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	330a      	adds	r3, #10
 800deb8:	683a      	ldr	r2, [r7, #0]
 800deba:	7a92      	ldrb	r2, [r2, #10]
 800debc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	330b      	adds	r3, #11
 800dec2:	683a      	ldr	r2, [r7, #0]
 800dec4:	7ad2      	ldrb	r2, [r2, #11]
 800dec6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	330c      	adds	r3, #12
 800decc:	683a      	ldr	r2, [r7, #0]
 800dece:	7b12      	ldrb	r2, [r2, #12]
 800ded0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	330d      	adds	r3, #13
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	7b52      	ldrb	r2, [r2, #13]
 800deda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	330e      	adds	r3, #14
 800dee0:	683a      	ldr	r2, [r7, #0]
 800dee2:	7b92      	ldrb	r2, [r2, #14]
 800dee4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	330f      	adds	r3, #15
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	7bd2      	ldrb	r2, [r2, #15]
 800deee:	701a      	strb	r2, [r3, #0]
#endif
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	bc80      	pop	{r7}
 800def8:	4770      	bx	lr

0800defa <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800defa:	b480      	push	{r7}
 800defc:	b085      	sub	sp, #20
 800defe:	af00      	add	r7, sp, #0
 800df00:	60f8      	str	r0, [r7, #12]
 800df02:	60b9      	str	r1, [r7, #8]
 800df04:	4613      	mov	r3, r2
 800df06:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800df08:	e007      	b.n	800df1a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800df0a:	68ba      	ldr	r2, [r7, #8]
 800df0c:	1c53      	adds	r3, r2, #1
 800df0e:	60bb      	str	r3, [r7, #8]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	1c59      	adds	r1, r3, #1
 800df14:	60f9      	str	r1, [r7, #12]
 800df16:	7812      	ldrb	r2, [r2, #0]
 800df18:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	1e5a      	subs	r2, r3, #1
 800df1e:	71fa      	strb	r2, [r7, #7]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1f2      	bne.n	800df0a <copy_block_nn+0x10>
}
 800df24:	bf00      	nop
 800df26:	bf00      	nop
 800df28:	3714      	adds	r7, #20
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bc80      	pop	{r7}
 800df2e:	4770      	bx	lr

0800df30 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	781a      	ldrb	r2, [r3, #0]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	4053      	eors	r3, r2
 800df44:	b2da      	uxtb	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	3301      	adds	r3, #1
 800df4e:	7819      	ldrb	r1, [r3, #0]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	3301      	adds	r3, #1
 800df54:	781a      	ldrb	r2, [r3, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	3301      	adds	r3, #1
 800df5a:	404a      	eors	r2, r1
 800df5c:	b2d2      	uxtb	r2, r2
 800df5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	3302      	adds	r3, #2
 800df64:	7819      	ldrb	r1, [r3, #0]
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	3302      	adds	r3, #2
 800df6a:	781a      	ldrb	r2, [r3, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	3302      	adds	r3, #2
 800df70:	404a      	eors	r2, r1
 800df72:	b2d2      	uxtb	r2, r2
 800df74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	3303      	adds	r3, #3
 800df7a:	7819      	ldrb	r1, [r3, #0]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	3303      	adds	r3, #3
 800df80:	781a      	ldrb	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	3303      	adds	r3, #3
 800df86:	404a      	eors	r2, r1
 800df88:	b2d2      	uxtb	r2, r2
 800df8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3304      	adds	r3, #4
 800df90:	7819      	ldrb	r1, [r3, #0]
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	3304      	adds	r3, #4
 800df96:	781a      	ldrb	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	3304      	adds	r3, #4
 800df9c:	404a      	eors	r2, r1
 800df9e:	b2d2      	uxtb	r2, r2
 800dfa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	3305      	adds	r3, #5
 800dfa6:	7819      	ldrb	r1, [r3, #0]
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	3305      	adds	r3, #5
 800dfac:	781a      	ldrb	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	3305      	adds	r3, #5
 800dfb2:	404a      	eors	r2, r1
 800dfb4:	b2d2      	uxtb	r2, r2
 800dfb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3306      	adds	r3, #6
 800dfbc:	7819      	ldrb	r1, [r3, #0]
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	3306      	adds	r3, #6
 800dfc2:	781a      	ldrb	r2, [r3, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3306      	adds	r3, #6
 800dfc8:	404a      	eors	r2, r1
 800dfca:	b2d2      	uxtb	r2, r2
 800dfcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	3307      	adds	r3, #7
 800dfd2:	7819      	ldrb	r1, [r3, #0]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	3307      	adds	r3, #7
 800dfd8:	781a      	ldrb	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	3307      	adds	r3, #7
 800dfde:	404a      	eors	r2, r1
 800dfe0:	b2d2      	uxtb	r2, r2
 800dfe2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	7819      	ldrb	r1, [r3, #0]
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	3308      	adds	r3, #8
 800dfee:	781a      	ldrb	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	3308      	adds	r3, #8
 800dff4:	404a      	eors	r2, r1
 800dff6:	b2d2      	uxtb	r2, r2
 800dff8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	3309      	adds	r3, #9
 800dffe:	7819      	ldrb	r1, [r3, #0]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	3309      	adds	r3, #9
 800e004:	781a      	ldrb	r2, [r3, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	3309      	adds	r3, #9
 800e00a:	404a      	eors	r2, r1
 800e00c:	b2d2      	uxtb	r2, r2
 800e00e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	330a      	adds	r3, #10
 800e014:	7819      	ldrb	r1, [r3, #0]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	330a      	adds	r3, #10
 800e01a:	781a      	ldrb	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	330a      	adds	r3, #10
 800e020:	404a      	eors	r2, r1
 800e022:	b2d2      	uxtb	r2, r2
 800e024:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	330b      	adds	r3, #11
 800e02a:	7819      	ldrb	r1, [r3, #0]
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	330b      	adds	r3, #11
 800e030:	781a      	ldrb	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	330b      	adds	r3, #11
 800e036:	404a      	eors	r2, r1
 800e038:	b2d2      	uxtb	r2, r2
 800e03a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	330c      	adds	r3, #12
 800e040:	7819      	ldrb	r1, [r3, #0]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	330c      	adds	r3, #12
 800e046:	781a      	ldrb	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	330c      	adds	r3, #12
 800e04c:	404a      	eors	r2, r1
 800e04e:	b2d2      	uxtb	r2, r2
 800e050:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	330d      	adds	r3, #13
 800e056:	7819      	ldrb	r1, [r3, #0]
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	330d      	adds	r3, #13
 800e05c:	781a      	ldrb	r2, [r3, #0]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	330d      	adds	r3, #13
 800e062:	404a      	eors	r2, r1
 800e064:	b2d2      	uxtb	r2, r2
 800e066:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	330e      	adds	r3, #14
 800e06c:	7819      	ldrb	r1, [r3, #0]
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	330e      	adds	r3, #14
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	330e      	adds	r3, #14
 800e078:	404a      	eors	r2, r1
 800e07a:	b2d2      	uxtb	r2, r2
 800e07c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	330f      	adds	r3, #15
 800e082:	7819      	ldrb	r1, [r3, #0]
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	330f      	adds	r3, #15
 800e088:	781a      	ldrb	r2, [r3, #0]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	330f      	adds	r3, #15
 800e08e:	404a      	eors	r2, r1
 800e090:	b2d2      	uxtb	r2, r2
 800e092:	701a      	strb	r2, [r3, #0]
#endif
}
 800e094:	bf00      	nop
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	bc80      	pop	{r7}
 800e09c:	4770      	bx	lr

0800e09e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e09e:	b480      	push	{r7}
 800e0a0:	b085      	sub	sp, #20
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	60f8      	str	r0, [r7, #12]
 800e0a6:	60b9      	str	r1, [r7, #8]
 800e0a8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	781a      	ldrb	r2, [r3, #0]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	4053      	eors	r3, r2
 800e0b4:	b2da      	uxtb	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	7819      	ldrb	r1, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	781a      	ldrb	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	404a      	eors	r2, r1
 800e0cc:	b2d2      	uxtb	r2, r2
 800e0ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	3302      	adds	r3, #2
 800e0d4:	7819      	ldrb	r1, [r3, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	3302      	adds	r3, #2
 800e0da:	781a      	ldrb	r2, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3302      	adds	r3, #2
 800e0e0:	404a      	eors	r2, r1
 800e0e2:	b2d2      	uxtb	r2, r2
 800e0e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	3303      	adds	r3, #3
 800e0ea:	7819      	ldrb	r1, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	3303      	adds	r3, #3
 800e0f0:	781a      	ldrb	r2, [r3, #0]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	3303      	adds	r3, #3
 800e0f6:	404a      	eors	r2, r1
 800e0f8:	b2d2      	uxtb	r2, r2
 800e0fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	3304      	adds	r3, #4
 800e100:	7819      	ldrb	r1, [r3, #0]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	3304      	adds	r3, #4
 800e106:	781a      	ldrb	r2, [r3, #0]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	3304      	adds	r3, #4
 800e10c:	404a      	eors	r2, r1
 800e10e:	b2d2      	uxtb	r2, r2
 800e110:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	3305      	adds	r3, #5
 800e116:	7819      	ldrb	r1, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	3305      	adds	r3, #5
 800e11c:	781a      	ldrb	r2, [r3, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3305      	adds	r3, #5
 800e122:	404a      	eors	r2, r1
 800e124:	b2d2      	uxtb	r2, r2
 800e126:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	3306      	adds	r3, #6
 800e12c:	7819      	ldrb	r1, [r3, #0]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	3306      	adds	r3, #6
 800e132:	781a      	ldrb	r2, [r3, #0]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	3306      	adds	r3, #6
 800e138:	404a      	eors	r2, r1
 800e13a:	b2d2      	uxtb	r2, r2
 800e13c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	3307      	adds	r3, #7
 800e142:	7819      	ldrb	r1, [r3, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	3307      	adds	r3, #7
 800e148:	781a      	ldrb	r2, [r3, #0]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	3307      	adds	r3, #7
 800e14e:	404a      	eors	r2, r1
 800e150:	b2d2      	uxtb	r2, r2
 800e152:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	3308      	adds	r3, #8
 800e158:	7819      	ldrb	r1, [r3, #0]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	3308      	adds	r3, #8
 800e15e:	781a      	ldrb	r2, [r3, #0]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	3308      	adds	r3, #8
 800e164:	404a      	eors	r2, r1
 800e166:	b2d2      	uxtb	r2, r2
 800e168:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	3309      	adds	r3, #9
 800e16e:	7819      	ldrb	r1, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	3309      	adds	r3, #9
 800e174:	781a      	ldrb	r2, [r3, #0]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	3309      	adds	r3, #9
 800e17a:	404a      	eors	r2, r1
 800e17c:	b2d2      	uxtb	r2, r2
 800e17e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	330a      	adds	r3, #10
 800e184:	7819      	ldrb	r1, [r3, #0]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	330a      	adds	r3, #10
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	330a      	adds	r3, #10
 800e190:	404a      	eors	r2, r1
 800e192:	b2d2      	uxtb	r2, r2
 800e194:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	330b      	adds	r3, #11
 800e19a:	7819      	ldrb	r1, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	330b      	adds	r3, #11
 800e1a0:	781a      	ldrb	r2, [r3, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	330b      	adds	r3, #11
 800e1a6:	404a      	eors	r2, r1
 800e1a8:	b2d2      	uxtb	r2, r2
 800e1aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	330c      	adds	r3, #12
 800e1b0:	7819      	ldrb	r1, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	330c      	adds	r3, #12
 800e1b6:	781a      	ldrb	r2, [r3, #0]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	330c      	adds	r3, #12
 800e1bc:	404a      	eors	r2, r1
 800e1be:	b2d2      	uxtb	r2, r2
 800e1c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	330d      	adds	r3, #13
 800e1c6:	7819      	ldrb	r1, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	330d      	adds	r3, #13
 800e1cc:	781a      	ldrb	r2, [r3, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	330d      	adds	r3, #13
 800e1d2:	404a      	eors	r2, r1
 800e1d4:	b2d2      	uxtb	r2, r2
 800e1d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	330e      	adds	r3, #14
 800e1dc:	7819      	ldrb	r1, [r3, #0]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	330e      	adds	r3, #14
 800e1e2:	781a      	ldrb	r2, [r3, #0]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	330e      	adds	r3, #14
 800e1e8:	404a      	eors	r2, r1
 800e1ea:	b2d2      	uxtb	r2, r2
 800e1ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	330f      	adds	r3, #15
 800e1f2:	7819      	ldrb	r1, [r3, #0]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	330f      	adds	r3, #15
 800e1f8:	781a      	ldrb	r2, [r3, #0]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	330f      	adds	r3, #15
 800e1fe:	404a      	eors	r2, r1
 800e200:	b2d2      	uxtb	r2, r2
 800e202:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e204:	bf00      	nop
 800e206:	3714      	adds	r7, #20
 800e208:	46bd      	mov	sp, r7
 800e20a:	bc80      	pop	{r7}
 800e20c:	4770      	bx	lr

0800e20e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b082      	sub	sp, #8
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
 800e216:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e218:	6839      	ldr	r1, [r7, #0]
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7ff fe88 	bl	800df30 <xor_block>
}
 800e220:	bf00      	nop
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	461a      	mov	r2, r3
 800e236:	4b48      	ldr	r3, [pc, #288]	; (800e358 <shift_sub_rows+0x130>)
 800e238:	5c9a      	ldrb	r2, [r3, r2]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	701a      	strb	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	3304      	adds	r3, #4
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	4619      	mov	r1, r3
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3304      	adds	r3, #4
 800e24a:	4a43      	ldr	r2, [pc, #268]	; (800e358 <shift_sub_rows+0x130>)
 800e24c:	5c52      	ldrb	r2, [r2, r1]
 800e24e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	3308      	adds	r3, #8
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	4619      	mov	r1, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	3308      	adds	r3, #8
 800e25c:	4a3e      	ldr	r2, [pc, #248]	; (800e358 <shift_sub_rows+0x130>)
 800e25e:	5c52      	ldrb	r2, [r2, r1]
 800e260:	701a      	strb	r2, [r3, #0]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	330c      	adds	r3, #12
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	4619      	mov	r1, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	330c      	adds	r3, #12
 800e26e:	4a3a      	ldr	r2, [pc, #232]	; (800e358 <shift_sub_rows+0x130>)
 800e270:	5c52      	ldrb	r2, [r2, r1]
 800e272:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	785b      	ldrb	r3, [r3, #1]
 800e278:	73fb      	strb	r3, [r7, #15]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	3305      	adds	r3, #5
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	4619      	mov	r1, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	3301      	adds	r3, #1
 800e286:	4a34      	ldr	r2, [pc, #208]	; (800e358 <shift_sub_rows+0x130>)
 800e288:	5c52      	ldrb	r2, [r2, r1]
 800e28a:	701a      	strb	r2, [r3, #0]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	3309      	adds	r3, #9
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	4619      	mov	r1, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	3305      	adds	r3, #5
 800e298:	4a2f      	ldr	r2, [pc, #188]	; (800e358 <shift_sub_rows+0x130>)
 800e29a:	5c52      	ldrb	r2, [r2, r1]
 800e29c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	330d      	adds	r3, #13
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	3309      	adds	r3, #9
 800e2aa:	4a2b      	ldr	r2, [pc, #172]	; (800e358 <shift_sub_rows+0x130>)
 800e2ac:	5c52      	ldrb	r2, [r2, r1]
 800e2ae:	701a      	strb	r2, [r3, #0]
 800e2b0:	7bfa      	ldrb	r2, [r7, #15]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	330d      	adds	r3, #13
 800e2b6:	4928      	ldr	r1, [pc, #160]	; (800e358 <shift_sub_rows+0x130>)
 800e2b8:	5c8a      	ldrb	r2, [r1, r2]
 800e2ba:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	789b      	ldrb	r3, [r3, #2]
 800e2c0:	73fb      	strb	r3, [r7, #15]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	330a      	adds	r3, #10
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	3302      	adds	r3, #2
 800e2ce:	4a22      	ldr	r2, [pc, #136]	; (800e358 <shift_sub_rows+0x130>)
 800e2d0:	5c52      	ldrb	r2, [r2, r1]
 800e2d2:	701a      	strb	r2, [r3, #0]
 800e2d4:	7bfa      	ldrb	r2, [r7, #15]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	330a      	adds	r3, #10
 800e2da:	491f      	ldr	r1, [pc, #124]	; (800e358 <shift_sub_rows+0x130>)
 800e2dc:	5c8a      	ldrb	r2, [r1, r2]
 800e2de:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	799b      	ldrb	r3, [r3, #6]
 800e2e4:	73fb      	strb	r3, [r7, #15]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	330e      	adds	r3, #14
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	3306      	adds	r3, #6
 800e2f2:	4a19      	ldr	r2, [pc, #100]	; (800e358 <shift_sub_rows+0x130>)
 800e2f4:	5c52      	ldrb	r2, [r2, r1]
 800e2f6:	701a      	strb	r2, [r3, #0]
 800e2f8:	7bfa      	ldrb	r2, [r7, #15]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	330e      	adds	r3, #14
 800e2fe:	4916      	ldr	r1, [pc, #88]	; (800e358 <shift_sub_rows+0x130>)
 800e300:	5c8a      	ldrb	r2, [r1, r2]
 800e302:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	7bdb      	ldrb	r3, [r3, #15]
 800e308:	73fb      	strb	r3, [r7, #15]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	330b      	adds	r3, #11
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	4619      	mov	r1, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	330f      	adds	r3, #15
 800e316:	4a10      	ldr	r2, [pc, #64]	; (800e358 <shift_sub_rows+0x130>)
 800e318:	5c52      	ldrb	r2, [r2, r1]
 800e31a:	701a      	strb	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	3307      	adds	r3, #7
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	4619      	mov	r1, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	330b      	adds	r3, #11
 800e328:	4a0b      	ldr	r2, [pc, #44]	; (800e358 <shift_sub_rows+0x130>)
 800e32a:	5c52      	ldrb	r2, [r2, r1]
 800e32c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	3303      	adds	r3, #3
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	4619      	mov	r1, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	3307      	adds	r3, #7
 800e33a:	4a07      	ldr	r2, [pc, #28]	; (800e358 <shift_sub_rows+0x130>)
 800e33c:	5c52      	ldrb	r2, [r2, r1]
 800e33e:	701a      	strb	r2, [r3, #0]
 800e340:	7bfa      	ldrb	r2, [r7, #15]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	3303      	adds	r3, #3
 800e346:	4904      	ldr	r1, [pc, #16]	; (800e358 <shift_sub_rows+0x130>)
 800e348:	5c8a      	ldrb	r2, [r1, r2]
 800e34a:	701a      	strb	r2, [r3, #0]
}
 800e34c:	bf00      	nop
 800e34e:	3714      	adds	r7, #20
 800e350:	46bd      	mov	sp, r7
 800e352:	bc80      	pop	{r7}
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	0801f05c 	.word	0x0801f05c

0800e35c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b086      	sub	sp, #24
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e364:	f107 0308 	add.w	r3, r7, #8
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7ff fd6c 	bl	800de48 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e370:	7a3b      	ldrb	r3, [r7, #8]
 800e372:	461a      	mov	r2, r3
 800e374:	4b9a      	ldr	r3, [pc, #616]	; (800e5e0 <mix_sub_columns+0x284>)
 800e376:	5c9a      	ldrb	r2, [r3, r2]
 800e378:	7b7b      	ldrb	r3, [r7, #13]
 800e37a:	4619      	mov	r1, r3
 800e37c:	4b99      	ldr	r3, [pc, #612]	; (800e5e4 <mix_sub_columns+0x288>)
 800e37e:	5c5b      	ldrb	r3, [r3, r1]
 800e380:	4053      	eors	r3, r2
 800e382:	b2da      	uxtb	r2, r3
 800e384:	7cbb      	ldrb	r3, [r7, #18]
 800e386:	4619      	mov	r1, r3
 800e388:	4b97      	ldr	r3, [pc, #604]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e38a:	5c5b      	ldrb	r3, [r3, r1]
 800e38c:	4053      	eors	r3, r2
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	4619      	mov	r1, r3
 800e394:	4b94      	ldr	r3, [pc, #592]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e396:	5c5b      	ldrb	r3, [r3, r1]
 800e398:	4053      	eors	r3, r2
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e3a0:	7a3b      	ldrb	r3, [r7, #8]
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	4b90      	ldr	r3, [pc, #576]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e3a6:	5c9a      	ldrb	r2, [r3, r2]
 800e3a8:	7b7b      	ldrb	r3, [r7, #13]
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	4b8c      	ldr	r3, [pc, #560]	; (800e5e0 <mix_sub_columns+0x284>)
 800e3ae:	5c5b      	ldrb	r3, [r3, r1]
 800e3b0:	4053      	eors	r3, r2
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	7cbb      	ldrb	r3, [r7, #18]
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	4b8a      	ldr	r3, [pc, #552]	; (800e5e4 <mix_sub_columns+0x288>)
 800e3ba:	5c5b      	ldrb	r3, [r3, r1]
 800e3bc:	4053      	eors	r3, r2
 800e3be:	b2d9      	uxtb	r1, r3
 800e3c0:	7dfb      	ldrb	r3, [r7, #23]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	4b88      	ldr	r3, [pc, #544]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e3c6:	5c9a      	ldrb	r2, [r3, r2]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	404a      	eors	r2, r1
 800e3ce:	b2d2      	uxtb	r2, r2
 800e3d0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e3d2:	7a3b      	ldrb	r3, [r7, #8]
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	4b84      	ldr	r3, [pc, #528]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e3d8:	5c9a      	ldrb	r2, [r3, r2]
 800e3da:	7b7b      	ldrb	r3, [r7, #13]
 800e3dc:	4619      	mov	r1, r3
 800e3de:	4b82      	ldr	r3, [pc, #520]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e3e0:	5c5b      	ldrb	r3, [r3, r1]
 800e3e2:	4053      	eors	r3, r2
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	7cbb      	ldrb	r3, [r7, #18]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4b7d      	ldr	r3, [pc, #500]	; (800e5e0 <mix_sub_columns+0x284>)
 800e3ec:	5c5b      	ldrb	r3, [r3, r1]
 800e3ee:	4053      	eors	r3, r2
 800e3f0:	b2d9      	uxtb	r1, r3
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	4b7b      	ldr	r3, [pc, #492]	; (800e5e4 <mix_sub_columns+0x288>)
 800e3f8:	5c9a      	ldrb	r2, [r3, r2]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	3302      	adds	r3, #2
 800e3fe:	404a      	eors	r2, r1
 800e400:	b2d2      	uxtb	r2, r2
 800e402:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e404:	7a3b      	ldrb	r3, [r7, #8]
 800e406:	461a      	mov	r2, r3
 800e408:	4b76      	ldr	r3, [pc, #472]	; (800e5e4 <mix_sub_columns+0x288>)
 800e40a:	5c9a      	ldrb	r2, [r3, r2]
 800e40c:	7b7b      	ldrb	r3, [r7, #13]
 800e40e:	4619      	mov	r1, r3
 800e410:	4b75      	ldr	r3, [pc, #468]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e412:	5c5b      	ldrb	r3, [r3, r1]
 800e414:	4053      	eors	r3, r2
 800e416:	b2da      	uxtb	r2, r3
 800e418:	7cbb      	ldrb	r3, [r7, #18]
 800e41a:	4619      	mov	r1, r3
 800e41c:	4b72      	ldr	r3, [pc, #456]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e41e:	5c5b      	ldrb	r3, [r3, r1]
 800e420:	4053      	eors	r3, r2
 800e422:	b2d9      	uxtb	r1, r3
 800e424:	7dfb      	ldrb	r3, [r7, #23]
 800e426:	461a      	mov	r2, r3
 800e428:	4b6d      	ldr	r3, [pc, #436]	; (800e5e0 <mix_sub_columns+0x284>)
 800e42a:	5c9a      	ldrb	r2, [r3, r2]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3303      	adds	r3, #3
 800e430:	404a      	eors	r2, r1
 800e432:	b2d2      	uxtb	r2, r2
 800e434:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e436:	7b3b      	ldrb	r3, [r7, #12]
 800e438:	461a      	mov	r2, r3
 800e43a:	4b69      	ldr	r3, [pc, #420]	; (800e5e0 <mix_sub_columns+0x284>)
 800e43c:	5c9a      	ldrb	r2, [r3, r2]
 800e43e:	7c7b      	ldrb	r3, [r7, #17]
 800e440:	4619      	mov	r1, r3
 800e442:	4b68      	ldr	r3, [pc, #416]	; (800e5e4 <mix_sub_columns+0x288>)
 800e444:	5c5b      	ldrb	r3, [r3, r1]
 800e446:	4053      	eors	r3, r2
 800e448:	b2da      	uxtb	r2, r3
 800e44a:	7dbb      	ldrb	r3, [r7, #22]
 800e44c:	4619      	mov	r1, r3
 800e44e:	4b66      	ldr	r3, [pc, #408]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e450:	5c5b      	ldrb	r3, [r3, r1]
 800e452:	4053      	eors	r3, r2
 800e454:	b2d9      	uxtb	r1, r3
 800e456:	7afb      	ldrb	r3, [r7, #11]
 800e458:	461a      	mov	r2, r3
 800e45a:	4b63      	ldr	r3, [pc, #396]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e45c:	5c9a      	ldrb	r2, [r3, r2]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	3304      	adds	r3, #4
 800e462:	404a      	eors	r2, r1
 800e464:	b2d2      	uxtb	r2, r2
 800e466:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e468:	7b3b      	ldrb	r3, [r7, #12]
 800e46a:	461a      	mov	r2, r3
 800e46c:	4b5e      	ldr	r3, [pc, #376]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e46e:	5c9a      	ldrb	r2, [r3, r2]
 800e470:	7c7b      	ldrb	r3, [r7, #17]
 800e472:	4619      	mov	r1, r3
 800e474:	4b5a      	ldr	r3, [pc, #360]	; (800e5e0 <mix_sub_columns+0x284>)
 800e476:	5c5b      	ldrb	r3, [r3, r1]
 800e478:	4053      	eors	r3, r2
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	7dbb      	ldrb	r3, [r7, #22]
 800e47e:	4619      	mov	r1, r3
 800e480:	4b58      	ldr	r3, [pc, #352]	; (800e5e4 <mix_sub_columns+0x288>)
 800e482:	5c5b      	ldrb	r3, [r3, r1]
 800e484:	4053      	eors	r3, r2
 800e486:	b2d9      	uxtb	r1, r3
 800e488:	7afb      	ldrb	r3, [r7, #11]
 800e48a:	461a      	mov	r2, r3
 800e48c:	4b56      	ldr	r3, [pc, #344]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e48e:	5c9a      	ldrb	r2, [r3, r2]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	3305      	adds	r3, #5
 800e494:	404a      	eors	r2, r1
 800e496:	b2d2      	uxtb	r2, r2
 800e498:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e49a:	7b3b      	ldrb	r3, [r7, #12]
 800e49c:	461a      	mov	r2, r3
 800e49e:	4b52      	ldr	r3, [pc, #328]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e4a0:	5c9a      	ldrb	r2, [r3, r2]
 800e4a2:	7c7b      	ldrb	r3, [r7, #17]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4b50      	ldr	r3, [pc, #320]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e4a8:	5c5b      	ldrb	r3, [r3, r1]
 800e4aa:	4053      	eors	r3, r2
 800e4ac:	b2da      	uxtb	r2, r3
 800e4ae:	7dbb      	ldrb	r3, [r7, #22]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	4b4b      	ldr	r3, [pc, #300]	; (800e5e0 <mix_sub_columns+0x284>)
 800e4b4:	5c5b      	ldrb	r3, [r3, r1]
 800e4b6:	4053      	eors	r3, r2
 800e4b8:	b2d9      	uxtb	r1, r3
 800e4ba:	7afb      	ldrb	r3, [r7, #11]
 800e4bc:	461a      	mov	r2, r3
 800e4be:	4b49      	ldr	r3, [pc, #292]	; (800e5e4 <mix_sub_columns+0x288>)
 800e4c0:	5c9a      	ldrb	r2, [r3, r2]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3306      	adds	r3, #6
 800e4c6:	404a      	eors	r2, r1
 800e4c8:	b2d2      	uxtb	r2, r2
 800e4ca:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e4cc:	7b3b      	ldrb	r3, [r7, #12]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	4b44      	ldr	r3, [pc, #272]	; (800e5e4 <mix_sub_columns+0x288>)
 800e4d2:	5c9a      	ldrb	r2, [r3, r2]
 800e4d4:	7c7b      	ldrb	r3, [r7, #17]
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4b43      	ldr	r3, [pc, #268]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e4da:	5c5b      	ldrb	r3, [r3, r1]
 800e4dc:	4053      	eors	r3, r2
 800e4de:	b2da      	uxtb	r2, r3
 800e4e0:	7dbb      	ldrb	r3, [r7, #22]
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	4b40      	ldr	r3, [pc, #256]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e4e6:	5c5b      	ldrb	r3, [r3, r1]
 800e4e8:	4053      	eors	r3, r2
 800e4ea:	b2d9      	uxtb	r1, r3
 800e4ec:	7afb      	ldrb	r3, [r7, #11]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	4b3b      	ldr	r3, [pc, #236]	; (800e5e0 <mix_sub_columns+0x284>)
 800e4f2:	5c9a      	ldrb	r2, [r3, r2]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3307      	adds	r3, #7
 800e4f8:	404a      	eors	r2, r1
 800e4fa:	b2d2      	uxtb	r2, r2
 800e4fc:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e4fe:	7c3b      	ldrb	r3, [r7, #16]
 800e500:	461a      	mov	r2, r3
 800e502:	4b37      	ldr	r3, [pc, #220]	; (800e5e0 <mix_sub_columns+0x284>)
 800e504:	5c9a      	ldrb	r2, [r3, r2]
 800e506:	7d7b      	ldrb	r3, [r7, #21]
 800e508:	4619      	mov	r1, r3
 800e50a:	4b36      	ldr	r3, [pc, #216]	; (800e5e4 <mix_sub_columns+0x288>)
 800e50c:	5c5b      	ldrb	r3, [r3, r1]
 800e50e:	4053      	eors	r3, r2
 800e510:	b2da      	uxtb	r2, r3
 800e512:	7abb      	ldrb	r3, [r7, #10]
 800e514:	4619      	mov	r1, r3
 800e516:	4b34      	ldr	r3, [pc, #208]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e518:	5c5b      	ldrb	r3, [r3, r1]
 800e51a:	4053      	eors	r3, r2
 800e51c:	b2d9      	uxtb	r1, r3
 800e51e:	7bfb      	ldrb	r3, [r7, #15]
 800e520:	461a      	mov	r2, r3
 800e522:	4b31      	ldr	r3, [pc, #196]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e524:	5c9a      	ldrb	r2, [r3, r2]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	3308      	adds	r3, #8
 800e52a:	404a      	eors	r2, r1
 800e52c:	b2d2      	uxtb	r2, r2
 800e52e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e530:	7c3b      	ldrb	r3, [r7, #16]
 800e532:	461a      	mov	r2, r3
 800e534:	4b2c      	ldr	r3, [pc, #176]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e536:	5c9a      	ldrb	r2, [r3, r2]
 800e538:	7d7b      	ldrb	r3, [r7, #21]
 800e53a:	4619      	mov	r1, r3
 800e53c:	4b28      	ldr	r3, [pc, #160]	; (800e5e0 <mix_sub_columns+0x284>)
 800e53e:	5c5b      	ldrb	r3, [r3, r1]
 800e540:	4053      	eors	r3, r2
 800e542:	b2da      	uxtb	r2, r3
 800e544:	7abb      	ldrb	r3, [r7, #10]
 800e546:	4619      	mov	r1, r3
 800e548:	4b26      	ldr	r3, [pc, #152]	; (800e5e4 <mix_sub_columns+0x288>)
 800e54a:	5c5b      	ldrb	r3, [r3, r1]
 800e54c:	4053      	eors	r3, r2
 800e54e:	b2d9      	uxtb	r1, r3
 800e550:	7bfb      	ldrb	r3, [r7, #15]
 800e552:	461a      	mov	r2, r3
 800e554:	4b24      	ldr	r3, [pc, #144]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e556:	5c9a      	ldrb	r2, [r3, r2]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3309      	adds	r3, #9
 800e55c:	404a      	eors	r2, r1
 800e55e:	b2d2      	uxtb	r2, r2
 800e560:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e562:	7c3b      	ldrb	r3, [r7, #16]
 800e564:	461a      	mov	r2, r3
 800e566:	4b20      	ldr	r3, [pc, #128]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e568:	5c9a      	ldrb	r2, [r3, r2]
 800e56a:	7d7b      	ldrb	r3, [r7, #21]
 800e56c:	4619      	mov	r1, r3
 800e56e:	4b1e      	ldr	r3, [pc, #120]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e570:	5c5b      	ldrb	r3, [r3, r1]
 800e572:	4053      	eors	r3, r2
 800e574:	b2da      	uxtb	r2, r3
 800e576:	7abb      	ldrb	r3, [r7, #10]
 800e578:	4619      	mov	r1, r3
 800e57a:	4b19      	ldr	r3, [pc, #100]	; (800e5e0 <mix_sub_columns+0x284>)
 800e57c:	5c5b      	ldrb	r3, [r3, r1]
 800e57e:	4053      	eors	r3, r2
 800e580:	b2d9      	uxtb	r1, r3
 800e582:	7bfb      	ldrb	r3, [r7, #15]
 800e584:	461a      	mov	r2, r3
 800e586:	4b17      	ldr	r3, [pc, #92]	; (800e5e4 <mix_sub_columns+0x288>)
 800e588:	5c9a      	ldrb	r2, [r3, r2]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	330a      	adds	r3, #10
 800e58e:	404a      	eors	r2, r1
 800e590:	b2d2      	uxtb	r2, r2
 800e592:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e594:	7c3b      	ldrb	r3, [r7, #16]
 800e596:	461a      	mov	r2, r3
 800e598:	4b12      	ldr	r3, [pc, #72]	; (800e5e4 <mix_sub_columns+0x288>)
 800e59a:	5c9a      	ldrb	r2, [r3, r2]
 800e59c:	7d7b      	ldrb	r3, [r7, #21]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4b11      	ldr	r3, [pc, #68]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e5a2:	5c5b      	ldrb	r3, [r3, r1]
 800e5a4:	4053      	eors	r3, r2
 800e5a6:	b2da      	uxtb	r2, r3
 800e5a8:	7abb      	ldrb	r3, [r7, #10]
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	4b0e      	ldr	r3, [pc, #56]	; (800e5e8 <mix_sub_columns+0x28c>)
 800e5ae:	5c5b      	ldrb	r3, [r3, r1]
 800e5b0:	4053      	eors	r3, r2
 800e5b2:	b2d9      	uxtb	r1, r3
 800e5b4:	7bfb      	ldrb	r3, [r7, #15]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	4b09      	ldr	r3, [pc, #36]	; (800e5e0 <mix_sub_columns+0x284>)
 800e5ba:	5c9a      	ldrb	r2, [r3, r2]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	330b      	adds	r3, #11
 800e5c0:	404a      	eors	r2, r1
 800e5c2:	b2d2      	uxtb	r2, r2
 800e5c4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e5c6:	7d3b      	ldrb	r3, [r7, #20]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	4b05      	ldr	r3, [pc, #20]	; (800e5e0 <mix_sub_columns+0x284>)
 800e5cc:	5c9a      	ldrb	r2, [r3, r2]
 800e5ce:	7a7b      	ldrb	r3, [r7, #9]
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	4b04      	ldr	r3, [pc, #16]	; (800e5e4 <mix_sub_columns+0x288>)
 800e5d4:	5c5b      	ldrb	r3, [r3, r1]
 800e5d6:	4053      	eors	r3, r2
 800e5d8:	b2da      	uxtb	r2, r3
 800e5da:	7bbb      	ldrb	r3, [r7, #14]
 800e5dc:	4619      	mov	r1, r3
 800e5de:	e005      	b.n	800e5ec <mix_sub_columns+0x290>
 800e5e0:	0801f15c 	.word	0x0801f15c
 800e5e4:	0801f25c 	.word	0x0801f25c
 800e5e8:	0801f05c 	.word	0x0801f05c
 800e5ec:	4b2d      	ldr	r3, [pc, #180]	; (800e6a4 <mix_sub_columns+0x348>)
 800e5ee:	5c5b      	ldrb	r3, [r3, r1]
 800e5f0:	4053      	eors	r3, r2
 800e5f2:	b2d9      	uxtb	r1, r3
 800e5f4:	7cfb      	ldrb	r3, [r7, #19]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	4b2a      	ldr	r3, [pc, #168]	; (800e6a4 <mix_sub_columns+0x348>)
 800e5fa:	5c9a      	ldrb	r2, [r3, r2]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	330c      	adds	r3, #12
 800e600:	404a      	eors	r2, r1
 800e602:	b2d2      	uxtb	r2, r2
 800e604:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e606:	7d3b      	ldrb	r3, [r7, #20]
 800e608:	461a      	mov	r2, r3
 800e60a:	4b26      	ldr	r3, [pc, #152]	; (800e6a4 <mix_sub_columns+0x348>)
 800e60c:	5c9a      	ldrb	r2, [r3, r2]
 800e60e:	7a7b      	ldrb	r3, [r7, #9]
 800e610:	4619      	mov	r1, r3
 800e612:	4b25      	ldr	r3, [pc, #148]	; (800e6a8 <mix_sub_columns+0x34c>)
 800e614:	5c5b      	ldrb	r3, [r3, r1]
 800e616:	4053      	eors	r3, r2
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	7bbb      	ldrb	r3, [r7, #14]
 800e61c:	4619      	mov	r1, r3
 800e61e:	4b23      	ldr	r3, [pc, #140]	; (800e6ac <mix_sub_columns+0x350>)
 800e620:	5c5b      	ldrb	r3, [r3, r1]
 800e622:	4053      	eors	r3, r2
 800e624:	b2d9      	uxtb	r1, r3
 800e626:	7cfb      	ldrb	r3, [r7, #19]
 800e628:	461a      	mov	r2, r3
 800e62a:	4b1e      	ldr	r3, [pc, #120]	; (800e6a4 <mix_sub_columns+0x348>)
 800e62c:	5c9a      	ldrb	r2, [r3, r2]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	330d      	adds	r3, #13
 800e632:	404a      	eors	r2, r1
 800e634:	b2d2      	uxtb	r2, r2
 800e636:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e638:	7d3b      	ldrb	r3, [r7, #20]
 800e63a:	461a      	mov	r2, r3
 800e63c:	4b19      	ldr	r3, [pc, #100]	; (800e6a4 <mix_sub_columns+0x348>)
 800e63e:	5c9a      	ldrb	r2, [r3, r2]
 800e640:	7a7b      	ldrb	r3, [r7, #9]
 800e642:	4619      	mov	r1, r3
 800e644:	4b17      	ldr	r3, [pc, #92]	; (800e6a4 <mix_sub_columns+0x348>)
 800e646:	5c5b      	ldrb	r3, [r3, r1]
 800e648:	4053      	eors	r3, r2
 800e64a:	b2da      	uxtb	r2, r3
 800e64c:	7bbb      	ldrb	r3, [r7, #14]
 800e64e:	4619      	mov	r1, r3
 800e650:	4b15      	ldr	r3, [pc, #84]	; (800e6a8 <mix_sub_columns+0x34c>)
 800e652:	5c5b      	ldrb	r3, [r3, r1]
 800e654:	4053      	eors	r3, r2
 800e656:	b2d9      	uxtb	r1, r3
 800e658:	7cfb      	ldrb	r3, [r7, #19]
 800e65a:	461a      	mov	r2, r3
 800e65c:	4b13      	ldr	r3, [pc, #76]	; (800e6ac <mix_sub_columns+0x350>)
 800e65e:	5c9a      	ldrb	r2, [r3, r2]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	330e      	adds	r3, #14
 800e664:	404a      	eors	r2, r1
 800e666:	b2d2      	uxtb	r2, r2
 800e668:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e66a:	7d3b      	ldrb	r3, [r7, #20]
 800e66c:	461a      	mov	r2, r3
 800e66e:	4b0f      	ldr	r3, [pc, #60]	; (800e6ac <mix_sub_columns+0x350>)
 800e670:	5c9a      	ldrb	r2, [r3, r2]
 800e672:	7a7b      	ldrb	r3, [r7, #9]
 800e674:	4619      	mov	r1, r3
 800e676:	4b0b      	ldr	r3, [pc, #44]	; (800e6a4 <mix_sub_columns+0x348>)
 800e678:	5c5b      	ldrb	r3, [r3, r1]
 800e67a:	4053      	eors	r3, r2
 800e67c:	b2da      	uxtb	r2, r3
 800e67e:	7bbb      	ldrb	r3, [r7, #14]
 800e680:	4619      	mov	r1, r3
 800e682:	4b08      	ldr	r3, [pc, #32]	; (800e6a4 <mix_sub_columns+0x348>)
 800e684:	5c5b      	ldrb	r3, [r3, r1]
 800e686:	4053      	eors	r3, r2
 800e688:	b2d9      	uxtb	r1, r3
 800e68a:	7cfb      	ldrb	r3, [r7, #19]
 800e68c:	461a      	mov	r2, r3
 800e68e:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <mix_sub_columns+0x34c>)
 800e690:	5c9a      	ldrb	r2, [r3, r2]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	330f      	adds	r3, #15
 800e696:	404a      	eors	r2, r1
 800e698:	b2d2      	uxtb	r2, r2
 800e69a:	701a      	strb	r2, [r3, #0]
  }
 800e69c:	bf00      	nop
 800e69e:	3718      	adds	r7, #24
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	0801f05c 	.word	0x0801f05c
 800e6a8:	0801f15c 	.word	0x0801f15c
 800e6ac:	0801f25c 	.word	0x0801f25c

0800e6b0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b086      	sub	sp, #24
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e6be:	7afb      	ldrb	r3, [r7, #11]
 800e6c0:	3b10      	subs	r3, #16
 800e6c2:	2b10      	cmp	r3, #16
 800e6c4:	bf8c      	ite	hi
 800e6c6:	2201      	movhi	r2, #1
 800e6c8:	2200      	movls	r2, #0
 800e6ca:	b2d2      	uxtb	r2, r2
 800e6cc:	2a00      	cmp	r2, #0
 800e6ce:	d10b      	bne.n	800e6e8 <lorawan_aes_set_key+0x38>
 800e6d0:	4a64      	ldr	r2, [pc, #400]	; (800e864 <lorawan_aes_set_key+0x1b4>)
 800e6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e6d6:	f003 0301 	and.w	r3, r3, #1
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bf14      	ite	ne
 800e6de:	2301      	movne	r3, #1
 800e6e0:	2300      	moveq	r3, #0
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d105      	bne.n	800e6f4 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e6f0:	23ff      	movs	r3, #255	; 0xff
 800e6f2:	e0b2      	b.n	800e85a <lorawan_aes_set_key+0x1aa>
        break;
 800e6f4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	7afa      	ldrb	r2, [r7, #11]
 800e6fa:	68f9      	ldr	r1, [r7, #12]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff fbfc 	bl	800defa <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e702:	7afb      	ldrb	r3, [r7, #11]
 800e704:	331c      	adds	r3, #28
 800e706:	b2db      	uxtb	r3, r3
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e70c:	7c7b      	ldrb	r3, [r7, #17]
 800e70e:	091b      	lsrs	r3, r3, #4
 800e710:	b2db      	uxtb	r3, r3
 800e712:	3b01      	subs	r3, #1
 800e714:	b2da      	uxtb	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e71c:	7afb      	ldrb	r3, [r7, #11]
 800e71e:	75fb      	strb	r3, [r7, #23]
 800e720:	2301      	movs	r3, #1
 800e722:	75bb      	strb	r3, [r7, #22]
 800e724:	e093      	b.n	800e84e <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e726:	7dfb      	ldrb	r3, [r7, #23]
 800e728:	3b04      	subs	r3, #4
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	5cd3      	ldrb	r3, [r2, r3]
 800e72e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e730:	7dfb      	ldrb	r3, [r7, #23]
 800e732:	3b03      	subs	r3, #3
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	5cd3      	ldrb	r3, [r2, r3]
 800e738:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e73a:	7dfb      	ldrb	r3, [r7, #23]
 800e73c:	3b02      	subs	r3, #2
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	5cd3      	ldrb	r3, [r2, r3]
 800e742:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e744:	7dfb      	ldrb	r3, [r7, #23]
 800e746:	3b01      	subs	r3, #1
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	5cd3      	ldrb	r3, [r2, r3]
 800e74c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	7afa      	ldrb	r2, [r7, #11]
 800e752:	fbb3 f1f2 	udiv	r1, r3, r2
 800e756:	fb01 f202 	mul.w	r2, r1, r2
 800e75a:	1a9b      	subs	r3, r3, r2
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d127      	bne.n	800e7b2 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800e762:	7d7b      	ldrb	r3, [r7, #21]
 800e764:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e766:	7d3b      	ldrb	r3, [r7, #20]
 800e768:	4a3f      	ldr	r2, [pc, #252]	; (800e868 <lorawan_aes_set_key+0x1b8>)
 800e76a:	5cd2      	ldrb	r2, [r2, r3]
 800e76c:	7dbb      	ldrb	r3, [r7, #22]
 800e76e:	4053      	eors	r3, r2
 800e770:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e772:	7cfb      	ldrb	r3, [r7, #19]
 800e774:	4a3c      	ldr	r2, [pc, #240]	; (800e868 <lorawan_aes_set_key+0x1b8>)
 800e776:	5cd3      	ldrb	r3, [r2, r3]
 800e778:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e77a:	7cbb      	ldrb	r3, [r7, #18]
 800e77c:	4a3a      	ldr	r2, [pc, #232]	; (800e868 <lorawan_aes_set_key+0x1b8>)
 800e77e:	5cd3      	ldrb	r3, [r2, r3]
 800e780:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e782:	7c3b      	ldrb	r3, [r7, #16]
 800e784:	4a38      	ldr	r2, [pc, #224]	; (800e868 <lorawan_aes_set_key+0x1b8>)
 800e786:	5cd3      	ldrb	r3, [r2, r3]
 800e788:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e78a:	7dbb      	ldrb	r3, [r7, #22]
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	b25a      	sxtb	r2, r3
 800e790:	7dbb      	ldrb	r3, [r7, #22]
 800e792:	09db      	lsrs	r3, r3, #7
 800e794:	b2db      	uxtb	r3, r3
 800e796:	4619      	mov	r1, r3
 800e798:	0049      	lsls	r1, r1, #1
 800e79a:	440b      	add	r3, r1
 800e79c:	4619      	mov	r1, r3
 800e79e:	00c8      	lsls	r0, r1, #3
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	440b      	add	r3, r1
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	b25b      	sxtb	r3, r3
 800e7aa:	4053      	eors	r3, r2
 800e7ac:	b25b      	sxtb	r3, r3
 800e7ae:	75bb      	strb	r3, [r7, #22]
 800e7b0:	e01c      	b.n	800e7ec <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e7b2:	7afb      	ldrb	r3, [r7, #11]
 800e7b4:	2b18      	cmp	r3, #24
 800e7b6:	d919      	bls.n	800e7ec <lorawan_aes_set_key+0x13c>
 800e7b8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ba:	7afa      	ldrb	r2, [r7, #11]
 800e7bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7c0:	fb01 f202 	mul.w	r2, r1, r2
 800e7c4:	1a9b      	subs	r3, r3, r2
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	2b10      	cmp	r3, #16
 800e7ca:	d10f      	bne.n	800e7ec <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800e7cc:	7d7b      	ldrb	r3, [r7, #21]
 800e7ce:	4a26      	ldr	r2, [pc, #152]	; (800e868 <lorawan_aes_set_key+0x1b8>)
 800e7d0:	5cd3      	ldrb	r3, [r2, r3]
 800e7d2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e7d4:	7d3b      	ldrb	r3, [r7, #20]
 800e7d6:	4a24      	ldr	r2, [pc, #144]	; (800e868 <lorawan_aes_set_key+0x1b8>)
 800e7d8:	5cd3      	ldrb	r3, [r2, r3]
 800e7da:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e7dc:	7cfb      	ldrb	r3, [r7, #19]
 800e7de:	4a22      	ldr	r2, [pc, #136]	; (800e868 <lorawan_aes_set_key+0x1b8>)
 800e7e0:	5cd3      	ldrb	r3, [r2, r3]
 800e7e2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e7e4:	7cbb      	ldrb	r3, [r7, #18]
 800e7e6:	4a20      	ldr	r2, [pc, #128]	; (800e868 <lorawan_aes_set_key+0x1b8>)
 800e7e8:	5cd3      	ldrb	r3, [r2, r3]
 800e7ea:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e7ec:	7dfa      	ldrb	r2, [r7, #23]
 800e7ee:	7afb      	ldrb	r3, [r7, #11]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e7f4:	7c3b      	ldrb	r3, [r7, #16]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	5cd1      	ldrb	r1, [r2, r3]
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	7d7a      	ldrb	r2, [r7, #21]
 800e7fe:	404a      	eors	r2, r1
 800e800:	b2d1      	uxtb	r1, r2
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e806:	7c3b      	ldrb	r3, [r7, #16]
 800e808:	3301      	adds	r3, #1
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	5cd1      	ldrb	r1, [r2, r3]
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	3301      	adds	r3, #1
 800e812:	7d3a      	ldrb	r2, [r7, #20]
 800e814:	404a      	eors	r2, r1
 800e816:	b2d1      	uxtb	r1, r2
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e81c:	7c3b      	ldrb	r3, [r7, #16]
 800e81e:	3302      	adds	r3, #2
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	5cd1      	ldrb	r1, [r2, r3]
 800e824:	7dfb      	ldrb	r3, [r7, #23]
 800e826:	3302      	adds	r3, #2
 800e828:	7cfa      	ldrb	r2, [r7, #19]
 800e82a:	404a      	eors	r2, r1
 800e82c:	b2d1      	uxtb	r1, r2
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e832:	7c3b      	ldrb	r3, [r7, #16]
 800e834:	3303      	adds	r3, #3
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	5cd1      	ldrb	r1, [r2, r3]
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	3303      	adds	r3, #3
 800e83e:	7cba      	ldrb	r2, [r7, #18]
 800e840:	404a      	eors	r2, r1
 800e842:	b2d1      	uxtb	r1, r2
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e848:	7dfb      	ldrb	r3, [r7, #23]
 800e84a:	3304      	adds	r3, #4
 800e84c:	75fb      	strb	r3, [r7, #23]
 800e84e:	7dfa      	ldrb	r2, [r7, #23]
 800e850:	7c7b      	ldrb	r3, [r7, #17]
 800e852:	429a      	cmp	r2, r3
 800e854:	f4ff af67 	bcc.w	800e726 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	00010101 	.word	0x00010101
 800e868:	0801f05c 	.word	0x0801f05c

0800e86c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08a      	sub	sp, #40	; 0x28
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d038      	beq.n	800e8f4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	f107 0314 	add.w	r3, r7, #20
 800e888:	68f9      	ldr	r1, [r7, #12]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7ff fc07 	bl	800e09e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e890:	2301      	movs	r3, #1
 800e892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e896:	e014      	b.n	800e8c2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e898:	f107 0314 	add.w	r3, r7, #20
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7ff fd5d 	bl	800e35c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e8a8:	0112      	lsls	r2, r2, #4
 800e8aa:	441a      	add	r2, r3
 800e8ac:	f107 0314 	add.w	r3, r7, #20
 800e8b0:	4611      	mov	r1, r2
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7ff fcab 	bl	800e20e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8bc:	3301      	adds	r3, #1
 800e8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e8c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d3e3      	bcc.n	800e898 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e8d0:	f107 0314 	add.w	r3, r7, #20
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7ff fca7 	bl	800e228 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e8e0:	0112      	lsls	r2, r2, #4
 800e8e2:	441a      	add	r2, r3
 800e8e4:	f107 0314 	add.w	r3, r7, #20
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	68b8      	ldr	r0, [r7, #8]
 800e8ec:	f7ff fbd7 	bl	800e09e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	e000      	b.n	800e8f6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e8f4:	23ff      	movs	r3, #255	; 0xff
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3728      	adds	r7, #40	; 0x28
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
	...

0800e900 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800e900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e902:	b09d      	sub	sp, #116	; 0x74
 800e904:	af10      	add	r7, sp, #64	; 0x40
 800e906:	4603      	mov	r3, r0
 800e908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800e90c:	2306      	movs	r3, #6
 800e90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800e912:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e91a:	4611      	mov	r1, r2
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 f9a7 	bl	800ec70 <SecureElementGetKeyByID>
 800e922:	4603      	mov	r3, r0
 800e924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800e928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	f040 80b0 	bne.w	800ea92 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800e932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800e93a:	4b58      	ldr	r3, [pc, #352]	; (800ea9c <PrintKey+0x19c>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	2100      	movs	r1, #0
 800e940:	2002      	movs	r0, #2
 800e942:	f00f fadb 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800e946:	e056      	b.n	800e9f6 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800e948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d106      	bne.n	800e95e <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800e950:	4b53      	ldr	r3, [pc, #332]	; (800eaa0 <PrintKey+0x1a0>)
 800e952:	2200      	movs	r2, #0
 800e954:	2100      	movs	r1, #0
 800e956:	2002      	movs	r0, #2
 800e958:	f00f fad0 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800e95c:	e04b      	b.n	800e9f6 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800e95e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e962:	2b03      	cmp	r3, #3
 800e964:	d106      	bne.n	800e974 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800e966:	4b4f      	ldr	r3, [pc, #316]	; (800eaa4 <PrintKey+0x1a4>)
 800e968:	2200      	movs	r2, #0
 800e96a:	2100      	movs	r1, #0
 800e96c:	2002      	movs	r0, #2
 800e96e:	f00f fac5 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800e972:	e040      	b.n	800e9f6 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800e974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e978:	2b02      	cmp	r3, #2
 800e97a:	d106      	bne.n	800e98a <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800e97c:	4b4a      	ldr	r3, [pc, #296]	; (800eaa8 <PrintKey+0x1a8>)
 800e97e:	2200      	movs	r2, #0
 800e980:	2100      	movs	r1, #0
 800e982:	2002      	movs	r0, #2
 800e984:	f00f faba 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800e988:	e035      	b.n	800e9f6 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800e98a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e98e:	2b04      	cmp	r3, #4
 800e990:	d106      	bne.n	800e9a0 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800e992:	4b46      	ldr	r3, [pc, #280]	; (800eaac <PrintKey+0x1ac>)
 800e994:	2200      	movs	r2, #0
 800e996:	2100      	movs	r1, #0
 800e998:	2002      	movs	r0, #2
 800e99a:	f00f faaf 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800e99e:	e02a      	b.n	800e9f6 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800e9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9a4:	2b7f      	cmp	r3, #127	; 0x7f
 800e9a6:	d106      	bne.n	800e9b6 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800e9a8:	4b41      	ldr	r3, [pc, #260]	; (800eab0 <PrintKey+0x1b0>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	2002      	movs	r0, #2
 800e9b0:	f00f faa4 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800e9b4:	e01f      	b.n	800e9f6 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800e9b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9ba:	2b80      	cmp	r3, #128	; 0x80
 800e9bc:	d106      	bne.n	800e9cc <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800e9be:	4b3d      	ldr	r3, [pc, #244]	; (800eab4 <PrintKey+0x1b4>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	2002      	movs	r0, #2
 800e9c6:	f00f fa99 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800e9ca:	e014      	b.n	800e9f6 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800e9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9d0:	2b81      	cmp	r3, #129	; 0x81
 800e9d2:	d106      	bne.n	800e9e2 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800e9d4:	4b38      	ldr	r3, [pc, #224]	; (800eab8 <PrintKey+0x1b8>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	2100      	movs	r1, #0
 800e9da:	2002      	movs	r0, #2
 800e9dc:	f00f fa8e 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 800e9e0:	e009      	b.n	800e9f6 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800e9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9e6:	2b82      	cmp	r3, #130	; 0x82
 800e9e8:	d105      	bne.n	800e9f6 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800e9ea:	4b34      	ldr	r3, [pc, #208]	; (800eabc <PrintKey+0x1bc>)
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	2100      	movs	r1, #0
 800e9f0:	2002      	movs	r0, #2
 800e9f2:	f00f fa83 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800e9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f8:	785b      	ldrb	r3, [r3, #1]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fe:	789b      	ldrb	r3, [r3, #2]
 800ea00:	461c      	mov	r4, r3
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	78db      	ldrb	r3, [r3, #3]
 800ea06:	461d      	mov	r5, r3
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	791b      	ldrb	r3, [r3, #4]
 800ea0c:	461e      	mov	r6, r3
 800ea0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea10:	795b      	ldrb	r3, [r3, #5]
 800ea12:	623b      	str	r3, [r7, #32]
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	799b      	ldrb	r3, [r3, #6]
 800ea18:	61fb      	str	r3, [r7, #28]
 800ea1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1c:	79db      	ldrb	r3, [r3, #7]
 800ea1e:	61bb      	str	r3, [r7, #24]
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	7a1b      	ldrb	r3, [r3, #8]
 800ea24:	617b      	str	r3, [r7, #20]
 800ea26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea28:	7a5b      	ldrb	r3, [r3, #9]
 800ea2a:	613b      	str	r3, [r7, #16]
 800ea2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2e:	7a9b      	ldrb	r3, [r3, #10]
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	7adb      	ldrb	r3, [r3, #11]
 800ea36:	60bb      	str	r3, [r7, #8]
 800ea38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3a:	7b1b      	ldrb	r3, [r3, #12]
 800ea3c:	607b      	str	r3, [r7, #4]
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	7b5b      	ldrb	r3, [r3, #13]
 800ea42:	603b      	str	r3, [r7, #0]
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	7b9b      	ldrb	r3, [r3, #14]
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4c:	7bdb      	ldrb	r3, [r3, #15]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea52:	7c1b      	ldrb	r3, [r3, #16]
 800ea54:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea56:	920e      	str	r2, [sp, #56]	; 0x38
 800ea58:	910d      	str	r1, [sp, #52]	; 0x34
 800ea5a:	683a      	ldr	r2, [r7, #0]
 800ea5c:	920c      	str	r2, [sp, #48]	; 0x30
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	920a      	str	r2, [sp, #40]	; 0x28
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	9209      	str	r2, [sp, #36]	; 0x24
 800ea6a:	693a      	ldr	r2, [r7, #16]
 800ea6c:	9208      	str	r2, [sp, #32]
 800ea6e:	697a      	ldr	r2, [r7, #20]
 800ea70:	9207      	str	r2, [sp, #28]
 800ea72:	69ba      	ldr	r2, [r7, #24]
 800ea74:	9206      	str	r2, [sp, #24]
 800ea76:	69fa      	ldr	r2, [r7, #28]
 800ea78:	9205      	str	r2, [sp, #20]
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	9304      	str	r3, [sp, #16]
 800ea7e:	9603      	str	r6, [sp, #12]
 800ea80:	9502      	str	r5, [sp, #8]
 800ea82:	9401      	str	r4, [sp, #4]
 800ea84:	9000      	str	r0, [sp, #0]
 800ea86:	4b0e      	ldr	r3, [pc, #56]	; (800eac0 <PrintKey+0x1c0>)
 800ea88:	2200      	movs	r2, #0
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	2002      	movs	r0, #2
 800ea8e:	f00f fa35 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800ea92:	bf00      	nop
 800ea94:	3734      	adds	r7, #52	; 0x34
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	0801eadc 	.word	0x0801eadc
 800eaa0:	0801eaf4 	.word	0x0801eaf4
 800eaa4:	0801eb0c 	.word	0x0801eb0c
 800eaa8:	0801eb24 	.word	0x0801eb24
 800eaac:	0801eb3c 	.word	0x0801eb3c
 800eab0:	0801eb54 	.word	0x0801eb54
 800eab4:	0801eb6c 	.word	0x0801eb6c
 800eab8:	0801eb84 	.word	0x0801eb84
 800eabc:	0801eb9c 	.word	0x0801eb9c
 800eac0:	0801ebb4 	.word	0x0801ebb4

0800eac4 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	4603      	mov	r3, r0
 800eacc:	6039      	str	r1, [r7, #0]
 800eace:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ead0:	2300      	movs	r3, #0
 800ead2:	73fb      	strb	r3, [r7, #15]
 800ead4:	e01a      	b.n	800eb0c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ead6:	4b12      	ldr	r3, [pc, #72]	; (800eb20 <GetKeyByID+0x5c>)
 800ead8:	6819      	ldr	r1, [r3, #0]
 800eada:	7bfa      	ldrb	r2, [r7, #15]
 800eadc:	4613      	mov	r3, r2
 800eade:	011b      	lsls	r3, r3, #4
 800eae0:	4413      	add	r3, r2
 800eae2:	440b      	add	r3, r1
 800eae4:	3310      	adds	r3, #16
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	79fa      	ldrb	r2, [r7, #7]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d10b      	bne.n	800eb06 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800eaee:	4b0c      	ldr	r3, [pc, #48]	; (800eb20 <GetKeyByID+0x5c>)
 800eaf0:	6819      	ldr	r1, [r3, #0]
 800eaf2:	7bfa      	ldrb	r2, [r7, #15]
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	011b      	lsls	r3, r3, #4
 800eaf8:	4413      	add	r3, r2
 800eafa:	3310      	adds	r3, #16
 800eafc:	18ca      	adds	r2, r1, r3
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800eb02:	2300      	movs	r3, #0
 800eb04:	e006      	b.n	800eb14 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb06:	7bfb      	ldrb	r3, [r7, #15]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	73fb      	strb	r3, [r7, #15]
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
 800eb0e:	2b09      	cmp	r3, #9
 800eb10:	d9e1      	bls.n	800ead6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eb12:	2303      	movs	r3, #3
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3714      	adds	r7, #20
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bc80      	pop	{r7}
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop
 800eb20:	200007d4 	.word	0x200007d4

0800eb24 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	b0d1      	sub	sp, #324	; 0x144
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800eb2e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800eb32:	6020      	str	r0, [r4, #0]
 800eb34:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800eb38:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800eb3c:	6001      	str	r1, [r0, #0]
 800eb3e:	4619      	mov	r1, r3
 800eb40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb44:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800eb48:	801a      	strh	r2, [r3, #0]
 800eb4a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb4e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800eb52:	460a      	mov	r2, r1
 800eb54:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800eb56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d003      	beq.n	800eb6c <ComputeCmac+0x48>
 800eb64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d101      	bne.n	800eb70 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eb6c:	2302      	movs	r3, #2
 800eb6e:	e05c      	b.n	800ec2a <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800eb70:	f107 0314 	add.w	r3, r7, #20
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7fe ff1b 	bl	800d9b0 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800eb7a:	f107 0210 	add.w	r2, r7, #16
 800eb7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb82:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	4611      	mov	r1, r2
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7ff ff9a 	bl	800eac4 <GetKeyByID>
 800eb90:	4603      	mov	r3, r0
 800eb92:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800eb96:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d143      	bne.n	800ec26 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800eb9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	1c5a      	adds	r2, r3, #1
 800ebaa:	f107 0314 	add.w	r3, r7, #20
 800ebae:	4611      	mov	r1, r2
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fe ff16 	bl	800d9e2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ebb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ebba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d009      	beq.n	800ebd8 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ebc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ebc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ebcc:	f107 0014 	add.w	r0, r7, #20
 800ebd0:	2210      	movs	r2, #16
 800ebd2:	6819      	ldr	r1, [r3, #0]
 800ebd4:	f7fe ff14 	bl	800da00 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ebd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ebdc:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ebe0:	881a      	ldrh	r2, [r3, #0]
 800ebe2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ebe6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ebea:	f107 0014 	add.w	r0, r7, #20
 800ebee:	6819      	ldr	r1, [r3, #0]
 800ebf0:	f7fe ff06 	bl	800da00 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ebf4:	f107 0214 	add.w	r2, r7, #20
 800ebf8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe ffc0 	bl	800db84 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ec04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ec08:	061a      	lsls	r2, r3, #24
 800ec0a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ec0e:	041b      	lsls	r3, r3, #16
 800ec10:	431a      	orrs	r2, r3
 800ec12:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ec16:	021b      	lsls	r3, r3, #8
 800ec18:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800ec1a:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ec1e:	431a      	orrs	r2, r3
 800ec20:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ec24:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ec26:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd90      	pop	{r4, r7, pc}

0800ec34 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d101      	bne.n	800ec48 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ec44:	2302      	movs	r3, #2
 800ec46:	e00a      	b.n	800ec5e <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800ec48:	4a07      	ldr	r2, [pc, #28]	; (800ec68 <SecureElementInit+0x34>)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800ec4e:	4b06      	ldr	r3, [pc, #24]	; (800ec68 <SecureElementInit+0x34>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	22c0      	movs	r2, #192	; 0xc0
 800ec54:	4905      	ldr	r1, [pc, #20]	; (800ec6c <SecureElementInit+0x38>)
 800ec56:	4618      	mov	r0, r3
 800ec58:	f00a fdfd 	bl	8019856 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	200007d4 	.word	0x200007d4
 800ec6c:	0801f4ec 	.word	0x0801f4ec

0800ec70 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	4603      	mov	r3, r0
 800ec78:	6039      	str	r1, [r7, #0]
 800ec7a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	73fb      	strb	r3, [r7, #15]
 800ec80:	e01a      	b.n	800ecb8 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ec82:	4b12      	ldr	r3, [pc, #72]	; (800eccc <SecureElementGetKeyByID+0x5c>)
 800ec84:	6819      	ldr	r1, [r3, #0]
 800ec86:	7bfa      	ldrb	r2, [r7, #15]
 800ec88:	4613      	mov	r3, r2
 800ec8a:	011b      	lsls	r3, r3, #4
 800ec8c:	4413      	add	r3, r2
 800ec8e:	440b      	add	r3, r1
 800ec90:	3310      	adds	r3, #16
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	79fa      	ldrb	r2, [r7, #7]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d10b      	bne.n	800ecb2 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800ec9a:	4b0c      	ldr	r3, [pc, #48]	; (800eccc <SecureElementGetKeyByID+0x5c>)
 800ec9c:	6819      	ldr	r1, [r3, #0]
 800ec9e:	7bfa      	ldrb	r2, [r7, #15]
 800eca0:	4613      	mov	r3, r2
 800eca2:	011b      	lsls	r3, r3, #4
 800eca4:	4413      	add	r3, r2
 800eca6:	3310      	adds	r3, #16
 800eca8:	18ca      	adds	r2, r1, r3
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	e006      	b.n	800ecc0 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ecb2:	7bfb      	ldrb	r3, [r7, #15]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	73fb      	strb	r3, [r7, #15]
 800ecb8:	7bfb      	ldrb	r3, [r7, #15]
 800ecba:	2b09      	cmp	r3, #9
 800ecbc:	d9e1      	bls.n	800ec82 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ecbe:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3714      	adds	r7, #20
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bc80      	pop	{r7}
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	200007d4 	.word	0x200007d4

0800ecd0 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ecd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecd2:	b08b      	sub	sp, #44	; 0x2c
 800ecd4:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800ecd6:	4b3f      	ldr	r3, [pc, #252]	; (800edd4 <SecureElementPrintKeys+0x104>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	2100      	movs	r1, #0
 800ecdc:	2002      	movs	r0, #2
 800ecde:	f00f f90d 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ece2:	2000      	movs	r0, #0
 800ece4:	f7ff fe0c 	bl	800e900 <PrintKey>
    PrintKey(NWK_KEY);
 800ece8:	2001      	movs	r0, #1
 800ecea:	f7ff fe09 	bl	800e900 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ecee:	4b3a      	ldr	r3, [pc, #232]	; (800edd8 <SecureElementPrintKeys+0x108>)
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	2002      	movs	r0, #2
 800ecf6:	f00f f901 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ecfa:	2003      	movs	r0, #3
 800ecfc:	f7ff fe00 	bl	800e900 <PrintKey>
    PrintKey(NWK_S_KEY);
 800ed00:	2002      	movs	r0, #2
 800ed02:	f7ff fdfd 	bl	800e900 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800ed06:	4b35      	ldr	r3, [pc, #212]	; (800eddc <SecureElementPrintKeys+0x10c>)
 800ed08:	2200      	movs	r2, #0
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	2002      	movs	r0, #2
 800ed0e:	f00f f8f5 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ed12:	4b33      	ldr	r3, [pc, #204]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	4b31      	ldr	r3, [pc, #196]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	785b      	ldrb	r3, [r3, #1]
 800ed20:	4619      	mov	r1, r3
 800ed22:	4b2f      	ldr	r3, [pc, #188]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	789b      	ldrb	r3, [r3, #2]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	4b2d      	ldr	r3, [pc, #180]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	78db      	ldrb	r3, [r3, #3]
 800ed30:	461c      	mov	r4, r3
 800ed32:	4b2b      	ldr	r3, [pc, #172]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	791b      	ldrb	r3, [r3, #4]
 800ed38:	461d      	mov	r5, r3
 800ed3a:	4b29      	ldr	r3, [pc, #164]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	795b      	ldrb	r3, [r3, #5]
 800ed40:	461e      	mov	r6, r3
 800ed42:	4b27      	ldr	r3, [pc, #156]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	799b      	ldrb	r3, [r3, #6]
 800ed48:	607b      	str	r3, [r7, #4]
 800ed4a:	4b25      	ldr	r3, [pc, #148]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	79db      	ldrb	r3, [r3, #7]
 800ed50:	9307      	str	r3, [sp, #28]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	9306      	str	r3, [sp, #24]
 800ed56:	9605      	str	r6, [sp, #20]
 800ed58:	9504      	str	r5, [sp, #16]
 800ed5a:	9403      	str	r4, [sp, #12]
 800ed5c:	9002      	str	r0, [sp, #8]
 800ed5e:	9101      	str	r1, [sp, #4]
 800ed60:	9200      	str	r2, [sp, #0]
 800ed62:	4b20      	ldr	r3, [pc, #128]	; (800ede4 <SecureElementPrintKeys+0x114>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	2100      	movs	r1, #0
 800ed68:	2002      	movs	r0, #2
 800ed6a:	f00f f8c7 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ed6e:	4b1c      	ldr	r3, [pc, #112]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	7a1b      	ldrb	r3, [r3, #8]
 800ed74:	461a      	mov	r2, r3
 800ed76:	4b1a      	ldr	r3, [pc, #104]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	7a5b      	ldrb	r3, [r3, #9]
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	4b18      	ldr	r3, [pc, #96]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	7a9b      	ldrb	r3, [r3, #10]
 800ed84:	4618      	mov	r0, r3
 800ed86:	4b16      	ldr	r3, [pc, #88]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	7adb      	ldrb	r3, [r3, #11]
 800ed8c:	461c      	mov	r4, r3
 800ed8e:	4b14      	ldr	r3, [pc, #80]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	7b1b      	ldrb	r3, [r3, #12]
 800ed94:	461d      	mov	r5, r3
 800ed96:	4b12      	ldr	r3, [pc, #72]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	7b5b      	ldrb	r3, [r3, #13]
 800ed9c:	461e      	mov	r6, r3
 800ed9e:	4b10      	ldr	r3, [pc, #64]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	7b9b      	ldrb	r3, [r3, #14]
 800eda4:	607b      	str	r3, [r7, #4]
 800eda6:	4b0e      	ldr	r3, [pc, #56]	; (800ede0 <SecureElementPrintKeys+0x110>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	7bdb      	ldrb	r3, [r3, #15]
 800edac:	9307      	str	r3, [sp, #28]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	9306      	str	r3, [sp, #24]
 800edb2:	9605      	str	r6, [sp, #20]
 800edb4:	9504      	str	r5, [sp, #16]
 800edb6:	9403      	str	r4, [sp, #12]
 800edb8:	9002      	str	r0, [sp, #8]
 800edba:	9101      	str	r1, [sp, #4]
 800edbc:	9200      	str	r2, [sp, #0]
 800edbe:	4b0a      	ldr	r3, [pc, #40]	; (800ede8 <SecureElementPrintKeys+0x118>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	2100      	movs	r1, #0
 800edc4:	2002      	movs	r0, #2
 800edc6:	f00f f899 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edd4:	0801ec08 	.word	0x0801ec08
 800edd8:	0801ec20 	.word	0x0801ec20
 800eddc:	0801ec38 	.word	0x0801ec38
 800ede0:	200007d4 	.word	0x200007d4
 800ede4:	0801ec50 	.word	0x0801ec50
 800ede8:	0801ec90 	.word	0x0801ec90

0800edec <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800edf0:	2004      	movs	r0, #4
 800edf2:	f7ff fd85 	bl	800e900 <PrintKey>
    PrintKey(MC_KE_KEY);
 800edf6:	207f      	movs	r0, #127	; 0x7f
 800edf8:	f7ff fd82 	bl	800e900 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800edfc:	2002      	movs	r0, #2
 800edfe:	f7ff fd7f 	bl	800e900 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800ee02:	2003      	movs	r0, #3
 800ee04:	f7ff fd7c 	bl	800e900 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	bd80      	pop	{r7, pc}
	...

0800ee10 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b088      	sub	sp, #32
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	6039      	str	r1, [r7, #0]
 800ee1a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d101      	bne.n	800ee26 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ee22:	2302      	movs	r3, #2
 800ee24:	e04c      	b.n	800eec0 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ee26:	2300      	movs	r3, #0
 800ee28:	77fb      	strb	r3, [r7, #31]
 800ee2a:	e045      	b.n	800eeb8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ee2c:	4b26      	ldr	r3, [pc, #152]	; (800eec8 <SecureElementSetKey+0xb8>)
 800ee2e:	6819      	ldr	r1, [r3, #0]
 800ee30:	7ffa      	ldrb	r2, [r7, #31]
 800ee32:	4613      	mov	r3, r2
 800ee34:	011b      	lsls	r3, r3, #4
 800ee36:	4413      	add	r3, r2
 800ee38:	440b      	add	r3, r1
 800ee3a:	3310      	adds	r3, #16
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	79fa      	ldrb	r2, [r7, #7]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d136      	bne.n	800eeb2 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800ee44:	79fb      	ldrb	r3, [r7, #7]
 800ee46:	2b80      	cmp	r3, #128	; 0x80
 800ee48:	d123      	bne.n	800ee92 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800ee4a:	2306      	movs	r3, #6
 800ee4c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800ee4e:	2300      	movs	r3, #0
 800ee50:	60fb      	str	r3, [r7, #12]
 800ee52:	f107 0310 	add.w	r3, r7, #16
 800ee56:	2200      	movs	r2, #0
 800ee58:	601a      	str	r2, [r3, #0]
 800ee5a:	605a      	str	r2, [r3, #4]
 800ee5c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800ee5e:	f107 030c 	add.w	r3, r7, #12
 800ee62:	227f      	movs	r2, #127	; 0x7f
 800ee64:	2110      	movs	r1, #16
 800ee66:	6838      	ldr	r0, [r7, #0]
 800ee68:	f000 f87d 	bl	800ef66 <SecureElementAesEncrypt>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ee70:	4b15      	ldr	r3, [pc, #84]	; (800eec8 <SecureElementSetKey+0xb8>)
 800ee72:	6819      	ldr	r1, [r3, #0]
 800ee74:	7ffa      	ldrb	r2, [r7, #31]
 800ee76:	4613      	mov	r3, r2
 800ee78:	011b      	lsls	r3, r3, #4
 800ee7a:	4413      	add	r3, r2
 800ee7c:	3310      	adds	r3, #16
 800ee7e:	440b      	add	r3, r1
 800ee80:	3301      	adds	r3, #1
 800ee82:	f107 010c 	add.w	r1, r7, #12
 800ee86:	2210      	movs	r2, #16
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f00a fce4 	bl	8019856 <memcpy1>
                return retval;
 800ee8e:	7fbb      	ldrb	r3, [r7, #30]
 800ee90:	e016      	b.n	800eec0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ee92:	4b0d      	ldr	r3, [pc, #52]	; (800eec8 <SecureElementSetKey+0xb8>)
 800ee94:	6819      	ldr	r1, [r3, #0]
 800ee96:	7ffa      	ldrb	r2, [r7, #31]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	011b      	lsls	r3, r3, #4
 800ee9c:	4413      	add	r3, r2
 800ee9e:	3310      	adds	r3, #16
 800eea0:	440b      	add	r3, r1
 800eea2:	3301      	adds	r3, #1
 800eea4:	2210      	movs	r2, #16
 800eea6:	6839      	ldr	r1, [r7, #0]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f00a fcd4 	bl	8019856 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	e006      	b.n	800eec0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eeb2:	7ffb      	ldrb	r3, [r7, #31]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	77fb      	strb	r3, [r7, #31]
 800eeb8:	7ffb      	ldrb	r3, [r7, #31]
 800eeba:	2b09      	cmp	r3, #9
 800eebc:	d9b6      	bls.n	800ee2c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eebe:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3720      	adds	r7, #32
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	200007d4 	.word	0x200007d4

0800eecc <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af02      	add	r7, sp, #8
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	4611      	mov	r1, r2
 800eed8:	461a      	mov	r2, r3
 800eeda:	460b      	mov	r3, r1
 800eedc:	80fb      	strh	r3, [r7, #6]
 800eede:	4613      	mov	r3, r2
 800eee0:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800eee2:	797b      	ldrb	r3, [r7, #5]
 800eee4:	2b7e      	cmp	r3, #126	; 0x7e
 800eee6:	d901      	bls.n	800eeec <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eee8:	2303      	movs	r3, #3
 800eeea:	e009      	b.n	800ef00 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800eeec:	7979      	ldrb	r1, [r7, #5]
 800eeee:	88fa      	ldrh	r2, [r7, #6]
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	9300      	str	r3, [sp, #0]
 800eef4:	460b      	mov	r3, r1
 800eef6:	68b9      	ldr	r1, [r7, #8]
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f7ff fe13 	bl	800eb24 <ComputeCmac>
 800eefe:	4603      	mov	r3, r0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af02      	add	r7, sp, #8
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	607a      	str	r2, [r7, #4]
 800ef12:	461a      	mov	r2, r3
 800ef14:	460b      	mov	r3, r1
 800ef16:	817b      	strh	r3, [r7, #10]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d101      	bne.n	800ef26 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ef22:	2302      	movs	r3, #2
 800ef24:	e01b      	b.n	800ef5e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800ef26:	2306      	movs	r3, #6
 800ef28:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800ef2e:	7a79      	ldrb	r1, [r7, #9]
 800ef30:	897a      	ldrh	r2, [r7, #10]
 800ef32:	f107 0310 	add.w	r3, r7, #16
 800ef36:	9300      	str	r3, [sp, #0]
 800ef38:	460b      	mov	r3, r1
 800ef3a:	68f9      	ldr	r1, [r7, #12]
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	f7ff fdf1 	bl	800eb24 <ComputeCmac>
 800ef42:	4603      	mov	r3, r0
 800ef44:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ef46:	7dfb      	ldrb	r3, [r7, #23]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d001      	beq.n	800ef50 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800ef4c:	7dfb      	ldrb	r3, [r7, #23]
 800ef4e:	e006      	b.n	800ef5e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d001      	beq.n	800ef5c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800ef5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3718      	adds	r7, #24
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b0c2      	sub	sp, #264	; 0x108
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	60f8      	str	r0, [r7, #12]
 800ef6e:	4608      	mov	r0, r1
 800ef70:	4611      	mov	r1, r2
 800ef72:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ef76:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800ef7a:	6013      	str	r3, [r2, #0]
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	817b      	strh	r3, [r7, #10]
 800ef80:	460b      	mov	r3, r1
 800ef82:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d006      	beq.n	800ef98 <SecureElementAesEncrypt+0x32>
 800ef8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d101      	bne.n	800ef9c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ef98:	2302      	movs	r3, #2
 800ef9a:	e046      	b.n	800f02a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800ef9c:	897b      	ldrh	r3, [r7, #10]
 800ef9e:	f003 030f 	and.w	r3, r3, #15
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d001      	beq.n	800efac <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800efa8:	2305      	movs	r3, #5
 800efaa:	e03e      	b.n	800f02a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800efac:	f107 0314 	add.w	r3, r7, #20
 800efb0:	22f0      	movs	r2, #240	; 0xf0
 800efb2:	2100      	movs	r1, #0
 800efb4:	4618      	mov	r0, r3
 800efb6:	f00a fc89 	bl	80198cc <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800efba:	f107 0210 	add.w	r2, r7, #16
 800efbe:	7a7b      	ldrb	r3, [r7, #9]
 800efc0:	4611      	mov	r1, r2
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7ff fd7e 	bl	800eac4 <GetKeyByID>
 800efc8:	4603      	mov	r3, r0
 800efca:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800efce:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d127      	bne.n	800f026 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	3301      	adds	r3, #1
 800efda:	f107 0214 	add.w	r2, r7, #20
 800efde:	2110      	movs	r1, #16
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7ff fb65 	bl	800e6b0 <lorawan_aes_set_key>

        uint8_t block = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800efec:	e018      	b.n	800f020 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800efee:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	18d0      	adds	r0, r2, r3
 800eff6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800effa:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800effe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800f002:	6812      	ldr	r2, [r2, #0]
 800f004:	4413      	add	r3, r2
 800f006:	f107 0214 	add.w	r2, r7, #20
 800f00a:	4619      	mov	r1, r3
 800f00c:	f7ff fc2e 	bl	800e86c <lorawan_aes_encrypt>
            block = block + 16;
 800f010:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f014:	3310      	adds	r3, #16
 800f016:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f01a:	897b      	ldrh	r3, [r7, #10]
 800f01c:	3b10      	subs	r3, #16
 800f01e:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800f020:	897b      	ldrh	r3, [r7, #10]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1e3      	bne.n	800efee <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f026:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b088      	sub	sp, #32
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	460b      	mov	r3, r1
 800f03e:	70fb      	strb	r3, [r7, #3]
 800f040:	4613      	mov	r3, r2
 800f042:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d101      	bne.n	800f04e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f04a:	2302      	movs	r3, #2
 800f04c:	e02e      	b.n	800f0ac <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f04e:	2306      	movs	r3, #6
 800f050:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800f052:	78bb      	ldrb	r3, [r7, #2]
 800f054:	2b7f      	cmp	r3, #127	; 0x7f
 800f056:	d104      	bne.n	800f062 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f058:	78fb      	ldrb	r3, [r7, #3]
 800f05a:	2b04      	cmp	r3, #4
 800f05c:	d001      	beq.n	800f062 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f05e:	2303      	movs	r3, #3
 800f060:	e024      	b.n	800f0ac <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800f062:	2300      	movs	r3, #0
 800f064:	60fb      	str	r3, [r7, #12]
 800f066:	f107 0310 	add.w	r3, r7, #16
 800f06a:	2200      	movs	r2, #0
 800f06c:	601a      	str	r2, [r3, #0]
 800f06e:	605a      	str	r2, [r3, #4]
 800f070:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800f072:	f107 030c 	add.w	r3, r7, #12
 800f076:	78fa      	ldrb	r2, [r7, #3]
 800f078:	2110      	movs	r1, #16
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7ff ff73 	bl	800ef66 <SecureElementAesEncrypt>
 800f080:	4603      	mov	r3, r0
 800f082:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f084:	7ffb      	ldrb	r3, [r7, #31]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d001      	beq.n	800f08e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f08a:	7ffb      	ldrb	r3, [r7, #31]
 800f08c:	e00e      	b.n	800f0ac <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800f08e:	f107 020c 	add.w	r2, r7, #12
 800f092:	78bb      	ldrb	r3, [r7, #2]
 800f094:	4611      	mov	r1, r2
 800f096:	4618      	mov	r0, r3
 800f098:	f7ff feba 	bl	800ee10 <SecureElementSetKey>
 800f09c:	4603      	mov	r3, r0
 800f09e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f0a0:	7ffb      	ldrb	r3, [r7, #31]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d001      	beq.n	800f0aa <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f0a6:	7ffb      	ldrb	r3, [r7, #31]
 800f0a8:	e000      	b.n	800f0ac <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f0aa:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3720      	adds	r7, #32
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	60b9      	str	r1, [r7, #8]
 800f0bc:	607b      	str	r3, [r7, #4]
 800f0be:	4603      	mov	r3, r0
 800f0c0:	73fb      	strb	r3, [r7, #15]
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d005      	beq.n	800f0d8 <SecureElementProcessJoinAccept+0x24>
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d002      	beq.n	800f0d8 <SecureElementProcessJoinAccept+0x24>
 800f0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f0d8:	2302      	movs	r3, #2
 800f0da:	e064      	b.n	800f1a6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f0dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0e0:	2b21      	cmp	r3, #33	; 0x21
 800f0e2:	d901      	bls.n	800f0e8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f0e4:	2305      	movs	r3, #5
 800f0e6:	e05e      	b.n	800f1a6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f0ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	6879      	ldr	r1, [r7, #4]
 800f0f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0f8:	f00a fbad 	bl	8019856 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	1c58      	adds	r0, r3, #1
 800f100:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f104:	b29b      	uxth	r3, r3
 800f106:	3b01      	subs	r3, #1
 800f108:	b299      	uxth	r1, r3
 800f10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10c:	3301      	adds	r3, #1
 800f10e:	7dfa      	ldrb	r2, [r7, #23]
 800f110:	f7ff ff29 	bl	800ef66 <SecureElementAesEncrypt>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d001      	beq.n	800f11e <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f11a:	2307      	movs	r3, #7
 800f11c:	e043      	b.n	800f1a6 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f120:	330b      	adds	r3, #11
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	09db      	lsrs	r3, r3, #7
 800f126:	b2da      	uxtb	r2, r3
 800f128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800f12c:	2300      	movs	r3, #0
 800f12e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800f130:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f134:	3b04      	subs	r3, #4
 800f136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f138:	4413      	add	r3, r2
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800f13e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f142:	3b03      	subs	r3, #3
 800f144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f146:	4413      	add	r3, r2
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	021b      	lsls	r3, r3, #8
 800f14c:	693a      	ldr	r2, [r7, #16]
 800f14e:	4313      	orrs	r3, r2
 800f150:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800f152:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f156:	3b02      	subs	r3, #2
 800f158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f15a:	4413      	add	r3, r2
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	041b      	lsls	r3, r3, #16
 800f160:	693a      	ldr	r2, [r7, #16]
 800f162:	4313      	orrs	r3, r2
 800f164:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800f166:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f16a:	3b01      	subs	r3, #1
 800f16c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f16e:	4413      	add	r3, r2
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	061b      	lsls	r3, r3, #24
 800f174:	693a      	ldr	r2, [r7, #16]
 800f176:	4313      	orrs	r3, r2
 800f178:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800f17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d10e      	bne.n	800f1a0 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f182:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f186:	b29b      	uxth	r3, r3
 800f188:	3b04      	subs	r3, #4
 800f18a:	b299      	uxth	r1, r3
 800f18c:	2301      	movs	r3, #1
 800f18e:	693a      	ldr	r2, [r7, #16]
 800f190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f192:	f7ff feb9 	bl	800ef08 <SecureElementVerifyAesCmac>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d003      	beq.n	800f1a4 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f19c:	2301      	movs	r3, #1
 800f19e:	e002      	b.n	800f1a6 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f1a0:	2304      	movs	r3, #4
 800f1a2:	e000      	b.n	800f1a6 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3718      	adds	r7, #24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
	...

0800f1b0 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d101      	bne.n	800f1c2 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1be:	2302      	movs	r3, #2
 800f1c0:	e006      	b.n	800f1d0 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f1c2:	4b05      	ldr	r3, [pc, #20]	; (800f1d8 <SecureElementRandomNumber+0x28>)
 800f1c4:	695b      	ldr	r3, [r3, #20]
 800f1c6:	4798      	blx	r3
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	0801f3a4 	.word	0x0801f3a4

0800f1dc <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d101      	bne.n	800f1ee <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1ea:	2302      	movs	r3, #2
 800f1ec:	e007      	b.n	800f1fe <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800f1ee:	4b06      	ldr	r3, [pc, #24]	; (800f208 <SecureElementSetDevEui+0x2c>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2208      	movs	r2, #8
 800f1f4:	6879      	ldr	r1, [r7, #4]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f00a fb2d 	bl	8019856 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	200007d4 	.word	0x200007d4

0800f20c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800f20c:	b480      	push	{r7}
 800f20e:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800f210:	4b02      	ldr	r3, [pc, #8]	; (800f21c <SecureElementGetDevEui+0x10>)
 800f212:	681b      	ldr	r3, [r3, #0]
}
 800f214:	4618      	mov	r0, r3
 800f216:	46bd      	mov	sp, r7
 800f218:	bc80      	pop	{r7}
 800f21a:	4770      	bx	lr
 800f21c:	200007d4 	.word	0x200007d4

0800f220 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d101      	bne.n	800f232 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f22e:	2302      	movs	r3, #2
 800f230:	e008      	b.n	800f244 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800f232:	4b06      	ldr	r3, [pc, #24]	; (800f24c <SecureElementSetJoinEui+0x2c>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3308      	adds	r3, #8
 800f238:	2208      	movs	r2, #8
 800f23a:	6879      	ldr	r1, [r7, #4]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f00a fb0a 	bl	8019856 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	200007d4 	.word	0x200007d4

0800f250 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800f250:	b480      	push	{r7}
 800f252:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800f254:	4b03      	ldr	r3, [pc, #12]	; (800f264 <SecureElementGetJoinEui+0x14>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	3308      	adds	r3, #8
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bc80      	pop	{r7}
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	200007d4 	.word	0x200007d4

0800f268 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f272:	4a1a      	ldr	r2, [pc, #104]	; (800f2dc <LmHandlerInit+0x74>)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f278:	4b19      	ldr	r3, [pc, #100]	; (800f2e0 <LmHandlerInit+0x78>)
 800f27a:	4a1a      	ldr	r2, [pc, #104]	; (800f2e4 <LmHandlerInit+0x7c>)
 800f27c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f27e:	4b18      	ldr	r3, [pc, #96]	; (800f2e0 <LmHandlerInit+0x78>)
 800f280:	4a19      	ldr	r2, [pc, #100]	; (800f2e8 <LmHandlerInit+0x80>)
 800f282:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f284:	4b16      	ldr	r3, [pc, #88]	; (800f2e0 <LmHandlerInit+0x78>)
 800f286:	4a19      	ldr	r2, [pc, #100]	; (800f2ec <LmHandlerInit+0x84>)
 800f288:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f28a:	4b15      	ldr	r3, [pc, #84]	; (800f2e0 <LmHandlerInit+0x78>)
 800f28c:	4a18      	ldr	r2, [pc, #96]	; (800f2f0 <LmHandlerInit+0x88>)
 800f28e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f290:	4b12      	ldr	r3, [pc, #72]	; (800f2dc <LmHandlerInit+0x74>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	4a17      	ldr	r2, [pc, #92]	; (800f2f4 <LmHandlerInit+0x8c>)
 800f298:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f29a:	4b10      	ldr	r3, [pc, #64]	; (800f2dc <LmHandlerInit+0x74>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	4a14      	ldr	r2, [pc, #80]	; (800f2f4 <LmHandlerInit+0x8c>)
 800f2a2:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f2a4:	4b0d      	ldr	r3, [pc, #52]	; (800f2dc <LmHandlerInit+0x74>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	4a12      	ldr	r2, [pc, #72]	; (800f2f4 <LmHandlerInit+0x8c>)
 800f2ac:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f2ae:	4b11      	ldr	r3, [pc, #68]	; (800f2f4 <LmHandlerInit+0x8c>)
 800f2b0:	4a11      	ldr	r2, [pc, #68]	; (800f2f8 <LmHandlerInit+0x90>)
 800f2b2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f2b4:	4b09      	ldr	r3, [pc, #36]	; (800f2dc <LmHandlerInit+0x74>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	699b      	ldr	r3, [r3, #24]
 800f2ba:	4a0e      	ldr	r2, [pc, #56]	; (800f2f4 <LmHandlerInit+0x8c>)
 800f2bc:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800f2be:	490f      	ldr	r1, [pc, #60]	; (800f2fc <LmHandlerInit+0x94>)
 800f2c0:	2000      	movs	r0, #0
 800f2c2:	f000 fd8d 	bl	800fde0 <LmHandlerPackageRegister>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d002      	beq.n	800f2d2 <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d0:	e000      	b.n	800f2d4 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800f2d2:	2300      	movs	r3, #0
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3708      	adds	r7, #8
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	20000800 	.word	0x20000800
 800f2e0:	20000804 	.word	0x20000804
 800f2e4:	0800faad 	.word	0x0800faad
 800f2e8:	0800fb15 	.word	0x0800fb15
 800f2ec:	0800fbf1 	.word	0x0800fbf1
 800f2f0:	0800fd0d 	.word	0x0800fd0d
 800f2f4:	20000814 	.word	0x20000814
 800f2f8:	08010179 	.word	0x08010179
 800f2fc:	200000b8 	.word	0x200000b8

0800f300 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b094      	sub	sp, #80	; 0x50
 800f304:	af04      	add	r7, sp, #16
 800f306:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800f308:	2214      	movs	r2, #20
 800f30a:	6879      	ldr	r1, [r7, #4]
 800f30c:	488f      	ldr	r0, [pc, #572]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f30e:	f00d fda9 	bl	801ce64 <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f312:	f7fe fb0b 	bl	800d92c <LoraInfo_GetPtr>
 800f316:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800f318:	4b8c      	ldr	r3, [pc, #560]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	461a      	mov	r2, r3
 800f31e:	2301      	movs	r3, #1
 800f320:	4093      	lsls	r3, r2
 800f322:	461a      	mov	r2, r3
 800f324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	4013      	ands	r3, r2
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d106      	bne.n	800f33c <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800f32e:	4b88      	ldr	r3, [pc, #544]	; (800f550 <LmHandlerConfigure+0x250>)
 800f330:	2201      	movs	r2, #1
 800f332:	2100      	movs	r1, #0
 800f334:	2000      	movs	r0, #0
 800f336:	f00e fde1 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800f33a:	e7fe      	b.n	800f33a <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800f33c:	4b83      	ldr	r3, [pc, #524]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	4984      	ldr	r1, [pc, #528]	; (800f554 <LmHandlerConfigure+0x254>)
 800f344:	4884      	ldr	r0, [pc, #528]	; (800f558 <LmHandlerConfigure+0x258>)
 800f346:	f004 fbfd 	bl	8013b44 <LoRaMacInitialization>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d002      	beq.n	800f356 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f350:	f04f 33ff 	mov.w	r3, #4294967295
 800f354:	e0f5      	b.n	800f542 <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800f356:	2326      	movs	r3, #38	; 0x26
 800f358:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800f35a:	f107 0318 	add.w	r3, r7, #24
 800f35e:	4618      	mov	r0, r3
 800f360:	f005 f914 	bl	801458c <LoRaMacMibSetRequestConfirm>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d103      	bne.n	800f372 <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800f36a:	4b7c      	ldr	r3, [pc, #496]	; (800f55c <LmHandlerConfigure+0x25c>)
 800f36c:	2201      	movs	r2, #1
 800f36e:	701a      	strb	r2, [r3, #0]
 800f370:	e02a      	b.n	800f3c8 <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800f372:	2327      	movs	r3, #39	; 0x27
 800f374:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800f376:	4b7a      	ldr	r3, [pc, #488]	; (800f560 <LmHandlerConfigure+0x260>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d00c      	beq.n	800f39a <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f380:	f107 0318 	add.w	r3, r7, #24
 800f384:	4618      	mov	r0, r3
 800f386:	f004 ff7b 	bl	8014280 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800f38a:	4b75      	ldr	r3, [pc, #468]	; (800f560 <LmHandlerConfigure+0x260>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	691b      	ldr	r3, [r3, #16]
 800f390:	69fa      	ldr	r2, [r7, #28]
 800f392:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800f396:	4610      	mov	r0, r2
 800f398:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800f39a:	2326      	movs	r3, #38	; 0x26
 800f39c:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800f39e:	f107 0318 	add.w	r3, r7, #24
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f005 f8f2 	bl	801458c <LoRaMacMibSetRequestConfirm>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d10c      	bne.n	800f3c8 <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f3b2:	f107 0318 	add.w	r3, r7, #24
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f004 ff62 	bl	8014280 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800f3bc:	7f3b      	ldrb	r3, [r7, #28]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d002      	beq.n	800f3c8 <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800f3c2:	4b66      	ldr	r3, [pc, #408]	; (800f55c <LmHandlerConfigure+0x25c>)
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800f3c8:	4b64      	ldr	r3, [pc, #400]	; (800f55c <LmHandlerConfigure+0x25c>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d02a      	beq.n	800f426 <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800f3d0:	4b63      	ldr	r3, [pc, #396]	; (800f560 <LmHandlerConfigure+0x260>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	69db      	ldr	r3, [r3, #28]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d004      	beq.n	800f3e4 <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800f3da:	4b61      	ldr	r3, [pc, #388]	; (800f560 <LmHandlerConfigure+0x260>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	69db      	ldr	r3, [r3, #28]
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800f3e4:	2306      	movs	r3, #6
 800f3e6:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800f3e8:	f107 0318 	add.w	r3, r7, #24
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f004 ff47 	bl	8014280 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	4a5b      	ldr	r2, [pc, #364]	; (800f564 <LmHandlerConfigure+0x264>)
 800f3f6:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800f3f8:	2326      	movs	r3, #38	; 0x26
 800f3fa:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800f3fc:	f107 0318 	add.w	r3, r7, #24
 800f400:	4618      	mov	r0, r3
 800f402:	f004 ff3d 	bl	8014280 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800f406:	69fb      	ldr	r3, [r7, #28]
 800f408:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f40c:	4b4f      	ldr	r3, [pc, #316]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f40e:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800f416:	4b4d      	ldr	r3, [pc, #308]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f418:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800f420:	4b4a      	ldr	r3, [pc, #296]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f422:	709a      	strb	r2, [r3, #2]
 800f424:	e019      	b.n	800f45a <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800f426:	2305      	movs	r3, #5
 800f428:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f42a:	2300      	movs	r3, #0
 800f42c:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800f42e:	f107 0318 	add.w	r3, r7, #24
 800f432:	4618      	mov	r0, r3
 800f434:	f005 f8aa 	bl	801458c <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800f438:	4b49      	ldr	r3, [pc, #292]	; (800f560 <LmHandlerConfigure+0x260>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	4798      	blx	r3
 800f440:	4603      	mov	r3, r0
 800f442:	4a48      	ldr	r2, [pc, #288]	; (800f564 <LmHandlerConfigure+0x264>)
 800f444:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800f446:	2306      	movs	r3, #6
 800f448:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800f44a:	4b46      	ldr	r3, [pc, #280]	; (800f564 <LmHandlerConfigure+0x264>)
 800f44c:	695b      	ldr	r3, [r3, #20]
 800f44e:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800f450:	f107 0318 	add.w	r3, r7, #24
 800f454:	4618      	mov	r0, r3
 800f456:	f005 f899 	bl	801458c <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800f45a:	2302      	movs	r3, #2
 800f45c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f45e:	f107 0318 	add.w	r3, r7, #24
 800f462:	4618      	mov	r0, r3
 800f464:	f004 ff0c 	bl	8014280 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	2208      	movs	r2, #8
 800f46c:	4619      	mov	r1, r3
 800f46e:	483d      	ldr	r0, [pc, #244]	; (800f564 <LmHandlerConfigure+0x264>)
 800f470:	f00a f9f1 	bl	8019856 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800f474:	2303      	movs	r3, #3
 800f476:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f478:	f107 0318 	add.w	r3, r7, #24
 800f47c:	4618      	mov	r0, r3
 800f47e:	f004 feff 	bl	8014280 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	2208      	movs	r2, #8
 800f486:	4619      	mov	r1, r3
 800f488:	4837      	ldr	r0, [pc, #220]	; (800f568 <LmHandlerConfigure+0x268>)
 800f48a:	f00a f9e4 	bl	8019856 <memcpy1>

    SecureElementPrintKeys();
 800f48e:	f7ff fc1f 	bl	800ecd0 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800f492:	4b36      	ldr	r3, [pc, #216]	; (800f56c <LmHandlerConfigure+0x26c>)
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	461a      	mov	r2, r3
 800f498:	4b35      	ldr	r3, [pc, #212]	; (800f570 <LmHandlerConfigure+0x270>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	4619      	mov	r1, r3
 800f49e:	4b35      	ldr	r3, [pc, #212]	; (800f574 <LmHandlerConfigure+0x274>)
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	4b34      	ldr	r3, [pc, #208]	; (800f578 <LmHandlerConfigure+0x278>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	9303      	str	r3, [sp, #12]
 800f4aa:	9002      	str	r0, [sp, #8]
 800f4ac:	9101      	str	r1, [sp, #4]
 800f4ae:	9200      	str	r2, [sp, #0]
 800f4b0:	4b32      	ldr	r3, [pc, #200]	; (800f57c <LmHandlerConfigure+0x27c>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	2002      	movs	r0, #2
 800f4b8:	f00e fd20 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f4bc:	230f      	movs	r3, #15
 800f4be:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800f4c4:	f107 0318 	add.w	r3, r7, #24
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f005 f85f 	bl	801458c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f4ce:	2310      	movs	r3, #16
 800f4d0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f4d6:	f107 0318 	add.w	r3, r7, #24
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f005 f856 	bl	801458c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f4e0:	2304      	movs	r3, #4
 800f4e2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f4e4:	4b19      	ldr	r3, [pc, #100]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f4e6:	789b      	ldrb	r3, [r3, #2]
 800f4e8:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f4ea:	f107 0318 	add.w	r3, r7, #24
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f005 f84c 	bl	801458c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f4f4:	2337      	movs	r3, #55	; 0x37
 800f4f6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f4f8:	4b14      	ldr	r3, [pc, #80]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f4fe:	f107 0318 	add.w	r3, r7, #24
 800f502:	4618      	mov	r0, r3
 800f504:	f005 f842 	bl	801458c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f508:	230f      	movs	r3, #15
 800f50a:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f50c:	4b0f      	ldr	r3, [pc, #60]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	f107 0210 	add.w	r2, r7, #16
 800f514:	4611      	mov	r1, r2
 800f516:	4618      	mov	r0, r3
 800f518:	f007 fe8a 	bl	8017230 <RegionGetPhyParam>
 800f51c:	4603      	mov	r3, r0
 800f51e:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2b00      	cmp	r3, #0
 800f524:	bf14      	ite	ne
 800f526:	2301      	movne	r3, #1
 800f528:	2300      	moveq	r3, #0
 800f52a:	b2da      	uxtb	r2, r3
 800f52c:	4b07      	ldr	r3, [pc, #28]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f52e:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800f530:	2014      	movs	r0, #20
 800f532:	f000 faa3 	bl	800fa7c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f536:	4b05      	ldr	r3, [pc, #20]	; (800f54c <LmHandlerConfigure+0x24c>)
 800f538:	799b      	ldrb	r3, [r3, #6]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f005 fdb6 	bl	80150ac <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f540:	2300      	movs	r3, #0
}
 800f542:	4618      	mov	r0, r3
 800f544:	3740      	adds	r7, #64	; 0x40
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	200007ec 	.word	0x200007ec
 800f550:	0801ecd0 	.word	0x0801ecd0
 800f554:	20000814 	.word	0x20000814
 800f558:	20000804 	.word	0x20000804
 800f55c:	2000091e 	.word	0x2000091e
 800f560:	20000800 	.word	0x20000800
 800f564:	200000a0 	.word	0x200000a0
 800f568:	200000a8 	.word	0x200000a8
 800f56c:	200000b7 	.word	0x200000b7
 800f570:	200000b6 	.word	0x200000b6
 800f574:	200000b5 	.word	0x200000b5
 800f578:	200000b4 	.word	0x200000b4
 800f57c:	0801ed1c 	.word	0x0801ed1c

0800f580 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800f584:	f002 fab0 	bl	8011ae8 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800f588:	f000 fd2c 	bl	800ffe4 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f58c:	bf00      	nop
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f590:	b480      	push	{r7}
 800f592:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f594:	4b02      	ldr	r3, [pc, #8]	; (800f5a0 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f596:	681b      	ldr	r3, [r3, #0]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bc80      	pop	{r7}
 800f59e:	4770      	bx	lr
 800f5a0:	20000828 	.word	0x20000828

0800f5a4 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b090      	sub	sp, #64	; 0x40
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	460a      	mov	r2, r1
 800f5ae:	71fb      	strb	r3, [r7, #7]
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f5ba:	4b35      	ldr	r3, [pc, #212]	; (800f690 <LmHandlerJoin+0xec>)
 800f5bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800f5c6:	79fb      	ldrb	r3, [r7, #7]
 800f5c8:	2b02      	cmp	r3, #2
 800f5ca:	d110      	bne.n	800f5ee <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f5cc:	2302      	movs	r3, #2
 800f5ce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f5d2:	4b30      	ldr	r3, [pc, #192]	; (800f694 <LmHandlerJoin+0xf0>)
 800f5d4:	2202      	movs	r2, #2
 800f5d6:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f5d8:	4a2e      	ldr	r2, [pc, #184]	; (800f694 <LmHandlerJoin+0xf0>)
 800f5da:	79bb      	ldrb	r3, [r7, #6]
 800f5dc:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800f5de:	f004 fd65 	bl	80140ac <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800f5e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f005 fb2a 	bl	8014c40 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f5ec:	e04b      	b.n	800f686 <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f5f4:	4b27      	ldr	r3, [pc, #156]	; (800f694 <LmHandlerJoin+0xf0>)
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f5fa:	4b25      	ldr	r3, [pc, #148]	; (800f690 <LmHandlerJoin+0xec>)
 800f5fc:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f600:	4b24      	ldr	r3, [pc, #144]	; (800f694 <LmHandlerJoin+0xf0>)
 800f602:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f604:	4b23      	ldr	r3, [pc, #140]	; (800f694 <LmHandlerJoin+0xf0>)
 800f606:	2200      	movs	r2, #0
 800f608:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800f60a:	4a22      	ldr	r2, [pc, #136]	; (800f694 <LmHandlerJoin+0xf0>)
 800f60c:	79bb      	ldrb	r3, [r7, #6]
 800f60e:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800f610:	4b21      	ldr	r3, [pc, #132]	; (800f698 <LmHandlerJoin+0xf4>)
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	f083 0301 	eor.w	r3, r3, #1
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d01e      	beq.n	800f65c <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f61e:	231e      	movs	r3, #30
 800f620:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f622:	4b1b      	ldr	r3, [pc, #108]	; (800f690 <LmHandlerJoin+0xec>)
 800f624:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f628:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f62a:	f107 0308 	add.w	r3, r7, #8
 800f62e:	4618      	mov	r0, r3
 800f630:	f004 ffac 	bl	801458c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f634:	231f      	movs	r3, #31
 800f636:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f638:	4b15      	ldr	r3, [pc, #84]	; (800f690 <LmHandlerJoin+0xec>)
 800f63a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f63e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f640:	f107 0308 	add.w	r3, r7, #8
 800f644:	4618      	mov	r0, r3
 800f646:	f004 ffa1 	bl	801458c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f64a:	2328      	movs	r3, #40	; 0x28
 800f64c:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f64e:	4b13      	ldr	r3, [pc, #76]	; (800f69c <LmHandlerJoin+0xf8>)
 800f650:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800f652:	f107 0308 	add.w	r3, r7, #8
 800f656:	4618      	mov	r0, r3
 800f658:	f004 ff98 	bl	801458c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800f65c:	f004 fd26 	bl	80140ac <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f660:	2301      	movs	r3, #1
 800f662:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f664:	2301      	movs	r3, #1
 800f666:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f668:	f107 0308 	add.w	r3, r7, #8
 800f66c:	4618      	mov	r0, r3
 800f66e:	f004 ff8d 	bl	801458c <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f672:	4b0b      	ldr	r3, [pc, #44]	; (800f6a0 <LmHandlerJoin+0xfc>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f678:	4806      	ldr	r0, [pc, #24]	; (800f694 <LmHandlerJoin+0xf0>)
 800f67a:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800f67c:	4b04      	ldr	r3, [pc, #16]	; (800f690 <LmHandlerJoin+0xec>)
 800f67e:	785b      	ldrb	r3, [r3, #1]
 800f680:	4618      	mov	r0, r3
 800f682:	f000 f92b 	bl	800f8dc <LmHandlerRequestClass>
}
 800f686:	bf00      	nop
 800f688:	3740      	adds	r7, #64	; 0x40
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	200007ec 	.word	0x200007ec
 800f694:	200000c4 	.word	0x200000c4
 800f698:	2000091e 	.word	0x2000091e
 800f69c:	01000300 	.word	0x01000300
 800f6a0:	20000800 	.word	0x20000800

0800f6a4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b08a      	sub	sp, #40	; 0x28
 800f6a8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f6ae:	463b      	mov	r3, r7
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f004 fde5 	bl	8014280 <LoRaMacMibGetRequestConfirm>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800f6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d106      	bne.n	800f6d2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f6c4:	793b      	ldrb	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d101      	bne.n	800f6ce <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	e002      	b.n	800f6d4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e000      	b.n	800f6d4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f6d2:	2300      	movs	r3, #0
    }
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3728      	adds	r7, #40	; 0x28
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08a      	sub	sp, #40	; 0x28
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	70fb      	strb	r3, [r7, #3]
 800f6e8:	4613      	mov	r3, r2
 800f6ea:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f6ec:	23ff      	movs	r3, #255	; 0xff
 800f6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800f6f2:	f001 ff87 	bl	8011604 <LoRaMacIsBusy>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d002      	beq.n	800f702 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f6fc:	f06f 0301 	mvn.w	r3, #1
 800f700:	e0b6      	b.n	800f870 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f702:	f7ff ffcf 	bl	800f6a4 <LmHandlerJoinStatus>
 800f706:	4603      	mov	r3, r0
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d00a      	beq.n	800f722 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800f70c:	4b5a      	ldr	r3, [pc, #360]	; (800f878 <LmHandlerSend+0x19c>)
 800f70e:	799b      	ldrb	r3, [r3, #6]
 800f710:	4a59      	ldr	r2, [pc, #356]	; (800f878 <LmHandlerSend+0x19c>)
 800f712:	79d2      	ldrb	r2, [r2, #7]
 800f714:	4611      	mov	r1, r2
 800f716:	4618      	mov	r0, r3
 800f718:	f7ff ff44 	bl	800f5a4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f71c:	f06f 0302 	mvn.w	r3, #2
 800f720:	e0a6      	b.n	800f870 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800f722:	4b56      	ldr	r3, [pc, #344]	; (800f87c <LmHandlerSend+0x1a0>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	68db      	ldr	r3, [r3, #12]
 800f728:	4798      	blx	r3
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00d      	beq.n	800f74c <LmHandlerSend+0x70>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	781a      	ldrb	r2, [r3, #0]
 800f734:	4b51      	ldr	r3, [pc, #324]	; (800f87c <LmHandlerSend+0x1a0>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d006      	beq.n	800f74c <LmHandlerSend+0x70>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d002      	beq.n	800f74c <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800f746:	f06f 0303 	mvn.w	r3, #3
 800f74a:	e091      	b.n	800f870 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800f74c:	4a4c      	ldr	r2, [pc, #304]	; (800f880 <LmHandlerSend+0x1a4>)
 800f74e:	78fb      	ldrb	r3, [r7, #3]
 800f750:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800f752:	78fb      	ldrb	r3, [r7, #3]
 800f754:	2b00      	cmp	r3, #0
 800f756:	bf14      	ite	ne
 800f758:	2301      	movne	r3, #1
 800f75a:	2300      	moveq	r3, #0
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f760:	4b48      	ldr	r3, [pc, #288]	; (800f884 <LmHandlerSend+0x1a8>)
 800f762:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f766:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	785b      	ldrb	r3, [r3, #1]
 800f76c:	f107 020c 	add.w	r2, r7, #12
 800f770:	4611      	mov	r1, r2
 800f772:	4618      	mov	r0, r3
 800f774:	f004 fcfc 	bl	8014170 <LoRaMacQueryTxPossible>
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d009      	beq.n	800f792 <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f77e:	2300      	movs	r3, #0
 800f780:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f782:	2300      	movs	r3, #0
 800f784:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800f78a:	23f9      	movs	r3, #249	; 0xf9
 800f78c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f790:	e009      	b.n	800f7a6 <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	785b      	ldrb	r3, [r3, #1]
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800f7a6:	4b36      	ldr	r3, [pc, #216]	; (800f880 <LmHandlerSend+0x1a4>)
 800f7a8:	687a      	ldr	r2, [r7, #4]
 800f7aa:	3310      	adds	r3, #16
 800f7ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7b0:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f7b4:	4b33      	ldr	r3, [pc, #204]	; (800f884 <LmHandlerSend+0x1a8>)
 800f7b6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f7ba:	4b31      	ldr	r3, [pc, #196]	; (800f880 <LmHandlerSend+0x1a4>)
 800f7bc:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800f7be:	78ba      	ldrb	r2, [r7, #2]
 800f7c0:	f107 0310 	add.w	r3, r7, #16
 800f7c4:	4611      	mov	r1, r2
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f005 fb7a 	bl	8014ec0 <LoRaMacMcpsRequest>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f7d2:	6a3b      	ldr	r3, [r7, #32]
 800f7d4:	4a2c      	ldr	r2, [pc, #176]	; (800f888 <LmHandlerSend+0x1ac>)
 800f7d6:	6013      	str	r3, [r2, #0]

    switch (status)
 800f7d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7dc:	2b11      	cmp	r3, #17
 800f7de:	d840      	bhi.n	800f862 <LmHandlerSend+0x186>
 800f7e0:	a201      	add	r2, pc, #4	; (adr r2, 800f7e8 <LmHandlerSend+0x10c>)
 800f7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e6:	bf00      	nop
 800f7e8:	0800f831 	.word	0x0800f831
 800f7ec:	0800f843 	.word	0x0800f843
 800f7f0:	0800f863 	.word	0x0800f863
 800f7f4:	0800f863 	.word	0x0800f863
 800f7f8:	0800f863 	.word	0x0800f863
 800f7fc:	0800f863 	.word	0x0800f863
 800f800:	0800f863 	.word	0x0800f863
 800f804:	0800f84b 	.word	0x0800f84b
 800f808:	0800f863 	.word	0x0800f863
 800f80c:	0800f863 	.word	0x0800f863
 800f810:	0800f863 	.word	0x0800f863
 800f814:	0800f85b 	.word	0x0800f85b
 800f818:	0800f863 	.word	0x0800f863
 800f81c:	0800f863 	.word	0x0800f863
 800f820:	0800f843 	.word	0x0800f843
 800f824:	0800f843 	.word	0x0800f843
 800f828:	0800f843 	.word	0x0800f843
 800f82c:	0800f853 	.word	0x0800f853
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800f830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f834:	f113 0f07 	cmn.w	r3, #7
 800f838:	d017      	beq.n	800f86a <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f83a:	2300      	movs	r3, #0
 800f83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800f840:	e013      	b.n	800f86a <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f842:	23fe      	movs	r3, #254	; 0xfe
 800f844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f848:	e010      	b.n	800f86c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f84a:	23fd      	movs	r3, #253	; 0xfd
 800f84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f850:	e00c      	b.n	800f86c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f852:	23fb      	movs	r3, #251	; 0xfb
 800f854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f858:	e008      	b.n	800f86c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f85a:	23fa      	movs	r3, #250	; 0xfa
 800f85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f860:	e004      	b.n	800f86c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f862:	23ff      	movs	r3, #255	; 0xff
 800f864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f868:	e000      	b.n	800f86c <LmHandlerSend+0x190>
            break;
 800f86a:	bf00      	nop
    }

    return lmhStatus;
 800f86c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f870:	4618      	mov	r0, r3
 800f872:	3728      	adds	r7, #40	; 0x28
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	200000c4 	.word	0x200000c4
 800f87c:	200007d8 	.word	0x200007d8
 800f880:	200000cc 	.word	0x200000cc
 800f884:	200007ec 	.word	0x200007ec
 800f888:	20000828 	.word	0x20000828

0800f88c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f892:	230a      	movs	r3, #10
 800f894:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f896:	463b      	mov	r3, r7
 800f898:	4618      	mov	r0, r3
 800f89a:	f005 f9d1 	bl	8014c40 <LoRaMacMlmeRequest>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	4a06      	ldr	r2, [pc, #24]	; (800f8c0 <LmHandlerDeviceTimeReq+0x34>)
 800f8a6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800f8a8:	7dfb      	ldrb	r3, [r7, #23]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d101      	bne.n	800f8b2 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	e001      	b.n	800f8b6 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f8b2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3718      	adds	r7, #24
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	20000828 	.word	0x20000828

0800f8c4 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800f8ce:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	370c      	adds	r7, #12
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bc80      	pop	{r7}
 800f8da:	4770      	bx	lr

0800f8dc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b08c      	sub	sp, #48	; 0x30
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800f8ec:	f001 fe8a 	bl	8011604 <LoRaMacIsBusy>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f8f6:	f06f 0301 	mvn.w	r3, #1
 800f8fa:	e071      	b.n	800f9e0 <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800f8fc:	f7ff fed2 	bl	800f6a4 <LmHandlerJoinStatus>
 800f900:	4603      	mov	r3, r0
 800f902:	2b01      	cmp	r3, #1
 800f904:	d002      	beq.n	800f90c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f906:	f06f 0302 	mvn.w	r3, #2
 800f90a:	e069      	b.n	800f9e0 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f90c:	2300      	movs	r3, #0
 800f90e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f910:	f107 0308 	add.w	r3, r7, #8
 800f914:	4618      	mov	r0, r3
 800f916:	f004 fcb3 	bl	8014280 <LoRaMacMibGetRequestConfirm>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d002      	beq.n	800f926 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f920:	f04f 33ff 	mov.w	r3, #4294967295
 800f924:	e05c      	b.n	800f9e0 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800f926:	7b3b      	ldrb	r3, [r7, #12]
 800f928:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800f92c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f930:	79fb      	ldrb	r3, [r7, #7]
 800f932:	429a      	cmp	r2, r3
 800f934:	d052      	beq.n	800f9dc <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d028      	beq.n	800f98e <LmHandlerRequestClass+0xb2>
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	dc48      	bgt.n	800f9d2 <LmHandlerRequestClass+0xf6>
 800f940:	2b00      	cmp	r3, #0
 800f942:	d002      	beq.n	800f94a <LmHandlerRequestClass+0x6e>
 800f944:	2b01      	cmp	r3, #1
 800f946:	d01e      	beq.n	800f986 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800f948:	e043      	b.n	800f9d2 <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800f94a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d041      	beq.n	800f9d6 <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f956:	f107 0308 	add.w	r3, r7, #8
 800f95a:	4618      	mov	r0, r3
 800f95c:	f004 fe16 	bl	801458c <LoRaMacMibSetRequestConfirm>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d10b      	bne.n	800f97e <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800f966:	4b20      	ldr	r3, [pc, #128]	; (800f9e8 <LmHandlerRequestClass+0x10c>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d032      	beq.n	800f9d6 <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800f970:	4b1d      	ldr	r3, [pc, #116]	; (800f9e8 <LmHandlerRequestClass+0x10c>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f976:	79fa      	ldrb	r2, [r7, #7]
 800f978:	4610      	mov	r0, r2
 800f97a:	4798      	blx	r3
            break;
 800f97c:	e02b      	b.n	800f9d6 <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f97e:	23ff      	movs	r3, #255	; 0xff
 800f980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f984:	e027      	b.n	800f9d6 <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800f986:	23ff      	movs	r3, #255	; 0xff
 800f988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f98c:	e026      	b.n	800f9dc <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800f98e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f992:	2b00      	cmp	r3, #0
 800f994:	d003      	beq.n	800f99e <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f996:	23ff      	movs	r3, #255	; 0xff
 800f998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f99c:	e01d      	b.n	800f9da <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800f99e:	79fb      	ldrb	r3, [r7, #7]
 800f9a0:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800f9a2:	f107 0308 	add.w	r3, r7, #8
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f004 fdf0 	bl	801458c <LoRaMacMibSetRequestConfirm>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d10b      	bne.n	800f9ca <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800f9b2:	4b0d      	ldr	r3, [pc, #52]	; (800f9e8 <LmHandlerRequestClass+0x10c>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00e      	beq.n	800f9da <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800f9bc:	4b0a      	ldr	r3, [pc, #40]	; (800f9e8 <LmHandlerRequestClass+0x10c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c2:	79fa      	ldrb	r2, [r7, #7]
 800f9c4:	4610      	mov	r0, r2
 800f9c6:	4798      	blx	r3
            break;
 800f9c8:	e007      	b.n	800f9da <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f9ca:	23ff      	movs	r3, #255	; 0xff
 800f9cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f9d0:	e003      	b.n	800f9da <LmHandlerRequestClass+0xfe>
            break;
 800f9d2:	bf00      	nop
 800f9d4:	e002      	b.n	800f9dc <LmHandlerRequestClass+0x100>
            break;
 800f9d6:	bf00      	nop
 800f9d8:	e000      	b.n	800f9dc <LmHandlerRequestClass+0x100>
            break;
 800f9da:	bf00      	nop
        }
    }
    return errorStatus;
 800f9dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3730      	adds	r7, #48	; 0x30
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	20000800 	.word	0x20000800

0800f9ec <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b08c      	sub	sp, #48	; 0x30
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d102      	bne.n	800fa00 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f9fe:	e010      	b.n	800fa22 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fa00:	2300      	movs	r3, #0
 800fa02:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800fa04:	f107 030c 	add.w	r3, r7, #12
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f004 fc39 	bl	8014280 <LoRaMacMibGetRequestConfirm>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d002      	beq.n	800fa1a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa14:	f04f 33ff 	mov.w	r3, #4294967295
 800fa18:	e003      	b.n	800fa22 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fa1a:	7c3a      	ldrb	r2, [r7, #16]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3730      	adds	r7, #48	; 0x30
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
	...

0800fa2c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b08c      	sub	sp, #48	; 0x30
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d102      	bne.n	800fa40 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3e:	e016      	b.n	800fa6e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fa40:	231f      	movs	r3, #31
 800fa42:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800fa44:	f107 030c 	add.w	r3, r7, #12
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f004 fc19 	bl	8014280 <LoRaMacMibGetRequestConfirm>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d002      	beq.n	800fa5a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa54:	f04f 33ff 	mov.w	r3, #4294967295
 800fa58:	e009      	b.n	800fa6e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fa5a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f993 2000 	ldrsb.w	r2, [r3]
 800fa68:	4b03      	ldr	r3, [pc, #12]	; (800fa78 <LmHandlerGetTxDatarate+0x4c>)
 800fa6a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800fa6c:	2300      	movs	r3, #0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3730      	adds	r7, #48	; 0x30
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	200007ec 	.word	0x200007ec

0800fa7c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08c      	sub	sp, #48	; 0x30
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fa84:	2322      	movs	r3, #34	; 0x22
 800fa86:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fa8c:	f107 030c 	add.w	r3, r7, #12
 800fa90:	4618      	mov	r0, r3
 800fa92:	f004 fd7b 	bl	801458c <LoRaMacMibSetRequestConfirm>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d002      	beq.n	800faa2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa9c:	f04f 33ff 	mov.w	r3, #4294967295
 800faa0:	e000      	b.n	800faa4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800faa2:	2300      	movs	r3, #0
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3730      	adds	r7, #48	; 0x30
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}

0800faac <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800fab4:	4b15      	ldr	r3, [pc, #84]	; (800fb0c <McpsConfirm+0x60>)
 800fab6:	2201      	movs	r2, #1
 800fab8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	785a      	ldrb	r2, [r3, #1]
 800fabe:	4b13      	ldr	r3, [pc, #76]	; (800fb0c <McpsConfirm+0x60>)
 800fac0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	789b      	ldrb	r3, [r3, #2]
 800fac6:	b25a      	sxtb	r2, r3
 800fac8:	4b10      	ldr	r3, [pc, #64]	; (800fb0c <McpsConfirm+0x60>)
 800faca:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	4a0e      	ldr	r2, [pc, #56]	; (800fb0c <McpsConfirm+0x60>)
 800fad2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fada:	4b0c      	ldr	r3, [pc, #48]	; (800fb0c <McpsConfirm+0x60>)
 800fadc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	691b      	ldr	r3, [r3, #16]
 800fae2:	b2da      	uxtb	r2, r3
 800fae4:	4b09      	ldr	r3, [pc, #36]	; (800fb0c <McpsConfirm+0x60>)
 800fae6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	791b      	ldrb	r3, [r3, #4]
 800faec:	461a      	mov	r2, r3
 800faee:	4b07      	ldr	r3, [pc, #28]	; (800fb0c <McpsConfirm+0x60>)
 800faf0:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800faf2:	4b07      	ldr	r3, [pc, #28]	; (800fb10 <McpsConfirm+0x64>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faf8:	4804      	ldr	r0, [pc, #16]	; (800fb0c <McpsConfirm+0x60>)
 800fafa:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800fafc:	6879      	ldr	r1, [r7, #4]
 800fafe:	2000      	movs	r0, #0
 800fb00:	f000 f9de 	bl	800fec0 <LmHandlerPackagesNotify>
}
 800fb04:	bf00      	nop
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	200000cc 	.word	0x200000cc
 800fb10:	20000800 	.word	0x20000800

0800fb14 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b088      	sub	sp, #32
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800fb22:	4b31      	ldr	r3, [pc, #196]	; (800fbe8 <McpsIndication+0xd4>)
 800fb24:	2201      	movs	r2, #1
 800fb26:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	785a      	ldrb	r2, [r3, #1]
 800fb2c:	4b2e      	ldr	r3, [pc, #184]	; (800fbe8 <McpsIndication+0xd4>)
 800fb2e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800fb30:	4b2d      	ldr	r3, [pc, #180]	; (800fbe8 <McpsIndication+0xd4>)
 800fb32:	785b      	ldrb	r3, [r3, #1]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d153      	bne.n	800fbe0 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	791b      	ldrb	r3, [r3, #4]
 800fb3c:	b25a      	sxtb	r2, r3
 800fb3e:	4b2a      	ldr	r3, [pc, #168]	; (800fbe8 <McpsIndication+0xd4>)
 800fb40:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb48:	b25a      	sxtb	r2, r3
 800fb4a:	4b27      	ldr	r3, [pc, #156]	; (800fbe8 <McpsIndication+0xd4>)
 800fb4c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fb54:	4b24      	ldr	r3, [pc, #144]	; (800fbe8 <McpsIndication+0xd4>)
 800fb56:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	78da      	ldrb	r2, [r3, #3]
 800fb5c:	4b22      	ldr	r3, [pc, #136]	; (800fbe8 <McpsIndication+0xd4>)
 800fb5e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	691b      	ldr	r3, [r3, #16]
 800fb64:	4a20      	ldr	r2, [pc, #128]	; (800fbe8 <McpsIndication+0xd4>)
 800fb66:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	78db      	ldrb	r3, [r3, #3]
 800fb6c:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	7b1b      	ldrb	r3, [r3, #12]
 800fb72:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800fb7a:	4b1c      	ldr	r3, [pc, #112]	; (800fbec <McpsIndication+0xd8>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb80:	f107 0218 	add.w	r2, r7, #24
 800fb84:	4918      	ldr	r1, [pc, #96]	; (800fbe8 <McpsIndication+0xd4>)
 800fb86:	4610      	mov	r0, r2
 800fb88:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800fb8a:	4b18      	ldr	r3, [pc, #96]	; (800fbec <McpsIndication+0xd8>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d007      	beq.n	800fba4 <McpsIndication+0x90>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	7e1b      	ldrb	r3, [r3, #24]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d003      	beq.n	800fba4 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800fb9c:	4b13      	ldr	r3, [pc, #76]	; (800fbec <McpsIndication+0xd8>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba2:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800fba4:	6879      	ldr	r1, [r7, #4]
 800fba6:	2001      	movs	r0, #1
 800fba8:	f000 f98a 	bl	800fec0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800fbac:	f107 0317 	add.w	r3, r7, #23
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7ff ff1b 	bl	800f9ec <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	795b      	ldrb	r3, [r3, #5]
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d111      	bne.n	800fbe2 <McpsIndication+0xce>
 800fbbe:	7dfb      	ldrb	r3, [r7, #23]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d10e      	bne.n	800fbe2 <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	733b      	strb	r3, [r7, #12]
 800fbc8:	2300      	movs	r3, #0
 800fbca:	737b      	strb	r3, [r7, #13]
 800fbcc:	2300      	movs	r3, #0
 800fbce:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800fbd0:	f107 030c 	add.w	r3, r7, #12
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7ff fd7f 	bl	800f6dc <LmHandlerSend>
 800fbde:	e000      	b.n	800fbe2 <McpsIndication+0xce>
        return;
 800fbe0:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800fbe2:	3720      	adds	r7, #32
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	200000e8 	.word	0x200000e8
 800fbec:	20000800 	.word	0x20000800

0800fbf0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b08c      	sub	sp, #48	; 0x30
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800fbf8:	4b3d      	ldr	r3, [pc, #244]	; (800fcf0 <MlmeConfirm+0x100>)
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	785a      	ldrb	r2, [r3, #1]
 800fc02:	4b3b      	ldr	r3, [pc, #236]	; (800fcf0 <MlmeConfirm+0x100>)
 800fc04:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800fc06:	4b3b      	ldr	r3, [pc, #236]	; (800fcf4 <MlmeConfirm+0x104>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc0c:	4838      	ldr	r0, [pc, #224]	; (800fcf0 <MlmeConfirm+0x100>)
 800fc0e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800fc10:	6879      	ldr	r1, [r7, #4]
 800fc12:	2002      	movs	r0, #2
 800fc14:	f000 f954 	bl	800fec0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	2b0c      	cmp	r3, #12
 800fc20:	d85e      	bhi.n	800fce0 <MlmeConfirm+0xf0>
 800fc22:	a201      	add	r2, pc, #4	; (adr r2, 800fc28 <MlmeConfirm+0x38>)
 800fc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc28:	0800fc5d 	.word	0x0800fc5d
 800fc2c:	0800fce1 	.word	0x0800fce1
 800fc30:	0800fce1 	.word	0x0800fce1
 800fc34:	0800fcaf 	.word	0x0800fcaf
 800fc38:	0800fce1 	.word	0x0800fce1
 800fc3c:	0800fce1 	.word	0x0800fce1
 800fc40:	0800fce1 	.word	0x0800fce1
 800fc44:	0800fce1 	.word	0x0800fce1
 800fc48:	0800fce1 	.word	0x0800fce1
 800fc4c:	0800fce1 	.word	0x0800fce1
 800fc50:	0800fce1 	.word	0x0800fce1
 800fc54:	0800fcc7 	.word	0x0800fcc7
 800fc58:	0800fce1 	.word	0x0800fce1
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800fc5c:	2306      	movs	r3, #6
 800fc5e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fc60:	f107 030c 	add.w	r3, r7, #12
 800fc64:	4618      	mov	r0, r3
 800fc66:	f004 fb0b 	bl	8014280 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	4a22      	ldr	r2, [pc, #136]	; (800fcf8 <MlmeConfirm+0x108>)
 800fc6e:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800fc70:	4822      	ldr	r0, [pc, #136]	; (800fcfc <MlmeConfirm+0x10c>)
 800fc72:	f7ff fedb 	bl	800fa2c <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	785b      	ldrb	r3, [r3, #1]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d108      	bne.n	800fc90 <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800fc7e:	4b20      	ldr	r3, [pc, #128]	; (800fd00 <MlmeConfirm+0x110>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800fc84:	4b1f      	ldr	r3, [pc, #124]	; (800fd04 <MlmeConfirm+0x114>)
 800fc86:	785b      	ldrb	r3, [r3, #1]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff fe27 	bl	800f8dc <LmHandlerRequestClass>
 800fc8e:	e002      	b.n	800fc96 <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800fc90:	4b1b      	ldr	r3, [pc, #108]	; (800fd00 <MlmeConfirm+0x110>)
 800fc92:	22ff      	movs	r2, #255	; 0xff
 800fc94:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fc96:	4b17      	ldr	r3, [pc, #92]	; (800fcf4 <MlmeConfirm+0x104>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9c:	4818      	ldr	r0, [pc, #96]	; (800fd00 <MlmeConfirm+0x110>)
 800fc9e:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	785b      	ldrb	r3, [r3, #1]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d11d      	bne.n	800fce4 <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800fca8:	f7ff f8a0 	bl	800edec <SecureElementPrintSessionKeys>
            }
        }
        break;
 800fcac:	e01a      	b.n	800fce4 <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800fcae:	4b16      	ldr	r3, [pc, #88]	; (800fd08 <MlmeConfirm+0x118>)
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7a1a      	ldrb	r2, [r3, #8]
 800fcb8:	4b13      	ldr	r3, [pc, #76]	; (800fd08 <MlmeConfirm+0x118>)
 800fcba:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	7a5a      	ldrb	r2, [r3, #9]
 800fcc0:	4b11      	ldr	r3, [pc, #68]	; (800fd08 <MlmeConfirm+0x118>)
 800fcc2:	74da      	strb	r2, [r3, #19]
        }
        break;
 800fcc4:	e00f      	b.n	800fce6 <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	785b      	ldrb	r3, [r3, #1]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d105      	bne.n	800fcda <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800fcce:	4b0d      	ldr	r3, [pc, #52]	; (800fd04 <MlmeConfirm+0x114>)
 800fcd0:	7b1b      	ldrb	r3, [r3, #12]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff fdf6 	bl	800f8c4 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800fcd8:	e005      	b.n	800fce6 <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800fcda:	f7ff fdd7 	bl	800f88c <LmHandlerDeviceTimeReq>
        break;
 800fcde:	e002      	b.n	800fce6 <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800fce0:	bf00      	nop
 800fce2:	e000      	b.n	800fce6 <MlmeConfirm+0xf6>
        break;
 800fce4:	bf00      	nop
    }
}
 800fce6:	bf00      	nop
 800fce8:	3730      	adds	r7, #48	; 0x30
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	200000cc 	.word	0x200000cc
 800fcf4:	20000800 	.word	0x20000800
 800fcf8:	200000a0 	.word	0x200000a0
 800fcfc:	200000c8 	.word	0x200000c8
 800fd00:	200000c4 	.word	0x200000c4
 800fd04:	200007ec 	.word	0x200007ec
 800fd08:	200000e8 	.word	0x200000e8

0800fd0c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800fd16:	4b2f      	ldr	r3, [pc, #188]	; (800fdd4 <MlmeIndication+0xc8>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	785a      	ldrb	r2, [r3, #1]
 800fd20:	4b2c      	ldr	r3, [pc, #176]	; (800fdd4 <MlmeIndication+0xc8>)
 800fd22:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	789b      	ldrb	r3, [r3, #2]
 800fd28:	b25a      	sxtb	r2, r3
 800fd2a:	4b2a      	ldr	r3, [pc, #168]	; (800fdd4 <MlmeIndication+0xc8>)
 800fd2c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd34:	b25a      	sxtb	r2, r3
 800fd36:	4b27      	ldr	r3, [pc, #156]	; (800fdd4 <MlmeIndication+0xc8>)
 800fd38:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fd40:	4b24      	ldr	r3, [pc, #144]	; (800fdd4 <MlmeIndication+0xc8>)
 800fd42:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	78da      	ldrb	r2, [r3, #3]
 800fd48:	4b22      	ldr	r3, [pc, #136]	; (800fdd4 <MlmeIndication+0xc8>)
 800fd4a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	4a20      	ldr	r2, [pc, #128]	; (800fdd4 <MlmeIndication+0xc8>)
 800fd52:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	2b0b      	cmp	r3, #11
 800fd5a:	d009      	beq.n	800fd70 <MlmeIndication+0x64>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	2b0f      	cmp	r3, #15
 800fd62:	d005      	beq.n	800fd70 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800fd64:	4b1c      	ldr	r3, [pc, #112]	; (800fdd8 <MlmeIndication+0xcc>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd6a:	491a      	ldr	r1, [pc, #104]	; (800fdd4 <MlmeIndication+0xc8>)
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800fd70:	6879      	ldr	r1, [r7, #4]
 800fd72:	2003      	movs	r0, #3
 800fd74:	f000 f8a4 	bl	800fec0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	2b0f      	cmp	r3, #15
 800fd7e:	d01e      	beq.n	800fdbe <MlmeIndication+0xb2>
 800fd80:	2b0f      	cmp	r3, #15
 800fd82:	dc1e      	bgt.n	800fdc2 <MlmeIndication+0xb6>
 800fd84:	2b07      	cmp	r3, #7
 800fd86:	d002      	beq.n	800fd8e <MlmeIndication+0x82>
 800fd88:	2b0b      	cmp	r3, #11
 800fd8a:	d01c      	beq.n	800fdc6 <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800fd8c:	e019      	b.n	800fdc2 <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800fd8e:	2300      	movs	r3, #0
 800fd90:	723b      	strb	r3, [r7, #8]
 800fd92:	2300      	movs	r3, #0
 800fd94:	727b      	strb	r3, [r7, #9]
 800fd96:	2300      	movs	r3, #0
 800fd98:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800fd9a:	4b10      	ldr	r3, [pc, #64]	; (800fddc <MlmeIndication+0xd0>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	4798      	blx	r3
 800fda2:	4603      	mov	r3, r0
 800fda4:	f083 0301 	eor.w	r3, r3, #1
 800fda8:	b2db      	uxtb	r3, r3
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d00d      	beq.n	800fdca <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800fdae:	f107 0308 	add.w	r3, r7, #8
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7ff fc90 	bl	800f6dc <LmHandlerSend>
        break;
 800fdbc:	e005      	b.n	800fdca <MlmeIndication+0xbe>
        break;
 800fdbe:	bf00      	nop
 800fdc0:	e004      	b.n	800fdcc <MlmeIndication+0xc0>
        break;
 800fdc2:	bf00      	nop
 800fdc4:	e002      	b.n	800fdcc <MlmeIndication+0xc0>
        break;
 800fdc6:	bf00      	nop
 800fdc8:	e000      	b.n	800fdcc <MlmeIndication+0xc0>
        break;
 800fdca:	bf00      	nop
    }
}
 800fdcc:	bf00      	nop
 800fdce:	3710      	adds	r7, #16
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	200000e8 	.word	0x200000e8
 800fdd8:	20000800 	.word	0x20000800
 800fddc:	200007d8 	.word	0x200007d8

0800fde0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	4603      	mov	r3, r0
 800fde8:	6039      	str	r1, [r7, #0]
 800fdea:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800fdec:	2300      	movs	r3, #0
 800fdee:	60fb      	str	r3, [r7, #12]
    switch( id )
 800fdf0:	79fb      	ldrb	r3, [r7, #7]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d103      	bne.n	800fdfe <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800fdf6:	f000 f9d9 	bl	80101ac <LmhpCompliancePackageFactory>
 800fdfa:	60f8      	str	r0, [r7, #12]
            break;
 800fdfc:	e000      	b.n	800fe00 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800fdfe:	bf00      	nop
        }
    }
    if( package != NULL )
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d02b      	beq.n	800fe5e <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800fe06:	79fb      	ldrb	r3, [r7, #7]
 800fe08:	4918      	ldr	r1, [pc, #96]	; (800fe6c <LmHandlerPackageRegister+0x8c>)
 800fe0a:	68fa      	ldr	r2, [r7, #12]
 800fe0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800fe10:	79fb      	ldrb	r3, [r7, #7]
 800fe12:	4a16      	ldr	r2, [pc, #88]	; (800fe6c <LmHandlerPackageRegister+0x8c>)
 800fe14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe18:	4a15      	ldr	r2, [pc, #84]	; (800fe70 <LmHandlerPackageRegister+0x90>)
 800fe1a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800fe1c:	79fb      	ldrb	r3, [r7, #7]
 800fe1e:	4a13      	ldr	r2, [pc, #76]	; (800fe6c <LmHandlerPackageRegister+0x8c>)
 800fe20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe24:	4a13      	ldr	r2, [pc, #76]	; (800fe74 <LmHandlerPackageRegister+0x94>)
 800fe26:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fe28:	79fb      	ldrb	r3, [r7, #7]
 800fe2a:	4a10      	ldr	r2, [pc, #64]	; (800fe6c <LmHandlerPackageRegister+0x8c>)
 800fe2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe30:	4a11      	ldr	r2, [pc, #68]	; (800fe78 <LmHandlerPackageRegister+0x98>)
 800fe32:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fe34:	4b11      	ldr	r3, [pc, #68]	; (800fe7c <LmHandlerPackageRegister+0x9c>)
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	79fb      	ldrb	r3, [r7, #7]
 800fe3a:	490c      	ldr	r1, [pc, #48]	; (800fe6c <LmHandlerPackageRegister+0x8c>)
 800fe3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe40:	6992      	ldr	r2, [r2, #24]
 800fe42:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fe44:	79fb      	ldrb	r3, [r7, #7]
 800fe46:	4a09      	ldr	r2, [pc, #36]	; (800fe6c <LmHandlerPackageRegister+0x8c>)
 800fe48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	4a0c      	ldr	r2, [pc, #48]	; (800fe80 <LmHandlerPackageRegister+0xa0>)
 800fe50:	6851      	ldr	r1, [r2, #4]
 800fe52:	4a0b      	ldr	r2, [pc, #44]	; (800fe80 <LmHandlerPackageRegister+0xa0>)
 800fe54:	7852      	ldrb	r2, [r2, #1]
 800fe56:	6838      	ldr	r0, [r7, #0]
 800fe58:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	e001      	b.n	800fe62 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fe5e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	200007d8 	.word	0x200007d8
 800fe70:	0800f5a5 	.word	0x0800f5a5
 800fe74:	0800f6dd 	.word	0x0800f6dd
 800fe78:	0800f88d 	.word	0x0800f88d
 800fe7c:	20000800 	.word	0x20000800
 800fe80:	200000fc 	.word	0x200000fc

0800fe84 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800fe8e:	79fb      	ldrb	r3, [r7, #7]
 800fe90:	2b04      	cmp	r3, #4
 800fe92:	d80e      	bhi.n	800feb2 <LmHandlerPackageIsInitialized+0x2e>
 800fe94:	79fb      	ldrb	r3, [r7, #7]
 800fe96:	4a09      	ldr	r2, [pc, #36]	; (800febc <LmHandlerPackageIsInitialized+0x38>)
 800fe98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d007      	beq.n	800feb2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fea2:	79fb      	ldrb	r3, [r7, #7]
 800fea4:	4a05      	ldr	r2, [pc, #20]	; (800febc <LmHandlerPackageIsInitialized+0x38>)
 800fea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	4798      	blx	r3
 800feae:	4603      	mov	r3, r0
 800feb0:	e000      	b.n	800feb4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800feb2:	2300      	movs	r3, #0
    }
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	200007d8 	.word	0x200007d8

0800fec0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	4603      	mov	r3, r0
 800fec8:	6039      	str	r1, [r7, #0]
 800feca:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fecc:	2300      	movs	r3, #0
 800fece:	73fb      	strb	r3, [r7, #15]
 800fed0:	e07c      	b.n	800ffcc <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800fed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fed6:	4a42      	ldr	r2, [pc, #264]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800fed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d06f      	beq.n	800ffc0 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800fee0:	79fb      	ldrb	r3, [r7, #7]
 800fee2:	2b03      	cmp	r3, #3
 800fee4:	d863      	bhi.n	800ffae <LmHandlerPackagesNotify+0xee>
 800fee6:	a201      	add	r2, pc, #4	; (adr r2, 800feec <LmHandlerPackagesNotify+0x2c>)
 800fee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feec:	0800fefd 	.word	0x0800fefd
 800fef0:	0800ff1f 	.word	0x0800ff1f
 800fef4:	0800ff6b 	.word	0x0800ff6b
 800fef8:	0800ff8d 	.word	0x0800ff8d
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800fefc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff00:	4a37      	ldr	r2, [pc, #220]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ff02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff06:	699b      	ldr	r3, [r3, #24]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d052      	beq.n	800ffb2 <LmHandlerPackagesNotify+0xf2>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800ff0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff10:	4a33      	ldr	r2, [pc, #204]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ff12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff16:	699b      	ldr	r3, [r3, #24]
 800ff18:	6838      	ldr	r0, [r7, #0]
 800ff1a:	4798      	blx	r3
                    }
                    break;
 800ff1c:	e049      	b.n	800ffb2 <LmHandlerPackagesNotify+0xf2>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ff1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff22:	4a2f      	ldr	r2, [pc, #188]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ff24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff28:	69db      	ldr	r3, [r3, #28]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d043      	beq.n	800ffb6 <LmHandlerPackagesNotify+0xf6>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ff2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff32:	4a2b      	ldr	r2, [pc, #172]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ff34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff38:	781a      	ldrb	r2, [r3, #0]
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d00a      	beq.n	800ff58 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ff42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d135      	bne.n	800ffb6 <LmHandlerPackagesNotify+0xf6>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800ff4a:	4b25      	ldr	r3, [pc, #148]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	4798      	blx	r3
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d02e      	beq.n	800ffb6 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800ff58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff5c:	4a20      	ldr	r2, [pc, #128]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ff5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff62:	69db      	ldr	r3, [r3, #28]
 800ff64:	6838      	ldr	r0, [r7, #0]
 800ff66:	4798      	blx	r3
                    }
                    break;
 800ff68:	e025      	b.n	800ffb6 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ff6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff6e:	4a1c      	ldr	r2, [pc, #112]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ff70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff74:	6a1b      	ldr	r3, [r3, #32]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d01f      	beq.n	800ffba <LmHandlerPackagesNotify+0xfa>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800ff7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff7e:	4a18      	ldr	r2, [pc, #96]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ff80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff84:	6a1b      	ldr	r3, [r3, #32]
 800ff86:	6838      	ldr	r0, [r7, #0]
 800ff88:	4798      	blx	r3
                    }
                    break;
 800ff8a:	e016      	b.n	800ffba <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800ff8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff90:	4a13      	ldr	r2, [pc, #76]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ff92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d010      	beq.n	800ffbe <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800ff9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffa0:	4a0f      	ldr	r2, [pc, #60]	; (800ffe0 <LmHandlerPackagesNotify+0x120>)
 800ffa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa8:	6838      	ldr	r0, [r7, #0]
 800ffaa:	4798      	blx	r3
                    }
                    break;
 800ffac:	e007      	b.n	800ffbe <LmHandlerPackagesNotify+0xfe>
                }
                default:
                {
                    break;
 800ffae:	bf00      	nop
 800ffb0:	e006      	b.n	800ffc0 <LmHandlerPackagesNotify+0x100>
                    break;
 800ffb2:	bf00      	nop
 800ffb4:	e004      	b.n	800ffc0 <LmHandlerPackagesNotify+0x100>
                    break;
 800ffb6:	bf00      	nop
 800ffb8:	e002      	b.n	800ffc0 <LmHandlerPackagesNotify+0x100>
                    break;
 800ffba:	bf00      	nop
 800ffbc:	e000      	b.n	800ffc0 <LmHandlerPackagesNotify+0x100>
                    break;
 800ffbe:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ffc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	73fb      	strb	r3, [r7, #15]
 800ffcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffd0:	2b04      	cmp	r3, #4
 800ffd2:	f77f af7e 	ble.w	800fed2 <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800ffd6:	bf00      	nop
 800ffd8:	bf00      	nop
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	200007d8 	.word	0x200007d8

0800ffe4 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ffea:	2300      	movs	r3, #0
 800ffec:	71fb      	strb	r3, [r7, #7]
 800ffee:	e022      	b.n	8010036 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800fff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fff4:	4a14      	ldr	r2, [pc, #80]	; (8010048 <LmHandlerPackagesProcess+0x64>)
 800fff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d015      	beq.n	801002a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800fffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010002:	4a11      	ldr	r2, [pc, #68]	; (8010048 <LmHandlerPackagesProcess+0x64>)
 8010004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010008:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 801000a:	2b00      	cmp	r3, #0
 801000c:	d00d      	beq.n	801002a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 801000e:	79fb      	ldrb	r3, [r7, #7]
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff ff37 	bl	800fe84 <LmHandlerPackageIsInitialized>
 8010016:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010018:	2b00      	cmp	r3, #0
 801001a:	d006      	beq.n	801002a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 801001c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010020:	4a09      	ldr	r2, [pc, #36]	; (8010048 <LmHandlerPackagesProcess+0x64>)
 8010022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801002a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801002e:	b2db      	uxtb	r3, r3
 8010030:	3301      	adds	r3, #1
 8010032:	b2db      	uxtb	r3, r3
 8010034:	71fb      	strb	r3, [r7, #7]
 8010036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801003a:	2b04      	cmp	r3, #4
 801003c:	ddd8      	ble.n	800fff0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 801003e:	bf00      	nop
 8010040:	bf00      	nop
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	200007d8 	.word	0x200007d8

0801004c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	4603      	mov	r3, r0
 8010054:	6039      	str	r1, [r7, #0]
 8010056:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d102      	bne.n	8010064 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 801005e:	f04f 33ff 	mov.w	r3, #4294967295
 8010062:	e00e      	b.n	8010082 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 8010064:	79fb      	ldrb	r3, [r7, #7]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d002      	beq.n	8010070 <LmHandlerGetVersion+0x24>
 801006a:	2b01      	cmp	r3, #1
 801006c:	d004      	beq.n	8010078 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 801006e:	e007      	b.n	8010080 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	4a06      	ldr	r2, [pc, #24]	; (801008c <LmHandlerGetVersion+0x40>)
 8010074:	601a      	str	r2, [r3, #0]
            break;
 8010076:	e003      	b.n	8010080 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	4a05      	ldr	r2, [pc, #20]	; (8010090 <LmHandlerGetVersion+0x44>)
 801007c:	601a      	str	r2, [r3, #0]
            break;
 801007e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010080:	2300      	movs	r3, #0
}
 8010082:	4618      	mov	r0, r3
 8010084:	370c      	adds	r7, #12
 8010086:	46bd      	mov	sp, r7
 8010088:	bc80      	pop	{r7}
 801008a:	4770      	bx	lr
 801008c:	01000300 	.word	0x01000300
 8010090:	01010003 	.word	0x01010003

08010094 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 8010098:	f005 f826 	bl	80150e8 <LoRaMacDeInitialization>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d101      	bne.n	80100a6 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80100a2:	2300      	movs	r3, #0
 80100a4:	e001      	b.n	80100aa <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80100a6:	f06f 0301 	mvn.w	r3, #1
    }
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	bd80      	pop	{r7, pc}

080100ae <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 80100b2:	f004 f825 	bl	8014100 <LoRaMacHalt>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d101      	bne.n	80100c0 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80100bc:	2300      	movs	r3, #0
 80100be:	e001      	b.n	80100c4 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80100c0:	f06f 0301 	mvn.w	r3, #1
    }
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08e      	sub	sp, #56	; 0x38
 80100cc:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80100ce:	2300      	movs	r3, #0
 80100d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 80100d4:	2300      	movs	r3, #0
 80100d6:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 80100d8:	f7ff ffe9 	bl	80100ae <LmHandlerHalt>
 80100dc:	4603      	mov	r3, r0
 80100de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 80100e2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d12f      	bne.n	801014a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 80100ea:	f000 f84f 	bl	801018c <NvmDataMgmtStoreBegin>
 80100ee:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 80100f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f2:	f113 0f02 	cmn.w	r3, #2
 80100f6:	d103      	bne.n	8010100 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80100f8:	23f8      	movs	r3, #248	; 0xf8
 80100fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100fe:	e01c      	b.n	801013a <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 8010100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010102:	2b00      	cmp	r3, #0
 8010104:	d104      	bne.n	8010110 <LmHandlerNvmDataStore+0x48>
 8010106:	4b1b      	ldr	r3, [pc, #108]	; (8010174 <LmHandlerNvmDataStore+0xac>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	695b      	ldr	r3, [r3, #20]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d103      	bne.n	8010118 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010110:	23ff      	movs	r3, #255	; 0xff
 8010112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010116:	e010      	b.n	801013a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 8010118:	2326      	movs	r3, #38	; 0x26
 801011a:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 801011c:	1d3b      	adds	r3, r7, #4
 801011e:	4618      	mov	r0, r3
 8010120:	f004 f8ae 	bl	8014280 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 8010128:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 801012c:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 801012e:	4b11      	ldr	r3, [pc, #68]	; (8010174 <LmHandlerNvmDataStore+0xac>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	695b      	ldr	r3, [r3, #20]
 8010134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010136:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010138:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 801013a:	f000 f82f 	bl	801019c <NvmDataMgmtStoreEnd>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d002      	beq.n	801014a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010144:	23ff      	movs	r3, #255	; 0xff
 8010146:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 801014a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801014e:	2b00      	cmp	r3, #0
 8010150:	d109      	bne.n	8010166 <LmHandlerNvmDataStore+0x9e>
 8010152:	4b08      	ldr	r3, [pc, #32]	; (8010174 <LmHandlerNvmDataStore+0xac>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	69db      	ldr	r3, [r3, #28]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d004      	beq.n	8010166 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 801015c:	4b05      	ldr	r3, [pc, #20]	; (8010174 <LmHandlerNvmDataStore+0xac>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	69db      	ldr	r3, [r3, #28]
 8010162:	2001      	movs	r0, #1
 8010164:	4798      	blx	r3
    }

    return lmhStatus;
 8010166:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801016a:	4618      	mov	r0, r3
 801016c:	3738      	adds	r7, #56	; 0x38
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	bf00      	nop
 8010174:	20000800 	.word	0x20000800

08010178 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8010182:	bf00      	nop
 8010184:	370c      	adds	r7, #12
 8010186:	46bd      	mov	sp, r7
 8010188:	bc80      	pop	{r7}
 801018a:	4770      	bx	lr

0801018c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 801018c:	b480      	push	{r7}
 801018e:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 8010190:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010194:	4618      	mov	r0, r3
 8010196:	46bd      	mov	sp, r7
 8010198:	bc80      	pop	{r7}
 801019a:	4770      	bx	lr

0801019c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 801019c:	b480      	push	{r7}
 801019e:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 80101a0:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bc80      	pop	{r7}
 80101aa:	4770      	bx	lr

080101ac <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 80101ac:	b480      	push	{r7}
 80101ae:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 80101b0:	4b02      	ldr	r3, [pc, #8]	; (80101bc <LmhpCompliancePackageFactory+0x10>)
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bc80      	pop	{r7}
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	20000104 	.word	0x20000104

080101c0 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	4613      	mov	r3, r2
 80101cc:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00f      	beq.n	80101f4 <LmhpComplianceInit+0x34>
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00c      	beq.n	80101f4 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80101da:	4a0c      	ldr	r2, [pc, #48]	; (801020c <LmhpComplianceInit+0x4c>)
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80101e0:	4a0b      	ldr	r2, [pc, #44]	; (8010210 <LmhpComplianceInit+0x50>)
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80101e6:	4a0a      	ldr	r2, [pc, #40]	; (8010210 <LmhpComplianceInit+0x50>)
 80101e8:	79fb      	ldrb	r3, [r7, #7]
 80101ea:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 80101ec:	4b08      	ldr	r3, [pc, #32]	; (8010210 <LmhpComplianceInit+0x50>)
 80101ee:	2201      	movs	r2, #1
 80101f0:	701a      	strb	r2, [r3, #0]
 80101f2:	e006      	b.n	8010202 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 80101f4:	4b05      	ldr	r3, [pc, #20]	; (801020c <LmhpComplianceInit+0x4c>)
 80101f6:	2200      	movs	r2, #0
 80101f8:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 80101fa:	4b05      	ldr	r3, [pc, #20]	; (8010210 <LmhpComplianceInit+0x50>)
 80101fc:	2200      	movs	r2, #0
 80101fe:	701a      	strb	r2, [r3, #0]
    }
}
 8010200:	bf00      	nop
 8010202:	bf00      	nop
 8010204:	3714      	adds	r7, #20
 8010206:	46bd      	mov	sp, r7
 8010208:	bc80      	pop	{r7}
 801020a:	4770      	bx	lr
 801020c:	2000094c 	.word	0x2000094c
 8010210:	20000938 	.word	0x20000938

08010214 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8010214:	b480      	push	{r7}
 8010216:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8010218:	4b02      	ldr	r3, [pc, #8]	; (8010224 <LmhpComplianceIsInitialized+0x10>)
 801021a:	781b      	ldrb	r3, [r3, #0]
}
 801021c:	4618      	mov	r0, r3
 801021e:	46bd      	mov	sp, r7
 8010220:	bc80      	pop	{r7}
 8010222:	4770      	bx	lr
 8010224:	20000938 	.word	0x20000938

08010228 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8010228:	b480      	push	{r7}
 801022a:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 801022c:	4b07      	ldr	r3, [pc, #28]	; (801024c <LmhpComplianceIsRunning+0x24>)
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	f083 0301 	eor.w	r3, r3, #1
 8010234:	b2db      	uxtb	r3, r3
 8010236:	2b00      	cmp	r3, #0
 8010238:	d001      	beq.n	801023e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 801023a:	2300      	movs	r3, #0
 801023c:	e001      	b.n	8010242 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 801023e:	4b03      	ldr	r3, [pc, #12]	; (801024c <LmhpComplianceIsRunning+0x24>)
 8010240:	785b      	ldrb	r3, [r3, #1]
}
 8010242:	4618      	mov	r0, r3
 8010244:	46bd      	mov	sp, r7
 8010246:	bc80      	pop	{r7}
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop
 801024c:	20000938 	.word	0x20000938

08010250 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 8010258:	4b0f      	ldr	r3, [pc, #60]	; (8010298 <LmhpComplianceOnMcpsConfirm+0x48>)
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	f083 0301 	eor.w	r3, r3, #1
 8010260:	b2db      	uxtb	r3, r3
 8010262:	2b00      	cmp	r3, #0
 8010264:	d112      	bne.n	801028c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8010266:	4b0c      	ldr	r3, [pc, #48]	; (8010298 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010268:	785b      	ldrb	r3, [r3, #1]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00f      	beq.n	801028e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8010272:	2b01      	cmp	r3, #1
 8010274:	d10b      	bne.n	801028e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 801027a:	2b00      	cmp	r3, #0
 801027c:	d007      	beq.n	801028e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801027e:	4b06      	ldr	r3, [pc, #24]	; (8010298 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010280:	899b      	ldrh	r3, [r3, #12]
 8010282:	3301      	adds	r3, #1
 8010284:	b29a      	uxth	r2, r3
 8010286:	4b04      	ldr	r3, [pc, #16]	; (8010298 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010288:	819a      	strh	r2, [r3, #12]
 801028a:	e000      	b.n	801028e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 801028c:	bf00      	nop
    }
}
 801028e:	370c      	adds	r7, #12
 8010290:	46bd      	mov	sp, r7
 8010292:	bc80      	pop	{r7}
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	20000938 	.word	0x20000938

0801029c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80102a4:	4b12      	ldr	r3, [pc, #72]	; (80102f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	f083 0301 	eor.w	r3, r3, #1
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d116      	bne.n	80102e0 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80102b2:	4b0f      	ldr	r3, [pc, #60]	; (80102f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80102b4:	785b      	ldrb	r3, [r3, #1]
 80102b6:	f083 0301 	eor.w	r3, r3, #1
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d111      	bne.n	80102e4 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	2b04      	cmp	r3, #4
 80102c6:	d10e      	bne.n	80102e6 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 80102c8:	4b09      	ldr	r3, [pc, #36]	; (80102f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80102ca:	2201      	movs	r2, #1
 80102cc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	7a1a      	ldrb	r2, [r3, #8]
 80102d2:	4b07      	ldr	r3, [pc, #28]	; (80102f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80102d4:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	7a5a      	ldrb	r2, [r3, #9]
 80102da:	4b05      	ldr	r3, [pc, #20]	; (80102f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80102dc:	741a      	strb	r2, [r3, #16]
 80102de:	e002      	b.n	80102e6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80102e0:	bf00      	nop
 80102e2:	e000      	b.n	80102e6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80102e4:	bf00      	nop
    }
}
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bc80      	pop	{r7}
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop
 80102f0:	20000938 	.word	0x20000938

080102f4 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80102fa:	4b33      	ldr	r3, [pc, #204]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	f083 0301 	eor.w	r3, r3, #1
 8010302:	b2db      	uxtb	r3, r3
 8010304:	2b00      	cmp	r3, #0
 8010306:	d002      	beq.n	801030e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010308:	f04f 33ff 	mov.w	r3, #4294967295
 801030c:	e057      	b.n	80103be <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 801030e:	4b2e      	ldr	r3, [pc, #184]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010310:	785b      	ldrb	r3, [r3, #1]
 8010312:	f083 0301 	eor.w	r3, r3, #1
 8010316:	b2db      	uxtb	r3, r3
 8010318:	2b00      	cmp	r3, #0
 801031a:	d001      	beq.n	8010320 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801031c:	2300      	movs	r3, #0
 801031e:	e04e      	b.n	80103be <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 8010320:	4b29      	ldr	r3, [pc, #164]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010322:	7b9b      	ldrb	r3, [r3, #14]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d019      	beq.n	801035c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8010328:	4b27      	ldr	r3, [pc, #156]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 801032a:	2200      	movs	r2, #0
 801032c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 801032e:	4b26      	ldr	r3, [pc, #152]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010330:	2203      	movs	r2, #3
 8010332:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8010334:	4b24      	ldr	r3, [pc, #144]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	2205      	movs	r2, #5
 801033a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 801033c:	4b22      	ldr	r3, [pc, #136]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	3301      	adds	r3, #1
 8010342:	4a21      	ldr	r2, [pc, #132]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010344:	7bd2      	ldrb	r2, [r2, #15]
 8010346:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8010348:	4b1f      	ldr	r3, [pc, #124]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 801034a:	689b      	ldr	r3, [r3, #8]
 801034c:	3302      	adds	r3, #2
 801034e:	4a1e      	ldr	r2, [pc, #120]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010350:	7c12      	ldrb	r2, [r2, #16]
 8010352:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8010354:	4b1c      	ldr	r3, [pc, #112]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010356:	2201      	movs	r2, #1
 8010358:	709a      	strb	r2, [r3, #2]
 801035a:	e01c      	b.n	8010396 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 801035c:	4b1a      	ldr	r3, [pc, #104]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 801035e:	789b      	ldrb	r3, [r3, #2]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d005      	beq.n	8010370 <LmhpComplianceTxProcess+0x7c>
 8010364:	2b04      	cmp	r3, #4
 8010366:	d116      	bne.n	8010396 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 8010368:	4b17      	ldr	r3, [pc, #92]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 801036a:	2201      	movs	r2, #1
 801036c:	709a      	strb	r2, [r3, #2]
            break;
 801036e:	e012      	b.n	8010396 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 8010370:	4b15      	ldr	r3, [pc, #84]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010372:	2202      	movs	r2, #2
 8010374:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010376:	4b14      	ldr	r3, [pc, #80]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010378:	899b      	ldrh	r3, [r3, #12]
 801037a:	0a1b      	lsrs	r3, r3, #8
 801037c:	b29a      	uxth	r2, r3
 801037e:	4b12      	ldr	r3, [pc, #72]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	b2d2      	uxtb	r2, r2
 8010384:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010386:	4b10      	ldr	r3, [pc, #64]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 8010388:	899a      	ldrh	r2, [r3, #12]
 801038a:	4b0f      	ldr	r3, [pc, #60]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 801038c:	689b      	ldr	r3, [r3, #8]
 801038e:	3301      	adds	r3, #1
 8010390:	b2d2      	uxtb	r2, r2
 8010392:	701a      	strb	r2, [r3, #0]
            break;
 8010394:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8010396:	23e0      	movs	r3, #224	; 0xe0
 8010398:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 801039a:	4b0b      	ldr	r3, [pc, #44]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 801039c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 801039e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80103a0:	4b09      	ldr	r3, [pc, #36]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 80103a2:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 80103a4:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 80103a6:	4809      	ldr	r0, [pc, #36]	; (80103cc <LmhpComplianceTxProcess+0xd8>)
 80103a8:	f00d fb30 	bl	801da0c <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80103ac:	4b08      	ldr	r3, [pc, #32]	; (80103d0 <LmhpComplianceTxProcess+0xdc>)
 80103ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b0:	4a05      	ldr	r2, [pc, #20]	; (80103c8 <LmhpComplianceTxProcess+0xd4>)
 80103b2:	78d2      	ldrb	r2, [r2, #3]
 80103b4:	4611      	mov	r1, r2
 80103b6:	4638      	mov	r0, r7
 80103b8:	2201      	movs	r2, #1
 80103ba:	4798      	blx	r3
 80103bc:	4603      	mov	r3, r0
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	20000938 	.word	0x20000938
 80103cc:	20000920 	.word	0x20000920
 80103d0:	20000104 	.word	0x20000104

080103d4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b0a2      	sub	sp, #136	; 0x88
 80103d8:	af02      	add	r7, sp, #8
 80103da:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80103dc:	4ba3      	ldr	r3, [pc, #652]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	f083 0301 	eor.w	r3, r3, #1
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	f040 81c2 	bne.w	8010770 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	7b5b      	ldrb	r3, [r3, #13]
 80103f0:	f083 0301 	eor.w	r3, r3, #1
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	f040 81bc 	bne.w	8010774 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 80103fc:	4b9b      	ldr	r3, [pc, #620]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80103fe:	785b      	ldrb	r3, [r3, #1]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00c      	beq.n	801041e <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	7b9b      	ldrb	r3, [r3, #14]
 8010408:	f083 0301 	eor.w	r3, r3, #1
 801040c:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 801040e:	2b00      	cmp	r3, #0
 8010410:	d005      	beq.n	801041e <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010412:	4b96      	ldr	r3, [pc, #600]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010414:	899b      	ldrh	r3, [r3, #12]
 8010416:	3301      	adds	r3, #1
 8010418:	b29a      	uxth	r2, r3
 801041a:	4b94      	ldr	r3, [pc, #592]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 801041c:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	78db      	ldrb	r3, [r3, #3]
 8010422:	2be0      	cmp	r3, #224	; 0xe0
 8010424:	f040 81a8 	bne.w	8010778 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010428:	4b90      	ldr	r3, [pc, #576]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 801042a:	785b      	ldrb	r3, [r3, #1]
 801042c:	f083 0301 	eor.w	r3, r3, #1
 8010430:	b2db      	uxtb	r3, r3
 8010432:	2b00      	cmp	r3, #0
 8010434:	d060      	beq.n	80104f8 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	7b1b      	ldrb	r3, [r3, #12]
 801043a:	2b04      	cmp	r3, #4
 801043c:	f040 81a1 	bne.w	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010446:	2b01      	cmp	r3, #1
 8010448:	f040 819b 	bne.w	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	689b      	ldr	r3, [r3, #8]
 8010450:	3301      	adds	r3, #1
 8010452:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010454:	2b01      	cmp	r3, #1
 8010456:	f040 8194 	bne.w	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	689b      	ldr	r3, [r3, #8]
 801045e:	3302      	adds	r3, #2
 8010460:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010462:	2b01      	cmp	r3, #1
 8010464:	f040 818d 	bne.w	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	3303      	adds	r3, #3
 801046e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010470:	2b01      	cmp	r3, #1
 8010472:	f040 8186 	bne.w	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 8010476:	4b7d      	ldr	r3, [pc, #500]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010478:	2200      	movs	r2, #0
 801047a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 801047c:	4b7b      	ldr	r3, [pc, #492]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 801047e:	22e0      	movs	r2, #224	; 0xe0
 8010480:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8010482:	4b7a      	ldr	r3, [pc, #488]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010484:	2202      	movs	r2, #2
 8010486:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8010488:	4b78      	ldr	r3, [pc, #480]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 801048a:	2200      	movs	r2, #0
 801048c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 801048e:	4b77      	ldr	r3, [pc, #476]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010490:	2200      	movs	r2, #0
 8010492:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8010494:	4b75      	ldr	r3, [pc, #468]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010496:	2200      	movs	r2, #0
 8010498:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 801049a:	4b74      	ldr	r3, [pc, #464]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 801049c:	2200      	movs	r2, #0
 801049e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 80104a0:	4b72      	ldr	r3, [pc, #456]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80104a2:	2201      	movs	r2, #1
 80104a4:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 80104a6:	4b71      	ldr	r3, [pc, #452]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80104a8:	2201      	movs	r2, #1
 80104aa:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 80104ac:	2304      	movs	r3, #4
 80104ae:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 80104b0:	2301      	movs	r3, #1
 80104b2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80104b4:	f107 0308 	add.w	r3, r7, #8
 80104b8:	4618      	mov	r0, r3
 80104ba:	f004 f867 	bl	801458c <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 80104be:	2000      	movs	r0, #0
 80104c0:	f004 fdf4 	bl	80150ac <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 80104c4:	4b6a      	ldr	r3, [pc, #424]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d003      	beq.n	80104d6 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 80104ce:	4b68      	ldr	r3, [pc, #416]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80104d6:	2300      	movs	r3, #0
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	4b66      	ldr	r3, [pc, #408]	; (8010674 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80104dc:	2200      	movs	r2, #0
 80104de:	f04f 31ff 	mov.w	r1, #4294967295
 80104e2:	4865      	ldr	r0, [pc, #404]	; (8010678 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80104e4:	f00d fa5c 	bl	801d9a0 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80104e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80104ec:	4862      	ldr	r0, [pc, #392]	; (8010678 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80104ee:	f00d fb6b 	bl	801dbc8 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 80104f2:	f7ff feff 	bl	80102f4 <LmhpComplianceTxProcess>
 80104f6:	e144      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	689b      	ldr	r3, [r3, #8]
 80104fc:	781a      	ldrb	r2, [r3, #0]
 80104fe:	4b5b      	ldr	r3, [pc, #364]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010500:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 8010502:	4b5a      	ldr	r3, [pc, #360]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010504:	789b      	ldrb	r3, [r3, #2]
 8010506:	2b0a      	cmp	r3, #10
 8010508:	f200 8138 	bhi.w	801077c <LmhpComplianceOnMcpsIndication+0x3a8>
 801050c:	a201      	add	r2, pc, #4	; (adr r2, 8010514 <LmhpComplianceOnMcpsIndication+0x140>)
 801050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010512:	bf00      	nop
 8010514:	08010541 	.word	0x08010541
 8010518:	0801058b 	.word	0x0801058b
 801051c:	08010593 	.word	0x08010593
 8010520:	080105a1 	.word	0x080105a1
 8010524:	080105af 	.word	0x080105af
 8010528:	08010607 	.word	0x08010607
 801052c:	08010619 	.word	0x08010619
 8010530:	08010681 	.word	0x08010681
 8010534:	08010729 	.word	0x08010729
 8010538:	0801073b 	.word	0x0801073b
 801053c:	08010755 	.word	0x08010755
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 8010540:	484d      	ldr	r0, [pc, #308]	; (8010678 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010542:	f00d fad1 	bl	801dae8 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 8010546:	4b49      	ldr	r3, [pc, #292]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010548:	2200      	movs	r2, #0
 801054a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 801054c:	4b47      	ldr	r3, [pc, #284]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 801054e:	2200      	movs	r2, #0
 8010550:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 8010552:	2304      	movs	r3, #4
 8010554:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010556:	4b46      	ldr	r3, [pc, #280]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 801055e:	f107 0308 	add.w	r3, r7, #8
 8010562:	4618      	mov	r0, r3
 8010564:	f004 f812 	bl	801458c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010568:	4b41      	ldr	r3, [pc, #260]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	785b      	ldrb	r3, [r3, #1]
 801056e:	4618      	mov	r0, r3
 8010570:	f004 fd9c 	bl	80150ac <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8010574:	4b3e      	ldr	r3, [pc, #248]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	2b00      	cmp	r3, #0
 801057c:	f000 8100 	beq.w	8010780 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010580:	4b3b      	ldr	r3, [pc, #236]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	689b      	ldr	r3, [r3, #8]
 8010586:	4798      	blx	r3
                }
            }
            break;
 8010588:	e0fa      	b.n	8010780 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 801058a:	4b38      	ldr	r3, [pc, #224]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 801058c:	2202      	movs	r2, #2
 801058e:	719a      	strb	r2, [r3, #6]
            break;
 8010590:	e0f7      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 8010592:	4b36      	ldr	r3, [pc, #216]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010594:	2201      	movs	r2, #1
 8010596:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8010598:	4b34      	ldr	r3, [pc, #208]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 801059a:	2201      	movs	r2, #1
 801059c:	709a      	strb	r2, [r3, #2]
            break;
 801059e:	e0f0      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 80105a0:	4b32      	ldr	r3, [pc, #200]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80105a2:	2200      	movs	r2, #0
 80105a4:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 80105a6:	4b31      	ldr	r3, [pc, #196]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80105a8:	2201      	movs	r2, #1
 80105aa:	709a      	strb	r2, [r3, #2]
            break;
 80105ac:	e0e9      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	7b1a      	ldrb	r2, [r3, #12]
 80105b2:	4b2e      	ldr	r3, [pc, #184]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80105b4:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 80105b6:	4b2d      	ldr	r3, [pc, #180]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80105b8:	689b      	ldr	r3, [r3, #8]
 80105ba:	2204      	movs	r2, #4
 80105bc:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80105be:	2301      	movs	r3, #1
 80105c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80105c4:	e012      	b.n	80105ec <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	689a      	ldr	r2, [r3, #8]
 80105ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105ce:	4413      	add	r3, r2
 80105d0:	781a      	ldrb	r2, [r3, #0]
 80105d2:	4b26      	ldr	r3, [pc, #152]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80105d4:	6899      	ldr	r1, [r3, #8]
 80105d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105da:	440b      	add	r3, r1
 80105dc:	3201      	adds	r2, #1
 80105de:	b2d2      	uxtb	r2, r2
 80105e0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80105e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105e6:	3301      	adds	r3, #1
 80105e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80105ec:	4b1f      	ldr	r3, [pc, #124]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80105ee:	795a      	ldrb	r2, [r3, #5]
 80105f0:	4b1e      	ldr	r3, [pc, #120]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 80105f2:	799b      	ldrb	r3, [r3, #6]
 80105f4:	4293      	cmp	r3, r2
 80105f6:	bf28      	it	cs
 80105f8:	4613      	movcs	r3, r2
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8010600:	429a      	cmp	r2, r3
 8010602:	d3e0      	bcc.n	80105c6 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 8010604:	e0bd      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 8010606:	2304      	movs	r3, #4
 8010608:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 801060c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010610:	4618      	mov	r0, r3
 8010612:	f004 fb15 	bl	8014c40 <LoRaMacMlmeRequest>
            }
            break;
 8010616:	e0b4      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 8010618:	4817      	ldr	r0, [pc, #92]	; (8010678 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801061a:	f00d fa65 	bl	801dae8 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 801061e:	4b13      	ldr	r3, [pc, #76]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010620:	2200      	movs	r2, #0
 8010622:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8010624:	4b11      	ldr	r3, [pc, #68]	; (801066c <LmhpComplianceOnMcpsIndication+0x298>)
 8010626:	2200      	movs	r2, #0
 8010628:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 801062a:	2304      	movs	r3, #4
 801062c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801062e:	4b10      	ldr	r3, [pc, #64]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010636:	f107 0308 	add.w	r3, r7, #8
 801063a:	4618      	mov	r0, r3
 801063c:	f003 ffa6 	bl	801458c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010640:	4b0b      	ldr	r3, [pc, #44]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	785b      	ldrb	r3, [r3, #1]
 8010646:	4618      	mov	r0, r3
 8010648:	f004 fd30 	bl	80150ac <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 801064c:	4b08      	ldr	r3, [pc, #32]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d003      	beq.n	801065e <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010656:	4b06      	ldr	r3, [pc, #24]	; (8010670 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	689b      	ldr	r3, [r3, #8]
 801065c:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 801065e:	4b07      	ldr	r3, [pc, #28]	; (801067c <LmhpComplianceOnMcpsIndication+0x2a8>)
 8010660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010662:	2101      	movs	r1, #1
 8010664:	2002      	movs	r0, #2
 8010666:	4798      	blx	r3
            }
            break;
 8010668:	e08b      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
 801066a:	bf00      	nop
 801066c:	20000938 	.word	0x20000938
 8010670:	2000094c 	.word	0x2000094c
 8010674:	08010799 	.word	0x08010799
 8010678:	20000920 	.word	0x20000920
 801067c:	20000104 	.word	0x20000104
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7b1b      	ldrb	r3, [r3, #12]
 8010684:	2b03      	cmp	r3, #3
 8010686:	d113      	bne.n	80106b0 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 8010688:	2305      	movs	r3, #5
 801068a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	3301      	adds	r3, #1
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	021b      	lsls	r3, r3, #8
 8010698:	b21a      	sxth	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	689b      	ldr	r3, [r3, #8]
 801069e:	3302      	adds	r3, #2
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	b21b      	sxth	r3, r3
 80106a4:	4313      	orrs	r3, r2
 80106a6:	b21b      	sxth	r3, r3
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80106ae:	e032      	b.n	8010716 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	7b1b      	ldrb	r3, [r3, #12]
 80106b4:	2b07      	cmp	r3, #7
 80106b6:	d12e      	bne.n	8010716 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 80106b8:	2306      	movs	r3, #6
 80106ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	689b      	ldr	r3, [r3, #8]
 80106c2:	3301      	adds	r3, #1
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	021b      	lsls	r3, r3, #8
 80106c8:	b21a      	sxth	r2, r3
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	689b      	ldr	r3, [r3, #8]
 80106ce:	3302      	adds	r3, #2
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	b21b      	sxth	r3, r3
 80106d4:	4313      	orrs	r3, r2
 80106d6:	b21b      	sxth	r3, r3
 80106d8:	b29b      	uxth	r3, r3
 80106da:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	689b      	ldr	r3, [r3, #8]
 80106e2:	3303      	adds	r3, #3
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	041a      	lsls	r2, r3, #16
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	689b      	ldr	r3, [r3, #8]
 80106ec:	3304      	adds	r3, #4
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	021b      	lsls	r3, r3, #8
 80106f2:	4313      	orrs	r3, r2
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	6892      	ldr	r2, [r2, #8]
 80106f8:	3205      	adds	r2, #5
 80106fa:	7812      	ldrb	r2, [r2, #0]
 80106fc:	4313      	orrs	r3, r2
 80106fe:	461a      	mov	r2, r3
 8010700:	2364      	movs	r3, #100	; 0x64
 8010702:	fb02 f303 	mul.w	r3, r2, r3
 8010706:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	689b      	ldr	r3, [r3, #8]
 801070c:	3306      	adds	r3, #6
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	b25b      	sxtb	r3, r3
 8010712:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 8010716:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801071a:	4618      	mov	r0, r3
 801071c:	f004 fa90 	bl	8014c40 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8010720:	4b19      	ldr	r3, [pc, #100]	; (8010788 <LmhpComplianceOnMcpsIndication+0x3b4>)
 8010722:	2201      	movs	r2, #1
 8010724:	709a      	strb	r2, [r3, #2]
            }
            break;
 8010726:	e02c      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 8010728:	230a      	movs	r3, #10
 801072a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 801072e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010732:	4618      	mov	r0, r3
 8010734:	f004 fa84 	bl	8014c40 <LoRaMacMlmeRequest>
            }
            break;
 8010738:	e023      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 801073a:	2300      	movs	r3, #0
 801073c:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	3301      	adds	r3, #1
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010748:	f107 0308 	add.w	r3, r7, #8
 801074c:	4618      	mov	r0, r3
 801074e:	f003 ff1d 	bl	801458c <LoRaMacMibSetRequestConfirm>
            }
            break;
 8010752:	e016      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010754:	230d      	movs	r3, #13
 8010756:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	689b      	ldr	r3, [r3, #8]
 801075e:	785b      	ldrb	r3, [r3, #1]
 8010760:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 8010764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010768:	4618      	mov	r0, r3
 801076a:	f004 fa69 	bl	8014c40 <LoRaMacMlmeRequest>
            }
            break;
 801076e:	e008      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 8010770:	bf00      	nop
 8010772:	e006      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 8010774:	bf00      	nop
 8010776:	e004      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 8010778:	bf00      	nop
 801077a:	e002      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 801077c:	bf00      	nop
 801077e:	e000      	b.n	8010782 <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 8010780:	bf00      	nop
        }
    }
}
 8010782:	3780      	adds	r7, #128	; 0x80
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	20000938 	.word	0x20000938

0801078c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 801078c:	b480      	push	{r7}
 801078e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010790:	bf00      	nop
 8010792:	46bd      	mov	sp, r7
 8010794:	bc80      	pop	{r7}
 8010796:	4770      	bx	lr

08010798 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 80107a0:	f7ff fda8 	bl	80102f4 <LmhpComplianceTxProcess>
}
 80107a4:	bf00      	nop
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 80107ac:	b590      	push	{r4, r7, lr}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80107b2:	f00d fab3 	bl	801dd1c <UTIL_TIMER_GetCurrentTime>
 80107b6:	4603      	mov	r3, r0
 80107b8:	4a16      	ldr	r2, [pc, #88]	; (8010814 <OnRadioTxDone+0x68>)
 80107ba:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80107bc:	4c16      	ldr	r4, [pc, #88]	; (8010818 <OnRadioTxDone+0x6c>)
 80107be:	463b      	mov	r3, r7
 80107c0:	4618      	mov	r0, r3
 80107c2:	f00c fc29 	bl	801d018 <SysTimeGet>
 80107c6:	f504 734e 	add.w	r3, r4, #824	; 0x338
 80107ca:	463a      	mov	r2, r7
 80107cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107d0:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 80107d4:	4a11      	ldr	r2, [pc, #68]	; (801081c <OnRadioTxDone+0x70>)
 80107d6:	7813      	ldrb	r3, [r2, #0]
 80107d8:	f043 0310 	orr.w	r3, r3, #16
 80107dc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80107de:	4b0e      	ldr	r3, [pc, #56]	; (8010818 <OnRadioTxDone+0x6c>)
 80107e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00a      	beq.n	80107fe <OnRadioTxDone+0x52>
 80107e8:	4b0b      	ldr	r3, [pc, #44]	; (8010818 <OnRadioTxDone+0x6c>)
 80107ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107ee:	691b      	ldr	r3, [r3, #16]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d004      	beq.n	80107fe <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80107f4:	4b08      	ldr	r3, [pc, #32]	; (8010818 <OnRadioTxDone+0x6c>)
 80107f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107fa:	691b      	ldr	r3, [r3, #16]
 80107fc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80107fe:	4b08      	ldr	r3, [pc, #32]	; (8010820 <OnRadioTxDone+0x74>)
 8010800:	2201      	movs	r2, #1
 8010802:	2100      	movs	r1, #0
 8010804:	2002      	movs	r0, #2
 8010806:	f00d fb79 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 801080a:	bf00      	nop
 801080c:	370c      	adds	r7, #12
 801080e:	46bd      	mov	sp, r7
 8010810:	bd90      	pop	{r4, r7, pc}
 8010812:	bf00      	nop
 8010814:	20001cb0 	.word	0x20001cb0
 8010818:	20000950 	.word	0x20000950
 801081c:	20001cac 	.word	0x20001cac
 8010820:	0801ed48 	.word	0x0801ed48

08010824 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	4608      	mov	r0, r1
 801082e:	4611      	mov	r1, r2
 8010830:	461a      	mov	r2, r3
 8010832:	4603      	mov	r3, r0
 8010834:	817b      	strh	r3, [r7, #10]
 8010836:	460b      	mov	r3, r1
 8010838:	813b      	strh	r3, [r7, #8]
 801083a:	4613      	mov	r3, r2
 801083c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 801083e:	f00d fa6d 	bl	801dd1c <UTIL_TIMER_GetCurrentTime>
 8010842:	4603      	mov	r3, r0
 8010844:	4a16      	ldr	r2, [pc, #88]	; (80108a0 <OnRadioRxDone+0x7c>)
 8010846:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010848:	4a15      	ldr	r2, [pc, #84]	; (80108a0 <OnRadioRxDone+0x7c>)
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 801084e:	4a14      	ldr	r2, [pc, #80]	; (80108a0 <OnRadioRxDone+0x7c>)
 8010850:	897b      	ldrh	r3, [r7, #10]
 8010852:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010854:	4a12      	ldr	r2, [pc, #72]	; (80108a0 <OnRadioRxDone+0x7c>)
 8010856:	893b      	ldrh	r3, [r7, #8]
 8010858:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 801085a:	4a11      	ldr	r2, [pc, #68]	; (80108a0 <OnRadioRxDone+0x7c>)
 801085c:	79fb      	ldrb	r3, [r7, #7]
 801085e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010860:	4a10      	ldr	r2, [pc, #64]	; (80108a4 <OnRadioRxDone+0x80>)
 8010862:	7813      	ldrb	r3, [r2, #0]
 8010864:	f043 0308 	orr.w	r3, r3, #8
 8010868:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801086a:	4b0f      	ldr	r3, [pc, #60]	; (80108a8 <OnRadioRxDone+0x84>)
 801086c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010870:	2b00      	cmp	r3, #0
 8010872:	d00a      	beq.n	801088a <OnRadioRxDone+0x66>
 8010874:	4b0c      	ldr	r3, [pc, #48]	; (80108a8 <OnRadioRxDone+0x84>)
 8010876:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801087a:	691b      	ldr	r3, [r3, #16]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d004      	beq.n	801088a <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010880:	4b09      	ldr	r3, [pc, #36]	; (80108a8 <OnRadioRxDone+0x84>)
 8010882:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010886:	691b      	ldr	r3, [r3, #16]
 8010888:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 801088a:	4b08      	ldr	r3, [pc, #32]	; (80108ac <OnRadioRxDone+0x88>)
 801088c:	2201      	movs	r2, #1
 801088e:	2100      	movs	r1, #0
 8010890:	2002      	movs	r0, #2
 8010892:	f00d fb33 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 8010896:	bf00      	nop
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	20001cb4 	.word	0x20001cb4
 80108a4:	20001cac 	.word	0x20001cac
 80108a8:	20000950 	.word	0x20000950
 80108ac:	0801ed58 	.word	0x0801ed58

080108b0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80108b4:	4a0e      	ldr	r2, [pc, #56]	; (80108f0 <OnRadioTxTimeout+0x40>)
 80108b6:	7813      	ldrb	r3, [r2, #0]
 80108b8:	f043 0304 	orr.w	r3, r3, #4
 80108bc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80108be:	4b0d      	ldr	r3, [pc, #52]	; (80108f4 <OnRadioTxTimeout+0x44>)
 80108c0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d00a      	beq.n	80108de <OnRadioTxTimeout+0x2e>
 80108c8:	4b0a      	ldr	r3, [pc, #40]	; (80108f4 <OnRadioTxTimeout+0x44>)
 80108ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80108ce:	691b      	ldr	r3, [r3, #16]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d004      	beq.n	80108de <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80108d4:	4b07      	ldr	r3, [pc, #28]	; (80108f4 <OnRadioTxTimeout+0x44>)
 80108d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80108da:	691b      	ldr	r3, [r3, #16]
 80108dc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80108de:	4b06      	ldr	r3, [pc, #24]	; (80108f8 <OnRadioTxTimeout+0x48>)
 80108e0:	2201      	movs	r2, #1
 80108e2:	2100      	movs	r1, #0
 80108e4:	2002      	movs	r0, #2
 80108e6:	f00d fb09 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 80108ea:	bf00      	nop
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	20001cac 	.word	0x20001cac
 80108f4:	20000950 	.word	0x20000950
 80108f8:	0801ed68 	.word	0x0801ed68

080108fc <OnRadioRxError>:

static void OnRadioRxError( void )
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010900:	4a0b      	ldr	r2, [pc, #44]	; (8010930 <OnRadioRxError+0x34>)
 8010902:	7813      	ldrb	r3, [r2, #0]
 8010904:	f043 0302 	orr.w	r3, r3, #2
 8010908:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801090a:	4b0a      	ldr	r3, [pc, #40]	; (8010934 <OnRadioRxError+0x38>)
 801090c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00a      	beq.n	801092a <OnRadioRxError+0x2e>
 8010914:	4b07      	ldr	r3, [pc, #28]	; (8010934 <OnRadioRxError+0x38>)
 8010916:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801091a:	691b      	ldr	r3, [r3, #16]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d004      	beq.n	801092a <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010920:	4b04      	ldr	r3, [pc, #16]	; (8010934 <OnRadioRxError+0x38>)
 8010922:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010926:	691b      	ldr	r3, [r3, #16]
 8010928:	4798      	blx	r3
    }
}
 801092a:	bf00      	nop
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	20001cac 	.word	0x20001cac
 8010934:	20000950 	.word	0x20000950

08010938 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 801093c:	4a0e      	ldr	r2, [pc, #56]	; (8010978 <OnRadioRxTimeout+0x40>)
 801093e:	7813      	ldrb	r3, [r2, #0]
 8010940:	f043 0301 	orr.w	r3, r3, #1
 8010944:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010946:	4b0d      	ldr	r3, [pc, #52]	; (801097c <OnRadioRxTimeout+0x44>)
 8010948:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00a      	beq.n	8010966 <OnRadioRxTimeout+0x2e>
 8010950:	4b0a      	ldr	r3, [pc, #40]	; (801097c <OnRadioRxTimeout+0x44>)
 8010952:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d004      	beq.n	8010966 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801095c:	4b07      	ldr	r3, [pc, #28]	; (801097c <OnRadioRxTimeout+0x44>)
 801095e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010962:	691b      	ldr	r3, [r3, #16]
 8010964:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010966:	4b06      	ldr	r3, [pc, #24]	; (8010980 <OnRadioRxTimeout+0x48>)
 8010968:	2201      	movs	r2, #1
 801096a:	2100      	movs	r1, #0
 801096c:	2002      	movs	r0, #2
 801096e:	f00d fac5 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 8010972:	bf00      	nop
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	20001cac 	.word	0x20001cac
 801097c:	20000950 	.word	0x20000950
 8010980:	0801ed78 	.word	0x0801ed78

08010984 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010984:	b480      	push	{r7}
 8010986:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010988:	4b08      	ldr	r3, [pc, #32]	; (80109ac <UpdateRxSlotIdleState+0x28>)
 801098a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801098e:	2b02      	cmp	r3, #2
 8010990:	d004      	beq.n	801099c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010992:	4b07      	ldr	r3, [pc, #28]	; (80109b0 <UpdateRxSlotIdleState+0x2c>)
 8010994:	2206      	movs	r2, #6
 8010996:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 801099a:	e003      	b.n	80109a4 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 801099c:	4b04      	ldr	r3, [pc, #16]	; (80109b0 <UpdateRxSlotIdleState+0x2c>)
 801099e:	2202      	movs	r2, #2
 80109a0:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 80109a4:	bf00      	nop
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bc80      	pop	{r7}
 80109aa:	4770      	bx	lr
 80109ac:	20000e5c 	.word	0x20000e5c
 80109b0:	20000950 	.word	0x20000950

080109b4 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08e      	sub	sp, #56	; 0x38
 80109b8:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80109ba:	4b44      	ldr	r3, [pc, #272]	; (8010acc <ProcessRadioTxDone+0x118>)
 80109bc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d002      	beq.n	80109ca <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 80109c4:	4b42      	ldr	r3, [pc, #264]	; (8010ad0 <ProcessRadioTxDone+0x11c>)
 80109c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109c8:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80109ca:	4b42      	ldr	r3, [pc, #264]	; (8010ad4 <ProcessRadioTxDone+0x120>)
 80109cc:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 80109d0:	4619      	mov	r1, r3
 80109d2:	4841      	ldr	r0, [pc, #260]	; (8010ad8 <ProcessRadioTxDone+0x124>)
 80109d4:	f00d f8f8 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80109d8:	483f      	ldr	r0, [pc, #252]	; (8010ad8 <ProcessRadioTxDone+0x124>)
 80109da:	f00d f817 	bl	801da0c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80109de:	4b3d      	ldr	r3, [pc, #244]	; (8010ad4 <ProcessRadioTxDone+0x120>)
 80109e0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80109e4:	4619      	mov	r1, r3
 80109e6:	483d      	ldr	r0, [pc, #244]	; (8010adc <ProcessRadioTxDone+0x128>)
 80109e8:	f00d f8ee 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80109ec:	483b      	ldr	r0, [pc, #236]	; (8010adc <ProcessRadioTxDone+0x128>)
 80109ee:	f00d f80d 	bl	801da0c <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 80109f2:	4b36      	ldr	r3, [pc, #216]	; (8010acc <ProcessRadioTxDone+0x118>)
 80109f4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d004      	beq.n	8010a06 <ProcessRadioTxDone+0x52>
 80109fc:	4b35      	ldr	r3, [pc, #212]	; (8010ad4 <ProcessRadioTxDone+0x120>)
 80109fe:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d019      	beq.n	8010a3a <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8010a06:	2316      	movs	r3, #22
 8010a08:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a0c:	4b2f      	ldr	r3, [pc, #188]	; (8010acc <ProcessRadioTxDone+0x118>)
 8010a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a12:	f107 0220 	add.w	r2, r7, #32
 8010a16:	4611      	mov	r1, r2
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f006 fc09 	bl	8017230 <RegionGetPhyParam>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010a22:	4b2c      	ldr	r3, [pc, #176]	; (8010ad4 <ProcessRadioTxDone+0x120>)
 8010a24:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010a28:	69fb      	ldr	r3, [r7, #28]
 8010a2a:	4413      	add	r3, r2
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	482c      	ldr	r0, [pc, #176]	; (8010ae0 <ProcessRadioTxDone+0x12c>)
 8010a30:	f00d f8ca 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8010a34:	482a      	ldr	r0, [pc, #168]	; (8010ae0 <ProcessRadioTxDone+0x12c>)
 8010a36:	f00c ffe9 	bl	801da0c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010a3a:	4b2a      	ldr	r3, [pc, #168]	; (8010ae4 <ProcessRadioTxDone+0x130>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a23      	ldr	r2, [pc, #140]	; (8010acc <ProcessRadioTxDone+0x118>)
 8010a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010a42:	4b24      	ldr	r3, [pc, #144]	; (8010ad4 <ProcessRadioTxDone+0x120>)
 8010a44:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010a48:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010a4a:	4b26      	ldr	r3, [pc, #152]	; (8010ae4 <ProcessRadioTxDone+0x130>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a54:	4618      	mov	r0, r3
 8010a56:	f00c fb17 	bl	801d088 <SysTimeGetMcuTime>
 8010a5a:	4638      	mov	r0, r7
 8010a5c:	4b1b      	ldr	r3, [pc, #108]	; (8010acc <ProcessRadioTxDone+0x118>)
 8010a5e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8010a62:	9200      	str	r2, [sp, #0]
 8010a64:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010a68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a6c:	ca06      	ldmia	r2, {r1, r2}
 8010a6e:	f00c fa6c 	bl	801cf4a <SysTimeSub>
 8010a72:	f107 0314 	add.w	r3, r7, #20
 8010a76:	463a      	mov	r2, r7
 8010a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a7c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010a80:	4b14      	ldr	r3, [pc, #80]	; (8010ad4 <ProcessRadioTxDone+0x120>)
 8010a82:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010a86:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010a88:	2301      	movs	r3, #1
 8010a8a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010a8c:	4b0f      	ldr	r3, [pc, #60]	; (8010acc <ProcessRadioTxDone+0x118>)
 8010a8e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d101      	bne.n	8010a9a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 8010a96:	2300      	movs	r3, #0
 8010a98:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010a9a:	4b0c      	ldr	r3, [pc, #48]	; (8010acc <ProcessRadioTxDone+0x118>)
 8010a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010aa0:	f107 0208 	add.w	r2, r7, #8
 8010aa4:	4611      	mov	r1, r2
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f006 fbda 	bl	8017260 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010aac:	4b09      	ldr	r3, [pc, #36]	; (8010ad4 <ProcessRadioTxDone+0x120>)
 8010aae:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010ab2:	f083 0301 	eor.w	r3, r3, #1
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d003      	beq.n	8010ac4 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010abc:	4b05      	ldr	r3, [pc, #20]	; (8010ad4 <ProcessRadioTxDone+0x120>)
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 8010ac4:	bf00      	nop
 8010ac6:	3730      	adds	r7, #48	; 0x30
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	20000e5c 	.word	0x20000e5c
 8010ad0:	0801f3a4 	.word	0x0801f3a4
 8010ad4:	20000950 	.word	0x20000950
 8010ad8:	20000cd0 	.word	0x20000cd0
 8010adc:	20000ce8 	.word	0x20000ce8
 8010ae0:	20000d48 	.word	0x20000d48
 8010ae4:	20001cb0 	.word	0x20001cb0

08010ae8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010aec:	4b10      	ldr	r3, [pc, #64]	; (8010b30 <PrepareRxDoneAbort+0x48>)
 8010aee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010af6:	4a0e      	ldr	r2, [pc, #56]	; (8010b30 <PrepareRxDoneAbort+0x48>)
 8010af8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010afc:	4b0c      	ldr	r3, [pc, #48]	; (8010b30 <PrepareRxDoneAbort+0x48>)
 8010afe:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d002      	beq.n	8010b0c <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010b06:	2000      	movs	r0, #0
 8010b08:	f001 f8f2 	bl	8011cf0 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010b0c:	4a08      	ldr	r2, [pc, #32]	; (8010b30 <PrepareRxDoneAbort+0x48>)
 8010b0e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010b12:	f043 0302 	orr.w	r3, r3, #2
 8010b16:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010b1a:	4a05      	ldr	r2, [pc, #20]	; (8010b30 <PrepareRxDoneAbort+0x48>)
 8010b1c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010b20:	f043 0320 	orr.w	r3, r3, #32
 8010b24:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 8010b28:	f7ff ff2c 	bl	8010984 <UpdateRxSlotIdleState>
}
 8010b2c:	bf00      	nop
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	20000950 	.word	0x20000950

08010b34 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010b34:	b5b0      	push	{r4, r5, r7, lr}
 8010b36:	b0a6      	sub	sp, #152	; 0x98
 8010b38:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010b3a:	2313      	movs	r3, #19
 8010b3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010b40:	4bb9      	ldr	r3, [pc, #740]	; (8010e28 <ProcessRadioRxDone+0x2f4>)
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 8010b46:	4bb8      	ldr	r3, [pc, #736]	; (8010e28 <ProcessRadioRxDone+0x2f4>)
 8010b48:	891b      	ldrh	r3, [r3, #8]
 8010b4a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 8010b4e:	4bb6      	ldr	r3, [pc, #728]	; (8010e28 <ProcessRadioRxDone+0x2f4>)
 8010b50:	895b      	ldrh	r3, [r3, #10]
 8010b52:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 8010b56:	4bb4      	ldr	r3, [pc, #720]	; (8010e28 <ProcessRadioRxDone+0x2f4>)
 8010b58:	7b1b      	ldrb	r3, [r3, #12]
 8010b5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 8010b64:	2300      	movs	r3, #0
 8010b66:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010b68:	4bb0      	ldr	r3, [pc, #704]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010b6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 8010b72:	2300      	movs	r3, #0
 8010b74:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010b7e:	4bac      	ldr	r3, [pc, #688]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8010b86:	4aaa      	ldr	r2, [pc, #680]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010b88:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010b8c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 8010b90:	4aa7      	ldr	r2, [pc, #668]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010b92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010b96:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010b9a:	4ba5      	ldr	r3, [pc, #660]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010b9c:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 8010ba0:	4ba3      	ldr	r3, [pc, #652]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010ba2:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 8010ba6:	4ba2      	ldr	r3, [pc, #648]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8010bae:	4ba0      	ldr	r3, [pc, #640]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8010bb6:	4b9e      	ldr	r3, [pc, #632]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8010bbe:	4b9c      	ldr	r3, [pc, #624]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8010bc6:	4b9a      	ldr	r3, [pc, #616]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 8010bce:	4b98      	ldr	r3, [pc, #608]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8010bd6:	4b96      	ldr	r3, [pc, #600]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010bde:	4b94      	ldr	r3, [pc, #592]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010be0:	2200      	movs	r2, #0
 8010be2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010be6:	4b92      	ldr	r3, [pc, #584]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010be8:	2200      	movs	r2, #0
 8010bea:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8010bee:	4b90      	ldr	r3, [pc, #576]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010bf6:	4b8e      	ldr	r3, [pc, #568]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010bfe:	4b8d      	ldr	r3, [pc, #564]	; (8010e34 <ProcessRadioRxDone+0x300>)
 8010c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c02:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010c04:	488c      	ldr	r0, [pc, #560]	; (8010e38 <ProcessRadioRxDone+0x304>)
 8010c06:	f00c ff6f 	bl	801dae8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010c0a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010c0e:	4619      	mov	r1, r3
 8010c10:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010c12:	f004 fbaa 	bl	801536a <LoRaMacClassBRxBeacon>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00a      	beq.n	8010c32 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8010c1c:	4a84      	ldr	r2, [pc, #528]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010c1e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8010c22:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8010c26:	4a82      	ldr	r2, [pc, #520]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010c28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010c2c:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 8010c30:	e3c7      	b.n	80113c2 <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010c32:	4b7e      	ldr	r3, [pc, #504]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010c34:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d11e      	bne.n	8010c7a <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010c3c:	f004 fba8 	bl	8015390 <LoRaMacClassBIsPingExpected>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d00a      	beq.n	8010c5c <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010c46:	2000      	movs	r0, #0
 8010c48:	f004 fb59 	bl	80152fe <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	f004 fb7a 	bl	8015346 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010c52:	4b77      	ldr	r3, [pc, #476]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010c54:	2204      	movs	r2, #4
 8010c56:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 8010c5a:	e00e      	b.n	8010c7a <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010c5c:	f004 fb9f 	bl	801539e <LoRaMacClassBIsMulticastExpected>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d009      	beq.n	8010c7a <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010c66:	2000      	movs	r0, #0
 8010c68:	f004 fb53 	bl	8015312 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010c6c:	2000      	movs	r0, #0
 8010c6e:	f004 fb73 	bl	8015358 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010c72:	4b6f      	ldr	r3, [pc, #444]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010c74:	2205      	movs	r2, #5
 8010c76:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 8010c7a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010c7e:	1c5a      	adds	r2, r3, #1
 8010c80:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 8010c84:	461a      	mov	r2, r3
 8010c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c88:	4413      	add	r3, r2
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 8010c90:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8010c94:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	3b01      	subs	r3, #1
 8010c9c:	2b06      	cmp	r3, #6
 8010c9e:	f200 836a 	bhi.w	8011376 <ProcessRadioRxDone+0x842>
 8010ca2:	a201      	add	r2, pc, #4	; (adr r2, 8010ca8 <ProcessRadioRxDone+0x174>)
 8010ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca8:	08010cc5 	.word	0x08010cc5
 8010cac:	08011377 	.word	0x08011377
 8010cb0:	08010e45 	.word	0x08010e45
 8010cb4:	08011377 	.word	0x08011377
 8010cb8:	08010e3d 	.word	0x08010e3d
 8010cbc:	08011377 	.word	0x08011377
 8010cc0:	0801131d 	.word	0x0801131d
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8010cc4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010cc8:	2b10      	cmp	r3, #16
 8010cca:	d806      	bhi.n	8010cda <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ccc:	4b58      	ldr	r3, [pc, #352]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010cce:	2201      	movs	r2, #1
 8010cd0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010cd4:	f7ff ff08 	bl	8010ae8 <PrepareRxDoneAbort>
                return;
 8010cd8:	e373      	b.n	80113c2 <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 8010cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010cdc:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 8010cde:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010ce6:	4b51      	ldr	r3, [pc, #324]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010ce8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d006      	beq.n	8010cfe <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010cf0:	4b4f      	ldr	r3, [pc, #316]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010cf8:	f7ff fef6 	bl	8010ae8 <PrepareRxDoneAbort>
                return;
 8010cfc:	e361      	b.n	80113c2 <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8010cfe:	f7fe faa7 	bl	800f250 <SecureElementGetJoinEui>
 8010d02:	4601      	mov	r1, r0
 8010d04:	f107 0308 	add.w	r3, r7, #8
 8010d08:	461a      	mov	r2, r3
 8010d0a:	20ff      	movs	r0, #255	; 0xff
 8010d0c:	f005 fd14 	bl	8016738 <LoRaMacCryptoHandleJoinAccept>
 8010d10:	4603      	mov	r3, r0
 8010d12:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8010d16:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d172      	bne.n	8010e04 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8010d1e:	7c7b      	ldrb	r3, [r7, #17]
 8010d20:	461a      	mov	r2, r3
 8010d22:	4b42      	ldr	r3, [pc, #264]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d24:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8010d28:	4b40      	ldr	r3, [pc, #256]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d2a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8010d2e:	7cbb      	ldrb	r3, [r7, #18]
 8010d30:	021b      	lsls	r3, r3, #8
 8010d32:	4313      	orrs	r3, r2
 8010d34:	4a3d      	ldr	r2, [pc, #244]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d36:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010d3a:	4b3c      	ldr	r3, [pc, #240]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d3c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8010d40:	7cfb      	ldrb	r3, [r7, #19]
 8010d42:	041b      	lsls	r3, r3, #16
 8010d44:	4313      	orrs	r3, r2
 8010d46:	4a39      	ldr	r2, [pc, #228]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d48:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	4a37      	ldr	r2, [pc, #220]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d50:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8010d54:	7e3b      	ldrb	r3, [r7, #24]
 8010d56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	4b33      	ldr	r3, [pc, #204]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d60:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010d64:	7e3b      	ldrb	r3, [r7, #24]
 8010d66:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	4b2f      	ldr	r3, [pc, #188]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010d74:	7e3b      	ldrb	r3, [r7, #24]
 8010d76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	461a      	mov	r2, r3
 8010d7e:	4b2b      	ldr	r3, [pc, #172]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8010d84:	7e7b      	ldrb	r3, [r7, #25]
 8010d86:	461a      	mov	r2, r3
 8010d88:	4b28      	ldr	r3, [pc, #160]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d8a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8010d8c:	4b27      	ldr	r3, [pc, #156]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d102      	bne.n	8010d9a <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8010d94:	4b25      	ldr	r3, [pc, #148]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d96:	2201      	movs	r2, #1
 8010d98:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8010d9a:	4b24      	ldr	r3, [pc, #144]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010da2:	fb02 f303 	mul.w	r3, r2, r3
 8010da6:	4a21      	ldr	r2, [pc, #132]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010da8:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010daa:	4b20      	ldr	r3, [pc, #128]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010db2:	4a1e      	ldr	r2, [pc, #120]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010db4:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8010db6:	4b1d      	ldr	r3, [pc, #116]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010db8:	2200      	movs	r2, #0
 8010dba:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010dbe:	f107 0308 	add.w	r3, r7, #8
 8010dc2:	3312      	adds	r3, #18
 8010dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8010dc6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	3b11      	subs	r3, #17
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010dd4:	4b15      	ldr	r3, [pc, #84]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dda:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8010dde:	4611      	mov	r1, r2
 8010de0:	4618      	mov	r0, r3
 8010de2:	f006 fa77 	bl	80172d4 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010de6:	4b11      	ldr	r3, [pc, #68]	; (8010e2c <ProcessRadioRxDone+0x2f8>)
 8010de8:	2202      	movs	r2, #2
 8010dea:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010dee:	2001      	movs	r0, #1
 8010df0:	f004 ff9a 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 8010df4:	4603      	mov	r3, r0
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d00e      	beq.n	8010e18 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8010dfa:	2101      	movs	r1, #1
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	f004 ff07 	bl	8015c10 <LoRaMacConfirmQueueSetStatus>
 8010e02:	e009      	b.n	8010e18 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010e04:	2001      	movs	r0, #1
 8010e06:	f004 ff8f 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d003      	beq.n	8010e18 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010e10:	2101      	movs	r1, #1
 8010e12:	2007      	movs	r0, #7
 8010e14:	f004 fefc 	bl	8015c10 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8010e18:	4a05      	ldr	r2, [pc, #20]	; (8010e30 <ProcessRadioRxDone+0x2fc>)
 8010e1a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010e1e:	f043 0308 	orr.w	r3, r3, #8
 8010e22:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8010e26:	e2ad      	b.n	8011384 <ProcessRadioRxDone+0x850>
 8010e28:	20001cb4 	.word	0x20001cb4
 8010e2c:	20000e5c 	.word	0x20000e5c
 8010e30:	20000950 	.word	0x20000950
 8010e34:	0801f3a4 	.word	0x0801f3a4
 8010e38:	20000ce8 	.word	0x20000ce8
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010e3c:	4bb0      	ldr	r3, [pc, #704]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8010e3e:	2201      	movs	r2, #1
 8010e40:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010e44:	4baf      	ldr	r3, [pc, #700]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8010e46:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010e4a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8010e4e:	4bac      	ldr	r3, [pc, #688]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8010e50:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8010e54:	b25b      	sxtb	r3, r3
 8010e56:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010e5a:	230d      	movs	r3, #13
 8010e5c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010e60:	4ba8      	ldr	r3, [pc, #672]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8010e62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d002      	beq.n	8010e70 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010e6a:	230e      	movs	r3, #14
 8010e6c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e70:	4ba4      	ldr	r3, [pc, #656]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8010e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e76:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f006 f9d7 	bl	8017230 <RegionGetPhyParam>
 8010e82:	4603      	mov	r3, r0
 8010e84:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8010e86:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010e8a:	3b0d      	subs	r3, #13
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	b21b      	sxth	r3, r3
 8010e90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010e94:	b21a      	sxth	r2, r3
 8010e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e98:	b21b      	sxth	r3, r3
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	dc03      	bgt.n	8010ea6 <ProcessRadioRxDone+0x372>
 8010e9e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010ea2:	2b0b      	cmp	r3, #11
 8010ea4:	d806      	bhi.n	8010eb4 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ea6:	4b96      	ldr	r3, [pc, #600]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010eae:	f7ff fe1b 	bl	8010ae8 <PrepareRxDoneAbort>
                return;
 8010eb2:	e286      	b.n	80113c2 <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 8010eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010eb6:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 8010eb8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8010ec2:	4b91      	ldr	r3, [pc, #580]	; (8011108 <ProcessRadioRxDone+0x5d4>)
 8010ec4:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8010ec6:	23ff      	movs	r3, #255	; 0xff
 8010ec8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8010ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f005 ff30 	bl	8016d36 <LoRaMacParserData>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d006      	beq.n	8010eea <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010edc:	4b88      	ldr	r3, [pc, #544]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010ee4:	f7ff fe00 	bl	8010ae8 <PrepareRxDoneAbort>
                return;
 8010ee8:	e26b      	b.n	80113c2 <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8010eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eec:	4a84      	ldr	r2, [pc, #528]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8010eee:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8010ef2:	1cba      	adds	r2, r7, #2
 8010ef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010ef8:	4611      	mov	r1, r2
 8010efa:	4618      	mov	r0, r3
 8010efc:	f002 fc9e 	bl	801383c <DetermineFrameType>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d006      	beq.n	8010f14 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010f06:	4b7e      	ldr	r3, [pc, #504]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8010f08:	2201      	movs	r2, #1
 8010f0a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010f0e:	f7ff fdeb 	bl	8010ae8 <PrepareRxDoneAbort>
                return;
 8010f12:	e256      	b.n	80113c2 <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 8010f14:	2300      	movs	r3, #0
 8010f16:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010f1e:	2300      	movs	r3, #0
 8010f20:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8010f24:	e049      	b.n	8010fba <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010f26:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f2a:	4a76      	ldr	r2, [pc, #472]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8010f2c:	212c      	movs	r1, #44	; 0x2c
 8010f2e:	fb01 f303 	mul.w	r3, r1, r3
 8010f32:	4413      	add	r3, r2
 8010f34:	33dc      	adds	r3, #220	; 0xdc
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d138      	bne.n	8010fb0 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8010f3e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f42:	4a70      	ldr	r2, [pc, #448]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8010f44:	212c      	movs	r1, #44	; 0x2c
 8010f46:	fb01 f303 	mul.w	r3, r1, r3
 8010f4a:	4413      	add	r3, r2
 8010f4c:	33da      	adds	r3, #218	; 0xda
 8010f4e:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d02d      	beq.n	8010fb0 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 8010f54:	2301      	movs	r3, #1
 8010f56:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8010f5a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f5e:	4a69      	ldr	r2, [pc, #420]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8010f60:	212c      	movs	r1, #44	; 0x2c
 8010f62:	fb01 f303 	mul.w	r3, r1, r3
 8010f66:	4413      	add	r3, r2
 8010f68:	33db      	adds	r3, #219	; 0xdb
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8010f70:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f74:	4a63      	ldr	r2, [pc, #396]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8010f76:	212c      	movs	r1, #44	; 0x2c
 8010f78:	fb01 f303 	mul.w	r3, r1, r3
 8010f7c:	4413      	add	r3, r2
 8010f7e:	33f8      	adds	r3, #248	; 0xf8
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8010f86:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010f8a:	4a5e      	ldr	r2, [pc, #376]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8010f8c:	212c      	movs	r1, #44	; 0x2c
 8010f8e:	fb01 f303 	mul.w	r3, r1, r3
 8010f92:	4413      	add	r3, r2
 8010f94:	33dc      	adds	r3, #220	; 0xdc
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010f9c:	4b59      	ldr	r3, [pc, #356]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8010f9e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010fa2:	2b02      	cmp	r3, #2
 8010fa4:	d10e      	bne.n	8010fc4 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010fa6:	4b56      	ldr	r3, [pc, #344]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8010fa8:	2203      	movs	r2, #3
 8010faa:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 8010fae:	e009      	b.n	8010fc4 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010fb0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010fb4:	3301      	adds	r3, #1
 8010fb6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8010fba:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d0b1      	beq.n	8010f26 <ProcessRadioRxDone+0x3f2>
 8010fc2:	e000      	b.n	8010fc6 <ProcessRadioRxDone+0x492>
                    break;
 8010fc4:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010fc6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d117      	bne.n	8010ffe <ProcessRadioRxDone+0x4ca>
 8010fce:	78bb      	ldrb	r3, [r7, #2]
 8010fd0:	2b03      	cmp	r3, #3
 8010fd2:	d10d      	bne.n	8010ff0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010fd4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010fd8:	f003 0320 	and.w	r3, r3, #32
 8010fdc:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d106      	bne.n	8010ff0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8010fe2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fea:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d006      	beq.n	8010ffe <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ff0:	4b43      	ldr	r3, [pc, #268]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8010ff8:	f7ff fd76 	bl	8010ae8 <PrepareRxDoneAbort>
                return;
 8010ffc:	e1e1      	b.n	80113c2 <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8010ffe:	2315      	movs	r3, #21
 8011000:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011004:	4b3f      	ldr	r3, [pc, #252]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8011006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801100a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801100e:	4611      	mov	r1, r2
 8011010:	4618      	mov	r0, r3
 8011012:	f006 f90d 	bl	8017230 <RegionGetPhyParam>
 8011016:	4603      	mov	r3, r0
 8011018:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 801101a:	78b9      	ldrb	r1, [r7, #2]
 801101c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801101e:	b29b      	uxth	r3, r3
 8011020:	4d38      	ldr	r5, [pc, #224]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8011022:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8011026:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 801102a:	1d3a      	adds	r2, r7, #4
 801102c:	9202      	str	r2, [sp, #8]
 801102e:	1cfa      	adds	r2, r7, #3
 8011030:	9201      	str	r2, [sp, #4]
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8011038:	4622      	mov	r2, r4
 801103a:	f000 fe8f 	bl	8011d5c <GetFCntDown>
 801103e:	4603      	mov	r3, r0
 8011040:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011044:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011048:	2b00      	cmp	r3, #0
 801104a:	d035      	beq.n	80110b8 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 801104c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011050:	2b07      	cmp	r3, #7
 8011052:	d119      	bne.n	8011088 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8011054:	4b2a      	ldr	r3, [pc, #168]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8011056:	2208      	movs	r2, #8
 8011058:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 801105c:	4b29      	ldr	r3, [pc, #164]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 801105e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8011062:	2b00      	cmp	r3, #0
 8011064:	d11d      	bne.n	80110a2 <ProcessRadioRxDone+0x56e>
 8011066:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 801106a:	f023 031f 	bic.w	r3, r3, #31
 801106e:	b2db      	uxtb	r3, r3
 8011070:	2ba0      	cmp	r3, #160	; 0xa0
 8011072:	d116      	bne.n	80110a2 <ProcessRadioRxDone+0x56e>
 8011074:	4b23      	ldr	r3, [pc, #140]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8011076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801107a:	429a      	cmp	r2, r3
 801107c:	d111      	bne.n	80110a2 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 801107e:	4b21      	ldr	r3, [pc, #132]	; (8011104 <ProcessRadioRxDone+0x5d0>)
 8011080:	2201      	movs	r2, #1
 8011082:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011086:	e00c      	b.n	80110a2 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011088:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801108c:	2b08      	cmp	r3, #8
 801108e:	d104      	bne.n	801109a <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8011090:	4b1b      	ldr	r3, [pc, #108]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 8011092:	220a      	movs	r2, #10
 8011094:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011098:	e003      	b.n	80110a2 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801109a:	4b19      	ldr	r3, [pc, #100]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 801109c:	2201      	movs	r2, #1
 801109e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	4a16      	ldr	r2, [pc, #88]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 80110a6:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4a14      	ldr	r2, [pc, #80]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 80110ae:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 80110b2:	f7ff fd19 	bl	8010ae8 <PrepareRxDoneAbort>
                return;
 80110b6:	e184      	b.n	80113c2 <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80110b8:	78fa      	ldrb	r2, [r7, #3]
 80110ba:	6879      	ldr	r1, [r7, #4]
 80110bc:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 80110c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80110c4:	9300      	str	r3, [sp, #0]
 80110c6:	460b      	mov	r3, r1
 80110c8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80110cc:	f005 fc80 	bl	80169d0 <LoRaMacCryptoUnsecureMessage>
 80110d0:	4603      	mov	r3, r0
 80110d2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80110d6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d016      	beq.n	801110c <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80110de:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80110e2:	2b02      	cmp	r3, #2
 80110e4:	d104      	bne.n	80110f0 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80110e6:	4b06      	ldr	r3, [pc, #24]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 80110e8:	220b      	movs	r2, #11
 80110ea:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80110ee:	e003      	b.n	80110f8 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80110f0:	4b03      	ldr	r3, [pc, #12]	; (8011100 <ProcessRadioRxDone+0x5cc>)
 80110f2:	220c      	movs	r2, #12
 80110f4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 80110f8:	f7ff fcf6 	bl	8010ae8 <PrepareRxDoneAbort>
                return;
 80110fc:	e161      	b.n	80113c2 <ProcessRadioRxDone+0x88e>
 80110fe:	bf00      	nop
 8011100:	20000950 	.word	0x20000950
 8011104:	20000e5c 	.word	0x20000e5c
 8011108:	20000b88 	.word	0x20000b88
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801110c:	4bae      	ldr	r3, [pc, #696]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801110e:	2200      	movs	r2, #0
 8011110:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8011114:	4aac      	ldr	r2, [pc, #688]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011116:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801111a:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 801111e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011122:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8011126:	b2db      	uxtb	r3, r3
 8011128:	461a      	mov	r2, r3
 801112a:	4ba7      	ldr	r3, [pc, #668]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801112c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8011130:	4ba5      	ldr	r3, [pc, #660]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011132:	2200      	movs	r2, #0
 8011134:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8011138:	4ba3      	ldr	r3, [pc, #652]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801113a:	2200      	movs	r2, #0
 801113c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4aa1      	ldr	r2, [pc, #644]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011144:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	4a9f      	ldr	r2, [pc, #636]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801114c:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011150:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011154:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011158:	b2db      	uxtb	r3, r3
 801115a:	2b00      	cmp	r3, #0
 801115c:	bf14      	ite	ne
 801115e:	2301      	movne	r3, #1
 8011160:	2300      	moveq	r3, #0
 8011162:	b2da      	uxtb	r2, r3
 8011164:	4b98      	ldr	r3, [pc, #608]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011166:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801116a:	4b97      	ldr	r3, [pc, #604]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801116c:	2200      	movs	r2, #0
 801116e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011172:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011176:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801117a:	b2db      	uxtb	r3, r3
 801117c:	2b00      	cmp	r3, #0
 801117e:	bf14      	ite	ne
 8011180:	2301      	movne	r3, #1
 8011182:	2300      	moveq	r3, #0
 8011184:	b2da      	uxtb	r2, r3
 8011186:	4b90      	ldr	r3, [pc, #576]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011188:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801118c:	4b8e      	ldr	r3, [pc, #568]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801118e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8011192:	2b00      	cmp	r3, #0
 8011194:	d004      	beq.n	80111a0 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011196:	4b8c      	ldr	r3, [pc, #560]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011198:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801119c:	2b01      	cmp	r3, #1
 801119e:	d102      	bne.n	80111a6 <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 80111a0:	4b8a      	ldr	r3, [pc, #552]	; (80113cc <ProcessRadioRxDone+0x898>)
 80111a2:	2200      	movs	r2, #0
 80111a4:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 80111a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d104      	bne.n	80111b8 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80111ae:	4b86      	ldr	r3, [pc, #536]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80111b0:	2202      	movs	r2, #2
 80111b2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80111b6:	e01f      	b.n	80111f8 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80111b8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80111bc:	f023 031f 	bic.w	r3, r3, #31
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	2ba0      	cmp	r3, #160	; 0xa0
 80111c4:	d110      	bne.n	80111e8 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 80111c6:	4b81      	ldr	r3, [pc, #516]	; (80113cc <ProcessRadioRxDone+0x898>)
 80111c8:	2201      	movs	r2, #1
 80111ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80111ce:	4b7f      	ldr	r3, [pc, #508]	; (80113cc <ProcessRadioRxDone+0x898>)
 80111d0:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d102      	bne.n	80111de <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80111d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111da:	4a7c      	ldr	r2, [pc, #496]	; (80113cc <ProcessRadioRxDone+0x898>)
 80111dc:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80111de:	4b7a      	ldr	r3, [pc, #488]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80111e0:	2201      	movs	r2, #1
 80111e2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80111e6:	e007      	b.n	80111f8 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80111e8:	4b78      	ldr	r3, [pc, #480]	; (80113cc <ProcessRadioRxDone+0x898>)
 80111ea:	2200      	movs	r2, #0
 80111ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80111f0:	4b75      	ldr	r3, [pc, #468]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80111f8:	4b73      	ldr	r3, [pc, #460]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80111fa:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80111fe:	4a72      	ldr	r2, [pc, #456]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011200:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 8011204:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8011208:	4618      	mov	r0, r3
 801120a:	f001 fee9 	bl	8012fe0 <RemoveMacCommands>

            switch( fType )
 801120e:	78bb      	ldrb	r3, [r7, #2]
 8011210:	2b03      	cmp	r3, #3
 8011212:	d874      	bhi.n	80112fe <ProcessRadioRxDone+0x7ca>
 8011214:	a201      	add	r2, pc, #4	; (adr r2, 801121c <ProcessRadioRxDone+0x6e8>)
 8011216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801121a:	bf00      	nop
 801121c:	0801122d 	.word	0x0801122d
 8011220:	0801127d 	.word	0x0801127d
 8011224:	080112b3 	.word	0x080112b3
 8011228:	080112d9 	.word	0x080112d9
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801122c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011230:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011234:	b2db      	uxtb	r3, r3
 8011236:	461c      	mov	r4, r3
 8011238:	4b63      	ldr	r3, [pc, #396]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801123a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801123e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011242:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011246:	f102 0010 	add.w	r0, r2, #16
 801124a:	9300      	str	r3, [sp, #0]
 801124c:	460b      	mov	r3, r1
 801124e:	4622      	mov	r2, r4
 8011250:	2100      	movs	r1, #0
 8011252:	f000 fee5 	bl	8012020 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011256:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801125a:	4b5b      	ldr	r3, [pc, #364]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801125c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011262:	4a59      	ldr	r2, [pc, #356]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011264:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011268:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801126c:	4b56      	ldr	r3, [pc, #344]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801126e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8011272:	4b55      	ldr	r3, [pc, #340]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011274:	2201      	movs	r2, #1
 8011276:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 801127a:	e047      	b.n	801130c <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801127c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011280:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011284:	b2db      	uxtb	r3, r3
 8011286:	461c      	mov	r4, r3
 8011288:	4b4f      	ldr	r3, [pc, #316]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801128a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801128e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011292:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011296:	f102 0010 	add.w	r0, r2, #16
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	460b      	mov	r3, r1
 801129e:	4622      	mov	r2, r4
 80112a0:	2100      	movs	r1, #0
 80112a2:	f000 febd 	bl	8012020 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80112a6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80112aa:	4b47      	ldr	r3, [pc, #284]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80112ac:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 80112b0:	e02c      	b.n	801130c <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80112b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80112b4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80112b8:	4b43      	ldr	r3, [pc, #268]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80112ba:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80112be:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 80112c2:	9300      	str	r3, [sp, #0]
 80112c4:	460b      	mov	r3, r1
 80112c6:	2100      	movs	r1, #0
 80112c8:	f000 feaa 	bl	8012020 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80112cc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80112d0:	4b3d      	ldr	r3, [pc, #244]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80112d2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 80112d6:	e019      	b.n	801130c <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80112d8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80112dc:	4b3a      	ldr	r3, [pc, #232]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80112de:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80112e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112e4:	4a38      	ldr	r2, [pc, #224]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80112e6:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80112ea:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80112ee:	4b36      	ldr	r3, [pc, #216]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80112f0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 80112f4:	4b34      	ldr	r3, [pc, #208]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80112f6:	2201      	movs	r2, #1
 80112f8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 80112fc:	e006      	b.n	801130c <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80112fe:	4b32      	ldr	r3, [pc, #200]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011300:	2201      	movs	r2, #1
 8011302:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8011306:	f7ff fbef 	bl	8010ae8 <PrepareRxDoneAbort>
                    break;
 801130a:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801130c:	4a2e      	ldr	r2, [pc, #184]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801130e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011312:	f043 0302 	orr.w	r3, r3, #2
 8011316:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 801131a:	e033      	b.n	8011384 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801131c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011320:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011322:	18d1      	adds	r1, r2, r3
 8011324:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011328:	b29b      	uxth	r3, r3
 801132a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801132e:	1ad3      	subs	r3, r2, r3
 8011330:	b29b      	uxth	r3, r3
 8011332:	461a      	mov	r2, r3
 8011334:	4826      	ldr	r0, [pc, #152]	; (80113d0 <ProcessRadioRxDone+0x89c>)
 8011336:	f008 fa8e 	bl	8019856 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801133a:	4b23      	ldr	r3, [pc, #140]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801133c:	2203      	movs	r2, #3
 801133e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011342:	4b21      	ldr	r3, [pc, #132]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011344:	2200      	movs	r2, #0
 8011346:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801134a:	4b1f      	ldr	r3, [pc, #124]	; (80113c8 <ProcessRadioRxDone+0x894>)
 801134c:	4a20      	ldr	r2, [pc, #128]	; (80113d0 <ProcessRadioRxDone+0x89c>)
 801134e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011352:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011356:	b2da      	uxtb	r2, r3
 8011358:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801135c:	1ad3      	subs	r3, r2, r3
 801135e:	b2da      	uxtb	r2, r3
 8011360:	4b19      	ldr	r3, [pc, #100]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011362:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011366:	4a18      	ldr	r2, [pc, #96]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011368:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801136c:	f043 0302 	orr.w	r3, r3, #2
 8011370:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8011374:	e006      	b.n	8011384 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011376:	4b14      	ldr	r3, [pc, #80]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011378:	2201      	movs	r2, #1
 801137a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 801137e:	f7ff fbb3 	bl	8010ae8 <PrepareRxDoneAbort>
            break;
 8011382:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011384:	4b10      	ldr	r3, [pc, #64]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011386:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801138a:	2b00      	cmp	r3, #0
 801138c:	d008      	beq.n	80113a0 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801138e:	4b0e      	ldr	r3, [pc, #56]	; (80113c8 <ProcessRadioRxDone+0x894>)
 8011390:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00b      	beq.n	80113b0 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011398:	2000      	movs	r0, #0
 801139a:	f000 fca9 	bl	8011cf0 <OnAckTimeoutTimerEvent>
 801139e:	e007      	b.n	80113b0 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80113a0:	4b0a      	ldr	r3, [pc, #40]	; (80113cc <ProcessRadioRxDone+0x898>)
 80113a2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80113a6:	2b02      	cmp	r3, #2
 80113a8:	d102      	bne.n	80113b0 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 80113aa:	2000      	movs	r0, #0
 80113ac:	f000 fca0 	bl	8011cf0 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80113b0:	4a05      	ldr	r2, [pc, #20]	; (80113c8 <ProcessRadioRxDone+0x894>)
 80113b2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80113b6:	f043 0320 	orr.w	r3, r3, #32
 80113ba:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 80113be:	f7ff fae1 	bl	8010984 <UpdateRxSlotIdleState>
}
 80113c2:	3788      	adds	r7, #136	; 0x88
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bdb0      	pop	{r4, r5, r7, pc}
 80113c8:	20000950 	.word	0x20000950
 80113cc:	20000e5c 	.word	0x20000e5c
 80113d0:	20000b88 	.word	0x20000b88

080113d4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80113d8:	4b11      	ldr	r3, [pc, #68]	; (8011420 <ProcessRadioTxTimeout+0x4c>)
 80113da:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80113de:	2b02      	cmp	r3, #2
 80113e0:	d002      	beq.n	80113e8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 80113e2:	4b10      	ldr	r3, [pc, #64]	; (8011424 <ProcessRadioTxTimeout+0x50>)
 80113e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 80113e8:	f7ff facc 	bl	8010984 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80113ec:	4b0e      	ldr	r3, [pc, #56]	; (8011428 <ProcessRadioTxTimeout+0x54>)
 80113ee:	2202      	movs	r2, #2
 80113f0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80113f4:	2002      	movs	r0, #2
 80113f6:	f004 fc63 	bl	8015cc0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80113fa:	4b0b      	ldr	r3, [pc, #44]	; (8011428 <ProcessRadioTxTimeout+0x54>)
 80113fc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011400:	2b00      	cmp	r3, #0
 8011402:	d003      	beq.n	801140c <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 8011404:	4b08      	ldr	r3, [pc, #32]	; (8011428 <ProcessRadioTxTimeout+0x54>)
 8011406:	2201      	movs	r2, #1
 8011408:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801140c:	4a06      	ldr	r2, [pc, #24]	; (8011428 <ProcessRadioTxTimeout+0x54>)
 801140e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011412:	f043 0320 	orr.w	r3, r3, #32
 8011416:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 801141a:	bf00      	nop
 801141c:	bd80      	pop	{r7, pc}
 801141e:	bf00      	nop
 8011420:	20000e5c 	.word	0x20000e5c
 8011424:	0801f3a4 	.word	0x0801f3a4
 8011428:	20000950 	.word	0x20000950

0801142c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	460a      	mov	r2, r1
 8011436:	71fb      	strb	r3, [r7, #7]
 8011438:	4613      	mov	r3, r2
 801143a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 801143c:	2300      	movs	r3, #0
 801143e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011440:	4b40      	ldr	r3, [pc, #256]	; (8011544 <HandleRadioRxErrorTimeout+0x118>)
 8011442:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011446:	2b02      	cmp	r3, #2
 8011448:	d002      	beq.n	8011450 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 801144a:	4b3f      	ldr	r3, [pc, #252]	; (8011548 <HandleRadioRxErrorTimeout+0x11c>)
 801144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011450:	f003 ff97 	bl	8015382 <LoRaMacClassBIsBeaconExpected>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d007      	beq.n	801146a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801145a:	2002      	movs	r0, #2
 801145c:	f003 ff45 	bl	80152ea <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011460:	2000      	movs	r0, #0
 8011462:	f003 ff67 	bl	8015334 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8011466:	2301      	movs	r3, #1
 8011468:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801146a:	4b36      	ldr	r3, [pc, #216]	; (8011544 <HandleRadioRxErrorTimeout+0x118>)
 801146c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011470:	2b01      	cmp	r3, #1
 8011472:	d119      	bne.n	80114a8 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011474:	f003 ff8c 	bl	8015390 <LoRaMacClassBIsPingExpected>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d007      	beq.n	801148e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801147e:	2000      	movs	r0, #0
 8011480:	f003 ff3d 	bl	80152fe <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011484:	2000      	movs	r0, #0
 8011486:	f003 ff5e 	bl	8015346 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801148a:	2301      	movs	r3, #1
 801148c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 801148e:	f003 ff86 	bl	801539e <LoRaMacClassBIsMulticastExpected>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	d007      	beq.n	80114a8 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011498:	2000      	movs	r0, #0
 801149a:	f003 ff3a 	bl	8015312 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801149e:	2000      	movs	r0, #0
 80114a0:	f003 ff5a 	bl	8015358 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 80114a4:	2301      	movs	r3, #1
 80114a6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 80114a8:	7bfb      	ldrb	r3, [r7, #15]
 80114aa:	f083 0301 	eor.w	r3, r3, #1
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d040      	beq.n	8011536 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80114b4:	4b25      	ldr	r3, [pc, #148]	; (801154c <HandleRadioRxErrorTimeout+0x120>)
 80114b6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d122      	bne.n	8011504 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 80114be:	4b23      	ldr	r3, [pc, #140]	; (801154c <HandleRadioRxErrorTimeout+0x120>)
 80114c0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d003      	beq.n	80114d0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80114c8:	4a20      	ldr	r2, [pc, #128]	; (801154c <HandleRadioRxErrorTimeout+0x120>)
 80114ca:	79fb      	ldrb	r3, [r7, #7]
 80114cc:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80114d0:	79fb      	ldrb	r3, [r7, #7]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f004 fbf4 	bl	8015cc0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80114d8:	4b1a      	ldr	r3, [pc, #104]	; (8011544 <HandleRadioRxErrorTimeout+0x118>)
 80114da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114dc:	4618      	mov	r0, r3
 80114de:	f00c fc2f 	bl	801dd40 <UTIL_TIMER_GetElapsedTime>
 80114e2:	4602      	mov	r2, r0
 80114e4:	4b19      	ldr	r3, [pc, #100]	; (801154c <HandleRadioRxErrorTimeout+0x120>)
 80114e6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d323      	bcc.n	8011536 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 80114ee:	4818      	ldr	r0, [pc, #96]	; (8011550 <HandleRadioRxErrorTimeout+0x124>)
 80114f0:	f00c fafa 	bl	801dae8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80114f4:	4a15      	ldr	r2, [pc, #84]	; (801154c <HandleRadioRxErrorTimeout+0x120>)
 80114f6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80114fa:	f043 0320 	orr.w	r3, r3, #32
 80114fe:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8011502:	e018      	b.n	8011536 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011504:	4b11      	ldr	r3, [pc, #68]	; (801154c <HandleRadioRxErrorTimeout+0x120>)
 8011506:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801150a:	2b00      	cmp	r3, #0
 801150c:	d003      	beq.n	8011516 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801150e:	4a0f      	ldr	r2, [pc, #60]	; (801154c <HandleRadioRxErrorTimeout+0x120>)
 8011510:	79bb      	ldrb	r3, [r7, #6]
 8011512:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011516:	79bb      	ldrb	r3, [r7, #6]
 8011518:	4618      	mov	r0, r3
 801151a:	f004 fbd1 	bl	8015cc0 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801151e:	4b09      	ldr	r3, [pc, #36]	; (8011544 <HandleRadioRxErrorTimeout+0x118>)
 8011520:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011524:	2b02      	cmp	r3, #2
 8011526:	d006      	beq.n	8011536 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011528:	4a08      	ldr	r2, [pc, #32]	; (801154c <HandleRadioRxErrorTimeout+0x120>)
 801152a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801152e:	f043 0320 	orr.w	r3, r3, #32
 8011532:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011536:	f7ff fa25 	bl	8010984 <UpdateRxSlotIdleState>
}
 801153a:	bf00      	nop
 801153c:	3710      	adds	r7, #16
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	20000e5c 	.word	0x20000e5c
 8011548:	0801f3a4 	.word	0x0801f3a4
 801154c:	20000950 	.word	0x20000950
 8011550:	20000ce8 	.word	0x20000ce8

08011554 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011554:	b580      	push	{r7, lr}
 8011556:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011558:	2106      	movs	r1, #6
 801155a:	2005      	movs	r0, #5
 801155c:	f7ff ff66 	bl	801142c <HandleRadioRxErrorTimeout>
}
 8011560:	bf00      	nop
 8011562:	bd80      	pop	{r7, pc}

08011564 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011564:	b580      	push	{r7, lr}
 8011566:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011568:	2104      	movs	r1, #4
 801156a:	2003      	movs	r0, #3
 801156c:	f7ff ff5e 	bl	801142c <HandleRadioRxErrorTimeout>
}
 8011570:	bf00      	nop
 8011572:	bd80      	pop	{r7, pc}

08011574 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801157a:	f3ef 8310 	mrs	r3, PRIMASK
 801157e:	607b      	str	r3, [r7, #4]
  return(result);
 8011580:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011582:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011584:	b672      	cpsid	i
}
 8011586:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011588:	4b1d      	ldr	r3, [pc, #116]	; (8011600 <LoRaMacHandleIrqEvents+0x8c>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801158e:	4b1c      	ldr	r3, [pc, #112]	; (8011600 <LoRaMacHandleIrqEvents+0x8c>)
 8011590:	2200      	movs	r2, #0
 8011592:	601a      	str	r2, [r3, #0]
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	f383 8810 	msr	PRIMASK, r3
}
 801159e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d027      	beq.n	80115f6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 80115a6:	783b      	ldrb	r3, [r7, #0]
 80115a8:	f003 0310 	and.w	r3, r3, #16
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 80115b2:	f7ff f9ff 	bl	80109b4 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80115b6:	783b      	ldrb	r3, [r7, #0]
 80115b8:	f003 0308 	and.w	r3, r3, #8
 80115bc:	b2db      	uxtb	r3, r3
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d001      	beq.n	80115c6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 80115c2:	f7ff fab7 	bl	8010b34 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80115c6:	783b      	ldrb	r3, [r7, #0]
 80115c8:	f003 0304 	and.w	r3, r3, #4
 80115cc:	b2db      	uxtb	r3, r3
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 80115d2:	f7ff feff 	bl	80113d4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80115d6:	783b      	ldrb	r3, [r7, #0]
 80115d8:	f003 0302 	and.w	r3, r3, #2
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d001      	beq.n	80115e6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 80115e2:	f7ff ffb7 	bl	8011554 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 80115e6:	783b      	ldrb	r3, [r7, #0]
 80115e8:	f003 0301 	and.w	r3, r3, #1
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d001      	beq.n	80115f6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 80115f2:	f7ff ffb7 	bl	8011564 <ProcessRadioRxTimeout>
        }
    }
}
 80115f6:	bf00      	nop
 80115f8:	3710      	adds	r7, #16
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	20001cac 	.word	0x20001cac

08011604 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011604:	b480      	push	{r7}
 8011606:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011608:	4b08      	ldr	r3, [pc, #32]	; (801162c <LoRaMacIsBusy+0x28>)
 801160a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801160e:	2b00      	cmp	r3, #0
 8011610:	d106      	bne.n	8011620 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011612:	4b06      	ldr	r3, [pc, #24]	; (801162c <LoRaMacIsBusy+0x28>)
 8011614:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011618:	2b01      	cmp	r3, #1
 801161a:	d101      	bne.n	8011620 <LoRaMacIsBusy+0x1c>
    {
        return false;
 801161c:	2300      	movs	r3, #0
 801161e:	e000      	b.n	8011622 <LoRaMacIsBusy+0x1e>
    }
    return true;
 8011620:	2301      	movs	r3, #1
}
 8011622:	4618      	mov	r0, r3
 8011624:	46bd      	mov	sp, r7
 8011626:	bc80      	pop	{r7}
 8011628:	4770      	bx	lr
 801162a:	bf00      	nop
 801162c:	20000950 	.word	0x20000950

08011630 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011630:	b480      	push	{r7}
 8011632:	b083      	sub	sp, #12
 8011634:	af00      	add	r7, sp, #0
 8011636:	4603      	mov	r3, r0
 8011638:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 801163a:	4a04      	ldr	r2, [pc, #16]	; (801164c <LoRaMacEnableRequests+0x1c>)
 801163c:	79fb      	ldrb	r3, [r7, #7]
 801163e:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 8011642:	bf00      	nop
 8011644:	370c      	adds	r7, #12
 8011646:	46bd      	mov	sp, r7
 8011648:	bc80      	pop	{r7}
 801164a:	4770      	bx	lr
 801164c:	20000950 	.word	0x20000950

08011650 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011656:	4b2c      	ldr	r3, [pc, #176]	; (8011708 <LoRaMacHandleRequestEvents+0xb8>)
 8011658:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801165c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 801165e:	4b2a      	ldr	r3, [pc, #168]	; (8011708 <LoRaMacHandleRequestEvents+0xb8>)
 8011660:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011664:	2b00      	cmp	r3, #0
 8011666:	d14a      	bne.n	80116fe <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011668:	4b27      	ldr	r3, [pc, #156]	; (8011708 <LoRaMacHandleRequestEvents+0xb8>)
 801166a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801166e:	f003 0301 	and.w	r3, r3, #1
 8011672:	b2db      	uxtb	r3, r3
 8011674:	2b00      	cmp	r3, #0
 8011676:	d006      	beq.n	8011686 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011678:	4a23      	ldr	r2, [pc, #140]	; (8011708 <LoRaMacHandleRequestEvents+0xb8>)
 801167a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801167e:	f36f 0300 	bfc	r3, #0, #1
 8011682:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011686:	4b20      	ldr	r3, [pc, #128]	; (8011708 <LoRaMacHandleRequestEvents+0xb8>)
 8011688:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801168c:	f003 0304 	and.w	r3, r3, #4
 8011690:	b2db      	uxtb	r3, r3
 8011692:	2b00      	cmp	r3, #0
 8011694:	d006      	beq.n	80116a4 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011696:	4a1c      	ldr	r2, [pc, #112]	; (8011708 <LoRaMacHandleRequestEvents+0xb8>)
 8011698:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801169c:	f36f 0382 	bfc	r3, #2, #1
 80116a0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80116a4:	2001      	movs	r0, #1
 80116a6:	f7ff ffc3 	bl	8011630 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 80116aa:	793b      	ldrb	r3, [r7, #4]
 80116ac:	f003 0301 	and.w	r3, r3, #1
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d005      	beq.n	80116c2 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80116b6:	4b14      	ldr	r3, [pc, #80]	; (8011708 <LoRaMacHandleRequestEvents+0xb8>)
 80116b8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	4813      	ldr	r0, [pc, #76]	; (801170c <LoRaMacHandleRequestEvents+0xbc>)
 80116c0:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80116c2:	793b      	ldrb	r3, [r7, #4]
 80116c4:	f003 0304 	and.w	r3, r3, #4
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00e      	beq.n	80116ec <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80116ce:	4810      	ldr	r0, [pc, #64]	; (8011710 <LoRaMacHandleRequestEvents+0xc0>)
 80116d0:	f004 fb44 	bl	8015d5c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80116d4:	f004 fb8e 	bl	8015df4 <LoRaMacConfirmQueueGetCnt>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d006      	beq.n	80116ec <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80116de:	4a0a      	ldr	r2, [pc, #40]	; (8011708 <LoRaMacHandleRequestEvents+0xb8>)
 80116e0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80116e4:	f043 0304 	orr.w	r3, r3, #4
 80116e8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80116ec:	f003 fe75 	bl	80153da <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80116f0:	4a05      	ldr	r2, [pc, #20]	; (8011708 <LoRaMacHandleRequestEvents+0xb8>)
 80116f2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80116f6:	f36f 1345 	bfc	r3, #5, #1
 80116fa:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 80116fe:	bf00      	nop
 8011700:	3708      	adds	r7, #8
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	20000950 	.word	0x20000950
 801170c:	20000d88 	.word	0x20000d88
 8011710:	20000d9c 	.word	0x20000d9c

08011714 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 801171a:	4b07      	ldr	r3, [pc, #28]	; (8011738 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 801171c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011720:	2b00      	cmp	r3, #0
 8011722:	d105      	bne.n	8011730 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8011724:	2300      	movs	r3, #0
 8011726:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8011728:	1dfb      	adds	r3, r7, #7
 801172a:	4618      	mov	r0, r3
 801172c:	f004 f8fc 	bl	8015928 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 8011730:	bf00      	nop
 8011732:	3708      	adds	r7, #8
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	20000950 	.word	0x20000950

0801173c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801173c:	b580      	push	{r7, lr}
 801173e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011740:	4b16      	ldr	r3, [pc, #88]	; (801179c <LoRaMacHandleIndicationEvents+0x60>)
 8011742:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011746:	f003 0308 	and.w	r3, r3, #8
 801174a:	b2db      	uxtb	r3, r3
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00d      	beq.n	801176c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011750:	4a12      	ldr	r2, [pc, #72]	; (801179c <LoRaMacHandleIndicationEvents+0x60>)
 8011752:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011756:	f36f 03c3 	bfc	r3, #3, #1
 801175a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801175e:	4b0f      	ldr	r3, [pc, #60]	; (801179c <LoRaMacHandleIndicationEvents+0x60>)
 8011760:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	490e      	ldr	r1, [pc, #56]	; (80117a0 <LoRaMacHandleIndicationEvents+0x64>)
 8011768:	480e      	ldr	r0, [pc, #56]	; (80117a4 <LoRaMacHandleIndicationEvents+0x68>)
 801176a:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801176c:	4b0b      	ldr	r3, [pc, #44]	; (801179c <LoRaMacHandleIndicationEvents+0x60>)
 801176e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011772:	f003 0302 	and.w	r3, r3, #2
 8011776:	b2db      	uxtb	r3, r3
 8011778:	2b00      	cmp	r3, #0
 801177a:	d00d      	beq.n	8011798 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801177c:	4a07      	ldr	r2, [pc, #28]	; (801179c <LoRaMacHandleIndicationEvents+0x60>)
 801177e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011782:	f36f 0341 	bfc	r3, #1, #1
 8011786:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801178a:	4b04      	ldr	r3, [pc, #16]	; (801179c <LoRaMacHandleIndicationEvents+0x60>)
 801178c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	4903      	ldr	r1, [pc, #12]	; (80117a0 <LoRaMacHandleIndicationEvents+0x64>)
 8011794:	4804      	ldr	r0, [pc, #16]	; (80117a8 <LoRaMacHandleIndicationEvents+0x6c>)
 8011796:	4798      	blx	r3
    }
}
 8011798:	bf00      	nop
 801179a:	bd80      	pop	{r7, pc}
 801179c:	20000950 	.word	0x20000950
 80117a0:	20000dd0 	.word	0x20000dd0
 80117a4:	20000db0 	.word	0x20000db0
 80117a8:	20000d6c 	.word	0x20000d6c

080117ac <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80117b2:	4b32      	ldr	r3, [pc, #200]	; (801187c <LoRaMacHandleMcpsRequest+0xd0>)
 80117b4:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80117b8:	f003 0301 	and.w	r3, r3, #1
 80117bc:	b2db      	uxtb	r3, r3
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d058      	beq.n	8011874 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 80117c2:	2300      	movs	r3, #0
 80117c4:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 80117c6:	2300      	movs	r3, #0
 80117c8:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80117ca:	4b2c      	ldr	r3, [pc, #176]	; (801187c <LoRaMacHandleMcpsRequest+0xd0>)
 80117cc:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d004      	beq.n	80117de <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80117d4:	4b29      	ldr	r3, [pc, #164]	; (801187c <LoRaMacHandleMcpsRequest+0xd0>)
 80117d6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80117da:	2b03      	cmp	r3, #3
 80117dc:	d104      	bne.n	80117e8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80117de:	f002 f87b 	bl	80138d8 <CheckRetransUnconfirmedUplink>
 80117e2:	4603      	mov	r3, r0
 80117e4:	71fb      	strb	r3, [r7, #7]
 80117e6:	e020      	b.n	801182a <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80117e8:	4b24      	ldr	r3, [pc, #144]	; (801187c <LoRaMacHandleMcpsRequest+0xd0>)
 80117ea:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d11b      	bne.n	801182a <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 80117f2:	4b22      	ldr	r3, [pc, #136]	; (801187c <LoRaMacHandleMcpsRequest+0xd0>)
 80117f4:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d014      	beq.n	8011826 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80117fc:	f002 f898 	bl	8013930 <CheckRetransConfirmedUplink>
 8011800:	4603      	mov	r3, r0
 8011802:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011804:	4b1e      	ldr	r3, [pc, #120]	; (8011880 <LoRaMacHandleMcpsRequest+0xd4>)
 8011806:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 801180a:	2b00      	cmp	r3, #0
 801180c:	d10d      	bne.n	801182a <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 801180e:	79fb      	ldrb	r3, [r7, #7]
 8011810:	f083 0301 	eor.w	r3, r3, #1
 8011814:	b2db      	uxtb	r3, r3
 8011816:	2b00      	cmp	r3, #0
 8011818:	d002      	beq.n	8011820 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 801181a:	f002 f905 	bl	8013a28 <AckTimeoutRetriesProcess>
 801181e:	e004      	b.n	801182a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011820:	f002 f940 	bl	8013aa4 <AckTimeoutRetriesFinalize>
 8011824:	e001      	b.n	801182a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011826:	2301      	movs	r3, #1
 8011828:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801182a:	79fb      	ldrb	r3, [r7, #7]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d00d      	beq.n	801184c <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011830:	4814      	ldr	r0, [pc, #80]	; (8011884 <LoRaMacHandleMcpsRequest+0xd8>)
 8011832:	f00c f959 	bl	801dae8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011836:	4b11      	ldr	r3, [pc, #68]	; (801187c <LoRaMacHandleMcpsRequest+0xd0>)
 8011838:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801183c:	f023 0320 	bic.w	r3, r3, #32
 8011840:	4a0e      	ldr	r2, [pc, #56]	; (801187c <LoRaMacHandleMcpsRequest+0xd0>)
 8011842:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011846:	f002 f895 	bl	8013974 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801184a:	e013      	b.n	8011874 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 801184c:	79bb      	ldrb	r3, [r7, #6]
 801184e:	f083 0301 	eor.w	r3, r3, #1
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00d      	beq.n	8011874 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011858:	4a08      	ldr	r2, [pc, #32]	; (801187c <LoRaMacHandleMcpsRequest+0xd0>)
 801185a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801185e:	f36f 1345 	bfc	r3, #5, #1
 8011862:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8011866:	4b05      	ldr	r3, [pc, #20]	; (801187c <LoRaMacHandleMcpsRequest+0xd0>)
 8011868:	2200      	movs	r2, #0
 801186a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 801186e:	2000      	movs	r0, #0
 8011870:	f000 f994 	bl	8011b9c <OnTxDelayedTimerEvent>
}
 8011874:	bf00      	nop
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	20000950 	.word	0x20000950
 8011880:	20000e5c 	.word	0x20000e5c
 8011884:	20000cb8 	.word	0x20000cb8

08011888 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801188c:	4b1b      	ldr	r3, [pc, #108]	; (80118fc <LoRaMacHandleMlmeRequest+0x74>)
 801188e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011892:	f003 0304 	and.w	r3, r3, #4
 8011896:	b2db      	uxtb	r3, r3
 8011898:	2b00      	cmp	r3, #0
 801189a:	d02c      	beq.n	80118f6 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801189c:	2001      	movs	r0, #1
 801189e:	f004 fa43 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 80118a2:	4603      	mov	r3, r0
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d012      	beq.n	80118ce <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80118a8:	2001      	movs	r0, #1
 80118aa:	f004 f9df 	bl	8015c6c <LoRaMacConfirmQueueGetStatus>
 80118ae:	4603      	mov	r3, r0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d103      	bne.n	80118bc <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 80118b4:	4b11      	ldr	r3, [pc, #68]	; (80118fc <LoRaMacHandleMlmeRequest+0x74>)
 80118b6:	2200      	movs	r2, #0
 80118b8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80118bc:	4b0f      	ldr	r3, [pc, #60]	; (80118fc <LoRaMacHandleMlmeRequest+0x74>)
 80118be:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118c2:	f023 0302 	bic.w	r3, r3, #2
 80118c6:	4a0d      	ldr	r2, [pc, #52]	; (80118fc <LoRaMacHandleMlmeRequest+0x74>)
 80118c8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 80118cc:	e013      	b.n	80118f6 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80118ce:	2005      	movs	r0, #5
 80118d0:	f004 fa2a 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 80118d4:	4603      	mov	r3, r0
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d105      	bne.n	80118e6 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80118da:	2006      	movs	r0, #6
 80118dc:	f004 fa24 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 80118e0:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d007      	beq.n	80118f6 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80118e6:	4b05      	ldr	r3, [pc, #20]	; (80118fc <LoRaMacHandleMlmeRequest+0x74>)
 80118e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118ec:	f023 0302 	bic.w	r3, r3, #2
 80118f0:	4a02      	ldr	r2, [pc, #8]	; (80118fc <LoRaMacHandleMlmeRequest+0x74>)
 80118f2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 80118f6:	bf00      	nop
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	20000950 	.word	0x20000950

08011900 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011900:	b580      	push	{r7, lr}
 8011902:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011904:	200c      	movs	r0, #12
 8011906:	f004 fa0f 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d019      	beq.n	8011944 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011910:	4b0e      	ldr	r3, [pc, #56]	; (801194c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011912:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011916:	f003 0301 	and.w	r3, r3, #1
 801191a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801191c:	2b00      	cmp	r3, #0
 801191e:	d111      	bne.n	8011944 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011920:	4b0a      	ldr	r3, [pc, #40]	; (801194c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011922:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011926:	f003 0304 	and.w	r3, r3, #4
 801192a:	b2db      	uxtb	r3, r3
 801192c:	2b00      	cmp	r3, #0
 801192e:	d009      	beq.n	8011944 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011930:	4b06      	ldr	r3, [pc, #24]	; (801194c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011932:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011936:	f023 0302 	bic.w	r3, r3, #2
 801193a:	4a04      	ldr	r2, [pc, #16]	; (801194c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801193c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011940:	2301      	movs	r3, #1
 8011942:	e000      	b.n	8011946 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011944:	2300      	movs	r3, #0
}
 8011946:	4618      	mov	r0, r3
 8011948:	bd80      	pop	{r7, pc}
 801194a:	bf00      	nop
 801194c:	20000950 	.word	0x20000950

08011950 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011950:	b480      	push	{r7}
 8011952:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011954:	4b0d      	ldr	r3, [pc, #52]	; (801198c <LoRaMacCheckForRxAbort+0x3c>)
 8011956:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00f      	beq.n	8011982 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011962:	4b0a      	ldr	r3, [pc, #40]	; (801198c <LoRaMacCheckForRxAbort+0x3c>)
 8011964:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801196c:	4a07      	ldr	r2, [pc, #28]	; (801198c <LoRaMacCheckForRxAbort+0x3c>)
 801196e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011972:	4b06      	ldr	r3, [pc, #24]	; (801198c <LoRaMacCheckForRxAbort+0x3c>)
 8011974:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011978:	f023 0302 	bic.w	r3, r3, #2
 801197c:	4a03      	ldr	r2, [pc, #12]	; (801198c <LoRaMacCheckForRxAbort+0x3c>)
 801197e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011982:	bf00      	nop
 8011984:	46bd      	mov	sp, r7
 8011986:	bc80      	pop	{r7}
 8011988:	4770      	bx	lr
 801198a:	bf00      	nop
 801198c:	20000950 	.word	0x20000950

08011990 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011998:	2300      	movs	r3, #0
 801199a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 801199c:	2300      	movs	r3, #0
 801199e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 80119a0:	4b50      	ldr	r3, [pc, #320]	; (8011ae4 <LoRaMacHandleNvm+0x154>)
 80119a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	f040 8098 	bne.w	8011adc <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2124      	movs	r1, #36	; 0x24
 80119b0:	4618      	mov	r0, r3
 80119b2:	f007 ffa5 	bl	8019900 <Crc32>
 80119b6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119bc:	68ba      	ldr	r2, [r7, #8]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d006      	beq.n	80119d0 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	68ba      	ldr	r2, [r7, #8]
 80119c6:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80119c8:	89fb      	ldrh	r3, [r7, #14]
 80119ca:	f043 0301 	orr.w	r3, r3, #1
 80119ce:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	3328      	adds	r3, #40	; 0x28
 80119d4:	2114      	movs	r1, #20
 80119d6:	4618      	mov	r0, r3
 80119d8:	f007 ff92 	bl	8019900 <Crc32>
 80119dc:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119e2:	68ba      	ldr	r2, [r7, #8]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d006      	beq.n	80119f6 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	68ba      	ldr	r2, [r7, #8]
 80119ec:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80119ee:	89fb      	ldrh	r3, [r7, #14]
 80119f0:	f043 0302 	orr.w	r3, r3, #2
 80119f4:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	3340      	adds	r3, #64	; 0x40
 80119fa:	21dc      	movs	r1, #220	; 0xdc
 80119fc:	4618      	mov	r0, r3
 80119fe:	f007 ff7f 	bl	8019900 <Crc32>
 8011a02:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8011a0a:	68ba      	ldr	r2, [r7, #8]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d007      	beq.n	8011a20 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011a18:	89fb      	ldrh	r3, [r7, #14]
 8011a1a:	f043 0304 	orr.w	r3, r3, #4
 8011a1e:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8011a26:	21bc      	movs	r1, #188	; 0xbc
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f007 ff69 	bl	8019900 <Crc32>
 8011a2e:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8011a36:	68ba      	ldr	r2, [r7, #8]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d007      	beq.n	8011a4c <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	68ba      	ldr	r2, [r7, #8]
 8011a40:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011a44:	89fb      	ldrh	r3, [r7, #14]
 8011a46:	f043 0308 	orr.w	r3, r3, #8
 8011a4a:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011a52:	2190      	movs	r1, #144	; 0x90
 8011a54:	4618      	mov	r0, r3
 8011a56:	f007 ff53 	bl	8019900 <Crc32>
 8011a5a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011a62:	68ba      	ldr	r2, [r7, #8]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d007      	beq.n	8011a78 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	68ba      	ldr	r2, [r7, #8]
 8011a6c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011a70:	89fb      	ldrh	r3, [r7, #14]
 8011a72:	f043 0310 	orr.w	r3, r3, #16
 8011a76:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8011a7e:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8011a82:	4618      	mov	r0, r3
 8011a84:	f007 ff3c 	bl	8019900 <Crc32>
 8011a88:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8011a90:	68ba      	ldr	r2, [r7, #8]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d007      	beq.n	8011aa6 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011a9e:	89fb      	ldrh	r3, [r7, #14]
 8011aa0:	f043 0320 	orr.w	r3, r3, #32
 8011aa4:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8011aac:	2114      	movs	r1, #20
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f007 ff26 	bl	8019900 <Crc32>
 8011ab4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 8011abc:	68ba      	ldr	r2, [r7, #8]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d007      	beq.n	8011ad2 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	68ba      	ldr	r2, [r7, #8]
 8011ac6:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011aca:	89fb      	ldrh	r3, [r7, #14]
 8011acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ad0:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011ad2:	89fb      	ldrh	r3, [r7, #14]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f001 ff89 	bl	80139ec <CallNvmDataChangeCallback>
 8011ada:	e000      	b.n	8011ade <LoRaMacHandleNvm+0x14e>
        return;
 8011adc:	bf00      	nop
}
 8011ade:	3710      	adds	r7, #16
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	20000950 	.word	0x20000950

08011ae8 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b082      	sub	sp, #8
 8011aec:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011aee:	2300      	movs	r3, #0
 8011af0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011af2:	f7ff fd3f 	bl	8011574 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011af6:	f003 fcd4 	bl	80154a2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011afa:	4b26      	ldr	r3, [pc, #152]	; (8011b94 <LoRaMacProcess+0xac>)
 8011afc:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011b00:	f003 0320 	and.w	r3, r3, #32
 8011b04:	b2db      	uxtb	r3, r3
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d025      	beq.n	8011b56 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011b0a:	2000      	movs	r0, #0
 8011b0c:	f7ff fd90 	bl	8011630 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011b10:	f7ff ff1e 	bl	8011950 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011b14:	f001 fffa 	bl	8013b0c <IsRequestPending>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d006      	beq.n	8011b2c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011b1e:	f7ff feef 	bl	8011900 <LoRaMacCheckForBeaconAcquisition>
 8011b22:	4603      	mov	r3, r0
 8011b24:	461a      	mov	r2, r3
 8011b26:	79fb      	ldrb	r3, [r7, #7]
 8011b28:	4313      	orrs	r3, r2
 8011b2a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011b2c:	79fb      	ldrb	r3, [r7, #7]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d103      	bne.n	8011b3a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011b32:	f7ff fea9 	bl	8011888 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011b36:	f7ff fe39 	bl	80117ac <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011b3a:	f7ff fd89 	bl	8011650 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8011b3e:	f7ff fde9 	bl	8011714 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011b42:	2001      	movs	r0, #1
 8011b44:	f7ff fd74 	bl	8011630 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011b48:	4a12      	ldr	r2, [pc, #72]	; (8011b94 <LoRaMacProcess+0xac>)
 8011b4a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b52:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 8011b56:	f7ff fdf1 	bl	801173c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011b5a:	4b0e      	ldr	r3, [pc, #56]	; (8011b94 <LoRaMacProcess+0xac>)
 8011b5c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011b60:	2b02      	cmp	r3, #2
 8011b62:	d101      	bne.n	8011b68 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 8011b64:	f001 fb7e 	bl	8013264 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8011b68:	4b0a      	ldr	r3, [pc, #40]	; (8011b94 <LoRaMacProcess+0xac>)
 8011b6a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d009      	beq.n	8011b8c <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8011b78:	4a06      	ldr	r2, [pc, #24]	; (8011b94 <LoRaMacProcess+0xac>)
 8011b7a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011b7e:	f36f 1386 	bfc	r3, #6, #1
 8011b82:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 8011b86:	4804      	ldr	r0, [pc, #16]	; (8011b98 <LoRaMacProcess+0xb0>)
 8011b88:	f7ff ff02 	bl	8011990 <LoRaMacHandleNvm>
    }
}
 8011b8c:	bf00      	nop
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	20000950 	.word	0x20000950
 8011b98:	20000e5c 	.word	0x20000e5c

08011b9c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b082      	sub	sp, #8
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8011ba4:	4817      	ldr	r0, [pc, #92]	; (8011c04 <OnTxDelayedTimerEvent+0x68>)
 8011ba6:	f00b ff9f 	bl	801dae8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011baa:	4b17      	ldr	r3, [pc, #92]	; (8011c08 <OnTxDelayedTimerEvent+0x6c>)
 8011bac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bb0:	f023 0320 	bic.w	r3, r3, #32
 8011bb4:	4a14      	ldr	r2, [pc, #80]	; (8011c08 <OnTxDelayedTimerEvent+0x6c>)
 8011bb6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8011bba:	2001      	movs	r0, #1
 8011bbc:	f001 f8e6 	bl	8012d8c <ScheduleTx>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d018      	beq.n	8011bf8 <OnTxDelayedTimerEvent+0x5c>
 8011bc6:	2b0b      	cmp	r3, #11
 8011bc8:	d016      	beq.n	8011bf8 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011bca:	4b10      	ldr	r3, [pc, #64]	; (8011c0c <OnTxDelayedTimerEvent+0x70>)
 8011bcc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011bd0:	b2da      	uxtb	r2, r3
 8011bd2:	4b0d      	ldr	r3, [pc, #52]	; (8011c08 <OnTxDelayedTimerEvent+0x6c>)
 8011bd4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8011bd8:	4b0b      	ldr	r3, [pc, #44]	; (8011c08 <OnTxDelayedTimerEvent+0x6c>)
 8011bda:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011bde:	4b0a      	ldr	r3, [pc, #40]	; (8011c08 <OnTxDelayedTimerEvent+0x6c>)
 8011be0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8011be4:	4b08      	ldr	r3, [pc, #32]	; (8011c08 <OnTxDelayedTimerEvent+0x6c>)
 8011be6:	2209      	movs	r2, #9
 8011be8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8011bec:	2009      	movs	r0, #9
 8011bee:	f004 f867 	bl	8015cc0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8011bf2:	f001 febf 	bl	8013974 <StopRetransmission>
            break;
 8011bf6:	e000      	b.n	8011bfa <OnTxDelayedTimerEvent+0x5e>
            break;
 8011bf8:	bf00      	nop
        }
    }
}
 8011bfa:	bf00      	nop
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	20000cb8 	.word	0x20000cb8
 8011c08:	20000950 	.word	0x20000950
 8011c0c:	20000e5c 	.word	0x20000e5c

08011c10 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8011c18:	4b14      	ldr	r3, [pc, #80]	; (8011c6c <OnRxWindow1TimerEvent+0x5c>)
 8011c1a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011c1e:	4b13      	ldr	r3, [pc, #76]	; (8011c6c <OnRxWindow1TimerEvent+0x5c>)
 8011c20:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8011c24:	4b12      	ldr	r3, [pc, #72]	; (8011c70 <OnRxWindow1TimerEvent+0x60>)
 8011c26:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011c2a:	b25a      	sxtb	r2, r3
 8011c2c:	4b0f      	ldr	r3, [pc, #60]	; (8011c6c <OnRxWindow1TimerEvent+0x5c>)
 8011c2e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011c32:	4b0f      	ldr	r3, [pc, #60]	; (8011c70 <OnRxWindow1TimerEvent+0x60>)
 8011c34:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011c38:	4b0c      	ldr	r3, [pc, #48]	; (8011c6c <OnRxWindow1TimerEvent+0x5c>)
 8011c3a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011c3e:	4b0c      	ldr	r3, [pc, #48]	; (8011c70 <OnRxWindow1TimerEvent+0x60>)
 8011c40:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011c44:	4b09      	ldr	r3, [pc, #36]	; (8011c6c <OnRxWindow1TimerEvent+0x5c>)
 8011c46:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8011c4a:	4b08      	ldr	r3, [pc, #32]	; (8011c6c <OnRxWindow1TimerEvent+0x5c>)
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8011c52:	4b06      	ldr	r3, [pc, #24]	; (8011c6c <OnRxWindow1TimerEvent+0x5c>)
 8011c54:	2200      	movs	r2, #0
 8011c56:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8011c5a:	4906      	ldr	r1, [pc, #24]	; (8011c74 <OnRxWindow1TimerEvent+0x64>)
 8011c5c:	4806      	ldr	r0, [pc, #24]	; (8011c78 <OnRxWindow1TimerEvent+0x68>)
 8011c5e:	f001 facd 	bl	80131fc <RxWindowSetup>
}
 8011c62:	bf00      	nop
 8011c64:	3708      	adds	r7, #8
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	20000950 	.word	0x20000950
 8011c70:	20000e5c 	.word	0x20000e5c
 8011c74:	20000d08 	.word	0x20000d08
 8011c78:	20000cd0 	.word	0x20000cd0

08011c7c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011c84:	4b16      	ldr	r3, [pc, #88]	; (8011ce0 <OnRxWindow2TimerEvent+0x64>)
 8011c86:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d023      	beq.n	8011cd6 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011c8e:	4b14      	ldr	r3, [pc, #80]	; (8011ce0 <OnRxWindow2TimerEvent+0x64>)
 8011c90:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011c94:	4b12      	ldr	r3, [pc, #72]	; (8011ce0 <OnRxWindow2TimerEvent+0x64>)
 8011c96:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011c9a:	4b12      	ldr	r3, [pc, #72]	; (8011ce4 <OnRxWindow2TimerEvent+0x68>)
 8011c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c9e:	4a10      	ldr	r2, [pc, #64]	; (8011ce0 <OnRxWindow2TimerEvent+0x64>)
 8011ca0:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011ca4:	4b0f      	ldr	r3, [pc, #60]	; (8011ce4 <OnRxWindow2TimerEvent+0x68>)
 8011ca6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011caa:	4b0d      	ldr	r3, [pc, #52]	; (8011ce0 <OnRxWindow2TimerEvent+0x64>)
 8011cac:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011cb0:	4b0c      	ldr	r3, [pc, #48]	; (8011ce4 <OnRxWindow2TimerEvent+0x68>)
 8011cb2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011cb6:	4b0a      	ldr	r3, [pc, #40]	; (8011ce0 <OnRxWindow2TimerEvent+0x64>)
 8011cb8:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011cbc:	4b08      	ldr	r3, [pc, #32]	; (8011ce0 <OnRxWindow2TimerEvent+0x64>)
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011cc4:	4b06      	ldr	r3, [pc, #24]	; (8011ce0 <OnRxWindow2TimerEvent+0x64>)
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8011ccc:	4906      	ldr	r1, [pc, #24]	; (8011ce8 <OnRxWindow2TimerEvent+0x6c>)
 8011cce:	4807      	ldr	r0, [pc, #28]	; (8011cec <OnRxWindow2TimerEvent+0x70>)
 8011cd0:	f001 fa94 	bl	80131fc <RxWindowSetup>
 8011cd4:	e000      	b.n	8011cd8 <OnRxWindow2TimerEvent+0x5c>
        return;
 8011cd6:	bf00      	nop
}
 8011cd8:	3708      	adds	r7, #8
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	20000950 	.word	0x20000950
 8011ce4:	20000e5c 	.word	0x20000e5c
 8011ce8:	20000d1c 	.word	0x20000d1c
 8011cec:	20000ce8 	.word	0x20000ce8

08011cf0 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8011cf8:	4815      	ldr	r0, [pc, #84]	; (8011d50 <OnAckTimeoutTimerEvent+0x60>)
 8011cfa:	f00b fef5 	bl	801dae8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8011cfe:	4b15      	ldr	r3, [pc, #84]	; (8011d54 <OnAckTimeoutTimerEvent+0x64>)
 8011d00:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d003      	beq.n	8011d10 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8011d08:	4b12      	ldr	r3, [pc, #72]	; (8011d54 <OnAckTimeoutTimerEvent+0x64>)
 8011d0a:	2201      	movs	r2, #1
 8011d0c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011d10:	4b11      	ldr	r3, [pc, #68]	; (8011d58 <OnAckTimeoutTimerEvent+0x68>)
 8011d12:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011d16:	2b02      	cmp	r3, #2
 8011d18:	d106      	bne.n	8011d28 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8011d1a:	4a0e      	ldr	r2, [pc, #56]	; (8011d54 <OnAckTimeoutTimerEvent+0x64>)
 8011d1c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011d20:	f043 0320 	orr.w	r3, r3, #32
 8011d24:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8011d28:	4b0a      	ldr	r3, [pc, #40]	; (8011d54 <OnAckTimeoutTimerEvent+0x64>)
 8011d2a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d00a      	beq.n	8011d48 <OnAckTimeoutTimerEvent+0x58>
 8011d32:	4b08      	ldr	r3, [pc, #32]	; (8011d54 <OnAckTimeoutTimerEvent+0x64>)
 8011d34:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011d38:	691b      	ldr	r3, [r3, #16]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d004      	beq.n	8011d48 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011d3e:	4b05      	ldr	r3, [pc, #20]	; (8011d54 <OnAckTimeoutTimerEvent+0x64>)
 8011d40:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011d44:	691b      	ldr	r3, [r3, #16]
 8011d46:	4798      	blx	r3
    }
}
 8011d48:	bf00      	nop
 8011d4a:	3708      	adds	r7, #8
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}
 8011d50:	20000d48 	.word	0x20000d48
 8011d54:	20000950 	.word	0x20000950
 8011d58:	20000e5c 	.word	0x20000e5c

08011d5c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b084      	sub	sp, #16
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	60ba      	str	r2, [r7, #8]
 8011d64:	607b      	str	r3, [r7, #4]
 8011d66:	4603      	mov	r3, r0
 8011d68:	73fb      	strb	r3, [r7, #15]
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d005      	beq.n	8011d80 <GetFCntDown+0x24>
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d002      	beq.n	8011d80 <GetFCntDown+0x24>
 8011d7a:	6a3b      	ldr	r3, [r7, #32]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d101      	bne.n	8011d84 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d80:	230a      	movs	r3, #10
 8011d82:	e029      	b.n	8011dd8 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8011d84:	7bfb      	ldrb	r3, [r7, #15]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d016      	beq.n	8011db8 <GetFCntDown+0x5c>
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d118      	bne.n	8011dc0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8011d8e:	79bb      	ldrb	r3, [r7, #6]
 8011d90:	2b01      	cmp	r3, #1
 8011d92:	d10d      	bne.n	8011db0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8011d94:	7bbb      	ldrb	r3, [r7, #14]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d002      	beq.n	8011da0 <GetFCntDown+0x44>
 8011d9a:	7bbb      	ldrb	r3, [r7, #14]
 8011d9c:	2b03      	cmp	r3, #3
 8011d9e:	d103      	bne.n	8011da8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8011da0:	69fb      	ldr	r3, [r7, #28]
 8011da2:	2202      	movs	r2, #2
 8011da4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8011da6:	e00d      	b.n	8011dc4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	2201      	movs	r2, #1
 8011dac:	701a      	strb	r2, [r3, #0]
            break;
 8011dae:	e009      	b.n	8011dc4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	2203      	movs	r2, #3
 8011db4:	701a      	strb	r2, [r3, #0]
            break;
 8011db6:	e005      	b.n	8011dc4 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	2204      	movs	r2, #4
 8011dbc:	701a      	strb	r2, [r3, #0]
            break;
 8011dbe:	e001      	b.n	8011dc4 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011dc0:	2305      	movs	r3, #5
 8011dc2:	e009      	b.n	8011dd8 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8011dc4:	69fb      	ldr	r3, [r7, #28]
 8011dc6:	7818      	ldrb	r0, [r3, #0]
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	89db      	ldrh	r3, [r3, #14]
 8011dcc:	461a      	mov	r2, r3
 8011dce:	8b39      	ldrh	r1, [r7, #24]
 8011dd0:	6a3b      	ldr	r3, [r7, #32]
 8011dd2:	f004 fb9f 	bl	8016514 <LoRaMacCryptoGetFCntDown>
 8011dd6:	4603      	mov	r3, r0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3710      	adds	r7, #16
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8011de0:	b5b0      	push	{r4, r5, r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	4603      	mov	r3, r0
 8011de8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dea:	2303      	movs	r3, #3
 8011dec:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8011dee:	4b61      	ldr	r3, [pc, #388]	; (8011f74 <SwitchClass+0x194>)
 8011df0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011df4:	2b02      	cmp	r3, #2
 8011df6:	f000 80a5 	beq.w	8011f44 <SwitchClass+0x164>
 8011dfa:	2b02      	cmp	r3, #2
 8011dfc:	f300 80b4 	bgt.w	8011f68 <SwitchClass+0x188>
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d003      	beq.n	8011e0c <SwitchClass+0x2c>
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	f000 808f 	beq.w	8011f28 <SwitchClass+0x148>
 8011e0a:	e0ad      	b.n	8011f68 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8011e0c:	79fb      	ldrb	r3, [r7, #7]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d107      	bne.n	8011e22 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011e12:	4b58      	ldr	r3, [pc, #352]	; (8011f74 <SwitchClass+0x194>)
 8011e14:	4a57      	ldr	r2, [pc, #348]	; (8011f74 <SwitchClass+0x194>)
 8011e16:	336c      	adds	r3, #108	; 0x6c
 8011e18:	3264      	adds	r2, #100	; 0x64
 8011e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e1e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8011e22:	79fb      	ldrb	r3, [r7, #7]
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d10c      	bne.n	8011e42 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8011e28:	79fb      	ldrb	r3, [r7, #7]
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f003 fadb 	bl	80153e6 <LoRaMacClassBSwitchClass>
 8011e30:	4603      	mov	r3, r0
 8011e32:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8011e34:	7bfb      	ldrb	r3, [r7, #15]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d103      	bne.n	8011e42 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8011e3a:	4a4e      	ldr	r2, [pc, #312]	; (8011f74 <SwitchClass+0x194>)
 8011e3c:	79fb      	ldrb	r3, [r7, #7]
 8011e3e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 8011e42:	79fb      	ldrb	r3, [r7, #7]
 8011e44:	2b02      	cmp	r3, #2
 8011e46:	f040 808a 	bne.w	8011f5e <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011e4a:	4a4a      	ldr	r2, [pc, #296]	; (8011f74 <SwitchClass+0x194>)
 8011e4c:	79fb      	ldrb	r3, [r7, #7]
 8011e4e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011e52:	4a49      	ldr	r2, [pc, #292]	; (8011f78 <SwitchClass+0x198>)
 8011e54:	4b48      	ldr	r3, [pc, #288]	; (8011f78 <SwitchClass+0x198>)
 8011e56:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011e5a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8011e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e62:	682b      	ldr	r3, [r5, #0]
 8011e64:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011e66:	4b44      	ldr	r3, [pc, #272]	; (8011f78 <SwitchClass+0x198>)
 8011e68:	2202      	movs	r2, #2
 8011e6a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011e6e:	2300      	movs	r3, #0
 8011e70:	73bb      	strb	r3, [r7, #14]
 8011e72:	e049      	b.n	8011f08 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8011e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e78:	4a3e      	ldr	r2, [pc, #248]	; (8011f74 <SwitchClass+0x194>)
 8011e7a:	212c      	movs	r1, #44	; 0x2c
 8011e7c:	fb01 f303 	mul.w	r3, r1, r3
 8011e80:	4413      	add	r3, r2
 8011e82:	33da      	adds	r3, #218	; 0xda
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d038      	beq.n	8011efc <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8011e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e8e:	4a39      	ldr	r2, [pc, #228]	; (8011f74 <SwitchClass+0x194>)
 8011e90:	212c      	movs	r1, #44	; 0x2c
 8011e92:	fb01 f303 	mul.w	r3, r1, r3
 8011e96:	4413      	add	r3, r2
 8011e98:	33f0      	adds	r3, #240	; 0xf0
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a35      	ldr	r2, [pc, #212]	; (8011f74 <SwitchClass+0x194>)
 8011e9e:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8011ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ea4:	4a33      	ldr	r2, [pc, #204]	; (8011f74 <SwitchClass+0x194>)
 8011ea6:	212c      	movs	r1, #44	; 0x2c
 8011ea8:	fb01 f303 	mul.w	r3, r1, r3
 8011eac:	4413      	add	r3, r2
 8011eae:	33f4      	adds	r3, #244	; 0xf4
 8011eb0:	f993 3000 	ldrsb.w	r3, [r3]
 8011eb4:	b2da      	uxtb	r2, r3
 8011eb6:	4b2f      	ldr	r3, [pc, #188]	; (8011f74 <SwitchClass+0x194>)
 8011eb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011ebc:	4b2e      	ldr	r3, [pc, #184]	; (8011f78 <SwitchClass+0x198>)
 8011ebe:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011ec2:	4b2d      	ldr	r3, [pc, #180]	; (8011f78 <SwitchClass+0x198>)
 8011ec4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011ec8:	4b2a      	ldr	r3, [pc, #168]	; (8011f74 <SwitchClass+0x194>)
 8011eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ecc:	4a2a      	ldr	r2, [pc, #168]	; (8011f78 <SwitchClass+0x198>)
 8011ece:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011ed2:	4b28      	ldr	r3, [pc, #160]	; (8011f74 <SwitchClass+0x194>)
 8011ed4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011ed8:	4b27      	ldr	r3, [pc, #156]	; (8011f78 <SwitchClass+0x198>)
 8011eda:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011ede:	4b25      	ldr	r3, [pc, #148]	; (8011f74 <SwitchClass+0x194>)
 8011ee0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011ee4:	4b24      	ldr	r3, [pc, #144]	; (8011f78 <SwitchClass+0x198>)
 8011ee6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011eea:	4b23      	ldr	r3, [pc, #140]	; (8011f78 <SwitchClass+0x198>)
 8011eec:	2203      	movs	r2, #3
 8011eee:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011ef2:	4b21      	ldr	r3, [pc, #132]	; (8011f78 <SwitchClass+0x198>)
 8011ef4:	2201      	movs	r2, #1
 8011ef6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8011efa:	e009      	b.n	8011f10 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	3301      	adds	r3, #1
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	73bb      	strb	r3, [r7, #14]
 8011f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	ddb1      	ble.n	8011e74 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8011f10:	4b19      	ldr	r3, [pc, #100]	; (8011f78 <SwitchClass+0x198>)
 8011f12:	2200      	movs	r2, #0
 8011f14:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8011f18:	4b18      	ldr	r3, [pc, #96]	; (8011f7c <SwitchClass+0x19c>)
 8011f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f1c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8011f1e:	f001 f9a1 	bl	8013264 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8011f22:	2300      	movs	r3, #0
 8011f24:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8011f26:	e01a      	b.n	8011f5e <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011f28:	79fb      	ldrb	r3, [r7, #7]
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f003 fa5b 	bl	80153e6 <LoRaMacClassBSwitchClass>
 8011f30:	4603      	mov	r3, r0
 8011f32:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8011f34:	7bfb      	ldrb	r3, [r7, #15]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d113      	bne.n	8011f62 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011f3a:	4a0e      	ldr	r2, [pc, #56]	; (8011f74 <SwitchClass+0x194>)
 8011f3c:	79fb      	ldrb	r3, [r7, #7]
 8011f3e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8011f42:	e00e      	b.n	8011f62 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8011f44:	79fb      	ldrb	r3, [r7, #7]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d10d      	bne.n	8011f66 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011f4a:	4a0a      	ldr	r2, [pc, #40]	; (8011f74 <SwitchClass+0x194>)
 8011f4c:	79fb      	ldrb	r3, [r7, #7]
 8011f4e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8011f52:	4b0a      	ldr	r3, [pc, #40]	; (8011f7c <SwitchClass+0x19c>)
 8011f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f56:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8011f5c:	e003      	b.n	8011f66 <SwitchClass+0x186>
            break;
 8011f5e:	bf00      	nop
 8011f60:	e002      	b.n	8011f68 <SwitchClass+0x188>
            break;
 8011f62:	bf00      	nop
 8011f64:	e000      	b.n	8011f68 <SwitchClass+0x188>
            break;
 8011f66:	bf00      	nop
        }
    }

    return status;
 8011f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3710      	adds	r7, #16
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bdb0      	pop	{r4, r5, r7, pc}
 8011f72:	bf00      	nop
 8011f74:	20000e5c 	.word	0x20000e5c
 8011f78:	20000950 	.word	0x20000950
 8011f7c:	0801f3a4 	.word	0x0801f3a4

08011f80 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b086      	sub	sp, #24
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	4603      	mov	r3, r0
 8011f88:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f8a:	4b10      	ldr	r3, [pc, #64]	; (8011fcc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011f8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f90:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8011f92:	79fb      	ldrb	r3, [r7, #7]
 8011f94:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011f96:	230d      	movs	r3, #13
 8011f98:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011f9a:	4b0c      	ldr	r3, [pc, #48]	; (8011fcc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011f9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d001      	beq.n	8011fa8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011fa4:	230e      	movs	r3, #14
 8011fa6:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011fa8:	4b08      	ldr	r3, [pc, #32]	; (8011fcc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fae:	f107 0210 	add.w	r2, r7, #16
 8011fb2:	4611      	mov	r1, r2
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f005 f93b 	bl	8017230 <RegionGetPhyParam>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	b2db      	uxtb	r3, r3
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3718      	adds	r7, #24
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	20000e5c 	.word	0x20000e5c

08011fd0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	71fb      	strb	r3, [r7, #7]
 8011fda:	460b      	mov	r3, r1
 8011fdc:	71bb      	strb	r3, [r7, #6]
 8011fde:	4613      	mov	r3, r2
 8011fe0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011fea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7ff ffc6 	bl	8011f80 <GetMaxAppPayloadWithoutFOptsLength>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8011ff8:	79fb      	ldrb	r3, [r7, #7]
 8011ffa:	b29a      	uxth	r2, r3
 8011ffc:	797b      	ldrb	r3, [r7, #5]
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	4413      	add	r3, r2
 8012002:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8012004:	89ba      	ldrh	r2, [r7, #12]
 8012006:	89fb      	ldrh	r3, [r7, #14]
 8012008:	429a      	cmp	r2, r3
 801200a:	d804      	bhi.n	8012016 <ValidatePayloadLength+0x46>
 801200c:	89bb      	ldrh	r3, [r7, #12]
 801200e:	2bff      	cmp	r3, #255	; 0xff
 8012010:	d801      	bhi.n	8012016 <ValidatePayloadLength+0x46>
    {
        return true;
 8012012:	2301      	movs	r3, #1
 8012014:	e000      	b.n	8012018 <ValidatePayloadLength+0x48>
    }
    return false;
 8012016:	2300      	movs	r3, #0
}
 8012018:	4618      	mov	r0, r3
 801201a:	3710      	adds	r7, #16
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8012020:	b590      	push	{r4, r7, lr}
 8012022:	b0a5      	sub	sp, #148	; 0x94
 8012024:	af02      	add	r7, sp, #8
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	4608      	mov	r0, r1
 801202a:	4611      	mov	r1, r2
 801202c:	461a      	mov	r2, r3
 801202e:	4603      	mov	r3, r0
 8012030:	70fb      	strb	r3, [r7, #3]
 8012032:	460b      	mov	r3, r1
 8012034:	70bb      	strb	r3, [r7, #2]
 8012036:	4613      	mov	r3, r2
 8012038:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801203a:	2300      	movs	r3, #0
 801203c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012040:	2300      	movs	r3, #0
 8012042:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012046:	2300      	movs	r3, #0
 8012048:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 801204c:	f000 bc6d 	b.w	801292a <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012050:	78fb      	ldrb	r3, [r7, #3]
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	4413      	add	r3, r2
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	4618      	mov	r0, r3
 801205a:	f003 fc8d 	bl	8015978 <LoRaMacCommandsGetCmdSize>
 801205e:	4603      	mov	r3, r0
 8012060:	461a      	mov	r2, r3
 8012062:	78fb      	ldrb	r3, [r7, #3]
 8012064:	441a      	add	r2, r3
 8012066:	78bb      	ldrb	r3, [r7, #2]
 8012068:	429a      	cmp	r2, r3
 801206a:	f300 8464 	bgt.w	8012936 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801206e:	78fb      	ldrb	r3, [r7, #3]
 8012070:	1c5a      	adds	r2, r3, #1
 8012072:	70fa      	strb	r2, [r7, #3]
 8012074:	461a      	mov	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	4413      	add	r3, r2
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	3b02      	subs	r3, #2
 801207e:	2b11      	cmp	r3, #17
 8012080:	f200 845b 	bhi.w	801293a <ProcessMacCommands+0x91a>
 8012084:	a201      	add	r2, pc, #4	; (adr r2, 801208c <ProcessMacCommands+0x6c>)
 8012086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801208a:	bf00      	nop
 801208c:	080120d5 	.word	0x080120d5
 8012090:	08012117 	.word	0x08012117
 8012094:	08012233 	.word	0x08012233
 8012098:	08012271 	.word	0x08012271
 801209c:	0801235d 	.word	0x0801235d
 80120a0:	080123b9 	.word	0x080123b9
 80120a4:	08012475 	.word	0x08012475
 80120a8:	080124cb 	.word	0x080124cb
 80120ac:	080125af 	.word	0x080125af
 80120b0:	0801293b 	.word	0x0801293b
 80120b4:	0801293b 	.word	0x0801293b
 80120b8:	08012655 	.word	0x08012655
 80120bc:	0801293b 	.word	0x0801293b
 80120c0:	0801293b 	.word	0x0801293b
 80120c4:	0801276b 	.word	0x0801276b
 80120c8:	0801279f 	.word	0x0801279f
 80120cc:	0801282f 	.word	0x0801282f
 80120d0:	080128a5 	.word	0x080128a5
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80120d4:	2004      	movs	r0, #4
 80120d6:	f003 fe27 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f000 8424 	beq.w	801292a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80120e2:	2104      	movs	r1, #4
 80120e4:	2000      	movs	r0, #0
 80120e6:	f003 fd93 	bl	8015c10 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80120ea:	78fb      	ldrb	r3, [r7, #3]
 80120ec:	1c5a      	adds	r2, r3, #1
 80120ee:	70fa      	strb	r2, [r7, #3]
 80120f0:	461a      	mov	r2, r3
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	4413      	add	r3, r2
 80120f6:	781a      	ldrb	r2, [r3, #0]
 80120f8:	4bac      	ldr	r3, [pc, #688]	; (80123ac <ProcessMacCommands+0x38c>)
 80120fa:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80120fe:	78fb      	ldrb	r3, [r7, #3]
 8012100:	1c5a      	adds	r2, r3, #1
 8012102:	70fa      	strb	r2, [r7, #3]
 8012104:	461a      	mov	r2, r3
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	4413      	add	r3, r2
 801210a:	781a      	ldrb	r2, [r3, #0]
 801210c:	4ba7      	ldr	r3, [pc, #668]	; (80123ac <ProcessMacCommands+0x38c>)
 801210e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 8012112:	f000 bc0a 	b.w	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8012116:	2300      	movs	r3, #0
 8012118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 801211c:	2300      	movs	r3, #0
 801211e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8012122:	2300      	movs	r3, #0
 8012124:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012128:	2300      	movs	r3, #0
 801212a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 801212e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012132:	f083 0301 	eor.w	r3, r3, #1
 8012136:	b2db      	uxtb	r3, r3
 8012138:	2b00      	cmp	r3, #0
 801213a:	d078      	beq.n	801222e <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 801213c:	2301      	movs	r3, #1
 801213e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8012142:	78fb      	ldrb	r3, [r7, #3]
 8012144:	3b01      	subs	r3, #1
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	4413      	add	r3, r2
 801214a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 801214c:	78ba      	ldrb	r2, [r7, #2]
 801214e:	78fb      	ldrb	r3, [r7, #3]
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	b2db      	uxtb	r3, r3
 8012154:	3301      	adds	r3, #1
 8012156:	b2db      	uxtb	r3, r3
 8012158:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801215c:	4b94      	ldr	r3, [pc, #592]	; (80123b0 <ProcessMacCommands+0x390>)
 801215e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012162:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012166:	4b92      	ldr	r3, [pc, #584]	; (80123b0 <ProcessMacCommands+0x390>)
 8012168:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801216c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012170:	4b8f      	ldr	r3, [pc, #572]	; (80123b0 <ProcessMacCommands+0x390>)
 8012172:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012176:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801217a:	4b8d      	ldr	r3, [pc, #564]	; (80123b0 <ProcessMacCommands+0x390>)
 801217c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012180:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012184:	4b8a      	ldr	r3, [pc, #552]	; (80123b0 <ProcessMacCommands+0x390>)
 8012186:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801218a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 801218e:	4b88      	ldr	r3, [pc, #544]	; (80123b0 <ProcessMacCommands+0x390>)
 8012190:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012194:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012196:	4b86      	ldr	r3, [pc, #536]	; (80123b0 <ProcessMacCommands+0x390>)
 8012198:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801219c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 80121a0:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80121a4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80121a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80121ac:	9301      	str	r3, [sp, #4]
 80121ae:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80121b2:	9300      	str	r3, [sp, #0]
 80121b4:	4623      	mov	r3, r4
 80121b6:	f005 f8f8 	bl	80173aa <RegionLinkAdrReq>
 80121ba:	4603      	mov	r3, r0
 80121bc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80121c0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80121c4:	f003 0307 	and.w	r3, r3, #7
 80121c8:	2b07      	cmp	r3, #7
 80121ca:	d10e      	bne.n	80121ea <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80121cc:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80121d0:	4b77      	ldr	r3, [pc, #476]	; (80123b0 <ProcessMacCommands+0x390>)
 80121d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80121d6:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80121da:	4b75      	ldr	r3, [pc, #468]	; (80123b0 <ProcessMacCommands+0x390>)
 80121dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80121e0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80121e4:	4b72      	ldr	r3, [pc, #456]	; (80123b0 <ProcessMacCommands+0x390>)
 80121e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80121ea:	2300      	movs	r3, #0
 80121ec:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80121f0:	e00b      	b.n	801220a <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80121f2:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80121f6:	2201      	movs	r2, #1
 80121f8:	4619      	mov	r1, r3
 80121fa:	2003      	movs	r0, #3
 80121fc:	f003 fa6c 	bl	80156d8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012200:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012204:	3301      	adds	r3, #1
 8012206:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801220a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801220e:	4a69      	ldr	r2, [pc, #420]	; (80123b4 <ProcessMacCommands+0x394>)
 8012210:	fba2 2303 	umull	r2, r3, r2, r3
 8012214:	089b      	lsrs	r3, r3, #2
 8012216:	b2db      	uxtb	r3, r3
 8012218:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 801221c:	429a      	cmp	r2, r3
 801221e:	d3e8      	bcc.n	80121f2 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8012220:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012224:	78fb      	ldrb	r3, [r7, #3]
 8012226:	4413      	add	r3, r2
 8012228:	b2db      	uxtb	r3, r3
 801222a:	3b01      	subs	r3, #1
 801222c:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 801222e:	bf00      	nop
 8012230:	e37b      	b.n	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8012232:	78fb      	ldrb	r3, [r7, #3]
 8012234:	1c5a      	adds	r2, r3, #1
 8012236:	70fa      	strb	r2, [r7, #3]
 8012238:	461a      	mov	r2, r3
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	4413      	add	r3, r2
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	f003 030f 	and.w	r3, r3, #15
 8012244:	b2da      	uxtb	r2, r3
 8012246:	4b5a      	ldr	r3, [pc, #360]	; (80123b0 <ProcessMacCommands+0x390>)
 8012248:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 801224c:	4b58      	ldr	r3, [pc, #352]	; (80123b0 <ProcessMacCommands+0x390>)
 801224e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8012252:	461a      	mov	r2, r3
 8012254:	2301      	movs	r3, #1
 8012256:	4093      	lsls	r3, r2
 8012258:	b29a      	uxth	r2, r3
 801225a:	4b55      	ldr	r3, [pc, #340]	; (80123b0 <ProcessMacCommands+0x390>)
 801225c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012260:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012264:	2200      	movs	r2, #0
 8012266:	4619      	mov	r1, r3
 8012268:	2004      	movs	r0, #4
 801226a:	f003 fa35 	bl	80156d8 <LoRaMacCommandsAddCmd>
                break;
 801226e:	e35c      	b.n	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012270:	2307      	movs	r3, #7
 8012272:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012276:	78fb      	ldrb	r3, [r7, #3]
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	4413      	add	r3, r2
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	091b      	lsrs	r3, r3, #4
 8012280:	b2db      	uxtb	r3, r3
 8012282:	b25b      	sxtb	r3, r3
 8012284:	f003 0307 	and.w	r3, r3, #7
 8012288:	b25b      	sxtb	r3, r3
 801228a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801228e:	78fb      	ldrb	r3, [r7, #3]
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	4413      	add	r3, r2
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	b25b      	sxtb	r3, r3
 8012298:	f003 030f 	and.w	r3, r3, #15
 801229c:	b25b      	sxtb	r3, r3
 801229e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80122a2:	78fb      	ldrb	r3, [r7, #3]
 80122a4:	3301      	adds	r3, #1
 80122a6:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80122a8:	78fb      	ldrb	r3, [r7, #3]
 80122aa:	1c5a      	adds	r2, r3, #1
 80122ac:	70fa      	strb	r2, [r7, #3]
 80122ae:	461a      	mov	r2, r3
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	4413      	add	r3, r2
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80122b8:	78fb      	ldrb	r3, [r7, #3]
 80122ba:	1c5a      	adds	r2, r3, #1
 80122bc:	70fa      	strb	r2, [r7, #3]
 80122be:	461a      	mov	r2, r3
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	4413      	add	r3, r2
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	021a      	lsls	r2, r3, #8
 80122c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ca:	4313      	orrs	r3, r2
 80122cc:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80122ce:	78fb      	ldrb	r3, [r7, #3]
 80122d0:	1c5a      	adds	r2, r3, #1
 80122d2:	70fa      	strb	r2, [r7, #3]
 80122d4:	461a      	mov	r2, r3
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4413      	add	r3, r2
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	041a      	lsls	r2, r3, #16
 80122de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122e0:	4313      	orrs	r3, r2
 80122e2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80122e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122e6:	2264      	movs	r2, #100	; 0x64
 80122e8:	fb02 f303 	mul.w	r3, r2, r3
 80122ec:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80122ee:	4b30      	ldr	r3, [pc, #192]	; (80123b0 <ProcessMacCommands+0x390>)
 80122f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80122f4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80122f8:	4611      	mov	r1, r2
 80122fa:	4618      	mov	r0, r3
 80122fc:	f005 f86f 	bl	80173de <RegionRxParamSetupReq>
 8012300:	4603      	mov	r3, r0
 8012302:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8012306:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801230a:	f003 0307 	and.w	r3, r3, #7
 801230e:	2b07      	cmp	r3, #7
 8012310:	d117      	bne.n	8012342 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8012312:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012316:	b2da      	uxtb	r2, r3
 8012318:	4b25      	ldr	r3, [pc, #148]	; (80123b0 <ProcessMacCommands+0x390>)
 801231a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801231e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012322:	b2da      	uxtb	r2, r3
 8012324:	4b22      	ldr	r3, [pc, #136]	; (80123b0 <ProcessMacCommands+0x390>)
 8012326:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 801232a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801232c:	4a20      	ldr	r2, [pc, #128]	; (80123b0 <ProcessMacCommands+0x390>)
 801232e:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8012330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012332:	4a1f      	ldr	r2, [pc, #124]	; (80123b0 <ProcessMacCommands+0x390>)
 8012334:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8012336:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801233a:	b2da      	uxtb	r2, r3
 801233c:	4b1c      	ldr	r3, [pc, #112]	; (80123b0 <ProcessMacCommands+0x390>)
 801233e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 8012342:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012346:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801234a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801234e:	2201      	movs	r2, #1
 8012350:	4619      	mov	r1, r3
 8012352:	2005      	movs	r0, #5
 8012354:	f003 f9c0 	bl	80156d8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8012358:	bf00      	nop
 801235a:	e2e6      	b.n	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801235c:	23ff      	movs	r3, #255	; 0xff
 801235e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8012362:	4b12      	ldr	r3, [pc, #72]	; (80123ac <ProcessMacCommands+0x38c>)
 8012364:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012368:	2b00      	cmp	r3, #0
 801236a:	d00d      	beq.n	8012388 <ProcessMacCommands+0x368>
 801236c:	4b0f      	ldr	r3, [pc, #60]	; (80123ac <ProcessMacCommands+0x38c>)
 801236e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d007      	beq.n	8012388 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012378:	4b0c      	ldr	r3, [pc, #48]	; (80123ac <ProcessMacCommands+0x38c>)
 801237a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4798      	blx	r3
 8012382:	4603      	mov	r3, r0
 8012384:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012388:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801238c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012390:	787b      	ldrb	r3, [r7, #1]
 8012392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012396:	b2db      	uxtb	r3, r3
 8012398:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801239c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80123a0:	2202      	movs	r2, #2
 80123a2:	4619      	mov	r1, r3
 80123a4:	2006      	movs	r0, #6
 80123a6:	f003 f997 	bl	80156d8 <LoRaMacCommandsAddCmd>
                break;
 80123aa:	e2be      	b.n	801292a <ProcessMacCommands+0x90a>
 80123ac:	20000950 	.word	0x20000950
 80123b0:	20000e5c 	.word	0x20000e5c
 80123b4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80123b8:	2303      	movs	r3, #3
 80123ba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80123be:	78fb      	ldrb	r3, [r7, #3]
 80123c0:	1c5a      	adds	r2, r3, #1
 80123c2:	70fa      	strb	r2, [r7, #3]
 80123c4:	461a      	mov	r2, r3
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4413      	add	r3, r2
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	b25b      	sxtb	r3, r3
 80123ce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80123d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80123d6:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80123d8:	78fb      	ldrb	r3, [r7, #3]
 80123da:	1c5a      	adds	r2, r3, #1
 80123dc:	70fa      	strb	r2, [r7, #3]
 80123de:	461a      	mov	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	4413      	add	r3, r2
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80123e8:	78fb      	ldrb	r3, [r7, #3]
 80123ea:	1c5a      	adds	r2, r3, #1
 80123ec:	70fa      	strb	r2, [r7, #3]
 80123ee:	461a      	mov	r2, r3
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	4413      	add	r3, r2
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	021a      	lsls	r2, r3, #8
 80123f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fa:	4313      	orrs	r3, r2
 80123fc:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80123fe:	78fb      	ldrb	r3, [r7, #3]
 8012400:	1c5a      	adds	r2, r3, #1
 8012402:	70fa      	strb	r2, [r7, #3]
 8012404:	461a      	mov	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	4413      	add	r3, r2
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	041a      	lsls	r2, r3, #16
 801240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012410:	4313      	orrs	r3, r2
 8012412:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012416:	2264      	movs	r2, #100	; 0x64
 8012418:	fb02 f303 	mul.w	r3, r2, r3
 801241c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801241e:	2300      	movs	r3, #0
 8012420:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8012422:	78fb      	ldrb	r3, [r7, #3]
 8012424:	1c5a      	adds	r2, r3, #1
 8012426:	70fa      	strb	r2, [r7, #3]
 8012428:	461a      	mov	r2, r3
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4413      	add	r3, r2
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	b25b      	sxtb	r3, r3
 8012432:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012436:	4b85      	ldr	r3, [pc, #532]	; (801264c <ProcessMacCommands+0x62c>)
 8012438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801243c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012440:	4611      	mov	r1, r2
 8012442:	4618      	mov	r0, r3
 8012444:	f004 ffde 	bl	8017404 <RegionNewChannelReq>
 8012448:	4603      	mov	r3, r0
 801244a:	b2db      	uxtb	r3, r3
 801244c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012450:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012454:	b25b      	sxtb	r3, r3
 8012456:	2b00      	cmp	r3, #0
 8012458:	db0a      	blt.n	8012470 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 801245a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801245e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8012462:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012466:	2201      	movs	r2, #1
 8012468:	4619      	mov	r1, r3
 801246a:	2007      	movs	r0, #7
 801246c:	f003 f934 	bl	80156d8 <LoRaMacCommandsAddCmd>
                }
                break;
 8012470:	bf00      	nop
 8012472:	e25a      	b.n	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012474:	78fb      	ldrb	r3, [r7, #3]
 8012476:	1c5a      	adds	r2, r3, #1
 8012478:	70fa      	strb	r2, [r7, #3]
 801247a:	461a      	mov	r2, r3
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	4413      	add	r3, r2
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	f003 030f 	and.w	r3, r3, #15
 8012486:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801248a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801248e:	2b00      	cmp	r3, #0
 8012490:	d104      	bne.n	801249c <ProcessMacCommands+0x47c>
                {
                    delay++;
 8012492:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012496:	3301      	adds	r3, #1
 8012498:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 801249c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80124a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80124a4:	fb02 f303 	mul.w	r3, r2, r3
 80124a8:	461a      	mov	r2, r3
 80124aa:	4b68      	ldr	r3, [pc, #416]	; (801264c <ProcessMacCommands+0x62c>)
 80124ac:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80124ae:	4b67      	ldr	r3, [pc, #412]	; (801264c <ProcessMacCommands+0x62c>)
 80124b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124b2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80124b6:	4a65      	ldr	r2, [pc, #404]	; (801264c <ProcessMacCommands+0x62c>)
 80124b8:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80124ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80124be:	2200      	movs	r2, #0
 80124c0:	4619      	mov	r1, r3
 80124c2:	2008      	movs	r0, #8
 80124c4:	f003 f908 	bl	80156d8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80124c8:	e22f      	b.n	801292a <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80124ca:	78fb      	ldrb	r3, [r7, #3]
 80124cc:	1c5a      	adds	r2, r3, #1
 80124ce:	70fa      	strb	r2, [r7, #3]
 80124d0:	461a      	mov	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4413      	add	r3, r2
 80124d6:	781b      	ldrb	r3, [r3, #0]
 80124d8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80124dc:	2300      	movs	r3, #0
 80124de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80124e2:	2300      	movs	r3, #0
 80124e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80124e8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80124ec:	f003 0320 	and.w	r3, r3, #32
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d002      	beq.n	80124fa <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80124f4:	2301      	movs	r3, #1
 80124f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80124fa:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80124fe:	f003 0310 	and.w	r3, r3, #16
 8012502:	2b00      	cmp	r3, #0
 8012504:	d002      	beq.n	801250c <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012506:	2301      	movs	r3, #1
 8012508:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 801250c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012510:	f003 030f 	and.w	r3, r3, #15
 8012514:	b2db      	uxtb	r3, r3
 8012516:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801251a:	4b4c      	ldr	r3, [pc, #304]	; (801264c <ProcessMacCommands+0x62c>)
 801251c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012520:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012524:	4611      	mov	r1, r2
 8012526:	4618      	mov	r0, r3
 8012528:	f004 ff7f 	bl	801742a <RegionTxParamSetupReq>
 801252c:	4603      	mov	r3, r0
 801252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012532:	d03a      	beq.n	80125aa <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012534:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012538:	4b44      	ldr	r3, [pc, #272]	; (801264c <ProcessMacCommands+0x62c>)
 801253a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801253e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012542:	4b42      	ldr	r3, [pc, #264]	; (801264c <ProcessMacCommands+0x62c>)
 8012544:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012548:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801254c:	461a      	mov	r2, r3
 801254e:	4b40      	ldr	r3, [pc, #256]	; (8012650 <ProcessMacCommands+0x630>)
 8012550:	5c9b      	ldrb	r3, [r3, r2]
 8012552:	4618      	mov	r0, r3
 8012554:	f7ee fb9c 	bl	8000c90 <__aeabi_ui2f>
 8012558:	4603      	mov	r3, r0
 801255a:	4a3c      	ldr	r2, [pc, #240]	; (801264c <ProcessMacCommands+0x62c>)
 801255c:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801255e:	2302      	movs	r3, #2
 8012560:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012564:	4b39      	ldr	r3, [pc, #228]	; (801264c <ProcessMacCommands+0x62c>)
 8012566:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801256a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801256e:	4b37      	ldr	r3, [pc, #220]	; (801264c <ProcessMacCommands+0x62c>)
 8012570:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012574:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012578:	4611      	mov	r1, r2
 801257a:	4618      	mov	r0, r3
 801257c:	f004 fe58 	bl	8017230 <RegionGetPhyParam>
 8012580:	4603      	mov	r3, r0
 8012582:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012586:	b25a      	sxtb	r2, r3
 8012588:	4b30      	ldr	r3, [pc, #192]	; (801264c <ProcessMacCommands+0x62c>)
 801258a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801258e:	4293      	cmp	r3, r2
 8012590:	bfb8      	it	lt
 8012592:	4613      	movlt	r3, r2
 8012594:	b25a      	sxtb	r2, r3
 8012596:	4b2d      	ldr	r3, [pc, #180]	; (801264c <ProcessMacCommands+0x62c>)
 8012598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801259c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80125a0:	2200      	movs	r2, #0
 80125a2:	4619      	mov	r1, r3
 80125a4:	2009      	movs	r0, #9
 80125a6:	f003 f897 	bl	80156d8 <LoRaMacCommandsAddCmd>
                }
                break;
 80125aa:	bf00      	nop
 80125ac:	e1bd      	b.n	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80125ae:	2303      	movs	r3, #3
 80125b0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80125b4:	78fb      	ldrb	r3, [r7, #3]
 80125b6:	1c5a      	adds	r2, r3, #1
 80125b8:	70fa      	strb	r2, [r7, #3]
 80125ba:	461a      	mov	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4413      	add	r3, r2
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80125c6:	78fb      	ldrb	r3, [r7, #3]
 80125c8:	1c5a      	adds	r2, r3, #1
 80125ca:	70fa      	strb	r2, [r7, #3]
 80125cc:	461a      	mov	r2, r3
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4413      	add	r3, r2
 80125d2:	781b      	ldrb	r3, [r3, #0]
 80125d4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80125d6:	78fb      	ldrb	r3, [r7, #3]
 80125d8:	1c5a      	adds	r2, r3, #1
 80125da:	70fa      	strb	r2, [r7, #3]
 80125dc:	461a      	mov	r2, r3
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4413      	add	r3, r2
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	021a      	lsls	r2, r3, #8
 80125e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e8:	4313      	orrs	r3, r2
 80125ea:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80125ec:	78fb      	ldrb	r3, [r7, #3]
 80125ee:	1c5a      	adds	r2, r3, #1
 80125f0:	70fa      	strb	r2, [r7, #3]
 80125f2:	461a      	mov	r2, r3
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	4413      	add	r3, r2
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	041a      	lsls	r2, r3, #16
 80125fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125fe:	4313      	orrs	r3, r2
 8012600:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012604:	2264      	movs	r2, #100	; 0x64
 8012606:	fb02 f303 	mul.w	r3, r2, r3
 801260a:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801260c:	4b0f      	ldr	r3, [pc, #60]	; (801264c <ProcessMacCommands+0x62c>)
 801260e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012612:	f107 0220 	add.w	r2, r7, #32
 8012616:	4611      	mov	r1, r2
 8012618:	4618      	mov	r0, r3
 801261a:	f004 ff19 	bl	8017450 <RegionDlChannelReq>
 801261e:	4603      	mov	r3, r0
 8012620:	b2db      	uxtb	r3, r3
 8012622:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012626:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801262a:	b25b      	sxtb	r3, r3
 801262c:	2b00      	cmp	r3, #0
 801262e:	db0a      	blt.n	8012646 <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 8012630:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012634:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012638:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801263c:	2201      	movs	r2, #1
 801263e:	4619      	mov	r1, r3
 8012640:	200a      	movs	r0, #10
 8012642:	f003 f849 	bl	80156d8 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 8012646:	bf00      	nop
 8012648:	e16f      	b.n	801292a <ProcessMacCommands+0x90a>
 801264a:	bf00      	nop
 801264c:	20000e5c 	.word	0x20000e5c
 8012650:	0801f35c 	.word	0x0801f35c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012654:	200a      	movs	r0, #10
 8012656:	f003 fb67 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	f000 8164 	beq.w	801292a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012662:	210a      	movs	r1, #10
 8012664:	2000      	movs	r0, #0
 8012666:	f003 fad3 	bl	8015c10 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801266a:	f107 0318 	add.w	r3, r7, #24
 801266e:	2200      	movs	r2, #0
 8012670:	601a      	str	r2, [r3, #0]
 8012672:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012674:	f107 0310 	add.w	r3, r7, #16
 8012678:	2200      	movs	r2, #0
 801267a:	601a      	str	r2, [r3, #0]
 801267c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801267e:	f107 0308 	add.w	r3, r7, #8
 8012682:	2200      	movs	r2, #0
 8012684:	601a      	str	r2, [r3, #0]
 8012686:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012688:	78fb      	ldrb	r3, [r7, #3]
 801268a:	1c5a      	adds	r2, r3, #1
 801268c:	70fa      	strb	r2, [r7, #3]
 801268e:	461a      	mov	r2, r3
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	4413      	add	r3, r2
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012698:	78fb      	ldrb	r3, [r7, #3]
 801269a:	1c5a      	adds	r2, r3, #1
 801269c:	70fa      	strb	r2, [r7, #3]
 801269e:	461a      	mov	r2, r3
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	4413      	add	r3, r2
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	021a      	lsls	r2, r3, #8
 80126a8:	69bb      	ldr	r3, [r7, #24]
 80126aa:	4313      	orrs	r3, r2
 80126ac:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80126ae:	78fb      	ldrb	r3, [r7, #3]
 80126b0:	1c5a      	adds	r2, r3, #1
 80126b2:	70fa      	strb	r2, [r7, #3]
 80126b4:	461a      	mov	r2, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4413      	add	r3, r2
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	041a      	lsls	r2, r3, #16
 80126be:	69bb      	ldr	r3, [r7, #24]
 80126c0:	4313      	orrs	r3, r2
 80126c2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80126c4:	78fb      	ldrb	r3, [r7, #3]
 80126c6:	1c5a      	adds	r2, r3, #1
 80126c8:	70fa      	strb	r2, [r7, #3]
 80126ca:	461a      	mov	r2, r3
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	4413      	add	r3, r2
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	061a      	lsls	r2, r3, #24
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	4313      	orrs	r3, r2
 80126d8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80126da:	78fb      	ldrb	r3, [r7, #3]
 80126dc:	1c5a      	adds	r2, r3, #1
 80126de:	70fa      	strb	r2, [r7, #3]
 80126e0:	461a      	mov	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4413      	add	r3, r2
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	b21b      	sxth	r3, r3
 80126ea:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80126ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80126f0:	461a      	mov	r2, r3
 80126f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80126f6:	fb02 f303 	mul.w	r3, r2, r3
 80126fa:	121b      	asrs	r3, r3, #8
 80126fc:	b21b      	sxth	r3, r3
 80126fe:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012700:	f107 0310 	add.w	r3, r7, #16
 8012704:	f107 0218 	add.w	r2, r7, #24
 8012708:	e892 0003 	ldmia.w	r2, {r0, r1}
 801270c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012710:	693a      	ldr	r2, [r7, #16]
 8012712:	4b8c      	ldr	r3, [pc, #560]	; (8012944 <ProcessMacCommands+0x924>)
 8012714:	4413      	add	r3, r2
 8012716:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012718:	f107 0308 	add.w	r3, r7, #8
 801271c:	4618      	mov	r0, r3
 801271e:	f00a fc7b 	bl	801d018 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012722:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012726:	4b88      	ldr	r3, [pc, #544]	; (8012948 <ProcessMacCommands+0x928>)
 8012728:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 801272c:	9200      	str	r2, [sp, #0]
 801272e:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012732:	f107 0210 	add.w	r2, r7, #16
 8012736:	ca06      	ldmia	r2, {r1, r2}
 8012738:	f00a fc07 	bl	801cf4a <SysTimeSub>
 801273c:	f107 0010 	add.w	r0, r7, #16
 8012740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012746:	f107 0208 	add.w	r2, r7, #8
 801274a:	ca06      	ldmia	r2, {r1, r2}
 801274c:	f00a fbc4 	bl	801ced8 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012750:	f107 0310 	add.w	r3, r7, #16
 8012754:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012758:	f00a fc30 	bl	801cfbc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801275c:	f002 fe81 	bl	8015462 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012760:	4b79      	ldr	r3, [pc, #484]	; (8012948 <ProcessMacCommands+0x928>)
 8012762:	2201      	movs	r2, #1
 8012764:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012768:	e0df      	b.n	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801276a:	200d      	movs	r0, #13
 801276c:	f003 fadc 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 8012770:	4603      	mov	r3, r0
 8012772:	2b00      	cmp	r3, #0
 8012774:	f000 80d9 	beq.w	801292a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012778:	210d      	movs	r1, #13
 801277a:	2000      	movs	r0, #0
 801277c:	f003 fa48 	bl	8015c10 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012780:	4b71      	ldr	r3, [pc, #452]	; (8012948 <ProcessMacCommands+0x928>)
 8012782:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8012786:	2b04      	cmp	r3, #4
 8012788:	f000 80cf 	beq.w	801292a <ProcessMacCommands+0x90a>
 801278c:	4b6e      	ldr	r3, [pc, #440]	; (8012948 <ProcessMacCommands+0x928>)
 801278e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8012792:	2b05      	cmp	r3, #5
 8012794:	f000 80c9 	beq.w	801292a <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012798:	f002 fe44 	bl	8015424 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801279c:	e0c5      	b.n	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801279e:	2303      	movs	r3, #3
 80127a0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 80127a4:	2300      	movs	r3, #0
 80127a6:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80127a8:	78fb      	ldrb	r3, [r7, #3]
 80127aa:	1c5a      	adds	r2, r3, #1
 80127ac:	70fa      	strb	r2, [r7, #3]
 80127ae:	461a      	mov	r2, r3
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	4413      	add	r3, r2
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80127b8:	78fb      	ldrb	r3, [r7, #3]
 80127ba:	1c5a      	adds	r2, r3, #1
 80127bc:	70fa      	strb	r2, [r7, #3]
 80127be:	461a      	mov	r2, r3
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	4413      	add	r3, r2
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	021b      	lsls	r3, r3, #8
 80127c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80127ca:	4313      	orrs	r3, r2
 80127cc:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80127ce:	78fb      	ldrb	r3, [r7, #3]
 80127d0:	1c5a      	adds	r2, r3, #1
 80127d2:	70fa      	strb	r2, [r7, #3]
 80127d4:	461a      	mov	r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4413      	add	r3, r2
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	041b      	lsls	r3, r3, #16
 80127de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80127e0:	4313      	orrs	r3, r2
 80127e2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80127e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80127e6:	2264      	movs	r2, #100	; 0x64
 80127e8:	fb02 f303 	mul.w	r3, r2, r3
 80127ec:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80127ee:	78fb      	ldrb	r3, [r7, #3]
 80127f0:	1c5a      	adds	r2, r3, #1
 80127f2:	70fa      	strb	r2, [r7, #3]
 80127f4:	461a      	mov	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4413      	add	r3, r2
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	f003 030f 	and.w	r3, r3, #15
 8012800:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012804:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012808:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801280a:	4618      	mov	r0, r3
 801280c:	f002 fe10 	bl	8015430 <LoRaMacClassBPingSlotChannelReq>
 8012810:	4603      	mov	r3, r0
 8012812:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012816:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 801281a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801281e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012822:	2201      	movs	r2, #1
 8012824:	4619      	mov	r1, r3
 8012826:	2011      	movs	r0, #17
 8012828:	f002 ff56 	bl	80156d8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 801282c:	e07d      	b.n	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801282e:	200e      	movs	r0, #14
 8012830:	f003 fa7a 	bl	8015d28 <LoRaMacConfirmQueueIsCmdActive>
 8012834:	4603      	mov	r3, r0
 8012836:	2b00      	cmp	r3, #0
 8012838:	d077      	beq.n	801292a <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801283a:	210e      	movs	r1, #14
 801283c:	2000      	movs	r0, #0
 801283e:	f003 f9e7 	bl	8015c10 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012842:	2300      	movs	r3, #0
 8012844:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012848:	2300      	movs	r3, #0
 801284a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801284e:	78fb      	ldrb	r3, [r7, #3]
 8012850:	1c5a      	adds	r2, r3, #1
 8012852:	70fa      	strb	r2, [r7, #3]
 8012854:	461a      	mov	r2, r3
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4413      	add	r3, r2
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012860:	78fb      	ldrb	r3, [r7, #3]
 8012862:	1c5a      	adds	r2, r3, #1
 8012864:	70fa      	strb	r2, [r7, #3]
 8012866:	461a      	mov	r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	4413      	add	r3, r2
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	021b      	lsls	r3, r3, #8
 8012870:	b21a      	sxth	r2, r3
 8012872:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012876:	4313      	orrs	r3, r2
 8012878:	b21b      	sxth	r3, r3
 801287a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801287e:	78fb      	ldrb	r3, [r7, #3]
 8012880:	1c5a      	adds	r2, r3, #1
 8012882:	70fa      	strb	r2, [r7, #3]
 8012884:	461a      	mov	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4413      	add	r3, r2
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012890:	4b2e      	ldr	r3, [pc, #184]	; (801294c <ProcessMacCommands+0x92c>)
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012898:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801289c:	4618      	mov	r0, r3
 801289e:	f002 fdd3 	bl	8015448 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80128a2:	e042      	b.n	801292a <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80128a4:	2300      	movs	r3, #0
 80128a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80128aa:	78fb      	ldrb	r3, [r7, #3]
 80128ac:	1c5a      	adds	r2, r3, #1
 80128ae:	70fa      	strb	r2, [r7, #3]
 80128b0:	461a      	mov	r2, r3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	4413      	add	r3, r2
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80128bc:	78fb      	ldrb	r3, [r7, #3]
 80128be:	1c5a      	adds	r2, r3, #1
 80128c0:	70fa      	strb	r2, [r7, #3]
 80128c2:	461a      	mov	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	4413      	add	r3, r2
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	021b      	lsls	r3, r3, #8
 80128cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128d0:	4313      	orrs	r3, r2
 80128d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80128d6:	78fb      	ldrb	r3, [r7, #3]
 80128d8:	1c5a      	adds	r2, r3, #1
 80128da:	70fa      	strb	r2, [r7, #3]
 80128dc:	461a      	mov	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	4413      	add	r3, r2
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	041b      	lsls	r3, r3, #16
 80128e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128ea:	4313      	orrs	r3, r2
 80128ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80128f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128f4:	2264      	movs	r2, #100	; 0x64
 80128f6:	fb02 f303 	mul.w	r3, r2, r3
 80128fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80128fe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012902:	f002 fdb4 	bl	801546e <LoRaMacClassBBeaconFreqReq>
 8012906:	4603      	mov	r3, r0
 8012908:	2b00      	cmp	r3, #0
 801290a:	d003      	beq.n	8012914 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 801290c:	2301      	movs	r3, #1
 801290e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012912:	e002      	b.n	801291a <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012914:	2300      	movs	r3, #0
 8012916:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801291a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801291e:	2201      	movs	r2, #1
 8012920:	4619      	mov	r1, r3
 8012922:	2013      	movs	r0, #19
 8012924:	f002 fed8 	bl	80156d8 <LoRaMacCommandsAddCmd>
                }
                break;
 8012928:	bf00      	nop
    while( macIndex < commandsSize )
 801292a:	78fa      	ldrb	r2, [r7, #3]
 801292c:	78bb      	ldrb	r3, [r7, #2]
 801292e:	429a      	cmp	r2, r3
 8012930:	f4ff ab8e 	bcc.w	8012050 <ProcessMacCommands+0x30>
 8012934:	e002      	b.n	801293c <ProcessMacCommands+0x91c>
            return;
 8012936:	bf00      	nop
 8012938:	e000      	b.n	801293c <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801293a:	bf00      	nop
        }
    }
}
 801293c:	378c      	adds	r7, #140	; 0x8c
 801293e:	46bd      	mov	sp, r7
 8012940:	bd90      	pop	{r4, r7, pc}
 8012942:	bf00      	nop
 8012944:	12d53d80 	.word	0x12d53d80
 8012948:	20000950 	.word	0x20000950
 801294c:	20001cb4 	.word	0x20001cb4

08012950 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b08e      	sub	sp, #56	; 0x38
 8012954:	af02      	add	r7, sp, #8
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	607a      	str	r2, [r7, #4]
 801295a:	461a      	mov	r2, r3
 801295c:	460b      	mov	r3, r1
 801295e:	72fb      	strb	r3, [r7, #11]
 8012960:	4613      	mov	r3, r2
 8012962:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012964:	2303      	movs	r3, #3
 8012966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801296a:	4b65      	ldr	r3, [pc, #404]	; (8012b00 <Send+0x1b0>)
 801296c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012970:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012974:	4b62      	ldr	r3, [pc, #392]	; (8012b00 <Send+0x1b0>)
 8012976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801297a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801297e:	4b60      	ldr	r3, [pc, #384]	; (8012b00 <Send+0x1b0>)
 8012980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012982:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012984:	4b5e      	ldr	r3, [pc, #376]	; (8012b00 <Send+0x1b0>)
 8012986:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801298a:	2b00      	cmp	r3, #0
 801298c:	d101      	bne.n	8012992 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801298e:	2307      	movs	r3, #7
 8012990:	e0b1      	b.n	8012af6 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012992:	4b5b      	ldr	r3, [pc, #364]	; (8012b00 <Send+0x1b0>)
 8012994:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8012998:	2b00      	cmp	r3, #0
 801299a:	d102      	bne.n	80129a2 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 801299c:	4b58      	ldr	r3, [pc, #352]	; (8012b00 <Send+0x1b0>)
 801299e:	2200      	movs	r2, #0
 80129a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80129a2:	2300      	movs	r3, #0
 80129a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80129a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129ac:	f36f 0303 	bfc	r3, #0, #4
 80129b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80129b4:	4b52      	ldr	r3, [pc, #328]	; (8012b00 <Send+0x1b0>)
 80129b6:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80129ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129be:	f362 13c7 	bfi	r3, r2, #7, #1
 80129c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80129c6:	4b4e      	ldr	r3, [pc, #312]	; (8012b00 <Send+0x1b0>)
 80129c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80129cc:	2b01      	cmp	r3, #1
 80129ce:	d106      	bne.n	80129de <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80129d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129d4:	f043 0310 	orr.w	r3, r3, #16
 80129d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80129dc:	e005      	b.n	80129ea <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80129de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129e2:	f36f 1304 	bfc	r3, #4, #1
 80129e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80129ea:	4b45      	ldr	r3, [pc, #276]	; (8012b00 <Send+0x1b0>)
 80129ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d005      	beq.n	8012a00 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80129f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129f8:	f043 0320 	orr.w	r3, r3, #32
 80129fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012a00:	4b3f      	ldr	r3, [pc, #252]	; (8012b00 <Send+0x1b0>)
 8012a02:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012a06:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8012a08:	2301      	movs	r3, #1
 8012a0a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012a0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012a10:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	bf14      	ite	ne
 8012a1a:	2301      	movne	r3, #1
 8012a1c:	2300      	moveq	r3, #0
 8012a1e:	b2db      	uxtb	r3, r3
 8012a20:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012a22:	4b37      	ldr	r3, [pc, #220]	; (8012b00 <Send+0x1b0>)
 8012a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a26:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012a28:	4b36      	ldr	r3, [pc, #216]	; (8012b04 <Send+0x1b4>)
 8012a2a:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8012a2e:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012a30:	4b34      	ldr	r3, [pc, #208]	; (8012b04 <Send+0x1b4>)
 8012a32:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8012a36:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012a38:	4b31      	ldr	r3, [pc, #196]	; (8012b00 <Send+0x1b0>)
 8012a3a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012a3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012a42:	4b2f      	ldr	r3, [pc, #188]	; (8012b00 <Send+0x1b0>)
 8012a44:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012a48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a4c:	4b2c      	ldr	r3, [pc, #176]	; (8012b00 <Send+0x1b0>)
 8012a4e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012a52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012a56:	4b2a      	ldr	r3, [pc, #168]	; (8012b00 <Send+0x1b0>)
 8012a58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012a60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012a64:	f107 0014 	add.w	r0, r7, #20
 8012a68:	4a27      	ldr	r2, [pc, #156]	; (8012b08 <Send+0x1b8>)
 8012a6a:	4928      	ldr	r1, [pc, #160]	; (8012b0c <Send+0x1bc>)
 8012a6c:	f002 fc1a 	bl	80152a4 <LoRaMacAdrCalcNext>
 8012a70:	4603      	mov	r3, r0
 8012a72:	461a      	mov	r2, r3
 8012a74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012a78:	f362 1386 	bfi	r3, r2, #6, #1
 8012a7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012a80:	7afa      	ldrb	r2, [r7, #11]
 8012a82:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012a86:	893b      	ldrh	r3, [r7, #8]
 8012a88:	9300      	str	r3, [sp, #0]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	68f8      	ldr	r0, [r7, #12]
 8012a8e:	f000 fc2d 	bl	80132ec <PrepareFrame>
 8012a92:	4603      	mov	r3, r0
 8012a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d003      	beq.n	8012aa8 <Send+0x158>
 8012aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012aa4:	2b0a      	cmp	r3, #10
 8012aa6:	d107      	bne.n	8012ab8 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012aa8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012aac:	4618      	mov	r0, r3
 8012aae:	f000 f96d 	bl	8012d8c <ScheduleTx>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d00a      	beq.n	8012ad6 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012ac0:	4a0f      	ldr	r2, [pc, #60]	; (8012b00 <Send+0x1b0>)
 8012ac2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012ac6:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012aca:	4a0d      	ldr	r2, [pc, #52]	; (8012b00 <Send+0x1b0>)
 8012acc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012ad0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012ad4:	e00d      	b.n	8012af2 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012ad6:	4b0a      	ldr	r3, [pc, #40]	; (8012b00 <Send+0x1b0>)
 8012ad8:	2200      	movs	r2, #0
 8012ada:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae0:	4a07      	ldr	r2, [pc, #28]	; (8012b00 <Send+0x1b0>)
 8012ae2:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012ae4:	f002 fe70 	bl	80157c8 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d001      	beq.n	8012af2 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012aee:	2313      	movs	r3, #19
 8012af0:	e001      	b.n	8012af6 <Send+0x1a6>
        }
    }
    return status;
 8012af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3730      	adds	r7, #48	; 0x30
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	20000e5c 	.word	0x20000e5c
 8012b04:	20000950 	.word	0x20000950
 8012b08:	20000e94 	.word	0x20000e94
 8012b0c:	20000e95 	.word	0x20000e95

08012b10 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	4603      	mov	r3, r0
 8012b18:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012b22:	2301      	movs	r3, #1
 8012b24:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012b26:	79fb      	ldrb	r3, [r7, #7]
 8012b28:	2bff      	cmp	r3, #255	; 0xff
 8012b2a:	d129      	bne.n	8012b80 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	f7ff f957 	bl	8011de0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012b32:	4b1a      	ldr	r3, [pc, #104]	; (8012b9c <SendReJoinReq+0x8c>)
 8012b34:	2200      	movs	r2, #0
 8012b36:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012b3a:	4b18      	ldr	r3, [pc, #96]	; (8012b9c <SendReJoinReq+0x8c>)
 8012b3c:	4a18      	ldr	r2, [pc, #96]	; (8012ba0 <SendReJoinReq+0x90>)
 8012b3e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012b42:	4b16      	ldr	r3, [pc, #88]	; (8012b9c <SendReJoinReq+0x8c>)
 8012b44:	22ff      	movs	r2, #255	; 0xff
 8012b46:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012b4a:	7b3b      	ldrb	r3, [r7, #12]
 8012b4c:	f36f 1347 	bfc	r3, #5, #3
 8012b50:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012b52:	7b3a      	ldrb	r2, [r7, #12]
 8012b54:	4b11      	ldr	r3, [pc, #68]	; (8012b9c <SendReJoinReq+0x8c>)
 8012b56:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012b5a:	f7fc fb79 	bl	800f250 <SecureElementGetJoinEui>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2208      	movs	r2, #8
 8012b62:	4619      	mov	r1, r3
 8012b64:	480f      	ldr	r0, [pc, #60]	; (8012ba4 <SendReJoinReq+0x94>)
 8012b66:	f006 fe76 	bl	8019856 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8012b6a:	f7fc fb4f 	bl	800f20c <SecureElementGetDevEui>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2208      	movs	r2, #8
 8012b72:	4619      	mov	r1, r3
 8012b74:	480c      	ldr	r0, [pc, #48]	; (8012ba8 <SendReJoinReq+0x98>)
 8012b76:	f006 fe6e 	bl	8019856 <memcpy1>

            allowDelayedTx = false;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	73fb      	strb	r3, [r7, #15]

            break;
 8012b7e:	e002      	b.n	8012b86 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012b80:	2302      	movs	r3, #2
 8012b82:	73bb      	strb	r3, [r7, #14]
            break;
 8012b84:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012b86:	7bfb      	ldrb	r3, [r7, #15]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f000 f8ff 	bl	8012d8c <ScheduleTx>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	73bb      	strb	r3, [r7, #14]
    return status;
 8012b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	20000950 	.word	0x20000950
 8012ba0:	20000952 	.word	0x20000952
 8012ba4:	20000a5e 	.word	0x20000a5e
 8012ba8:	20000a66 	.word	0x20000a66

08012bac <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012bb0:	f002 fbe7 	bl	8015382 <LoRaMacClassBIsBeaconExpected>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d001      	beq.n	8012bbe <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012bba:	230e      	movs	r3, #14
 8012bbc:	e013      	b.n	8012be6 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012bbe:	4b0b      	ldr	r3, [pc, #44]	; (8012bec <CheckForClassBCollision+0x40>)
 8012bc0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d10d      	bne.n	8012be4 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012bc8:	f002 fbe2 	bl	8015390 <LoRaMacClassBIsPingExpected>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d001      	beq.n	8012bd6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012bd2:	230f      	movs	r3, #15
 8012bd4:	e007      	b.n	8012be6 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012bd6:	f002 fbe2 	bl	801539e <LoRaMacClassBIsMulticastExpected>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d001      	beq.n	8012be4 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012be0:	230f      	movs	r3, #15
 8012be2:	e000      	b.n	8012be6 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8012be4:	2300      	movs	r3, #0
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	20000e5c 	.word	0x20000e5c

08012bf0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8012bf0:	b590      	push	{r4, r7, lr}
 8012bf2:	b083      	sub	sp, #12
 8012bf4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012bf6:	4b2d      	ldr	r3, [pc, #180]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012bf8:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012bfc:	4b2b      	ldr	r3, [pc, #172]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012bfe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012c02:	4b2a      	ldr	r3, [pc, #168]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c04:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8012c08:	4b28      	ldr	r3, [pc, #160]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c0a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8012c0e:	4b27      	ldr	r3, [pc, #156]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c10:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012c14:	b25b      	sxtb	r3, r3
 8012c16:	f004 fc72 	bl	80174fe <RegionApplyDrOffset>
 8012c1a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012c1c:	b259      	sxtb	r1, r3
 8012c1e:	4b23      	ldr	r3, [pc, #140]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c20:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012c24:	4b21      	ldr	r3, [pc, #132]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c28:	4821      	ldr	r0, [pc, #132]	; (8012cb0 <ComputeRxWindowParameters+0xc0>)
 8012c2a:	9000      	str	r0, [sp, #0]
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f004 fb76 	bl	801731e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012c32:	4b1e      	ldr	r3, [pc, #120]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c34:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8012c38:	4b1c      	ldr	r3, [pc, #112]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c3a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012c3e:	b259      	sxtb	r1, r3
 8012c40:	4b1a      	ldr	r3, [pc, #104]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c42:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012c46:	4b19      	ldr	r3, [pc, #100]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c4a:	4c1a      	ldr	r4, [pc, #104]	; (8012cb4 <ComputeRxWindowParameters+0xc4>)
 8012c4c:	9400      	str	r4, [sp, #0]
 8012c4e:	f004 fb66 	bl	801731e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012c52:	4b16      	ldr	r3, [pc, #88]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c56:	4a18      	ldr	r2, [pc, #96]	; (8012cb8 <ComputeRxWindowParameters+0xc8>)
 8012c58:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012c5c:	4413      	add	r3, r2
 8012c5e:	4a16      	ldr	r2, [pc, #88]	; (8012cb8 <ComputeRxWindowParameters+0xc8>)
 8012c60:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012c64:	4b11      	ldr	r3, [pc, #68]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c68:	4a13      	ldr	r2, [pc, #76]	; (8012cb8 <ComputeRxWindowParameters+0xc8>)
 8012c6a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8012c6e:	4413      	add	r3, r2
 8012c70:	4a11      	ldr	r2, [pc, #68]	; (8012cb8 <ComputeRxWindowParameters+0xc8>)
 8012c72:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012c76:	4b0d      	ldr	r3, [pc, #52]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c78:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d111      	bne.n	8012ca4 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012c80:	4b0a      	ldr	r3, [pc, #40]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c84:	4a0c      	ldr	r2, [pc, #48]	; (8012cb8 <ComputeRxWindowParameters+0xc8>)
 8012c86:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012c8a:	4413      	add	r3, r2
 8012c8c:	4a0a      	ldr	r2, [pc, #40]	; (8012cb8 <ComputeRxWindowParameters+0xc8>)
 8012c8e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012c92:	4b06      	ldr	r3, [pc, #24]	; (8012cac <ComputeRxWindowParameters+0xbc>)
 8012c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c96:	4a08      	ldr	r2, [pc, #32]	; (8012cb8 <ComputeRxWindowParameters+0xc8>)
 8012c98:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8012c9c:	4413      	add	r3, r2
 8012c9e:	4a06      	ldr	r2, [pc, #24]	; (8012cb8 <ComputeRxWindowParameters+0xc8>)
 8012ca0:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8012ca4:	bf00      	nop
 8012ca6:	3704      	adds	r7, #4
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd90      	pop	{r4, r7, pc}
 8012cac:	20000e5c 	.word	0x20000e5c
 8012cb0:	20000d08 	.word	0x20000d08
 8012cb4:	20000d1c 	.word	0x20000d1c
 8012cb8:	20000950 	.word	0x20000950

08012cbc <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8012cc6:	4b13      	ldr	r3, [pc, #76]	; (8012d14 <VerifyTxFrame+0x58>)
 8012cc8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d01b      	beq.n	8012d08 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012cd0:	1d3b      	adds	r3, r7, #4
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f002 fdbe 	bl	8015854 <LoRaMacCommandsGetSizeSerializedCmds>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d001      	beq.n	8012ce2 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cde:	2313      	movs	r3, #19
 8012ce0:	e013      	b.n	8012d0a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8012ce2:	4b0d      	ldr	r3, [pc, #52]	; (8012d18 <VerifyTxFrame+0x5c>)
 8012ce4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012ce8:	4a0a      	ldr	r2, [pc, #40]	; (8012d14 <VerifyTxFrame+0x58>)
 8012cea:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8012cee:	687a      	ldr	r2, [r7, #4]
 8012cf0:	b2d2      	uxtb	r2, r2
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7ff f96c 	bl	8011fd0 <ValidatePayloadLength>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	f083 0301 	eor.w	r3, r3, #1
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d001      	beq.n	8012d08 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8012d04:	2308      	movs	r3, #8
 8012d06:	e000      	b.n	8012d0a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8012d08:	2300      	movs	r3, #0
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3708      	adds	r7, #8
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	20000e5c 	.word	0x20000e5c
 8012d18:	20000950 	.word	0x20000950

08012d1c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8012d22:	4b18      	ldr	r3, [pc, #96]	; (8012d84 <SerializeTxFrame+0x68>)
 8012d24:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d002      	beq.n	8012d32 <SerializeTxFrame+0x16>
 8012d2c:	2b04      	cmp	r3, #4
 8012d2e:	d011      	beq.n	8012d54 <SerializeTxFrame+0x38>
 8012d30:	e021      	b.n	8012d76 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012d32:	4815      	ldr	r0, [pc, #84]	; (8012d88 <SerializeTxFrame+0x6c>)
 8012d34:	f004 f8f3 	bl	8016f1e <LoRaMacSerializerJoinRequest>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012d3c:	79fb      	ldrb	r3, [r7, #7]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d001      	beq.n	8012d46 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d42:	2311      	movs	r3, #17
 8012d44:	e01a      	b.n	8012d7c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012d46:	4b0f      	ldr	r3, [pc, #60]	; (8012d84 <SerializeTxFrame+0x68>)
 8012d48:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012d4c:	b29a      	uxth	r2, r3
 8012d4e:	4b0d      	ldr	r3, [pc, #52]	; (8012d84 <SerializeTxFrame+0x68>)
 8012d50:	801a      	strh	r2, [r3, #0]
            break;
 8012d52:	e012      	b.n	8012d7a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8012d54:	480c      	ldr	r0, [pc, #48]	; (8012d88 <SerializeTxFrame+0x6c>)
 8012d56:	f004 f964 	bl	8017022 <LoRaMacSerializerData>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012d5e:	79fb      	ldrb	r3, [r7, #7]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d001      	beq.n	8012d68 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d64:	2311      	movs	r3, #17
 8012d66:	e009      	b.n	8012d7c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012d68:	4b06      	ldr	r3, [pc, #24]	; (8012d84 <SerializeTxFrame+0x68>)
 8012d6a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012d6e:	b29a      	uxth	r2, r3
 8012d70:	4b04      	ldr	r3, [pc, #16]	; (8012d84 <SerializeTxFrame+0x68>)
 8012d72:	801a      	strh	r2, [r3, #0]
            break;
 8012d74:	e001      	b.n	8012d7a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012d76:	2303      	movs	r3, #3
 8012d78:	e000      	b.n	8012d7c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8012d7a:	2300      	movs	r3, #0
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3708      	adds	r7, #8
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	20000950 	.word	0x20000950
 8012d88:	20000a58 	.word	0x20000a58

08012d8c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b090      	sub	sp, #64	; 0x40
 8012d90:	af02      	add	r7, sp, #8
 8012d92:	4603      	mov	r3, r0
 8012d94:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d96:	2303      	movs	r3, #3
 8012d98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8012d9c:	f7ff ff06 	bl	8012bac <CheckForClassBCollision>
 8012da0:	4603      	mov	r3, r0
 8012da2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012da6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d002      	beq.n	8012db4 <ScheduleTx+0x28>
    {
        return status;
 8012dae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012db2:	e08f      	b.n	8012ed4 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8012db4:	f000 f8fa 	bl	8012fac <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8012db8:	f7ff ffb0 	bl	8012d1c <SerializeTxFrame>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d002      	beq.n	8012dd0 <ScheduleTx+0x44>
    {
        return status;
 8012dca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dce:	e081      	b.n	8012ed4 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8012dd0:	4b42      	ldr	r3, [pc, #264]	; (8012edc <ScheduleTx+0x150>)
 8012dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dd4:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012dd6:	4b41      	ldr	r3, [pc, #260]	; (8012edc <ScheduleTx+0x150>)
 8012dd8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012ddc:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8012dde:	4b3f      	ldr	r3, [pc, #252]	; (8012edc <ScheduleTx+0x150>)
 8012de0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8012de4:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8012de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dea:	4618      	mov	r0, r3
 8012dec:	f00a f94c 	bl	801d088 <SysTimeGetMcuTime>
 8012df0:	4638      	mov	r0, r7
 8012df2:	4b3a      	ldr	r3, [pc, #232]	; (8012edc <ScheduleTx+0x150>)
 8012df4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8012df8:	9200      	str	r2, [sp, #0]
 8012dfa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8012dfe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012e02:	ca06      	ldmia	r2, {r1, r2}
 8012e04:	f00a f8a1 	bl	801cf4a <SysTimeSub>
 8012e08:	f107 0320 	add.w	r3, r7, #32
 8012e0c:	463a      	mov	r2, r7
 8012e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e12:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8012e16:	4b31      	ldr	r3, [pc, #196]	; (8012edc <ScheduleTx+0x150>)
 8012e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e1a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8012e22:	2301      	movs	r3, #1
 8012e24:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8012e26:	4b2e      	ldr	r3, [pc, #184]	; (8012ee0 <ScheduleTx+0x154>)
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012e2c:	4b2b      	ldr	r3, [pc, #172]	; (8012edc <ScheduleTx+0x150>)
 8012e2e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d104      	bne.n	8012e40 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8012e36:	2301      	movs	r3, #1
 8012e38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8012e40:	4b26      	ldr	r3, [pc, #152]	; (8012edc <ScheduleTx+0x150>)
 8012e42:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012e46:	f107 0114 	add.w	r1, r7, #20
 8012e4a:	4b26      	ldr	r3, [pc, #152]	; (8012ee4 <ScheduleTx+0x158>)
 8012e4c:	9300      	str	r3, [sp, #0]
 8012e4e:	4b26      	ldr	r3, [pc, #152]	; (8012ee8 <ScheduleTx+0x15c>)
 8012e50:	4a26      	ldr	r2, [pc, #152]	; (8012eec <ScheduleTx+0x160>)
 8012e52:	f004 fb2a 	bl	80174aa <RegionNextChannel>
 8012e56:	4603      	mov	r3, r0
 8012e58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8012e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d022      	beq.n	8012eaa <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8012e64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e68:	2b0b      	cmp	r3, #11
 8012e6a:	d11b      	bne.n	8012ea4 <ScheduleTx+0x118>
 8012e6c:	7bfb      	ldrb	r3, [r7, #15]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d018      	beq.n	8012ea4 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8012e72:	4b1b      	ldr	r3, [pc, #108]	; (8012ee0 <ScheduleTx+0x154>)
 8012e74:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d011      	beq.n	8012ea0 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012e7c:	4b18      	ldr	r3, [pc, #96]	; (8012ee0 <ScheduleTx+0x154>)
 8012e7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012e82:	f043 0320 	orr.w	r3, r3, #32
 8012e86:	4a16      	ldr	r2, [pc, #88]	; (8012ee0 <ScheduleTx+0x154>)
 8012e88:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012e8c:	4b14      	ldr	r3, [pc, #80]	; (8012ee0 <ScheduleTx+0x154>)
 8012e8e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8012e92:	4619      	mov	r1, r3
 8012e94:	4816      	ldr	r0, [pc, #88]	; (8012ef0 <ScheduleTx+0x164>)
 8012e96:	f00a fe97 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8012e9a:	4815      	ldr	r0, [pc, #84]	; (8012ef0 <ScheduleTx+0x164>)
 8012e9c:	f00a fdb6 	bl	801da0c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	e017      	b.n	8012ed4 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8012ea4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ea8:	e014      	b.n	8012ed4 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8012eaa:	f7ff fea1 	bl	8012bf0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8012eae:	f7ff ff05 	bl	8012cbc <VerifyTxFrame>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d002      	beq.n	8012ec6 <ScheduleTx+0x13a>
    {
        return status;
 8012ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ec4:	e006      	b.n	8012ed4 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8012ec6:	4b06      	ldr	r3, [pc, #24]	; (8012ee0 <ScheduleTx+0x154>)
 8012ec8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f000 fb29 	bl	8013524 <SendFrameOnChannel>
 8012ed2:	4603      	mov	r3, r0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3738      	adds	r7, #56	; 0x38
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	20000e5c 	.word	0x20000e5c
 8012ee0:	20000950 	.word	0x20000950
 8012ee4:	20000e8c 	.word	0x20000e8c
 8012ee8:	20000dd8 	.word	0x20000dd8
 8012eec:	20000d65 	.word	0x20000d65
 8012ef0:	20000cb8 	.word	0x20000cb8

08012ef4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b084      	sub	sp, #16
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	4603      	mov	r3, r0
 8012efc:	460a      	mov	r2, r1
 8012efe:	71fb      	strb	r3, [r7, #7]
 8012f00:	4613      	mov	r3, r2
 8012f02:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012f04:	2313      	movs	r3, #19
 8012f06:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8012f0c:	4b25      	ldr	r3, [pc, #148]	; (8012fa4 <SecureFrame+0xb0>)
 8012f0e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d002      	beq.n	8012f1c <SecureFrame+0x28>
 8012f16:	2b04      	cmp	r3, #4
 8012f18:	d011      	beq.n	8012f3e <SecureFrame+0x4a>
 8012f1a:	e03b      	b.n	8012f94 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012f1c:	4822      	ldr	r0, [pc, #136]	; (8012fa8 <SecureFrame+0xb4>)
 8012f1e:	f003 fbc7 	bl	80166b0 <LoRaMacCryptoPrepareJoinRequest>
 8012f22:	4603      	mov	r3, r0
 8012f24:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012f26:	7bfb      	ldrb	r3, [r7, #15]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d001      	beq.n	8012f30 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f2c:	2311      	movs	r3, #17
 8012f2e:	e034      	b.n	8012f9a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012f30:	4b1c      	ldr	r3, [pc, #112]	; (8012fa4 <SecureFrame+0xb0>)
 8012f32:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	4b1a      	ldr	r3, [pc, #104]	; (8012fa4 <SecureFrame+0xb0>)
 8012f3a:	801a      	strh	r2, [r3, #0]
            break;
 8012f3c:	e02c      	b.n	8012f98 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012f3e:	f107 0308 	add.w	r3, r7, #8
 8012f42:	4618      	mov	r0, r3
 8012f44:	f003 face 	bl	80164e4 <LoRaMacCryptoGetFCntUp>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d001      	beq.n	8012f52 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012f4e:	2312      	movs	r3, #18
 8012f50:	e023      	b.n	8012f9a <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8012f52:	4b14      	ldr	r3, [pc, #80]	; (8012fa4 <SecureFrame+0xb0>)
 8012f54:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d104      	bne.n	8012f66 <SecureFrame+0x72>
 8012f5c:	4b11      	ldr	r3, [pc, #68]	; (8012fa4 <SecureFrame+0xb0>)
 8012f5e:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d902      	bls.n	8012f6c <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012f6c:	68b8      	ldr	r0, [r7, #8]
 8012f6e:	79ba      	ldrb	r2, [r7, #6]
 8012f70:	79f9      	ldrb	r1, [r7, #7]
 8012f72:	4b0d      	ldr	r3, [pc, #52]	; (8012fa8 <SecureFrame+0xb4>)
 8012f74:	f003 fcb4 	bl	80168e0 <LoRaMacCryptoSecureMessage>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012f7c:	7bfb      	ldrb	r3, [r7, #15]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d001      	beq.n	8012f86 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f82:	2311      	movs	r3, #17
 8012f84:	e009      	b.n	8012f9a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012f86:	4b07      	ldr	r3, [pc, #28]	; (8012fa4 <SecureFrame+0xb0>)
 8012f88:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	4b05      	ldr	r3, [pc, #20]	; (8012fa4 <SecureFrame+0xb0>)
 8012f90:	801a      	strh	r2, [r3, #0]
            break;
 8012f92:	e001      	b.n	8012f98 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f94:	2303      	movs	r3, #3
 8012f96:	e000      	b.n	8012f9a <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8012f98:	2300      	movs	r3, #0
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3710      	adds	r7, #16
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	20000950 	.word	0x20000950
 8012fa8:	20000a58 	.word	0x20000a58

08012fac <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012fac:	b480      	push	{r7}
 8012fae:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012fb0:	4b09      	ldr	r3, [pc, #36]	; (8012fd8 <CalculateBackOff+0x2c>)
 8012fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d10a      	bne.n	8012fce <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012fb8:	4b07      	ldr	r3, [pc, #28]	; (8012fd8 <CalculateBackOff+0x2c>)
 8012fba:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	4a06      	ldr	r2, [pc, #24]	; (8012fdc <CalculateBackOff+0x30>)
 8012fc2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8012fc6:	fb02 f303 	mul.w	r3, r2, r3
 8012fca:	4a03      	ldr	r2, [pc, #12]	; (8012fd8 <CalculateBackOff+0x2c>)
 8012fcc:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8012fce:	bf00      	nop
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bc80      	pop	{r7}
 8012fd4:	4770      	bx	lr
 8012fd6:	bf00      	nop
 8012fd8:	20000e5c 	.word	0x20000e5c
 8012fdc:	20000950 	.word	0x20000950

08012fe0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	7139      	strb	r1, [r7, #4]
 8012fea:	71fb      	strb	r3, [r7, #7]
 8012fec:	4613      	mov	r3, r2
 8012fee:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8012ff0:	79fb      	ldrb	r3, [r7, #7]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d002      	beq.n	8012ffc <RemoveMacCommands+0x1c>
 8012ff6:	79fb      	ldrb	r3, [r7, #7]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d10d      	bne.n	8013018 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8012ffc:	79bb      	ldrb	r3, [r7, #6]
 8012ffe:	2b01      	cmp	r3, #1
 8013000:	d108      	bne.n	8013014 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8013002:	793b      	ldrb	r3, [r7, #4]
 8013004:	f003 0320 	and.w	r3, r3, #32
 8013008:	b2db      	uxtb	r3, r3
 801300a:	2b00      	cmp	r3, #0
 801300c:	d004      	beq.n	8013018 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801300e:	f002 fbff 	bl	8015810 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8013012:	e001      	b.n	8013018 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8013014:	f002 fbfc 	bl	8015810 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8013018:	bf00      	nop
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8013020:	b5b0      	push	{r4, r5, r7, lr}
 8013022:	b08e      	sub	sp, #56	; 0x38
 8013024:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8013026:	4b68      	ldr	r3, [pc, #416]	; (80131c8 <ResetMacParameters+0x1a8>)
 8013028:	2200      	movs	r2, #0
 801302a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801302e:	4b66      	ldr	r3, [pc, #408]	; (80131c8 <ResetMacParameters+0x1a8>)
 8013030:	2200      	movs	r2, #0
 8013032:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013034:	4b65      	ldr	r3, [pc, #404]	; (80131cc <ResetMacParameters+0x1ac>)
 8013036:	2200      	movs	r2, #0
 8013038:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 801303c:	4b63      	ldr	r3, [pc, #396]	; (80131cc <ResetMacParameters+0x1ac>)
 801303e:	2201      	movs	r2, #1
 8013040:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013044:	4b61      	ldr	r3, [pc, #388]	; (80131cc <ResetMacParameters+0x1ac>)
 8013046:	2201      	movs	r2, #1
 8013048:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 801304c:	4b5f      	ldr	r3, [pc, #380]	; (80131cc <ResetMacParameters+0x1ac>)
 801304e:	2200      	movs	r2, #0
 8013050:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013054:	4b5c      	ldr	r3, [pc, #368]	; (80131c8 <ResetMacParameters+0x1a8>)
 8013056:	2200      	movs	r2, #0
 8013058:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801305c:	4b5a      	ldr	r3, [pc, #360]	; (80131c8 <ResetMacParameters+0x1a8>)
 801305e:	2201      	movs	r2, #1
 8013060:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013064:	4b58      	ldr	r3, [pc, #352]	; (80131c8 <ResetMacParameters+0x1a8>)
 8013066:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 801306a:	4b57      	ldr	r3, [pc, #348]	; (80131c8 <ResetMacParameters+0x1a8>)
 801306c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013070:	4b55      	ldr	r3, [pc, #340]	; (80131c8 <ResetMacParameters+0x1a8>)
 8013072:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8013076:	4b54      	ldr	r3, [pc, #336]	; (80131c8 <ResetMacParameters+0x1a8>)
 8013078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 801307c:	4b52      	ldr	r3, [pc, #328]	; (80131c8 <ResetMacParameters+0x1a8>)
 801307e:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8013082:	4b51      	ldr	r3, [pc, #324]	; (80131c8 <ResetMacParameters+0x1a8>)
 8013084:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013088:	4b4f      	ldr	r3, [pc, #316]	; (80131c8 <ResetMacParameters+0x1a8>)
 801308a:	4a4f      	ldr	r2, [pc, #316]	; (80131c8 <ResetMacParameters+0x1a8>)
 801308c:	3364      	adds	r3, #100	; 0x64
 801308e:	32a8      	adds	r2, #168	; 0xa8
 8013090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013094:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013098:	4b4b      	ldr	r3, [pc, #300]	; (80131c8 <ResetMacParameters+0x1a8>)
 801309a:	4a4b      	ldr	r2, [pc, #300]	; (80131c8 <ResetMacParameters+0x1a8>)
 801309c:	336c      	adds	r3, #108	; 0x6c
 801309e:	32b0      	adds	r2, #176	; 0xb0
 80130a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80130a4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80130a8:	4b47      	ldr	r3, [pc, #284]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130aa:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80130ae:	4b46      	ldr	r3, [pc, #280]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80130b4:	4b44      	ldr	r3, [pc, #272]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130b6:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80130ba:	4b43      	ldr	r3, [pc, #268]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130bc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80130c0:	4b41      	ldr	r3, [pc, #260]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80130c6:	4a40      	ldr	r2, [pc, #256]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130c8:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80130ca:	4b3f      	ldr	r3, [pc, #252]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80130d0:	4a3d      	ldr	r2, [pc, #244]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130d2:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80130d4:	4b3d      	ldr	r3, [pc, #244]	; (80131cc <ResetMacParameters+0x1ac>)
 80130d6:	2200      	movs	r2, #0
 80130d8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80130dc:	4b3a      	ldr	r3, [pc, #232]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130de:	2200      	movs	r2, #0
 80130e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80130e4:	2301      	movs	r3, #1
 80130e6:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80130e8:	4b39      	ldr	r3, [pc, #228]	; (80131d0 <ResetMacParameters+0x1b0>)
 80130ea:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80130ec:	4b39      	ldr	r3, [pc, #228]	; (80131d4 <ResetMacParameters+0x1b4>)
 80130ee:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80130f0:	4b35      	ldr	r3, [pc, #212]	; (80131c8 <ResetMacParameters+0x1a8>)
 80130f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80130f6:	1d3a      	adds	r2, r7, #4
 80130f8:	4611      	mov	r1, r2
 80130fa:	4618      	mov	r0, r3
 80130fc:	f004 f8c1 	bl	8017282 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013100:	4b32      	ldr	r3, [pc, #200]	; (80131cc <ResetMacParameters+0x1ac>)
 8013102:	2200      	movs	r2, #0
 8013104:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013108:	4b30      	ldr	r3, [pc, #192]	; (80131cc <ResetMacParameters+0x1ac>)
 801310a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801310e:	4b2f      	ldr	r3, [pc, #188]	; (80131cc <ResetMacParameters+0x1ac>)
 8013110:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8013114:	4b2c      	ldr	r3, [pc, #176]	; (80131c8 <ResetMacParameters+0x1a8>)
 8013116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013118:	4a2c      	ldr	r2, [pc, #176]	; (80131cc <ResetMacParameters+0x1ac>)
 801311a:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801311e:	4b2a      	ldr	r3, [pc, #168]	; (80131c8 <ResetMacParameters+0x1a8>)
 8013120:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8013124:	4b29      	ldr	r3, [pc, #164]	; (80131cc <ResetMacParameters+0x1ac>)
 8013126:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801312a:	4b27      	ldr	r3, [pc, #156]	; (80131c8 <ResetMacParameters+0x1a8>)
 801312c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8013130:	4b26      	ldr	r3, [pc, #152]	; (80131cc <ResetMacParameters+0x1ac>)
 8013132:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8013136:	4b25      	ldr	r3, [pc, #148]	; (80131cc <ResetMacParameters+0x1ac>)
 8013138:	2200      	movs	r2, #0
 801313a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801313e:	4b23      	ldr	r3, [pc, #140]	; (80131cc <ResetMacParameters+0x1ac>)
 8013140:	2201      	movs	r2, #1
 8013142:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013146:	4a21      	ldr	r2, [pc, #132]	; (80131cc <ResetMacParameters+0x1ac>)
 8013148:	4b20      	ldr	r3, [pc, #128]	; (80131cc <ResetMacParameters+0x1ac>)
 801314a:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 801314e:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8013152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013156:	682b      	ldr	r3, [r5, #0]
 8013158:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801315a:	4b1c      	ldr	r3, [pc, #112]	; (80131cc <ResetMacParameters+0x1ac>)
 801315c:	2201      	movs	r2, #1
 801315e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013162:	4b1a      	ldr	r3, [pc, #104]	; (80131cc <ResetMacParameters+0x1ac>)
 8013164:	2202      	movs	r2, #2
 8013166:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801316a:	2300      	movs	r3, #0
 801316c:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 801316e:	2300      	movs	r3, #0
 8013170:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8013172:	4b16      	ldr	r3, [pc, #88]	; (80131cc <ResetMacParameters+0x1ac>)
 8013174:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013178:	2b00      	cmp	r3, #0
 801317a:	d009      	beq.n	8013190 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801317c:	4b13      	ldr	r3, [pc, #76]	; (80131cc <ResetMacParameters+0x1ac>)
 801317e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013186:	4b11      	ldr	r3, [pc, #68]	; (80131cc <ResetMacParameters+0x1ac>)
 8013188:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801318c:	691b      	ldr	r3, [r3, #16]
 801318e:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013190:	4b11      	ldr	r3, [pc, #68]	; (80131d8 <ResetMacParameters+0x1b8>)
 8013192:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013194:	4b11      	ldr	r3, [pc, #68]	; (80131dc <ResetMacParameters+0x1bc>)
 8013196:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013198:	4b11      	ldr	r3, [pc, #68]	; (80131e0 <ResetMacParameters+0x1c0>)
 801319a:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801319c:	4b11      	ldr	r3, [pc, #68]	; (80131e4 <ResetMacParameters+0x1c4>)
 801319e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80131a0:	4b11      	ldr	r3, [pc, #68]	; (80131e8 <ResetMacParameters+0x1c8>)
 80131a2:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80131a4:	4b11      	ldr	r3, [pc, #68]	; (80131ec <ResetMacParameters+0x1cc>)
 80131a6:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80131a8:	4b11      	ldr	r3, [pc, #68]	; (80131f0 <ResetMacParameters+0x1d0>)
 80131aa:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80131ac:	4b11      	ldr	r3, [pc, #68]	; (80131f4 <ResetMacParameters+0x1d4>)
 80131ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80131b0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80131b4:	f107 0310 	add.w	r3, r7, #16
 80131b8:	4a0f      	ldr	r2, [pc, #60]	; (80131f8 <ResetMacParameters+0x1d8>)
 80131ba:	4618      	mov	r0, r3
 80131bc:	f002 f88a 	bl	80152d4 <LoRaMacClassBInit>
}
 80131c0:	bf00      	nop
 80131c2:	3738      	adds	r7, #56	; 0x38
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bdb0      	pop	{r4, r5, r7, pc}
 80131c8:	20000e5c 	.word	0x20000e5c
 80131cc:	20000950 	.word	0x20000950
 80131d0:	2000103c 	.word	0x2000103c
 80131d4:	200010d0 	.word	0x200010d0
 80131d8:	20000db0 	.word	0x20000db0
 80131dc:	20000d6c 	.word	0x20000d6c
 80131e0:	20000d9c 	.word	0x20000d9c
 80131e4:	20000dd5 	.word	0x20000dd5
 80131e8:	20000f30 	.word	0x20000f30
 80131ec:	20000e9c 	.word	0x20000e9c
 80131f0:	20000ea0 	.word	0x20000ea0
 80131f4:	20000f34 	.word	0x20000f34
 80131f8:	2000156c 	.word	0x2000156c

080131fc <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b082      	sub	sp, #8
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f00a fc6e 	bl	801dae8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 801320c:	4b11      	ldr	r3, [pc, #68]	; (8013254 <RxWindowSetup+0x58>)
 801320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013210:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013212:	4b11      	ldr	r3, [pc, #68]	; (8013258 <RxWindowSetup+0x5c>)
 8013214:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013218:	4a10      	ldr	r2, [pc, #64]	; (801325c <RxWindowSetup+0x60>)
 801321a:	6839      	ldr	r1, [r7, #0]
 801321c:	4618      	mov	r0, r3
 801321e:	f004 f898 	bl	8017352 <RegionRxConfig>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d010      	beq.n	801324a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013228:	4b0d      	ldr	r3, [pc, #52]	; (8013260 <RxWindowSetup+0x64>)
 801322a:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 801322e:	4b0c      	ldr	r3, [pc, #48]	; (8013260 <RxWindowSetup+0x64>)
 8013230:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013234:	4b07      	ldr	r3, [pc, #28]	; (8013254 <RxWindowSetup+0x58>)
 8013236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013238:	4a07      	ldr	r2, [pc, #28]	; (8013258 <RxWindowSetup+0x5c>)
 801323a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801323c:	4610      	mov	r0, r2
 801323e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	7cda      	ldrb	r2, [r3, #19]
 8013244:	4b06      	ldr	r3, [pc, #24]	; (8013260 <RxWindowSetup+0x64>)
 8013246:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 801324a:	bf00      	nop
 801324c:	3708      	adds	r7, #8
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
 8013252:	bf00      	nop
 8013254:	0801f3a4 	.word	0x0801f3a4
 8013258:	20000e5c 	.word	0x20000e5c
 801325c:	20000d70 	.word	0x20000d70
 8013260:	20000950 	.word	0x20000950

08013264 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013264:	b590      	push	{r4, r7, lr}
 8013266:	b083      	sub	sp, #12
 8013268:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801326a:	4b1b      	ldr	r3, [pc, #108]	; (80132d8 <OpenContinuousRxCWindow+0x74>)
 801326c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013270:	4b19      	ldr	r3, [pc, #100]	; (80132d8 <OpenContinuousRxCWindow+0x74>)
 8013272:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013276:	b259      	sxtb	r1, r3
 8013278:	4b17      	ldr	r3, [pc, #92]	; (80132d8 <OpenContinuousRxCWindow+0x74>)
 801327a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801327e:	4b16      	ldr	r3, [pc, #88]	; (80132d8 <OpenContinuousRxCWindow+0x74>)
 8013280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013282:	4c16      	ldr	r4, [pc, #88]	; (80132dc <OpenContinuousRxCWindow+0x78>)
 8013284:	9400      	str	r4, [sp, #0]
 8013286:	f004 f84a 	bl	801731e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801328a:	4b15      	ldr	r3, [pc, #84]	; (80132e0 <OpenContinuousRxCWindow+0x7c>)
 801328c:	2202      	movs	r2, #2
 801328e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013292:	4b13      	ldr	r3, [pc, #76]	; (80132e0 <OpenContinuousRxCWindow+0x7c>)
 8013294:	2201      	movs	r2, #1
 8013296:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801329a:	4b0f      	ldr	r3, [pc, #60]	; (80132d8 <OpenContinuousRxCWindow+0x74>)
 801329c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80132a0:	4a10      	ldr	r2, [pc, #64]	; (80132e4 <OpenContinuousRxCWindow+0x80>)
 80132a2:	490e      	ldr	r1, [pc, #56]	; (80132dc <OpenContinuousRxCWindow+0x78>)
 80132a4:	4618      	mov	r0, r3
 80132a6:	f004 f854 	bl	8017352 <RegionRxConfig>
 80132aa:	4603      	mov	r3, r0
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d00f      	beq.n	80132d0 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80132b0:	4b0b      	ldr	r3, [pc, #44]	; (80132e0 <OpenContinuousRxCWindow+0x7c>)
 80132b2:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 80132b6:	4b0a      	ldr	r3, [pc, #40]	; (80132e0 <OpenContinuousRxCWindow+0x7c>)
 80132b8:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 80132bc:	4b0a      	ldr	r3, [pc, #40]	; (80132e8 <OpenContinuousRxCWindow+0x84>)
 80132be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132c0:	2000      	movs	r0, #0
 80132c2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80132c4:	4b06      	ldr	r3, [pc, #24]	; (80132e0 <OpenContinuousRxCWindow+0x7c>)
 80132c6:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80132ca:	4b05      	ldr	r3, [pc, #20]	; (80132e0 <OpenContinuousRxCWindow+0x7c>)
 80132cc:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 80132d0:	bf00      	nop
 80132d2:	3704      	adds	r7, #4
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd90      	pop	{r4, r7, pc}
 80132d8:	20000e5c 	.word	0x20000e5c
 80132dc:	20000d30 	.word	0x20000d30
 80132e0:	20000950 	.word	0x20000950
 80132e4:	20000d70 	.word	0x20000d70
 80132e8:	0801f3a4 	.word	0x0801f3a4

080132ec <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b088      	sub	sp, #32
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	603b      	str	r3, [r7, #0]
 80132f8:	4613      	mov	r3, r2
 80132fa:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80132fc:	4b82      	ldr	r3, [pc, #520]	; (8013508 <PrepareFrame+0x21c>)
 80132fe:	2200      	movs	r2, #0
 8013300:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8013302:	4b81      	ldr	r3, [pc, #516]	; (8013508 <PrepareFrame+0x21c>)
 8013304:	2200      	movs	r2, #0
 8013306:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 801330a:	2300      	movs	r3, #0
 801330c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801330e:	2300      	movs	r3, #0
 8013310:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8013312:	2300      	movs	r3, #0
 8013314:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d101      	bne.n	8013320 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 801331c:	2300      	movs	r3, #0
 801331e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013320:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013322:	461a      	mov	r2, r3
 8013324:	6839      	ldr	r1, [r7, #0]
 8013326:	4879      	ldr	r0, [pc, #484]	; (801350c <PrepareFrame+0x220>)
 8013328:	f006 fa95 	bl	8019856 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 801332c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801332e:	b2da      	uxtb	r2, r3
 8013330:	4b75      	ldr	r3, [pc, #468]	; (8013508 <PrepareFrame+0x21c>)
 8013332:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	781a      	ldrb	r2, [r3, #0]
 801333a:	4b73      	ldr	r3, [pc, #460]	; (8013508 <PrepareFrame+0x21c>)
 801333c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013346:	b2db      	uxtb	r3, r3
 8013348:	2b07      	cmp	r3, #7
 801334a:	f000 80b9 	beq.w	80134c0 <PrepareFrame+0x1d4>
 801334e:	2b07      	cmp	r3, #7
 8013350:	f300 80d0 	bgt.w	80134f4 <PrepareFrame+0x208>
 8013354:	2b02      	cmp	r3, #2
 8013356:	d006      	beq.n	8013366 <PrepareFrame+0x7a>
 8013358:	2b04      	cmp	r3, #4
 801335a:	f040 80cb 	bne.w	80134f4 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801335e:	4b6a      	ldr	r3, [pc, #424]	; (8013508 <PrepareFrame+0x21c>)
 8013360:	2201      	movs	r2, #1
 8013362:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013366:	4b68      	ldr	r3, [pc, #416]	; (8013508 <PrepareFrame+0x21c>)
 8013368:	2204      	movs	r2, #4
 801336a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801336e:	4b66      	ldr	r3, [pc, #408]	; (8013508 <PrepareFrame+0x21c>)
 8013370:	4a67      	ldr	r2, [pc, #412]	; (8013510 <PrepareFrame+0x224>)
 8013372:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013376:	4b64      	ldr	r3, [pc, #400]	; (8013508 <PrepareFrame+0x21c>)
 8013378:	22ff      	movs	r2, #255	; 0xff
 801337a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	781a      	ldrb	r2, [r3, #0]
 8013382:	4b61      	ldr	r3, [pc, #388]	; (8013508 <PrepareFrame+0x21c>)
 8013384:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013388:	4a5f      	ldr	r2, [pc, #380]	; (8013508 <PrepareFrame+0x21c>)
 801338a:	79fb      	ldrb	r3, [r7, #7]
 801338c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013390:	4b60      	ldr	r3, [pc, #384]	; (8013514 <PrepareFrame+0x228>)
 8013392:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013396:	4a5c      	ldr	r2, [pc, #368]	; (8013508 <PrepareFrame+0x21c>)
 8013398:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	781a      	ldrb	r2, [r3, #0]
 80133a0:	4b59      	ldr	r3, [pc, #356]	; (8013508 <PrepareFrame+0x21c>)
 80133a2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80133a6:	4b58      	ldr	r3, [pc, #352]	; (8013508 <PrepareFrame+0x21c>)
 80133a8:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80133ac:	4b56      	ldr	r3, [pc, #344]	; (8013508 <PrepareFrame+0x21c>)
 80133ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80133b2:	4b55      	ldr	r3, [pc, #340]	; (8013508 <PrepareFrame+0x21c>)
 80133b4:	4a55      	ldr	r2, [pc, #340]	; (801350c <PrepareFrame+0x220>)
 80133b6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80133ba:	f107 0318 	add.w	r3, r7, #24
 80133be:	4618      	mov	r0, r3
 80133c0:	f003 f890 	bl	80164e4 <LoRaMacCryptoGetFCntUp>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d001      	beq.n	80133ce <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80133ca:	2312      	movs	r3, #18
 80133cc:	e098      	b.n	8013500 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80133ce:	69bb      	ldr	r3, [r7, #24]
 80133d0:	b29a      	uxth	r2, r3
 80133d2:	4b4d      	ldr	r3, [pc, #308]	; (8013508 <PrepareFrame+0x21c>)
 80133d4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80133d8:	4b4b      	ldr	r3, [pc, #300]	; (8013508 <PrepareFrame+0x21c>)
 80133da:	2200      	movs	r2, #0
 80133dc:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80133e0:	4b49      	ldr	r3, [pc, #292]	; (8013508 <PrepareFrame+0x21c>)
 80133e2:	2200      	movs	r2, #0
 80133e4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	4a47      	ldr	r2, [pc, #284]	; (8013508 <PrepareFrame+0x21c>)
 80133ec:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80133f0:	f107 0314 	add.w	r3, r7, #20
 80133f4:	4618      	mov	r0, r3
 80133f6:	f002 fa2d 	bl	8015854 <LoRaMacCommandsGetSizeSerializedCmds>
 80133fa:	4603      	mov	r3, r0
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d001      	beq.n	8013404 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013400:	2313      	movs	r3, #19
 8013402:	e07d      	b.n	8013500 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d076      	beq.n	80134f8 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801340a:	4b42      	ldr	r3, [pc, #264]	; (8013514 <PrepareFrame+0x228>)
 801340c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013410:	4618      	mov	r0, r3
 8013412:	f7fe fdb5 	bl	8011f80 <GetMaxAppPayloadWithoutFOptsLength>
 8013416:	4603      	mov	r3, r0
 8013418:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801341a:	4b3b      	ldr	r3, [pc, #236]	; (8013508 <PrepareFrame+0x21c>)
 801341c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013420:	2b00      	cmp	r3, #0
 8013422:	d01d      	beq.n	8013460 <PrepareFrame+0x174>
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	2b0f      	cmp	r3, #15
 8013428:	d81a      	bhi.n	8013460 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801342a:	f107 0314 	add.w	r3, r7, #20
 801342e:	4a3a      	ldr	r2, [pc, #232]	; (8013518 <PrepareFrame+0x22c>)
 8013430:	4619      	mov	r1, r3
 8013432:	200f      	movs	r0, #15
 8013434:	f002 fa24 	bl	8015880 <LoRaMacCommandsSerializeCmds>
 8013438:	4603      	mov	r3, r0
 801343a:	2b00      	cmp	r3, #0
 801343c:	d001      	beq.n	8013442 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801343e:	2313      	movs	r3, #19
 8013440:	e05e      	b.n	8013500 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	f003 030f 	and.w	r3, r3, #15
 8013448:	b2d9      	uxtb	r1, r3
 801344a:	68ba      	ldr	r2, [r7, #8]
 801344c:	7813      	ldrb	r3, [r2, #0]
 801344e:	f361 0303 	bfi	r3, r1, #0, #4
 8013452:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	781a      	ldrb	r2, [r3, #0]
 8013458:	4b2b      	ldr	r3, [pc, #172]	; (8013508 <PrepareFrame+0x21c>)
 801345a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801345e:	e04b      	b.n	80134f8 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013460:	4b29      	ldr	r3, [pc, #164]	; (8013508 <PrepareFrame+0x21c>)
 8013462:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013466:	2b00      	cmp	r3, #0
 8013468:	d010      	beq.n	801348c <PrepareFrame+0x1a0>
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	2b0f      	cmp	r3, #15
 801346e:	d90d      	bls.n	801348c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013470:	7ffb      	ldrb	r3, [r7, #31]
 8013472:	f107 0114 	add.w	r1, r7, #20
 8013476:	4a29      	ldr	r2, [pc, #164]	; (801351c <PrepareFrame+0x230>)
 8013478:	4618      	mov	r0, r3
 801347a:	f002 fa01 	bl	8015880 <LoRaMacCommandsSerializeCmds>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d001      	beq.n	8013488 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013484:	2313      	movs	r3, #19
 8013486:	e03b      	b.n	8013500 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013488:	230a      	movs	r3, #10
 801348a:	e039      	b.n	8013500 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801348c:	7ffb      	ldrb	r3, [r7, #31]
 801348e:	f107 0114 	add.w	r1, r7, #20
 8013492:	4a22      	ldr	r2, [pc, #136]	; (801351c <PrepareFrame+0x230>)
 8013494:	4618      	mov	r0, r3
 8013496:	f002 f9f3 	bl	8015880 <LoRaMacCommandsSerializeCmds>
 801349a:	4603      	mov	r3, r0
 801349c:	2b00      	cmp	r3, #0
 801349e:	d001      	beq.n	80134a4 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80134a0:	2313      	movs	r3, #19
 80134a2:	e02d      	b.n	8013500 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80134a4:	4b18      	ldr	r3, [pc, #96]	; (8013508 <PrepareFrame+0x21c>)
 80134a6:	2200      	movs	r2, #0
 80134a8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80134ac:	4b16      	ldr	r3, [pc, #88]	; (8013508 <PrepareFrame+0x21c>)
 80134ae:	4a1b      	ldr	r2, [pc, #108]	; (801351c <PrepareFrame+0x230>)
 80134b0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	b2da      	uxtb	r2, r3
 80134b8:	4b13      	ldr	r3, [pc, #76]	; (8013508 <PrepareFrame+0x21c>)
 80134ba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80134be:	e01b      	b.n	80134f8 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d01a      	beq.n	80134fc <PrepareFrame+0x210>
 80134c6:	4b10      	ldr	r3, [pc, #64]	; (8013508 <PrepareFrame+0x21c>)
 80134c8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d015      	beq.n	80134fc <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80134d0:	4813      	ldr	r0, [pc, #76]	; (8013520 <PrepareFrame+0x234>)
 80134d2:	4b0d      	ldr	r3, [pc, #52]	; (8013508 <PrepareFrame+0x21c>)
 80134d4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80134d8:	b29b      	uxth	r3, r3
 80134da:	461a      	mov	r2, r3
 80134dc:	6839      	ldr	r1, [r7, #0]
 80134de:	f006 f9ba 	bl	8019856 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80134e2:	4b09      	ldr	r3, [pc, #36]	; (8013508 <PrepareFrame+0x21c>)
 80134e4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	3301      	adds	r3, #1
 80134ec:	b29a      	uxth	r2, r3
 80134ee:	4b06      	ldr	r3, [pc, #24]	; (8013508 <PrepareFrame+0x21c>)
 80134f0:	801a      	strh	r2, [r3, #0]
            }
            break;
 80134f2:	e003      	b.n	80134fc <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80134f4:	2302      	movs	r3, #2
 80134f6:	e003      	b.n	8013500 <PrepareFrame+0x214>
            break;
 80134f8:	bf00      	nop
 80134fa:	e000      	b.n	80134fe <PrepareFrame+0x212>
            break;
 80134fc:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80134fe:	2300      	movs	r3, #0
}
 8013500:	4618      	mov	r0, r3
 8013502:	3720      	adds	r7, #32
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}
 8013508:	20000950 	.word	0x20000950
 801350c:	20000a88 	.word	0x20000a88
 8013510:	20000952 	.word	0x20000952
 8013514:	20000e5c 	.word	0x20000e5c
 8013518:	20000a68 	.word	0x20000a68
 801351c:	20000ddc 	.word	0x20000ddc
 8013520:	20000953 	.word	0x20000953

08013524 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b08a      	sub	sp, #40	; 0x28
 8013528:	af00      	add	r7, sp, #0
 801352a:	4603      	mov	r3, r0
 801352c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801352e:	2303      	movs	r3, #3
 8013530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013534:	2300      	movs	r3, #0
 8013536:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013538:	79fb      	ldrb	r3, [r7, #7]
 801353a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801353c:	4b47      	ldr	r3, [pc, #284]	; (801365c <SendFrameOnChannel+0x138>)
 801353e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013542:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013544:	4b45      	ldr	r3, [pc, #276]	; (801365c <SendFrameOnChannel+0x138>)
 8013546:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801354a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801354c:	4b43      	ldr	r3, [pc, #268]	; (801365c <SendFrameOnChannel+0x138>)
 801354e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013550:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013552:	4b42      	ldr	r3, [pc, #264]	; (801365c <SendFrameOnChannel+0x138>)
 8013554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013556:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013558:	4b41      	ldr	r3, [pc, #260]	; (8013660 <SendFrameOnChannel+0x13c>)
 801355a:	881b      	ldrh	r3, [r3, #0]
 801355c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801355e:	4b3f      	ldr	r3, [pc, #252]	; (801365c <SendFrameOnChannel+0x138>)
 8013560:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013564:	f107 020f 	add.w	r2, r7, #15
 8013568:	f107 0110 	add.w	r1, r7, #16
 801356c:	4b3d      	ldr	r3, [pc, #244]	; (8013664 <SendFrameOnChannel+0x140>)
 801356e:	f003 ff05 	bl	801737c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013572:	4b3b      	ldr	r3, [pc, #236]	; (8013660 <SendFrameOnChannel+0x13c>)
 8013574:	2201      	movs	r2, #1
 8013576:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801357a:	4b38      	ldr	r3, [pc, #224]	; (801365c <SendFrameOnChannel+0x138>)
 801357c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013580:	b2da      	uxtb	r2, r3
 8013582:	4b37      	ldr	r3, [pc, #220]	; (8013660 <SendFrameOnChannel+0x13c>)
 8013584:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8013588:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801358c:	4b34      	ldr	r3, [pc, #208]	; (8013660 <SendFrameOnChannel+0x13c>)
 801358e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8013592:	79fb      	ldrb	r3, [r7, #7]
 8013594:	4a32      	ldr	r2, [pc, #200]	; (8013660 <SendFrameOnChannel+0x13c>)
 8013596:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801359a:	4b31      	ldr	r3, [pc, #196]	; (8013660 <SendFrameOnChannel+0x13c>)
 801359c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80135a0:	4a2f      	ldr	r2, [pc, #188]	; (8013660 <SendFrameOnChannel+0x13c>)
 80135a2:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80135a6:	4b2e      	ldr	r3, [pc, #184]	; (8013660 <SendFrameOnChannel+0x13c>)
 80135a8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80135ac:	4a2c      	ldr	r2, [pc, #176]	; (8013660 <SendFrameOnChannel+0x13c>)
 80135ae:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80135b2:	f001 fefb 	bl	80153ac <LoRaMacClassBIsBeaconModeActive>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d00b      	beq.n	80135d4 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80135bc:	4b28      	ldr	r3, [pc, #160]	; (8013660 <SendFrameOnChannel+0x13c>)
 80135be:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80135c2:	4618      	mov	r0, r3
 80135c4:	f001 ff5d 	bl	8015482 <LoRaMacClassBIsUplinkCollision>
 80135c8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80135ca:	6a3b      	ldr	r3, [r7, #32]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d001      	beq.n	80135d4 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80135d0:	2310      	movs	r3, #16
 80135d2:	e03e      	b.n	8013652 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80135d4:	4b21      	ldr	r3, [pc, #132]	; (801365c <SendFrameOnChannel+0x138>)
 80135d6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d101      	bne.n	80135e2 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80135de:	f001 ff5a 	bl	8015496 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80135e2:	f001 fef4 	bl	80153ce <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80135e6:	4b1d      	ldr	r3, [pc, #116]	; (801365c <SendFrameOnChannel+0x138>)
 80135e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80135ec:	b2db      	uxtb	r3, r3
 80135ee:	4a1c      	ldr	r2, [pc, #112]	; (8013660 <SendFrameOnChannel+0x13c>)
 80135f0:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80135f4:	4611      	mov	r1, r2
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7ff fc7c 	bl	8012ef4 <SecureFrame>
 80135fc:	4603      	mov	r3, r0
 80135fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013606:	2b00      	cmp	r3, #0
 8013608:	d002      	beq.n	8013610 <SendFrameOnChannel+0xec>
    {
        return status;
 801360a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801360e:	e020      	b.n	8013652 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013610:	4b13      	ldr	r3, [pc, #76]	; (8013660 <SendFrameOnChannel+0x13c>)
 8013612:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013616:	f043 0302 	orr.w	r3, r3, #2
 801361a:	4a11      	ldr	r2, [pc, #68]	; (8013660 <SendFrameOnChannel+0x13c>)
 801361c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8013620:	4b0f      	ldr	r3, [pc, #60]	; (8013660 <SendFrameOnChannel+0x13c>)
 8013622:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8013626:	f083 0301 	eor.w	r3, r3, #1
 801362a:	b2db      	uxtb	r3, r3
 801362c:	2b00      	cmp	r3, #0
 801362e:	d007      	beq.n	8013640 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013630:	4b0b      	ldr	r3, [pc, #44]	; (8013660 <SendFrameOnChannel+0x13c>)
 8013632:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013636:	3301      	adds	r3, #1
 8013638:	b2da      	uxtb	r2, r3
 801363a:	4b09      	ldr	r3, [pc, #36]	; (8013660 <SendFrameOnChannel+0x13c>)
 801363c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013640:	4b09      	ldr	r3, [pc, #36]	; (8013668 <SendFrameOnChannel+0x144>)
 8013642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013644:	4a06      	ldr	r2, [pc, #24]	; (8013660 <SendFrameOnChannel+0x13c>)
 8013646:	8812      	ldrh	r2, [r2, #0]
 8013648:	b2d2      	uxtb	r2, r2
 801364a:	4611      	mov	r1, r2
 801364c:	4807      	ldr	r0, [pc, #28]	; (801366c <SendFrameOnChannel+0x148>)
 801364e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013650:	2300      	movs	r3, #0
}
 8013652:	4618      	mov	r0, r3
 8013654:	3728      	adds	r7, #40	; 0x28
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	20000e5c 	.word	0x20000e5c
 8013660:	20000950 	.word	0x20000950
 8013664:	20000d68 	.word	0x20000d68
 8013668:	0801f3a4 	.word	0x0801f3a4
 801366c:	20000952 	.word	0x20000952

08013670 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b086      	sub	sp, #24
 8013674:	af00      	add	r7, sp, #0
 8013676:	4603      	mov	r3, r0
 8013678:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801367a:	4b15      	ldr	r3, [pc, #84]	; (80136d0 <SetTxContinuousWave+0x60>)
 801367c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8013680:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013682:	4b14      	ldr	r3, [pc, #80]	; (80136d4 <SetTxContinuousWave+0x64>)
 8013684:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013688:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801368a:	4b12      	ldr	r3, [pc, #72]	; (80136d4 <SetTxContinuousWave+0x64>)
 801368c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013690:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013692:	4b10      	ldr	r3, [pc, #64]	; (80136d4 <SetTxContinuousWave+0x64>)
 8013694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013696:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013698:	4b0e      	ldr	r3, [pc, #56]	; (80136d4 <SetTxContinuousWave+0x64>)
 801369a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801369c:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801369e:	88fb      	ldrh	r3, [r7, #6]
 80136a0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80136a2:	4b0c      	ldr	r3, [pc, #48]	; (80136d4 <SetTxContinuousWave+0x64>)
 80136a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80136a8:	f107 0208 	add.w	r2, r7, #8
 80136ac:	4611      	mov	r1, r2
 80136ae:	4618      	mov	r0, r3
 80136b0:	f003 ff13 	bl	80174da <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80136b4:	4b06      	ldr	r3, [pc, #24]	; (80136d0 <SetTxContinuousWave+0x60>)
 80136b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80136ba:	f043 0302 	orr.w	r3, r3, #2
 80136be:	4a04      	ldr	r2, [pc, #16]	; (80136d0 <SetTxContinuousWave+0x60>)
 80136c0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80136c4:	2300      	movs	r3, #0
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3718      	adds	r7, #24
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	20000950 	.word	0x20000950
 80136d4:	20000e5c 	.word	0x20000e5c

080136d8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b082      	sub	sp, #8
 80136dc:	af00      	add	r7, sp, #0
 80136de:	4603      	mov	r3, r0
 80136e0:	6039      	str	r1, [r7, #0]
 80136e2:	80fb      	strh	r3, [r7, #6]
 80136e4:	4613      	mov	r3, r2
 80136e6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80136e8:	4b09      	ldr	r3, [pc, #36]	; (8013710 <SetTxContinuousWave1+0x38>)
 80136ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ec:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80136f0:	88fa      	ldrh	r2, [r7, #6]
 80136f2:	6838      	ldr	r0, [r7, #0]
 80136f4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80136f6:	4b07      	ldr	r3, [pc, #28]	; (8013714 <SetTxContinuousWave1+0x3c>)
 80136f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80136fc:	f043 0302 	orr.w	r3, r3, #2
 8013700:	4a04      	ldr	r2, [pc, #16]	; (8013714 <SetTxContinuousWave1+0x3c>)
 8013702:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013706:	2300      	movs	r3, #0
}
 8013708:	4618      	mov	r0, r3
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	0801f3a4 	.word	0x0801f3a4
 8013714:	20000950 	.word	0x20000950

08013718 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 801371e:	2300      	movs	r3, #0
 8013720:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8013722:	4b3e      	ldr	r3, [pc, #248]	; (801381c <RestoreNvmData+0x104>)
 8013724:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013728:	2b01      	cmp	r3, #1
 801372a:	d001      	beq.n	8013730 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 801372c:	2301      	movs	r3, #1
 801372e:	e071      	b.n	8013814 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8013730:	2124      	movs	r1, #36	; 0x24
 8013732:	483b      	ldr	r0, [pc, #236]	; (8013820 <RestoreNvmData+0x108>)
 8013734:	f006 f8e4 	bl	8019900 <Crc32>
 8013738:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801373a:	4b39      	ldr	r3, [pc, #228]	; (8013820 <RestoreNvmData+0x108>)
 801373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	429a      	cmp	r2, r3
 8013742:	d001      	beq.n	8013748 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013744:	2317      	movs	r3, #23
 8013746:	e065      	b.n	8013814 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8013748:	2114      	movs	r1, #20
 801374a:	4836      	ldr	r0, [pc, #216]	; (8013824 <RestoreNvmData+0x10c>)
 801374c:	f006 f8d8 	bl	8019900 <Crc32>
 8013750:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8013752:	4b33      	ldr	r3, [pc, #204]	; (8013820 <RestoreNvmData+0x108>)
 8013754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	429a      	cmp	r2, r3
 801375a:	d001      	beq.n	8013760 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801375c:	2317      	movs	r3, #23
 801375e:	e059      	b.n	8013814 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8013760:	21dc      	movs	r1, #220	; 0xdc
 8013762:	4831      	ldr	r0, [pc, #196]	; (8013828 <RestoreNvmData+0x110>)
 8013764:	f006 f8cc 	bl	8019900 <Crc32>
 8013768:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 801376a:	4b2d      	ldr	r3, [pc, #180]	; (8013820 <RestoreNvmData+0x108>)
 801376c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	429a      	cmp	r2, r3
 8013774:	d001      	beq.n	801377a <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013776:	2317      	movs	r3, #23
 8013778:	e04c      	b.n	8013814 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 801377a:	21bc      	movs	r1, #188	; 0xbc
 801377c:	482b      	ldr	r0, [pc, #172]	; (801382c <RestoreNvmData+0x114>)
 801377e:	f006 f8bf 	bl	8019900 <Crc32>
 8013782:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8013784:	4b26      	ldr	r3, [pc, #152]	; (8013820 <RestoreNvmData+0x108>)
 8013786:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	429a      	cmp	r2, r3
 801378e:	d001      	beq.n	8013794 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013790:	2317      	movs	r3, #23
 8013792:	e03f      	b.n	8013814 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8013794:	2190      	movs	r1, #144	; 0x90
 8013796:	4826      	ldr	r0, [pc, #152]	; (8013830 <RestoreNvmData+0x118>)
 8013798:	f006 f8b2 	bl	8019900 <Crc32>
 801379c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801379e:	4b20      	ldr	r3, [pc, #128]	; (8013820 <RestoreNvmData+0x108>)
 80137a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	429a      	cmp	r2, r3
 80137a8:	d001      	beq.n	80137ae <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80137aa:	2317      	movs	r3, #23
 80137ac:	e032      	b.n	8013814 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80137ae:	2114      	movs	r1, #20
 80137b0:	4820      	ldr	r0, [pc, #128]	; (8013834 <RestoreNvmData+0x11c>)
 80137b2:	f006 f8a5 	bl	8019900 <Crc32>
 80137b6:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80137b8:	4b19      	ldr	r3, [pc, #100]	; (8013820 <RestoreNvmData+0x108>)
 80137ba:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d001      	beq.n	80137c8 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80137c4:	2317      	movs	r3, #23
 80137c6:	e025      	b.n	8013814 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80137c8:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80137cc:	4914      	ldr	r1, [pc, #80]	; (8013820 <RestoreNvmData+0x108>)
 80137ce:	481a      	ldr	r0, [pc, #104]	; (8013838 <RestoreNvmData+0x120>)
 80137d0:	f006 f841 	bl	8019856 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80137d4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80137d8:	2100      	movs	r1, #0
 80137da:	4811      	ldr	r0, [pc, #68]	; (8013820 <RestoreNvmData+0x108>)
 80137dc:	f006 f876 	bl	80198cc <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80137e0:	4b0e      	ldr	r3, [pc, #56]	; (801381c <RestoreNvmData+0x104>)
 80137e2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80137e6:	4b0d      	ldr	r3, [pc, #52]	; (801381c <RestoreNvmData+0x104>)
 80137e8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80137ec:	4b12      	ldr	r3, [pc, #72]	; (8013838 <RestoreNvmData+0x120>)
 80137ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137f0:	4a0a      	ldr	r2, [pc, #40]	; (801381c <RestoreNvmData+0x104>)
 80137f2:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80137f6:	4b10      	ldr	r3, [pc, #64]	; (8013838 <RestoreNvmData+0x120>)
 80137f8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80137fc:	4b07      	ldr	r3, [pc, #28]	; (801381c <RestoreNvmData+0x104>)
 80137fe:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013802:	4b06      	ldr	r3, [pc, #24]	; (801381c <RestoreNvmData+0x104>)
 8013804:	2201      	movs	r2, #1
 8013806:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801380a:	4b04      	ldr	r3, [pc, #16]	; (801381c <RestoreNvmData+0x104>)
 801380c:	2202      	movs	r2, #2
 801380e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 8013812:	2300      	movs	r3, #0
}
 8013814:	4618      	mov	r0, r3
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}
 801381c:	20000950 	.word	0x20000950
 8013820:	20001584 	.word	0x20001584
 8013824:	200015ac 	.word	0x200015ac
 8013828:	200015c4 	.word	0x200015c4
 801382c:	200016a4 	.word	0x200016a4
 8013830:	20001764 	.word	0x20001764
 8013834:	20001c94 	.word	0x20001c94
 8013838:	20000e5c 	.word	0x20000e5c

0801383c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801383c:	b480      	push	{r7}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d002      	beq.n	8013852 <DetermineFrameType+0x16>
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d101      	bne.n	8013856 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013852:	2303      	movs	r3, #3
 8013854:	e03b      	b.n	80138ce <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	7b1b      	ldrb	r3, [r3, #12]
 801385a:	f003 030f 	and.w	r3, r3, #15
 801385e:	b2db      	uxtb	r3, r3
 8013860:	2b00      	cmp	r3, #0
 8013862:	d008      	beq.n	8013876 <DetermineFrameType+0x3a>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f893 3020 	ldrb.w	r3, [r3, #32]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d003      	beq.n	8013876 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	2200      	movs	r2, #0
 8013872:	701a      	strb	r2, [r3, #0]
 8013874:	e02a      	b.n	80138cc <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801387c:	2b00      	cmp	r3, #0
 801387e:	d103      	bne.n	8013888 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	2201      	movs	r2, #1
 8013884:	701a      	strb	r2, [r3, #0]
 8013886:	e021      	b.n	80138cc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	7b1b      	ldrb	r3, [r3, #12]
 801388c:	f003 030f 	and.w	r3, r3, #15
 8013890:	b2db      	uxtb	r3, r3
 8013892:	2b00      	cmp	r3, #0
 8013894:	d108      	bne.n	80138a8 <DetermineFrameType+0x6c>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f893 3020 	ldrb.w	r3, [r3, #32]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d103      	bne.n	80138a8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	2202      	movs	r2, #2
 80138a4:	701a      	strb	r2, [r3, #0]
 80138a6:	e011      	b.n	80138cc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	7b1b      	ldrb	r3, [r3, #12]
 80138ac:	f003 030f 	and.w	r3, r3, #15
 80138b0:	b2db      	uxtb	r3, r3
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d108      	bne.n	80138c8 <DetermineFrameType+0x8c>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d003      	beq.n	80138c8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	2203      	movs	r2, #3
 80138c4:	701a      	strb	r2, [r3, #0]
 80138c6:	e001      	b.n	80138cc <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80138c8:	2318      	movs	r3, #24
 80138ca:	e000      	b.n	80138ce <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80138cc:	2300      	movs	r3, #0
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	370c      	adds	r7, #12
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bc80      	pop	{r7}
 80138d6:	4770      	bx	lr

080138d8 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 80138d8:	b480      	push	{r7}
 80138da:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80138dc:	4b12      	ldr	r3, [pc, #72]	; (8013928 <CheckRetransUnconfirmedUplink+0x50>)
 80138de:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80138e2:	4b12      	ldr	r3, [pc, #72]	; (801392c <CheckRetransUnconfirmedUplink+0x54>)
 80138e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d301      	bcc.n	80138f0 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80138ec:	2301      	movs	r3, #1
 80138ee:	e016      	b.n	801391e <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80138f0:	4b0d      	ldr	r3, [pc, #52]	; (8013928 <CheckRetransUnconfirmedUplink+0x50>)
 80138f2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80138f6:	f003 0302 	and.w	r3, r3, #2
 80138fa:	b2db      	uxtb	r3, r3
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d00d      	beq.n	801391c <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013900:	4b0a      	ldr	r3, [pc, #40]	; (801392c <CheckRetransUnconfirmedUplink+0x54>)
 8013902:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013906:	2b00      	cmp	r3, #0
 8013908:	d101      	bne.n	801390e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801390a:	2301      	movs	r3, #1
 801390c:	e007      	b.n	801391e <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801390e:	4b06      	ldr	r3, [pc, #24]	; (8013928 <CheckRetransUnconfirmedUplink+0x50>)
 8013910:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8013914:	2b00      	cmp	r3, #0
 8013916:	d101      	bne.n	801391c <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8013918:	2301      	movs	r3, #1
 801391a:	e000      	b.n	801391e <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	46bd      	mov	sp, r7
 8013922:	bc80      	pop	{r7}
 8013924:	4770      	bx	lr
 8013926:	bf00      	nop
 8013928:	20000950 	.word	0x20000950
 801392c:	20000e5c 	.word	0x20000e5c

08013930 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013930:	b480      	push	{r7}
 8013932:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013934:	4b0e      	ldr	r3, [pc, #56]	; (8013970 <CheckRetransConfirmedUplink+0x40>)
 8013936:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801393a:	4b0d      	ldr	r3, [pc, #52]	; (8013970 <CheckRetransConfirmedUplink+0x40>)
 801393c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013940:	429a      	cmp	r2, r3
 8013942:	d301      	bcc.n	8013948 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013944:	2301      	movs	r3, #1
 8013946:	e00f      	b.n	8013968 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013948:	4b09      	ldr	r3, [pc, #36]	; (8013970 <CheckRetransConfirmedUplink+0x40>)
 801394a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801394e:	f003 0302 	and.w	r3, r3, #2
 8013952:	b2db      	uxtb	r3, r3
 8013954:	2b00      	cmp	r3, #0
 8013956:	d006      	beq.n	8013966 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013958:	4b05      	ldr	r3, [pc, #20]	; (8013970 <CheckRetransConfirmedUplink+0x40>)
 801395a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801395e:	2b00      	cmp	r3, #0
 8013960:	d001      	beq.n	8013966 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8013962:	2301      	movs	r3, #1
 8013964:	e000      	b.n	8013968 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8013966:	2300      	movs	r3, #0
}
 8013968:	4618      	mov	r0, r3
 801396a:	46bd      	mov	sp, r7
 801396c:	bc80      	pop	{r7}
 801396e:	4770      	bx	lr
 8013970:	20000950 	.word	0x20000950

08013974 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013974:	b480      	push	{r7}
 8013976:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013978:	4b1a      	ldr	r3, [pc, #104]	; (80139e4 <StopRetransmission+0x70>)
 801397a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801397e:	f003 0302 	and.w	r3, r3, #2
 8013982:	b2db      	uxtb	r3, r3
 8013984:	2b00      	cmp	r3, #0
 8013986:	d009      	beq.n	801399c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013988:	4b16      	ldr	r3, [pc, #88]	; (80139e4 <StopRetransmission+0x70>)
 801398a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801398e:	2b00      	cmp	r3, #0
 8013990:	d00e      	beq.n	80139b0 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013992:	4b14      	ldr	r3, [pc, #80]	; (80139e4 <StopRetransmission+0x70>)
 8013994:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013998:	2b01      	cmp	r3, #1
 801399a:	d009      	beq.n	80139b0 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801399c:	4b12      	ldr	r3, [pc, #72]	; (80139e8 <StopRetransmission+0x74>)
 801399e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d004      	beq.n	80139b0 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 80139a6:	4b10      	ldr	r3, [pc, #64]	; (80139e8 <StopRetransmission+0x74>)
 80139a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139aa:	3301      	adds	r3, #1
 80139ac:	4a0e      	ldr	r2, [pc, #56]	; (80139e8 <StopRetransmission+0x74>)
 80139ae:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80139b0:	4b0c      	ldr	r3, [pc, #48]	; (80139e4 <StopRetransmission+0x70>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80139b8:	4b0a      	ldr	r3, [pc, #40]	; (80139e4 <StopRetransmission+0x70>)
 80139ba:	2200      	movs	r2, #0
 80139bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 80139c0:	4b08      	ldr	r3, [pc, #32]	; (80139e4 <StopRetransmission+0x70>)
 80139c2:	2200      	movs	r2, #0
 80139c4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80139c8:	4b06      	ldr	r3, [pc, #24]	; (80139e4 <StopRetransmission+0x70>)
 80139ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80139ce:	f023 0302 	bic.w	r3, r3, #2
 80139d2:	4a04      	ldr	r2, [pc, #16]	; (80139e4 <StopRetransmission+0x70>)
 80139d4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80139d8:	2301      	movs	r3, #1
}
 80139da:	4618      	mov	r0, r3
 80139dc:	46bd      	mov	sp, r7
 80139de:	bc80      	pop	{r7}
 80139e0:	4770      	bx	lr
 80139e2:	bf00      	nop
 80139e4:	20000950 	.word	0x20000950
 80139e8:	20000e5c 	.word	0x20000e5c

080139ec <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b082      	sub	sp, #8
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	4603      	mov	r3, r0
 80139f4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80139f6:	4b0b      	ldr	r3, [pc, #44]	; (8013a24 <CallNvmDataChangeCallback+0x38>)
 80139f8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d00c      	beq.n	8013a1a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013a00:	4b08      	ldr	r3, [pc, #32]	; (8013a24 <CallNvmDataChangeCallback+0x38>)
 8013a02:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013a06:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d006      	beq.n	8013a1a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013a0c:	4b05      	ldr	r3, [pc, #20]	; (8013a24 <CallNvmDataChangeCallback+0x38>)
 8013a0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013a12:	68db      	ldr	r3, [r3, #12]
 8013a14:	88fa      	ldrh	r2, [r7, #6]
 8013a16:	4610      	mov	r0, r2
 8013a18:	4798      	blx	r3
    }
}
 8013a1a:	bf00      	nop
 8013a1c:	3708      	adds	r7, #8
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}
 8013a22:	bf00      	nop
 8013a24:	20000950 	.word	0x20000950

08013a28 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b084      	sub	sp, #16
 8013a2c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8013a2e:	4b1b      	ldr	r3, [pc, #108]	; (8013a9c <AckTimeoutRetriesProcess+0x74>)
 8013a30:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8013a34:	4b19      	ldr	r3, [pc, #100]	; (8013a9c <AckTimeoutRetriesProcess+0x74>)
 8013a36:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d229      	bcs.n	8013a92 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8013a3e:	4b17      	ldr	r3, [pc, #92]	; (8013a9c <AckTimeoutRetriesProcess+0x74>)
 8013a40:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8013a44:	3301      	adds	r3, #1
 8013a46:	b2da      	uxtb	r2, r3
 8013a48:	4b14      	ldr	r3, [pc, #80]	; (8013a9c <AckTimeoutRetriesProcess+0x74>)
 8013a4a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8013a4e:	4b13      	ldr	r3, [pc, #76]	; (8013a9c <AckTimeoutRetriesProcess+0x74>)
 8013a50:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8013a54:	f003 0301 	and.w	r3, r3, #1
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d019      	beq.n	8013a92 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013a5e:	2322      	movs	r3, #34	; 0x22
 8013a60:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013a62:	4b0f      	ldr	r3, [pc, #60]	; (8013aa0 <AckTimeoutRetriesProcess+0x78>)
 8013a64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013a68:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a6a:	4b0d      	ldr	r3, [pc, #52]	; (8013aa0 <AckTimeoutRetriesProcess+0x78>)
 8013a6c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a70:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013a72:	4b0b      	ldr	r3, [pc, #44]	; (8013aa0 <AckTimeoutRetriesProcess+0x78>)
 8013a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a78:	f107 0208 	add.w	r2, r7, #8
 8013a7c:	4611      	mov	r1, r2
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f003 fbd6 	bl	8017230 <RegionGetPhyParam>
 8013a84:	4603      	mov	r3, r0
 8013a86:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	b25a      	sxtb	r2, r3
 8013a8c:	4b04      	ldr	r3, [pc, #16]	; (8013aa0 <AckTimeoutRetriesProcess+0x78>)
 8013a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8013a92:	bf00      	nop
 8013a94:	3710      	adds	r7, #16
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	20000950 	.word	0x20000950
 8013aa0:	20000e5c 	.word	0x20000e5c

08013aa4 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013aaa:	4b14      	ldr	r3, [pc, #80]	; (8013afc <AckTimeoutRetriesFinalize+0x58>)
 8013aac:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8013ab0:	f083 0301 	eor.w	r3, r3, #1
 8013ab4:	b2db      	uxtb	r3, r3
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d015      	beq.n	8013ae6 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013aba:	2302      	movs	r3, #2
 8013abc:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8013abe:	4b10      	ldr	r3, [pc, #64]	; (8013b00 <AckTimeoutRetriesFinalize+0x5c>)
 8013ac0:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8013ac2:	4b10      	ldr	r3, [pc, #64]	; (8013b04 <AckTimeoutRetriesFinalize+0x60>)
 8013ac4:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013ac6:	4b10      	ldr	r3, [pc, #64]	; (8013b08 <AckTimeoutRetriesFinalize+0x64>)
 8013ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013acc:	1d3a      	adds	r2, r7, #4
 8013ace:	4611      	mov	r1, r2
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f003 fbd6 	bl	8017282 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013ad6:	4b09      	ldr	r3, [pc, #36]	; (8013afc <AckTimeoutRetriesFinalize+0x58>)
 8013ad8:	2200      	movs	r2, #0
 8013ada:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8013ade:	4b07      	ldr	r3, [pc, #28]	; (8013afc <AckTimeoutRetriesFinalize+0x58>)
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013ae6:	4b05      	ldr	r3, [pc, #20]	; (8013afc <AckTimeoutRetriesFinalize+0x58>)
 8013ae8:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8013aec:	4b03      	ldr	r3, [pc, #12]	; (8013afc <AckTimeoutRetriesFinalize+0x58>)
 8013aee:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8013af2:	bf00      	nop
 8013af4:	3710      	adds	r7, #16
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}
 8013afa:	bf00      	nop
 8013afc:	20000950 	.word	0x20000950
 8013b00:	2000103c 	.word	0x2000103c
 8013b04:	200010d0 	.word	0x200010d0
 8013b08:	20000e5c 	.word	0x20000e5c

08013b0c <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013b0c:	b480      	push	{r7}
 8013b0e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013b10:	4b0b      	ldr	r3, [pc, #44]	; (8013b40 <IsRequestPending+0x34>)
 8013b12:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8013b16:	f003 0304 	and.w	r3, r3, #4
 8013b1a:	b2db      	uxtb	r3, r3
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d107      	bne.n	8013b30 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013b20:	4b07      	ldr	r3, [pc, #28]	; (8013b40 <IsRequestPending+0x34>)
 8013b22:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8013b26:	f003 0301 	and.w	r3, r3, #1
 8013b2a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d001      	beq.n	8013b34 <IsRequestPending+0x28>
    {
        return 1;
 8013b30:	2301      	movs	r3, #1
 8013b32:	e000      	b.n	8013b36 <IsRequestPending+0x2a>
    }
    return 0;
 8013b34:	2300      	movs	r3, #0
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bc80      	pop	{r7}
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	20000950 	.word	0x20000950

08013b44 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013b44:	b590      	push	{r4, r7, lr}
 8013b46:	b08f      	sub	sp, #60	; 0x3c
 8013b48:	af02      	add	r7, sp, #8
 8013b4a:	6178      	str	r0, [r7, #20]
 8013b4c:	6139      	str	r1, [r7, #16]
 8013b4e:	4613      	mov	r3, r2
 8013b50:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d002      	beq.n	8013b5e <LoRaMacInitialization+0x1a>
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d101      	bne.n	8013b62 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013b5e:	2303      	movs	r3, #3
 8013b60:	e275      	b.n	801404e <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d00b      	beq.n	8013b82 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d007      	beq.n	8013b82 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d003      	beq.n	8013b82 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d101      	bne.n	8013b86 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013b82:	2303      	movs	r3, #3
 8013b84:	e263      	b.n	801404e <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013b86:	7bfb      	ldrb	r3, [r7, #15]
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f003 fb41 	bl	8017210 <RegionIsActive>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	f083 0301 	eor.w	r3, r3, #1
 8013b94:	b2db      	uxtb	r3, r3
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d001      	beq.n	8013b9e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013b9a:	2309      	movs	r3, #9
 8013b9c:	e257      	b.n	801404e <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013b9e:	6978      	ldr	r0, [r7, #20]
 8013ba0:	f001 ffb8 	bl	8015b14 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013ba4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013ba8:	2100      	movs	r1, #0
 8013baa:	48c7      	ldr	r0, [pc, #796]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013bac:	f005 fe8e 	bl	80198cc <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013bb0:	f240 520c 	movw	r2, #1292	; 0x50c
 8013bb4:	2100      	movs	r1, #0
 8013bb6:	48c5      	ldr	r0, [pc, #788]	; (8013ecc <LoRaMacInitialization+0x388>)
 8013bb8:	f005 fe88 	bl	80198cc <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013bbc:	4bc3      	ldr	r3, [pc, #780]	; (8013ecc <LoRaMacInitialization+0x388>)
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8013bc4:	4bc1      	ldr	r3, [pc, #772]	; (8013ecc <LoRaMacInitialization+0x388>)
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013bcc:	4abe      	ldr	r2, [pc, #760]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013bce:	7bfb      	ldrb	r3, [r7, #15]
 8013bd0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013bd4:	4bbc      	ldr	r3, [pc, #752]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8013bdc:	4bba      	ldr	r3, [pc, #744]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013bde:	2200      	movs	r2, #0
 8013be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8013be4:	4bb8      	ldr	r3, [pc, #736]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013be6:	4aba      	ldr	r2, [pc, #744]	; (8013ed0 <LoRaMacInitialization+0x38c>)
 8013be8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013bec:	230f      	movs	r3, #15
 8013bee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013bf2:	4bb5      	ldr	r3, [pc, #724]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013bf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013bfc:	4611      	mov	r1, r2
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f003 fb16 	bl	8017230 <RegionGetPhyParam>
 8013c04:	4603      	mov	r3, r0
 8013c06:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8013c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	bf14      	ite	ne
 8013c0e:	2301      	movne	r3, #1
 8013c10:	2300      	moveq	r3, #0
 8013c12:	b2da      	uxtb	r2, r3
 8013c14:	4bac      	ldr	r3, [pc, #688]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013c16:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013c1a:	230a      	movs	r3, #10
 8013c1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c20:	4ba9      	ldr	r3, [pc, #676]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c2a:	4611      	mov	r1, r2
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f003 faff 	bl	8017230 <RegionGetPhyParam>
 8013c32:	4603      	mov	r3, r0
 8013c34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8013c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c38:	b25a      	sxtb	r2, r3
 8013c3a:	4ba3      	ldr	r3, [pc, #652]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013c3c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013c40:	2306      	movs	r3, #6
 8013c42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c46:	4ba0      	ldr	r3, [pc, #640]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c50:	4611      	mov	r1, r2
 8013c52:	4618      	mov	r0, r3
 8013c54:	f003 faec 	bl	8017230 <RegionGetPhyParam>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8013c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5e:	b25a      	sxtb	r2, r3
 8013c60:	4b99      	ldr	r3, [pc, #612]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013c62:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013c66:	2310      	movs	r3, #16
 8013c68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c6c:	4b96      	ldr	r3, [pc, #600]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c76:	4611      	mov	r1, r2
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f003 fad9 	bl	8017230 <RegionGetPhyParam>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8013c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c84:	4a90      	ldr	r2, [pc, #576]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013c8a:	2311      	movs	r3, #17
 8013c8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c90:	4b8d      	ldr	r3, [pc, #564]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c9a:	4611      	mov	r1, r2
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f003 fac7 	bl	8017230 <RegionGetPhyParam>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8013ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca8:	4a87      	ldr	r2, [pc, #540]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8013cae:	2312      	movs	r3, #18
 8013cb0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013cb4:	4b84      	ldr	r3, [pc, #528]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013cba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013cbe:	4611      	mov	r1, r2
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f003 fab5 	bl	8017230 <RegionGetPhyParam>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8013cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ccc:	4a7e      	ldr	r2, [pc, #504]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013cce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8013cd2:	2313      	movs	r3, #19
 8013cd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013cd8:	4b7b      	ldr	r3, [pc, #492]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013ce2:	4611      	mov	r1, r2
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f003 faa3 	bl	8017230 <RegionGetPhyParam>
 8013cea:	4603      	mov	r3, r0
 8013cec:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8013cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf0:	4a75      	ldr	r2, [pc, #468]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013cf2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8013cf6:	2314      	movs	r3, #20
 8013cf8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013cfc:	4b72      	ldr	r3, [pc, #456]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d06:	4611      	mov	r1, r2
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f003 fa91 	bl	8017230 <RegionGetPhyParam>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8013d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d14:	4a6c      	ldr	r2, [pc, #432]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013d16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013d1a:	2317      	movs	r3, #23
 8013d1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d20:	4b69      	ldr	r3, [pc, #420]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d2a:	4611      	mov	r1, r2
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f003 fa7f 	bl	8017230 <RegionGetPhyParam>
 8013d32:	4603      	mov	r3, r0
 8013d34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d38:	b2da      	uxtb	r2, r3
 8013d3a:	4b63      	ldr	r3, [pc, #396]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013d3c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013d40:	2318      	movs	r3, #24
 8013d42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d46:	4b60      	ldr	r3, [pc, #384]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d50:	4611      	mov	r1, r2
 8013d52:	4618      	mov	r0, r3
 8013d54:	f003 fa6c 	bl	8017230 <RegionGetPhyParam>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5e:	4a5a      	ldr	r2, [pc, #360]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013d60:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d66:	4a58      	ldr	r2, [pc, #352]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013d68:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8013d6c:	2319      	movs	r3, #25
 8013d6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d72:	4b55      	ldr	r3, [pc, #340]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f003 fa56 	bl	8017230 <RegionGetPhyParam>
 8013d84:	4603      	mov	r3, r0
 8013d86:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8013d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8a:	b2da      	uxtb	r2, r3
 8013d8c:	4b4e      	ldr	r3, [pc, #312]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013d8e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8013d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d94:	b2da      	uxtb	r2, r3
 8013d96:	4b4c      	ldr	r3, [pc, #304]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013d98:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8013d9c:	231e      	movs	r3, #30
 8013d9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013da2:	4b49      	ldr	r3, [pc, #292]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013da8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013dac:	4611      	mov	r1, r2
 8013dae:	4618      	mov	r0, r3
 8013db0:	f003 fa3e 	bl	8017230 <RegionGetPhyParam>
 8013db4:	4603      	mov	r3, r0
 8013db6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8013db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dba:	b2da      	uxtb	r2, r3
 8013dbc:	4b42      	ldr	r3, [pc, #264]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013dbe:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8013dc2:	231f      	movs	r3, #31
 8013dc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013dc8:	4b3f      	ldr	r3, [pc, #252]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013dce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013dd2:	4611      	mov	r1, r2
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f003 fa2b 	bl	8017230 <RegionGetPhyParam>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8013dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de0:	b2da      	uxtb	r2, r3
 8013de2:	4b39      	ldr	r3, [pc, #228]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013de4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013de8:	2320      	movs	r3, #32
 8013dea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013dee:	4b36      	ldr	r3, [pc, #216]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013df4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013df8:	4611      	mov	r1, r2
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f003 fa18 	bl	8017230 <RegionGetPhyParam>
 8013e00:	4603      	mov	r3, r0
 8013e02:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e06:	4a30      	ldr	r2, [pc, #192]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e08:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013e0c:	2321      	movs	r3, #33	; 0x21
 8013e0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013e12:	4b2d      	ldr	r3, [pc, #180]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013e1c:	4611      	mov	r1, r2
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f003 fa06 	bl	8017230 <RegionGetPhyParam>
 8013e24:	4603      	mov	r3, r0
 8013e26:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2a:	4a27      	ldr	r2, [pc, #156]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e2c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8013e30:	230b      	movs	r3, #11
 8013e32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013e36:	4b24      	ldr	r3, [pc, #144]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013e40:	4611      	mov	r1, r2
 8013e42:	4618      	mov	r0, r3
 8013e44:	f003 f9f4 	bl	8017230 <RegionGetPhyParam>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8013e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4e:	b29a      	uxth	r2, r3
 8013e50:	4b1e      	ldr	r3, [pc, #120]	; (8013ecc <LoRaMacInitialization+0x388>)
 8013e52:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013e56:	230c      	movs	r3, #12
 8013e58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013e5c:	4b1a      	ldr	r3, [pc, #104]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013e66:	4611      	mov	r1, r2
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f003 f9e1 	bl	8017230 <RegionGetPhyParam>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8013e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e74:	b29a      	uxth	r2, r3
 8013e76:	4b15      	ldr	r3, [pc, #84]	; (8013ecc <LoRaMacInitialization+0x388>)
 8013e78:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8013e7c:	4b12      	ldr	r3, [pc, #72]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e7e:	2201      	movs	r2, #1
 8013e80:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8013e84:	4b10      	ldr	r3, [pc, #64]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e86:	220a      	movs	r2, #10
 8013e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8013e8c:	4b0e      	ldr	r3, [pc, #56]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e8e:	2206      	movs	r2, #6
 8013e90:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8013e94:	4b0c      	ldr	r3, [pc, #48]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e9a:	4a0b      	ldr	r2, [pc, #44]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013e9c:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8013e9e:	4b0a      	ldr	r3, [pc, #40]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013ea0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013ea4:	4b08      	ldr	r3, [pc, #32]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013ea6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8013eaa:	4b07      	ldr	r3, [pc, #28]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013eb0:	4a05      	ldr	r2, [pc, #20]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8013eb4:	4b04      	ldr	r3, [pc, #16]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013eba:	4a03      	ldr	r2, [pc, #12]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013ebc:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8013ebe:	4b02      	ldr	r3, [pc, #8]	; (8013ec8 <LoRaMacInitialization+0x384>)
 8013ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013ec4:	e006      	b.n	8013ed4 <LoRaMacInitialization+0x390>
 8013ec6:	bf00      	nop
 8013ec8:	20000e5c 	.word	0x20000e5c
 8013ecc:	20000950 	.word	0x20000950
 8013ed0:	01000300 	.word	0x01000300
 8013ed4:	4a60      	ldr	r2, [pc, #384]	; (8014058 <LoRaMacInitialization+0x514>)
 8013ed6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8013ed8:	4b5f      	ldr	r3, [pc, #380]	; (8014058 <LoRaMacInitialization+0x514>)
 8013eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013ede:	4a5e      	ldr	r2, [pc, #376]	; (8014058 <LoRaMacInitialization+0x514>)
 8013ee0:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8013ee2:	4b5d      	ldr	r3, [pc, #372]	; (8014058 <LoRaMacInitialization+0x514>)
 8013ee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013ee8:	4a5b      	ldr	r2, [pc, #364]	; (8014058 <LoRaMacInitialization+0x514>)
 8013eea:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8013eec:	4b5a      	ldr	r3, [pc, #360]	; (8014058 <LoRaMacInitialization+0x514>)
 8013eee:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8013ef2:	4b59      	ldr	r3, [pc, #356]	; (8014058 <LoRaMacInitialization+0x514>)
 8013ef4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013efe:	4b57      	ldr	r3, [pc, #348]	; (801405c <LoRaMacInitialization+0x518>)
 8013f00:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013f02:	4b57      	ldr	r3, [pc, #348]	; (8014060 <LoRaMacInitialization+0x51c>)
 8013f04:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013f06:	4b54      	ldr	r3, [pc, #336]	; (8014058 <LoRaMacInitialization+0x514>)
 8013f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013f0c:	f107 0218 	add.w	r2, r7, #24
 8013f10:	4611      	mov	r1, r2
 8013f12:	4618      	mov	r0, r3
 8013f14:	f003 f9b5 	bl	8017282 <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8013f18:	4a52      	ldr	r2, [pc, #328]	; (8014064 <LoRaMacInitialization+0x520>)
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8013f20:	f7ff f87e 	bl	8013020 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8013f24:	4b4c      	ldr	r3, [pc, #304]	; (8014058 <LoRaMacInitialization+0x514>)
 8013f26:	2201      	movs	r2, #1
 8013f28:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8013f2c:	4a4d      	ldr	r2, [pc, #308]	; (8014064 <LoRaMacInitialization+0x520>)
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8013f34:	4b4b      	ldr	r3, [pc, #300]	; (8014064 <LoRaMacInitialization+0x520>)
 8013f36:	2200      	movs	r2, #0
 8013f38:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8013f3c:	4b49      	ldr	r3, [pc, #292]	; (8014064 <LoRaMacInitialization+0x520>)
 8013f3e:	2201      	movs	r2, #1
 8013f40:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8013f44:	4b44      	ldr	r3, [pc, #272]	; (8014058 <LoRaMacInitialization+0x514>)
 8013f46:	2200      	movs	r2, #0
 8013f48:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013f4a:	4b43      	ldr	r3, [pc, #268]	; (8014058 <LoRaMacInitialization+0x514>)
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013f50:	2300      	movs	r3, #0
 8013f52:	9300      	str	r3, [sp, #0]
 8013f54:	4b44      	ldr	r3, [pc, #272]	; (8014068 <LoRaMacInitialization+0x524>)
 8013f56:	2200      	movs	r2, #0
 8013f58:	f04f 31ff 	mov.w	r1, #4294967295
 8013f5c:	4843      	ldr	r0, [pc, #268]	; (801406c <LoRaMacInitialization+0x528>)
 8013f5e:	f009 fd1f 	bl	801d9a0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013f62:	2300      	movs	r3, #0
 8013f64:	9300      	str	r3, [sp, #0]
 8013f66:	4b42      	ldr	r3, [pc, #264]	; (8014070 <LoRaMacInitialization+0x52c>)
 8013f68:	2200      	movs	r2, #0
 8013f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8013f6e:	4841      	ldr	r0, [pc, #260]	; (8014074 <LoRaMacInitialization+0x530>)
 8013f70:	f009 fd16 	bl	801d9a0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013f74:	2300      	movs	r3, #0
 8013f76:	9300      	str	r3, [sp, #0]
 8013f78:	4b3f      	ldr	r3, [pc, #252]	; (8014078 <LoRaMacInitialization+0x534>)
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8013f80:	483e      	ldr	r0, [pc, #248]	; (801407c <LoRaMacInitialization+0x538>)
 8013f82:	f009 fd0d 	bl	801d9a0 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013f86:	2300      	movs	r3, #0
 8013f88:	9300      	str	r3, [sp, #0]
 8013f8a:	4b3d      	ldr	r3, [pc, #244]	; (8014080 <LoRaMacInitialization+0x53c>)
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8013f92:	483c      	ldr	r0, [pc, #240]	; (8014084 <LoRaMacInitialization+0x540>)
 8013f94:	f009 fd04 	bl	801d9a0 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8013f98:	4c2f      	ldr	r4, [pc, #188]	; (8014058 <LoRaMacInitialization+0x514>)
 8013f9a:	463b      	mov	r3, r7
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f009 f873 	bl	801d088 <SysTimeGetMcuTime>
 8013fa2:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8013fa6:	463a      	mov	r2, r7
 8013fa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013fac:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8013fb0:	4b2c      	ldr	r3, [pc, #176]	; (8014064 <LoRaMacInitialization+0x520>)
 8013fb2:	4a35      	ldr	r2, [pc, #212]	; (8014088 <LoRaMacInitialization+0x544>)
 8013fb4:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8013fb8:	4b2a      	ldr	r3, [pc, #168]	; (8014064 <LoRaMacInitialization+0x520>)
 8013fba:	4a34      	ldr	r2, [pc, #208]	; (801408c <LoRaMacInitialization+0x548>)
 8013fbc:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8013fc0:	4b28      	ldr	r3, [pc, #160]	; (8014064 <LoRaMacInitialization+0x520>)
 8013fc2:	4a33      	ldr	r2, [pc, #204]	; (8014090 <LoRaMacInitialization+0x54c>)
 8013fc4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013fc8:	4b26      	ldr	r3, [pc, #152]	; (8014064 <LoRaMacInitialization+0x520>)
 8013fca:	4a32      	ldr	r2, [pc, #200]	; (8014094 <LoRaMacInitialization+0x550>)
 8013fcc:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8013fd0:	4b24      	ldr	r3, [pc, #144]	; (8014064 <LoRaMacInitialization+0x520>)
 8013fd2:	4a31      	ldr	r2, [pc, #196]	; (8014098 <LoRaMacInitialization+0x554>)
 8013fd4:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8013fd8:	4b30      	ldr	r3, [pc, #192]	; (801409c <LoRaMacInitialization+0x558>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4830      	ldr	r0, [pc, #192]	; (80140a0 <LoRaMacInitialization+0x55c>)
 8013fde:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	689b      	ldr	r3, [r3, #8]
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	482f      	ldr	r0, [pc, #188]	; (80140a4 <LoRaMacInitialization+0x560>)
 8013fe8:	f7fa fe24 	bl	800ec34 <SecureElementInit>
 8013fec:	4603      	mov	r3, r0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ff2:	2311      	movs	r3, #17
 8013ff4:	e02b      	b.n	801404e <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8013ff6:	4818      	ldr	r0, [pc, #96]	; (8014058 <LoRaMacInitialization+0x514>)
 8013ff8:	f002 fa38 	bl	801646c <LoRaMacCryptoInit>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014002:	2311      	movs	r3, #17
 8014004:	e023      	b.n	801404e <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8014006:	f001 fb57 	bl	80156b8 <LoRaMacCommandsInit>
 801400a:	4603      	mov	r3, r0
 801400c:	2b00      	cmp	r3, #0
 801400e:	d001      	beq.n	8014014 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014010:	2313      	movs	r3, #19
 8014012:	e01c      	b.n	801404e <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014014:	4824      	ldr	r0, [pc, #144]	; (80140a8 <LoRaMacInitialization+0x564>)
 8014016:	f002 faf3 	bl	8016600 <LoRaMacCryptoSetMulticastReference>
 801401a:	4603      	mov	r3, r0
 801401c:	2b00      	cmp	r3, #0
 801401e:	d001      	beq.n	8014024 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014020:	2311      	movs	r3, #17
 8014022:	e014      	b.n	801404e <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014024:	4b1d      	ldr	r3, [pc, #116]	; (801409c <LoRaMacInitialization+0x558>)
 8014026:	695b      	ldr	r3, [r3, #20]
 8014028:	4798      	blx	r3
 801402a:	4603      	mov	r3, r0
 801402c:	4618      	mov	r0, r3
 801402e:	f005 fbed 	bl	801980c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014032:	4b1a      	ldr	r3, [pc, #104]	; (801409c <LoRaMacInitialization+0x558>)
 8014034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014036:	4a08      	ldr	r2, [pc, #32]	; (8014058 <LoRaMacInitialization+0x514>)
 8014038:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 801403c:	4610      	mov	r0, r2
 801403e:	4798      	blx	r3
    Radio.Sleep( );
 8014040:	4b16      	ldr	r3, [pc, #88]	; (801409c <LoRaMacInitialization+0x558>)
 8014042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014044:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014046:	2001      	movs	r0, #1
 8014048:	f7fd faf2 	bl	8011630 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801404c:	2300      	movs	r3, #0
}
 801404e:	4618      	mov	r0, r3
 8014050:	3734      	adds	r7, #52	; 0x34
 8014052:	46bd      	mov	sp, r7
 8014054:	bd90      	pop	{r4, r7, pc}
 8014056:	bf00      	nop
 8014058:	20000e5c 	.word	0x20000e5c
 801405c:	2000103c 	.word	0x2000103c
 8014060:	200010d0 	.word	0x200010d0
 8014064:	20000950 	.word	0x20000950
 8014068:	08011b9d 	.word	0x08011b9d
 801406c:	20000cb8 	.word	0x20000cb8
 8014070:	08011c11 	.word	0x08011c11
 8014074:	20000cd0 	.word	0x20000cd0
 8014078:	08011c7d 	.word	0x08011c7d
 801407c:	20000ce8 	.word	0x20000ce8
 8014080:	08011cf1 	.word	0x08011cf1
 8014084:	20000d48 	.word	0x20000d48
 8014088:	080107ad 	.word	0x080107ad
 801408c:	08010825 	.word	0x08010825
 8014090:	080108fd 	.word	0x080108fd
 8014094:	080108b1 	.word	0x080108b1
 8014098:	08010939 	.word	0x08010939
 801409c:	0801f3a4 	.word	0x0801f3a4
 80140a0:	20000c9c 	.word	0x20000c9c
 80140a4:	20000f7c 	.word	0x20000f7c
 80140a8:	20000f34 	.word	0x20000f34

080140ac <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80140ac:	b480      	push	{r7}
 80140ae:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80140b0:	4b04      	ldr	r3, [pc, #16]	; (80140c4 <LoRaMacStart+0x18>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80140b8:	2300      	movs	r3, #0
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	46bd      	mov	sp, r7
 80140be:	bc80      	pop	{r7}
 80140c0:	4770      	bx	lr
 80140c2:	bf00      	nop
 80140c4:	20000950 	.word	0x20000950

080140c8 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80140cc:	f7fd fa9a 	bl	8011604 <LoRaMacIsBusy>
 80140d0:	4603      	mov	r3, r0
 80140d2:	f083 0301 	eor.w	r3, r3, #1
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d005      	beq.n	80140e8 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80140dc:	4b07      	ldr	r3, [pc, #28]	; (80140fc <LoRaMacStop+0x34>)
 80140de:	2201      	movs	r2, #1
 80140e0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80140e4:	2300      	movs	r3, #0
 80140e6:	e007      	b.n	80140f8 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80140e8:	4b04      	ldr	r3, [pc, #16]	; (80140fc <LoRaMacStop+0x34>)
 80140ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d101      	bne.n	80140f6 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80140f2:	2300      	movs	r3, #0
 80140f4:	e000      	b.n	80140f8 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80140f6:	2301      	movs	r3, #1
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	20000950 	.word	0x20000950

08014100 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8014100:	b580      	push	{r7, lr}
 8014102:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014104:	4812      	ldr	r0, [pc, #72]	; (8014150 <LoRaMacHalt+0x50>)
 8014106:	f009 fcef 	bl	801dae8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801410a:	4812      	ldr	r0, [pc, #72]	; (8014154 <LoRaMacHalt+0x54>)
 801410c:	f009 fcec 	bl	801dae8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014110:	4811      	ldr	r0, [pc, #68]	; (8014158 <LoRaMacHalt+0x58>)
 8014112:	f009 fce9 	bl	801dae8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8014116:	4811      	ldr	r0, [pc, #68]	; (801415c <LoRaMacHalt+0x5c>)
 8014118:	f009 fce6 	bl	801dae8 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 801411c:	f001 f957 	bl	80153ce <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8014120:	4b0f      	ldr	r3, [pc, #60]	; (8014160 <LoRaMacHalt+0x60>)
 8014122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014124:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8014126:	4b0f      	ldr	r3, [pc, #60]	; (8014164 <LoRaMacHalt+0x64>)
 8014128:	2200      	movs	r2, #0
 801412a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 801412e:	480e      	ldr	r0, [pc, #56]	; (8014168 <LoRaMacHalt+0x68>)
 8014130:	f7fd fc2e 	bl	8011990 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8014134:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014138:	490b      	ldr	r1, [pc, #44]	; (8014168 <LoRaMacHalt+0x68>)
 801413a:	480c      	ldr	r0, [pc, #48]	; (801416c <LoRaMacHalt+0x6c>)
 801413c:	f005 fb8b 	bl	8019856 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8014140:	4b08      	ldr	r3, [pc, #32]	; (8014164 <LoRaMacHalt+0x64>)
 8014142:	2201      	movs	r2, #1
 8014144:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014148:	2300      	movs	r3, #0
}
 801414a:	4618      	mov	r0, r3
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	20000cb8 	.word	0x20000cb8
 8014154:	20000cd0 	.word	0x20000cd0
 8014158:	20000ce8 	.word	0x20000ce8
 801415c:	20000d48 	.word	0x20000d48
 8014160:	0801f3a4 	.word	0x0801f3a4
 8014164:	20000950 	.word	0x20000950
 8014168:	20000e5c 	.word	0x20000e5c
 801416c:	20001584 	.word	0x20001584

08014170 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b08a      	sub	sp, #40	; 0x28
 8014174:	af00      	add	r7, sp, #0
 8014176:	4603      	mov	r3, r0
 8014178:	6039      	str	r1, [r7, #0]
 801417a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801417c:	4b3e      	ldr	r3, [pc, #248]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 801417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014180:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014182:	4b3d      	ldr	r3, [pc, #244]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 8014184:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8014188:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801418a:	4b3b      	ldr	r3, [pc, #236]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 801418c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8014190:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8014192:	2300      	movs	r3, #0
 8014194:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d101      	bne.n	80141a0 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801419c:	2303      	movs	r3, #3
 801419e:	e066      	b.n	801426e <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80141a0:	4b35      	ldr	r3, [pc, #212]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 80141a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80141a6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80141a8:	2300      	movs	r3, #0
 80141aa:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80141ac:	4b32      	ldr	r3, [pc, #200]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 80141ae:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80141b2:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80141b4:	4b30      	ldr	r3, [pc, #192]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 80141b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141b8:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80141ba:	4b30      	ldr	r3, [pc, #192]	; (801427c <LoRaMacQueryTxPossible+0x10c>)
 80141bc:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80141c0:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80141c2:	4b2e      	ldr	r3, [pc, #184]	; (801427c <LoRaMacQueryTxPossible+0x10c>)
 80141c4:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80141c8:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80141ca:	4b2b      	ldr	r3, [pc, #172]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 80141cc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80141d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80141d4:	4b28      	ldr	r3, [pc, #160]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 80141d6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80141da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80141de:	4b26      	ldr	r3, [pc, #152]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 80141e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80141e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80141e8:	4b23      	ldr	r3, [pc, #140]	; (8014278 <LoRaMacQueryTxPossible+0x108>)
 80141ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80141ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80141f2:	f107 0310 	add.w	r3, r7, #16
 80141f6:	f107 020e 	add.w	r2, r7, #14
 80141fa:	f107 010f 	add.w	r1, r7, #15
 80141fe:	f107 0014 	add.w	r0, r7, #20
 8014202:	f001 f84f 	bl	80152a4 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801420a:	4618      	mov	r0, r3
 801420c:	f7fd feb8 	bl	8011f80 <GetMaxAppPayloadWithoutFOptsLength>
 8014210:	4603      	mov	r3, r0
 8014212:	461a      	mov	r2, r3
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014218:	f107 0308 	add.w	r3, r7, #8
 801421c:	4618      	mov	r0, r3
 801421e:	f001 fb19 	bl	8015854 <LoRaMacCommandsGetSizeSerializedCmds>
 8014222:	4603      	mov	r3, r0
 8014224:	2b00      	cmp	r3, #0
 8014226:	d001      	beq.n	801422c <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014228:	2313      	movs	r3, #19
 801422a:	e020      	b.n	801426e <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	2b0f      	cmp	r3, #15
 8014230:	d819      	bhi.n	8014266 <LoRaMacQueryTxPossible+0xf6>
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	785b      	ldrb	r3, [r3, #1]
 8014236:	461a      	mov	r2, r3
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	429a      	cmp	r2, r3
 801423c:	d313      	bcc.n	8014266 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	785a      	ldrb	r2, [r3, #1]
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	b2db      	uxtb	r3, r3
 8014246:	1ad3      	subs	r3, r2, r3
 8014248:	b2da      	uxtb	r2, r3
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	785b      	ldrb	r3, [r3, #1]
 8014252:	4619      	mov	r1, r3
 8014254:	79fa      	ldrb	r2, [r7, #7]
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	4413      	add	r3, r2
 801425a:	4299      	cmp	r1, r3
 801425c:	d301      	bcc.n	8014262 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801425e:	2300      	movs	r3, #0
 8014260:	e005      	b.n	801426e <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014262:	2308      	movs	r3, #8
 8014264:	e003      	b.n	801426e <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	2200      	movs	r2, #0
 801426a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801426c:	2308      	movs	r3, #8
    }
}
 801426e:	4618      	mov	r0, r3
 8014270:	3728      	adds	r7, #40	; 0x28
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	20000e5c 	.word	0x20000e5c
 801427c:	20000950 	.word	0x20000950

08014280 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014280:	b590      	push	{r4, r7, lr}
 8014282:	b087      	sub	sp, #28
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014288:	2300      	movs	r3, #0
 801428a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d101      	bne.n	8014296 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014292:	2303      	movs	r3, #3
 8014294:	e171      	b.n	801457a <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	2b37      	cmp	r3, #55	; 0x37
 801429c:	f200 8166 	bhi.w	801456c <LoRaMacMibGetRequestConfirm+0x2ec>
 80142a0:	a201      	add	r2, pc, #4	; (adr r2, 80142a8 <LoRaMacMibGetRequestConfirm+0x28>)
 80142a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142a6:	bf00      	nop
 80142a8:	08014389 	.word	0x08014389
 80142ac:	08014395 	.word	0x08014395
 80142b0:	080143a1 	.word	0x080143a1
 80142b4:	080143ad 	.word	0x080143ad
 80142b8:	080143b9 	.word	0x080143b9
 80142bc:	080143c5 	.word	0x080143c5
 80142c0:	080143d1 	.word	0x080143d1
 80142c4:	0801456d 	.word	0x0801456d
 80142c8:	0801456d 	.word	0x0801456d
 80142cc:	0801456d 	.word	0x0801456d
 80142d0:	0801456d 	.word	0x0801456d
 80142d4:	0801456d 	.word	0x0801456d
 80142d8:	0801456d 	.word	0x0801456d
 80142dc:	0801456d 	.word	0x0801456d
 80142e0:	0801456d 	.word	0x0801456d
 80142e4:	080143dd 	.word	0x080143dd
 80142e8:	080143e9 	.word	0x080143e9
 80142ec:	080143f5 	.word	0x080143f5
 80142f0:	08014417 	.word	0x08014417
 80142f4:	08014429 	.word	0x08014429
 80142f8:	0801443b 	.word	0x0801443b
 80142fc:	0801444d 	.word	0x0801444d
 8014300:	08014481 	.word	0x08014481
 8014304:	0801445f 	.word	0x0801445f
 8014308:	080144a3 	.word	0x080144a3
 801430c:	080144af 	.word	0x080144af
 8014310:	080144b9 	.word	0x080144b9
 8014314:	080144c3 	.word	0x080144c3
 8014318:	080144cd 	.word	0x080144cd
 801431c:	080144d7 	.word	0x080144d7
 8014320:	080144e1 	.word	0x080144e1
 8014324:	080144ed 	.word	0x080144ed
 8014328:	08014505 	.word	0x08014505
 801432c:	080144f9 	.word	0x080144f9
 8014330:	08014511 	.word	0x08014511
 8014334:	0801451b 	.word	0x0801451b
 8014338:	08014527 	.word	0x08014527
 801433c:	08014541 	.word	0x08014541
 8014340:	08014531 	.word	0x08014531
 8014344:	08014539 	.word	0x08014539
 8014348:	0801456d 	.word	0x0801456d
 801434c:	0801454d 	.word	0x0801454d
 8014350:	0801456d 	.word	0x0801456d
 8014354:	0801456d 	.word	0x0801456d
 8014358:	0801456d 	.word	0x0801456d
 801435c:	0801456d 	.word	0x0801456d
 8014360:	0801456d 	.word	0x0801456d
 8014364:	0801456d 	.word	0x0801456d
 8014368:	0801456d 	.word	0x0801456d
 801436c:	0801456d 	.word	0x0801456d
 8014370:	0801456d 	.word	0x0801456d
 8014374:	0801456d 	.word	0x0801456d
 8014378:	0801456d 	.word	0x0801456d
 801437c:	0801456d 	.word	0x0801456d
 8014380:	0801456d 	.word	0x0801456d
 8014384:	08014561 	.word	0x08014561
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014388:	4b7e      	ldr	r3, [pc, #504]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 801438a:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	711a      	strb	r2, [r3, #4]
            break;
 8014392:	e0f1      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014394:	4b7b      	ldr	r3, [pc, #492]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014396:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	711a      	strb	r2, [r3, #4]
            break;
 801439e:	e0eb      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80143a0:	f7fa ff34 	bl	800f20c <SecureElementGetDevEui>
 80143a4:	4602      	mov	r2, r0
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	605a      	str	r2, [r3, #4]
            break;
 80143aa:	e0e5      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80143ac:	f7fa ff50 	bl	800f250 <SecureElementGetJoinEui>
 80143b0:	4602      	mov	r2, r0
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	605a      	str	r2, [r3, #4]
            break;
 80143b6:	e0df      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80143b8:	4b72      	ldr	r3, [pc, #456]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80143ba:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	711a      	strb	r2, [r3, #4]
            break;
 80143c2:	e0d9      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80143c4:	4b6f      	ldr	r3, [pc, #444]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80143c6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	605a      	str	r2, [r3, #4]
            break;
 80143ce:	e0d3      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80143d0:	4b6c      	ldr	r3, [pc, #432]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80143d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	605a      	str	r2, [r3, #4]
            break;
 80143da:	e0cd      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80143dc:	4b69      	ldr	r3, [pc, #420]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80143de:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	711a      	strb	r2, [r3, #4]
            break;
 80143e6:	e0c7      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80143e8:	4b66      	ldr	r3, [pc, #408]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80143ea:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	711a      	strb	r2, [r3, #4]
            break;
 80143f2:	e0c1      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80143f4:	231d      	movs	r3, #29
 80143f6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143f8:	4b62      	ldr	r3, [pc, #392]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80143fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80143fe:	f107 0210 	add.w	r2, r7, #16
 8014402:	4611      	mov	r1, r2
 8014404:	4618      	mov	r0, r3
 8014406:	f002 ff13 	bl	8017230 <RegionGetPhyParam>
 801440a:	4603      	mov	r3, r0
 801440c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801440e:	68fa      	ldr	r2, [r7, #12]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	605a      	str	r2, [r3, #4]
            break;
 8014414:	e0b0      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	4a5a      	ldr	r2, [pc, #360]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 801441a:	3304      	adds	r3, #4
 801441c:	3264      	adds	r2, #100	; 0x64
 801441e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014422:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014426:	e0a7      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	4a56      	ldr	r2, [pc, #344]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 801442c:	3304      	adds	r3, #4
 801442e:	32a8      	adds	r2, #168	; 0xa8
 8014430:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014434:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014438:	e09e      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	4a51      	ldr	r2, [pc, #324]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 801443e:	3304      	adds	r3, #4
 8014440:	326c      	adds	r2, #108	; 0x6c
 8014442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014446:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801444a:	e095      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	4a4d      	ldr	r2, [pc, #308]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014450:	3304      	adds	r3, #4
 8014452:	32b0      	adds	r2, #176	; 0xb0
 8014454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014458:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801445c:	e08c      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801445e:	231b      	movs	r3, #27
 8014460:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014462:	4b48      	ldr	r3, [pc, #288]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014464:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014468:	f107 0210 	add.w	r2, r7, #16
 801446c:	4611      	mov	r1, r2
 801446e:	4618      	mov	r0, r3
 8014470:	f002 fede 	bl	8017230 <RegionGetPhyParam>
 8014474:	4603      	mov	r3, r0
 8014476:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014478:	68fa      	ldr	r2, [r7, #12]
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	605a      	str	r2, [r3, #4]
            break;
 801447e:	e07b      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014480:	231a      	movs	r3, #26
 8014482:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014484:	4b3f      	ldr	r3, [pc, #252]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801448a:	f107 0210 	add.w	r2, r7, #16
 801448e:	4611      	mov	r1, r2
 8014490:	4618      	mov	r0, r3
 8014492:	f002 fecd 	bl	8017230 <RegionGetPhyParam>
 8014496:	4603      	mov	r3, r0
 8014498:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	605a      	str	r2, [r3, #4]
            break;
 80144a0:	e06a      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80144a2:	4b38      	ldr	r3, [pc, #224]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80144a4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	711a      	strb	r2, [r3, #4]
            break;
 80144ac:	e064      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80144ae:	4b35      	ldr	r3, [pc, #212]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80144b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	605a      	str	r2, [r3, #4]
            break;
 80144b6:	e05f      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80144b8:	4b32      	ldr	r3, [pc, #200]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80144ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	605a      	str	r2, [r3, #4]
            break;
 80144c0:	e05a      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80144c2:	4b30      	ldr	r3, [pc, #192]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80144c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	605a      	str	r2, [r3, #4]
            break;
 80144ca:	e055      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80144cc:	4b2d      	ldr	r3, [pc, #180]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80144ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	605a      	str	r2, [r3, #4]
            break;
 80144d4:	e050      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80144d6:	4b2b      	ldr	r3, [pc, #172]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80144d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	605a      	str	r2, [r3, #4]
            break;
 80144de:	e04b      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80144e0:	4b28      	ldr	r3, [pc, #160]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80144e2:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	711a      	strb	r2, [r3, #4]
            break;
 80144ea:	e045      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80144ec:	4b25      	ldr	r3, [pc, #148]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80144ee:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	711a      	strb	r2, [r3, #4]
            break;
 80144f6:	e03f      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80144f8:	4b22      	ldr	r3, [pc, #136]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 80144fa:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	711a      	strb	r2, [r3, #4]
            break;
 8014502:	e039      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014504:	4b1f      	ldr	r3, [pc, #124]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014506:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	711a      	strb	r2, [r3, #4]
            break;
 801450e:	e033      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014510:	4b1c      	ldr	r3, [pc, #112]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	605a      	str	r2, [r3, #4]
            break;
 8014518:	e02e      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801451a:	4b1a      	ldr	r3, [pc, #104]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 801451c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	711a      	strb	r2, [r3, #4]
            break;
 8014524:	e028      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014526:	4b17      	ldr	r3, [pc, #92]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014528:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	605a      	str	r2, [r3, #4]
            break;
 801452e:	e023      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	4a14      	ldr	r2, [pc, #80]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014534:	605a      	str	r2, [r3, #4]
            break;
 8014536:	e01f      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	4a13      	ldr	r2, [pc, #76]	; (8014588 <LoRaMacMibGetRequestConfirm+0x308>)
 801453c:	605a      	str	r2, [r3, #4]
            break;
 801453e:	e01b      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014540:	4b10      	ldr	r3, [pc, #64]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014542:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	605a      	str	r2, [r3, #4]
            break;
 801454a:	e015      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	4a0d      	ldr	r2, [pc, #52]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014550:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8014554:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014556:	687c      	ldr	r4, [r7, #4]
 8014558:	f002 fff2 	bl	8017540 <RegionGetVersion>
 801455c:	60a0      	str	r0, [r4, #8]
            break;
 801455e:	e00b      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8014560:	4b08      	ldr	r3, [pc, #32]	; (8014584 <LoRaMacMibGetRequestConfirm+0x304>)
 8014562:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	605a      	str	r2, [r3, #4]
            break;
 801456a:	e005      	b.n	8014578 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f000 ff45 	bl	80153fc <LoRaMacClassBMibGetRequestConfirm>
 8014572:	4603      	mov	r3, r0
 8014574:	75fb      	strb	r3, [r7, #23]
            break;
 8014576:	bf00      	nop
        }
    }
    return status;
 8014578:	7dfb      	ldrb	r3, [r7, #23]
}
 801457a:	4618      	mov	r0, r3
 801457c:	371c      	adds	r7, #28
 801457e:	46bd      	mov	sp, r7
 8014580:	bd90      	pop	{r4, r7, pc}
 8014582:	bf00      	nop
 8014584:	20000e5c 	.word	0x20000e5c
 8014588:	20001584 	.word	0x20001584

0801458c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b086      	sub	sp, #24
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014594:	2300      	movs	r3, #0
 8014596:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d101      	bne.n	80145a2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801459e:	2303      	movs	r3, #3
 80145a0:	e348      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80145a2:	4bb7      	ldr	r3, [pc, #732]	; (8014880 <LoRaMacMibSetRequestConfirm+0x2f4>)
 80145a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80145a8:	f003 0302 	and.w	r3, r3, #2
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d001      	beq.n	80145b4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80145b0:	2301      	movs	r3, #1
 80145b2:	e33f      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	2b37      	cmp	r3, #55	; 0x37
 80145ba:	f200 8319 	bhi.w	8014bf0 <LoRaMacMibSetRequestConfirm+0x664>
 80145be:	a201      	add	r2, pc, #4	; (adr r2, 80145c4 <LoRaMacMibSetRequestConfirm+0x38>)
 80145c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145c4:	080146a5 	.word	0x080146a5
 80145c8:	080146b5 	.word	0x080146b5
 80145cc:	080146cf 	.word	0x080146cf
 80145d0:	080146e7 	.word	0x080146e7
 80145d4:	080146ff 	.word	0x080146ff
 80145d8:	0801470b 	.word	0x0801470b
 80145dc:	08014717 	.word	0x08014717
 80145e0:	08014723 	.word	0x08014723
 80145e4:	08014749 	.word	0x08014749
 80145e8:	0801476f 	.word	0x0801476f
 80145ec:	08014795 	.word	0x08014795
 80145f0:	080147bb 	.word	0x080147bb
 80145f4:	080147e1 	.word	0x080147e1
 80145f8:	08014807 	.word	0x08014807
 80145fc:	0801482d 	.word	0x0801482d
 8014600:	08014853 	.word	0x08014853
 8014604:	08014873 	.word	0x08014873
 8014608:	08014bf1 	.word	0x08014bf1
 801460c:	0801488d 	.word	0x0801488d
 8014610:	080148fd 	.word	0x080148fd
 8014614:	0801493d 	.word	0x0801493d
 8014618:	0801499f 	.word	0x0801499f
 801461c:	08014a0f 	.word	0x08014a0f
 8014620:	080149df 	.word	0x080149df
 8014624:	08014a3f 	.word	0x08014a3f
 8014628:	08014a61 	.word	0x08014a61
 801462c:	08014a6b 	.word	0x08014a6b
 8014630:	08014a75 	.word	0x08014a75
 8014634:	08014a7f 	.word	0x08014a7f
 8014638:	08014a89 	.word	0x08014a89
 801463c:	08014a93 	.word	0x08014a93
 8014640:	08014ac5 	.word	0x08014ac5
 8014644:	08014b31 	.word	0x08014b31
 8014648:	08014aff 	.word	0x08014aff
 801464c:	08014b6d 	.word	0x08014b6d
 8014650:	08014b83 	.word	0x08014b83
 8014654:	08014b9b 	.word	0x08014b9b
 8014658:	08014ba5 	.word	0x08014ba5
 801465c:	08014bb1 	.word	0x08014bb1
 8014660:	08014bf1 	.word	0x08014bf1
 8014664:	08014bbb 	.word	0x08014bbb
 8014668:	08014bf1 	.word	0x08014bf1
 801466c:	08014bf1 	.word	0x08014bf1
 8014670:	08014bf1 	.word	0x08014bf1
 8014674:	08014bf1 	.word	0x08014bf1
 8014678:	08014bf1 	.word	0x08014bf1
 801467c:	08014bf1 	.word	0x08014bf1
 8014680:	08014bf1 	.word	0x08014bf1
 8014684:	08014bf1 	.word	0x08014bf1
 8014688:	08014bf1 	.word	0x08014bf1
 801468c:	08014bf1 	.word	0x08014bf1
 8014690:	08014bf1 	.word	0x08014bf1
 8014694:	08014bf1 	.word	0x08014bf1
 8014698:	08014bf1 	.word	0x08014bf1
 801469c:	08014bf1 	.word	0x08014bf1
 80146a0:	08014be5 	.word	0x08014be5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	791b      	ldrb	r3, [r3, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7fd fb99 	bl	8011de0 <SwitchClass>
 80146ae:	4603      	mov	r3, r0
 80146b0:	75fb      	strb	r3, [r7, #23]
            break;
 80146b2:	e2be      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	791b      	ldrb	r3, [r3, #4]
 80146b8:	2b02      	cmp	r3, #2
 80146ba:	d005      	beq.n	80146c8 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	791a      	ldrb	r2, [r3, #4]
 80146c0:	4b70      	ldr	r3, [pc, #448]	; (8014884 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80146c2:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80146c6:	e2b4      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146c8:	2303      	movs	r3, #3
 80146ca:	75fb      	strb	r3, [r7, #23]
            break;
 80146cc:	e2b1      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7fa fd82 	bl	800f1dc <SecureElementSetDevEui>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	f000 828e 	beq.w	8014bfc <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146e0:	2303      	movs	r3, #3
 80146e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80146e4:	e28a      	b.n	8014bfc <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	685b      	ldr	r3, [r3, #4]
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fa fd98 	bl	800f220 <SecureElementSetJoinEui>
 80146f0:	4603      	mov	r3, r0
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	f000 8284 	beq.w	8014c00 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146f8:	2303      	movs	r3, #3
 80146fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80146fc:	e280      	b.n	8014c00 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	791a      	ldrb	r2, [r3, #4]
 8014702:	4b60      	ldr	r3, [pc, #384]	; (8014884 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014704:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8014708:	e293      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	4a5d      	ldr	r2, [pc, #372]	; (8014884 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014710:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8014714:	e28d      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	685b      	ldr	r3, [r3, #4]
 801471a:	4a5a      	ldr	r2, [pc, #360]	; (8014884 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801471c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8014720:	e287      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d00b      	beq.n	8014742 <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	4619      	mov	r1, r3
 8014730:	2000      	movs	r0, #0
 8014732:	f001 ff8d 	bl	8016650 <LoRaMacCryptoSetKey>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	f000 8263 	beq.w	8014c04 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801473e:	2311      	movs	r3, #17
 8014740:	e278      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014742:	2303      	movs	r3, #3
 8014744:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014746:	e25d      	b.n	8014c04 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d00b      	beq.n	8014768 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	4619      	mov	r1, r3
 8014756:	2001      	movs	r0, #1
 8014758:	f001 ff7a 	bl	8016650 <LoRaMacCryptoSetKey>
 801475c:	4603      	mov	r3, r0
 801475e:	2b00      	cmp	r3, #0
 8014760:	f000 8252 	beq.w	8014c08 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014764:	2311      	movs	r3, #17
 8014766:	e265      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014768:	2303      	movs	r3, #3
 801476a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801476c:	e24c      	b.n	8014c08 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d00b      	beq.n	801478e <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	4619      	mov	r1, r3
 801477c:	2002      	movs	r0, #2
 801477e:	f001 ff67 	bl	8016650 <LoRaMacCryptoSetKey>
 8014782:	4603      	mov	r3, r0
 8014784:	2b00      	cmp	r3, #0
 8014786:	f000 8241 	beq.w	8014c0c <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801478a:	2311      	movs	r3, #17
 801478c:	e252      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801478e:	2303      	movs	r3, #3
 8014790:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014792:	e23b      	b.n	8014c0c <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d00b      	beq.n	80147b4 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	685b      	ldr	r3, [r3, #4]
 80147a0:	4619      	mov	r1, r3
 80147a2:	2003      	movs	r0, #3
 80147a4:	f001 ff54 	bl	8016650 <LoRaMacCryptoSetKey>
 80147a8:	4603      	mov	r3, r0
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	f000 8230 	beq.w	8014c10 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80147b0:	2311      	movs	r3, #17
 80147b2:	e23f      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147b4:	2303      	movs	r3, #3
 80147b6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80147b8:	e22a      	b.n	8014c10 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d00b      	beq.n	80147da <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	685b      	ldr	r3, [r3, #4]
 80147c6:	4619      	mov	r1, r3
 80147c8:	207f      	movs	r0, #127	; 0x7f
 80147ca:	f001 ff41 	bl	8016650 <LoRaMacCryptoSetKey>
 80147ce:	4603      	mov	r3, r0
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	f000 821f 	beq.w	8014c14 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80147d6:	2311      	movs	r3, #17
 80147d8:	e22c      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147da:	2303      	movs	r3, #3
 80147dc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80147de:	e219      	b.n	8014c14 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d00b      	beq.n	8014800 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	4619      	mov	r1, r3
 80147ee:	2080      	movs	r0, #128	; 0x80
 80147f0:	f001 ff2e 	bl	8016650 <LoRaMacCryptoSetKey>
 80147f4:	4603      	mov	r3, r0
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	f000 820e 	beq.w	8014c18 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80147fc:	2311      	movs	r3, #17
 80147fe:	e219      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014800:	2303      	movs	r3, #3
 8014802:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014804:	e208      	b.n	8014c18 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d00b      	beq.n	8014826 <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	4619      	mov	r1, r3
 8014814:	2081      	movs	r0, #129	; 0x81
 8014816:	f001 ff1b 	bl	8016650 <LoRaMacCryptoSetKey>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	f000 81fd 	beq.w	8014c1c <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014822:	2311      	movs	r3, #17
 8014824:	e206      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014826:	2303      	movs	r3, #3
 8014828:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801482a:	e1f7      	b.n	8014c1c <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	685b      	ldr	r3, [r3, #4]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d00b      	beq.n	801484c <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	4619      	mov	r1, r3
 801483a:	2082      	movs	r0, #130	; 0x82
 801483c:	f001 ff08 	bl	8016650 <LoRaMacCryptoSetKey>
 8014840:	4603      	mov	r3, r0
 8014842:	2b00      	cmp	r3, #0
 8014844:	f000 81ec 	beq.w	8014c20 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014848:	2311      	movs	r3, #17
 801484a:	e1f3      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801484c:	2303      	movs	r3, #3
 801484e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014850:	e1e6      	b.n	8014c20 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	791a      	ldrb	r2, [r3, #4]
 8014856:	4b0b      	ldr	r3, [pc, #44]	; (8014884 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014858:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801485c:	4b0a      	ldr	r3, [pc, #40]	; (8014888 <LoRaMacMibSetRequestConfirm+0x2fc>)
 801485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014860:	4a08      	ldr	r2, [pc, #32]	; (8014884 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014862:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8014866:	4610      	mov	r0, r2
 8014868:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801486a:	4b07      	ldr	r3, [pc, #28]	; (8014888 <LoRaMacMibSetRequestConfirm+0x2fc>)
 801486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801486e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8014870:	e1df      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	791a      	ldrb	r2, [r3, #4]
 8014876:	4b03      	ldr	r3, [pc, #12]	; (8014884 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 801487c:	e1d9      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
 801487e:	bf00      	nop
 8014880:	20000950 	.word	0x20000950
 8014884:	20000e5c 	.word	0x20000e5c
 8014888:	0801f3a4 	.word	0x0801f3a4
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	7a1b      	ldrb	r3, [r3, #8]
 8014890:	b25b      	sxtb	r3, r3
 8014892:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014894:	4bb3      	ldr	r3, [pc, #716]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014896:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801489a:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801489c:	4bb1      	ldr	r3, [pc, #708]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801489e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80148a2:	f107 0108 	add.w	r1, r7, #8
 80148a6:	2207      	movs	r2, #7
 80148a8:	4618      	mov	r0, r3
 80148aa:	f002 fcfc 	bl	80172a6 <RegionVerify>
 80148ae:	4603      	mov	r3, r0
 80148b0:	f083 0301 	eor.w	r3, r3, #1
 80148b4:	b2db      	uxtb	r3, r3
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d002      	beq.n	80148c0 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80148ba:	2303      	movs	r3, #3
 80148bc:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80148be:	e1b8      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80148c6:	4ba7      	ldr	r3, [pc, #668]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80148c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80148cc:	f107 0108 	add.w	r1, r7, #8
 80148d0:	2200      	movs	r2, #0
 80148d2:	4618      	mov	r0, r3
 80148d4:	f002 fce7 	bl	80172a6 <RegionVerify>
 80148d8:	4603      	mov	r3, r0
 80148da:	f083 0301 	eor.w	r3, r3, #1
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d002      	beq.n	80148ea <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80148e4:	2303      	movs	r3, #3
 80148e6:	75fb      	strb	r3, [r7, #23]
            break;
 80148e8:	e1a3      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80148ea:	4b9e      	ldr	r3, [pc, #632]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80148ec:	687a      	ldr	r2, [r7, #4]
 80148ee:	3364      	adds	r3, #100	; 0x64
 80148f0:	3204      	adds	r2, #4
 80148f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148f6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148fa:	e19a      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	7a1b      	ldrb	r3, [r3, #8]
 8014900:	b25b      	sxtb	r3, r3
 8014902:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014904:	4b97      	ldr	r3, [pc, #604]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014906:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801490a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801490c:	4b95      	ldr	r3, [pc, #596]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801490e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014912:	f107 0108 	add.w	r1, r7, #8
 8014916:	2207      	movs	r2, #7
 8014918:	4618      	mov	r0, r3
 801491a:	f002 fcc4 	bl	80172a6 <RegionVerify>
 801491e:	4603      	mov	r3, r0
 8014920:	2b00      	cmp	r3, #0
 8014922:	d008      	beq.n	8014936 <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014924:	4b8f      	ldr	r3, [pc, #572]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014926:	687a      	ldr	r2, [r7, #4]
 8014928:	33a8      	adds	r3, #168	; 0xa8
 801492a:	3204      	adds	r2, #4
 801492c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014930:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014934:	e17d      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014936:	2303      	movs	r3, #3
 8014938:	75fb      	strb	r3, [r7, #23]
            break;
 801493a:	e17a      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	7a1b      	ldrb	r3, [r3, #8]
 8014940:	b25b      	sxtb	r3, r3
 8014942:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014944:	4b87      	ldr	r3, [pc, #540]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014946:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801494a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801494c:	4b85      	ldr	r3, [pc, #532]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801494e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014952:	f107 0108 	add.w	r1, r7, #8
 8014956:	2207      	movs	r2, #7
 8014958:	4618      	mov	r0, r3
 801495a:	f002 fca4 	bl	80172a6 <RegionVerify>
 801495e:	4603      	mov	r3, r0
 8014960:	2b00      	cmp	r3, #0
 8014962:	d019      	beq.n	8014998 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014964:	4b7f      	ldr	r3, [pc, #508]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	336c      	adds	r3, #108	; 0x6c
 801496a:	3204      	adds	r2, #4
 801496c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014970:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014974:	4b7b      	ldr	r3, [pc, #492]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014976:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801497a:	2b02      	cmp	r3, #2
 801497c:	f040 8152 	bne.w	8014c24 <LoRaMacMibSetRequestConfirm+0x698>
 8014980:	4b78      	ldr	r3, [pc, #480]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014982:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014986:	2b00      	cmp	r3, #0
 8014988:	f000 814c 	beq.w	8014c24 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801498c:	4b76      	ldr	r3, [pc, #472]	; (8014b68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014990:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014992:	f7fe fc67 	bl	8013264 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014996:	e145      	b.n	8014c24 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014998:	2303      	movs	r3, #3
 801499a:	75fb      	strb	r3, [r7, #23]
            break;
 801499c:	e142      	b.n	8014c24 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	7a1b      	ldrb	r3, [r3, #8]
 80149a2:	b25b      	sxtb	r3, r3
 80149a4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80149a6:	4b6f      	ldr	r3, [pc, #444]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80149a8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80149ac:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80149ae:	4b6d      	ldr	r3, [pc, #436]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80149b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149b4:	f107 0108 	add.w	r1, r7, #8
 80149b8:	2207      	movs	r2, #7
 80149ba:	4618      	mov	r0, r3
 80149bc:	f002 fc73 	bl	80172a6 <RegionVerify>
 80149c0:	4603      	mov	r3, r0
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d008      	beq.n	80149d8 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80149c6:	4b67      	ldr	r3, [pc, #412]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80149c8:	687a      	ldr	r2, [r7, #4]
 80149ca:	33b0      	adds	r3, #176	; 0xb0
 80149cc:	3204      	adds	r2, #4
 80149ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149d2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80149d6:	e12c      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80149d8:	2303      	movs	r3, #3
 80149da:	75fb      	strb	r3, [r7, #23]
            break;
 80149dc:	e129      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80149e4:	2301      	movs	r3, #1
 80149e6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80149e8:	4b5e      	ldr	r3, [pc, #376]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80149ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149ee:	f107 020c 	add.w	r2, r7, #12
 80149f2:	4611      	mov	r1, r2
 80149f4:	4618      	mov	r0, r3
 80149f6:	f002 fc7f 	bl	80172f8 <RegionChanMaskSet>
 80149fa:	4603      	mov	r3, r0
 80149fc:	f083 0301 	eor.w	r3, r3, #1
 8014a00:	b2db      	uxtb	r3, r3
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	f000 8110 	beq.w	8014c28 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a08:	2303      	movs	r3, #3
 8014a0a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014a0c:	e10c      	b.n	8014c28 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	685b      	ldr	r3, [r3, #4]
 8014a12:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014a14:	2300      	movs	r3, #0
 8014a16:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014a18:	4b52      	ldr	r3, [pc, #328]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a1e:	f107 020c 	add.w	r2, r7, #12
 8014a22:	4611      	mov	r1, r2
 8014a24:	4618      	mov	r0, r3
 8014a26:	f002 fc67 	bl	80172f8 <RegionChanMaskSet>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	f083 0301 	eor.w	r3, r3, #1
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	f000 80fa 	beq.w	8014c2c <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a38:	2303      	movs	r3, #3
 8014a3a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014a3c:	e0f6      	b.n	8014c2c <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	791b      	ldrb	r3, [r3, #4]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d009      	beq.n	8014a5a <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014a4a:	2b0f      	cmp	r3, #15
 8014a4c:	d805      	bhi.n	8014a5a <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	791a      	ldrb	r2, [r3, #4]
 8014a52:	4b44      	ldr	r3, [pc, #272]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014a58:	e0eb      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a5a:	2303      	movs	r3, #3
 8014a5c:	75fb      	strb	r3, [r7, #23]
            break;
 8014a5e:	e0e8      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	4a3f      	ldr	r2, [pc, #252]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a66:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8014a68:	e0e3      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	4a3d      	ldr	r2, [pc, #244]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a70:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8014a72:	e0de      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	4a3a      	ldr	r2, [pc, #232]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a7a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014a7c:	e0d9      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	4a38      	ldr	r2, [pc, #224]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a84:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014a86:	e0d4      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	4a35      	ldr	r2, [pc, #212]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a8e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014a90:	e0cf      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014a98:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014a9a:	4b32      	ldr	r3, [pc, #200]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014aa0:	f107 0108 	add.w	r1, r7, #8
 8014aa4:	2206      	movs	r2, #6
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f002 fbfd 	bl	80172a6 <RegionVerify>
 8014aac:	4603      	mov	r3, r0
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d005      	beq.n	8014abe <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014ab2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014ab6:	4b2b      	ldr	r3, [pc, #172]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014ab8:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014abc:	e0b9      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014abe:	2303      	movs	r3, #3
 8014ac0:	75fb      	strb	r3, [r7, #23]
            break;
 8014ac2:	e0b6      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014aca:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014acc:	4b25      	ldr	r3, [pc, #148]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014ace:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014ad2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014ad4:	4b23      	ldr	r3, [pc, #140]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ada:	f107 0108 	add.w	r1, r7, #8
 8014ade:	2205      	movs	r2, #5
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f002 fbe0 	bl	80172a6 <RegionVerify>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d005      	beq.n	8014af8 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014aec:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014af0:	4b1c      	ldr	r3, [pc, #112]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014af6:	e09c      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014af8:	2303      	movs	r3, #3
 8014afa:	75fb      	strb	r3, [r7, #23]
            break;
 8014afc:	e099      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014b04:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014b06:	4b17      	ldr	r3, [pc, #92]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b0c:	f107 0108 	add.w	r1, r7, #8
 8014b10:	220a      	movs	r2, #10
 8014b12:	4618      	mov	r0, r3
 8014b14:	f002 fbc7 	bl	80172a6 <RegionVerify>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d005      	beq.n	8014b2a <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014b1e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014b22:	4b10      	ldr	r3, [pc, #64]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014b24:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b28:	e083      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b2a:	2303      	movs	r3, #3
 8014b2c:	75fb      	strb	r3, [r7, #23]
            break;
 8014b2e:	e080      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014b36:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014b38:	4b0a      	ldr	r3, [pc, #40]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b3e:	f107 0108 	add.w	r1, r7, #8
 8014b42:	2209      	movs	r2, #9
 8014b44:	4618      	mov	r0, r3
 8014b46:	f002 fbae 	bl	80172a6 <RegionVerify>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d005      	beq.n	8014b5c <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8014b50:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014b54:	4b03      	ldr	r3, [pc, #12]	; (8014b64 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b5a:	e06a      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b5c:	2303      	movs	r3, #3
 8014b5e:	75fb      	strb	r3, [r7, #23]
            break;
 8014b60:	e067      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
 8014b62:	bf00      	nop
 8014b64:	20000e5c 	.word	0x20000e5c
 8014b68:	0801f3a4 	.word	0x0801f3a4
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	685b      	ldr	r3, [r3, #4]
 8014b70:	4a32      	ldr	r2, [pc, #200]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8014b76:	4b31      	ldr	r3, [pc, #196]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b7c:	4a2f      	ldr	r2, [pc, #188]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b7e:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8014b80:	e057      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	791a      	ldrb	r2, [r3, #4]
 8014b86:	4b2d      	ldr	r3, [pc, #180]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b88:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8014b8c:	4b2b      	ldr	r3, [pc, #172]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b8e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014b92:	4b2a      	ldr	r3, [pc, #168]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8014b98:	e04b      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	4a27      	ldr	r2, [pc, #156]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014ba0:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8014ba2:	e046      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	4a24      	ldr	r2, [pc, #144]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014baa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8014bae:	e040      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8014bb0:	f7fe fdb2 	bl	8013718 <RestoreNvmData>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	75fb      	strb	r3, [r7, #23]
            break;
 8014bb8:	e03b      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	799b      	ldrb	r3, [r3, #6]
 8014bbe:	2b01      	cmp	r3, #1
 8014bc0:	d80d      	bhi.n	8014bde <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8014bc2:	4a1e      	ldr	r2, [pc, #120]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6858      	ldr	r0, [r3, #4]
 8014bd0:	f001 fc78 	bl	80164c4 <LoRaMacCryptoSetLrWanVersion>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d02a      	beq.n	8014c30 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bda:	2311      	movs	r3, #17
 8014bdc:	e02a      	b.n	8014c34 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bde:	2303      	movs	r3, #3
 8014be0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014be2:	e025      	b.n	8014c30 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	4a14      	ldr	r2, [pc, #80]	; (8014c3c <LoRaMacMibSetRequestConfirm+0x6b0>)
 8014bea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8014bee:	e020      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f000 fc0d 	bl	8015410 <LoRaMacMibClassBSetRequestConfirm>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	75fb      	strb	r3, [r7, #23]
            break;
 8014bfa:	e01a      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014bfc:	bf00      	nop
 8014bfe:	e018      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c00:	bf00      	nop
 8014c02:	e016      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c04:	bf00      	nop
 8014c06:	e014      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c08:	bf00      	nop
 8014c0a:	e012      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c0c:	bf00      	nop
 8014c0e:	e010      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c10:	bf00      	nop
 8014c12:	e00e      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c14:	bf00      	nop
 8014c16:	e00c      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c18:	bf00      	nop
 8014c1a:	e00a      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c1c:	bf00      	nop
 8014c1e:	e008      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c20:	bf00      	nop
 8014c22:	e006      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c24:	bf00      	nop
 8014c26:	e004      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c28:	bf00      	nop
 8014c2a:	e002      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c2c:	bf00      	nop
 8014c2e:	e000      	b.n	8014c32 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8014c30:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8014c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c34:	4618      	mov	r0, r3
 8014c36:	3718      	adds	r7, #24
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	20000e5c 	.word	0x20000e5c

08014c40 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b086      	sub	sp, #24
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014c48:	2302      	movs	r3, #2
 8014c4a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d101      	bne.n	8014c5a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014c56:	2303      	movs	r3, #3
 8014c58:	e127      	b.n	8014eaa <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8014c5a:	f7fc fcd3 	bl	8011604 <LoRaMacIsBusy>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d001      	beq.n	8014c68 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014c64:	2301      	movs	r3, #1
 8014c66:	e120      	b.n	8014eaa <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8014c68:	f001 f8d0 	bl	8015e0c <LoRaMacConfirmQueueIsFull>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d001      	beq.n	8014c76 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8014c72:	2301      	movs	r3, #1
 8014c74:	e119      	b.n	8014eaa <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014c76:	f001 f8bd 	bl	8015df4 <LoRaMacConfirmQueueGetCnt>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d104      	bne.n	8014c8a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8014c80:	2214      	movs	r2, #20
 8014c82:	2100      	movs	r1, #0
 8014c84:	488b      	ldr	r0, [pc, #556]	; (8014eb4 <LoRaMacMlmeRequest+0x274>)
 8014c86:	f004 fe21 	bl	80198cc <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014c8a:	4b8b      	ldr	r3, [pc, #556]	; (8014eb8 <LoRaMacMlmeRequest+0x278>)
 8014c8c:	2201      	movs	r2, #1
 8014c8e:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014c92:	4a89      	ldr	r2, [pc, #548]	; (8014eb8 <LoRaMacMlmeRequest+0x278>)
 8014c94:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8014c98:	f043 0304 	orr.w	r3, r3, #4
 8014c9c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	781b      	ldrb	r3, [r3, #0]
 8014ca4:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014ca6:	2301      	movs	r3, #1
 8014ca8:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8014caa:	2300      	movs	r3, #0
 8014cac:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	3b01      	subs	r3, #1
 8014cb4:	2b0d      	cmp	r3, #13
 8014cb6:	f200 80ce 	bhi.w	8014e56 <LoRaMacMlmeRequest+0x216>
 8014cba:	a201      	add	r2, pc, #4	; (adr r2, 8014cc0 <LoRaMacMlmeRequest+0x80>)
 8014cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cc0:	08014cf9 	.word	0x08014cf9
 8014cc4:	08014e57 	.word	0x08014e57
 8014cc8:	08014e57 	.word	0x08014e57
 8014ccc:	08014d63 	.word	0x08014d63
 8014cd0:	08014d81 	.word	0x08014d81
 8014cd4:	08014d91 	.word	0x08014d91
 8014cd8:	08014e57 	.word	0x08014e57
 8014cdc:	08014e57 	.word	0x08014e57
 8014ce0:	08014e57 	.word	0x08014e57
 8014ce4:	08014dad 	.word	0x08014dad
 8014ce8:	08014e57 	.word	0x08014e57
 8014cec:	08014e2b 	.word	0x08014e2b
 8014cf0:	08014dcb 	.word	0x08014dcb
 8014cf4:	08014e0d 	.word	0x08014e0d
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8014cf8:	4b6f      	ldr	r3, [pc, #444]	; (8014eb8 <LoRaMacMlmeRequest+0x278>)
 8014cfa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014cfe:	f003 0320 	and.w	r3, r3, #32
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d001      	beq.n	8014d0a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8014d06:	2301      	movs	r3, #1
 8014d08:	e0cf      	b.n	8014eaa <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8014d0a:	f7fe f989 	bl	8013020 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014d0e:	4b6b      	ldr	r3, [pc, #428]	; (8014ebc <LoRaMacMlmeRequest+0x27c>)
 8014d10:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	795b      	ldrb	r3, [r3, #5]
 8014d18:	b25b      	sxtb	r3, r3
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	f002 fbaa 	bl	8017476 <RegionAlternateDr>
 8014d22:	4603      	mov	r3, r0
 8014d24:	461a      	mov	r2, r3
 8014d26:	4b65      	ldr	r3, [pc, #404]	; (8014ebc <LoRaMacMlmeRequest+0x27c>)
 8014d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014d2c:	2307      	movs	r3, #7
 8014d2e:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8014d30:	20ff      	movs	r0, #255	; 0xff
 8014d32:	f7fd feed 	bl	8012b10 <SendReJoinReq>
 8014d36:	4603      	mov	r3, r0
 8014d38:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8014d3a:	7dfb      	ldrb	r3, [r7, #23]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	f000 808c 	beq.w	8014e5a <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014d42:	4b5e      	ldr	r3, [pc, #376]	; (8014ebc <LoRaMacMlmeRequest+0x27c>)
 8014d44:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	795b      	ldrb	r3, [r3, #5]
 8014d4c:	b25b      	sxtb	r3, r3
 8014d4e:	2201      	movs	r2, #1
 8014d50:	4619      	mov	r1, r3
 8014d52:	f002 fb90 	bl	8017476 <RegionAlternateDr>
 8014d56:	4603      	mov	r3, r0
 8014d58:	461a      	mov	r2, r3
 8014d5a:	4b58      	ldr	r3, [pc, #352]	; (8014ebc <LoRaMacMlmeRequest+0x27c>)
 8014d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8014d60:	e07b      	b.n	8014e5a <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014d62:	2300      	movs	r3, #0
 8014d64:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014d66:	f107 030c 	add.w	r3, r7, #12
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	2002      	movs	r0, #2
 8014d70:	f000 fcb2 	bl	80156d8 <LoRaMacCommandsAddCmd>
 8014d74:	4603      	mov	r3, r0
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d071      	beq.n	8014e5e <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014d7a:	2313      	movs	r3, #19
 8014d7c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d7e:	e06e      	b.n	8014e5e <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	889b      	ldrh	r3, [r3, #4]
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7fe fc73 	bl	8013670 <SetTxContinuousWave>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	75fb      	strb	r3, [r7, #23]
            break;
 8014d8e:	e06d      	b.n	8014e6c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	8898      	ldrh	r0, [r3, #4]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	6899      	ldr	r1, [r3, #8]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014d9e:	b2db      	uxtb	r3, r3
 8014da0:	461a      	mov	r2, r3
 8014da2:	f7fe fc99 	bl	80136d8 <SetTxContinuousWave1>
 8014da6:	4603      	mov	r3, r0
 8014da8:	75fb      	strb	r3, [r7, #23]
            break;
 8014daa:	e05f      	b.n	8014e6c <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014dac:	2300      	movs	r3, #0
 8014dae:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014db0:	f107 030c 	add.w	r3, r7, #12
 8014db4:	2200      	movs	r2, #0
 8014db6:	4619      	mov	r1, r3
 8014db8:	200d      	movs	r0, #13
 8014dba:	f000 fc8d 	bl	80156d8 <LoRaMacCommandsAddCmd>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d04e      	beq.n	8014e62 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014dc4:	2313      	movs	r3, #19
 8014dc6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014dc8:	e04b      	b.n	8014e62 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014dca:	4b3c      	ldr	r3, [pc, #240]	; (8014ebc <LoRaMacMlmeRequest+0x27c>)
 8014dcc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d148      	bne.n	8014e66 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	791b      	ldrb	r3, [r3, #4]
 8014dd8:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	791b      	ldrb	r3, [r3, #4]
 8014dde:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014de2:	b2db      	uxtb	r3, r3
 8014de4:	4618      	mov	r0, r3
 8014de6:	f000 fae8 	bl	80153ba <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014dea:	7dbb      	ldrb	r3, [r7, #22]
 8014dec:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8014dee:	2300      	movs	r3, #0
 8014df0:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014df2:	f107 030c 	add.w	r3, r7, #12
 8014df6:	2201      	movs	r2, #1
 8014df8:	4619      	mov	r1, r3
 8014dfa:	2010      	movs	r0, #16
 8014dfc:	f000 fc6c 	bl	80156d8 <LoRaMacCommandsAddCmd>
 8014e00:	4603      	mov	r3, r0
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d02f      	beq.n	8014e66 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014e06:	2313      	movs	r3, #19
 8014e08:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8014e0a:	e02c      	b.n	8014e66 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014e10:	f107 030c 	add.w	r3, r7, #12
 8014e14:	2200      	movs	r2, #0
 8014e16:	4619      	mov	r1, r3
 8014e18:	2012      	movs	r0, #18
 8014e1a:	f000 fc5d 	bl	80156d8 <LoRaMacCommandsAddCmd>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d022      	beq.n	8014e6a <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014e24:	2313      	movs	r3, #19
 8014e26:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e28:	e01f      	b.n	8014e6a <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014e2a:	2301      	movs	r3, #1
 8014e2c:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014e2e:	f000 fa7a 	bl	8015326 <LoRaMacClassBIsAcquisitionInProgress>
 8014e32:	4603      	mov	r3, r0
 8014e34:	f083 0301 	eor.w	r3, r3, #1
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d008      	beq.n	8014e50 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014e3e:	2000      	movs	r0, #0
 8014e40:	f000 fa53 	bl	80152ea <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014e44:	2000      	movs	r0, #0
 8014e46:	f000 fa75 	bl	8015334 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014e4e:	e00d      	b.n	8014e6c <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8014e50:	2301      	movs	r3, #1
 8014e52:	75fb      	strb	r3, [r7, #23]
            break;
 8014e54:	e00a      	b.n	8014e6c <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8014e56:	bf00      	nop
 8014e58:	e008      	b.n	8014e6c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e5a:	bf00      	nop
 8014e5c:	e006      	b.n	8014e6c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e5e:	bf00      	nop
 8014e60:	e004      	b.n	8014e6c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e62:	bf00      	nop
 8014e64:	e002      	b.n	8014e6c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e66:	bf00      	nop
 8014e68:	e000      	b.n	8014e6c <LoRaMacMlmeRequest+0x22c>
            break;
 8014e6a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014e6c:	4b12      	ldr	r3, [pc, #72]	; (8014eb8 <LoRaMacMlmeRequest+0x278>)
 8014e6e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014e76:	7dfb      	ldrb	r3, [r7, #23]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d010      	beq.n	8014e9e <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014e7c:	f000 ffba 	bl	8015df4 <LoRaMacConfirmQueueGetCnt>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d110      	bne.n	8014ea8 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8014e86:	4b0c      	ldr	r3, [pc, #48]	; (8014eb8 <LoRaMacMlmeRequest+0x278>)
 8014e88:	2200      	movs	r2, #0
 8014e8a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014e8e:	4a0a      	ldr	r2, [pc, #40]	; (8014eb8 <LoRaMacMlmeRequest+0x278>)
 8014e90:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8014e94:	f36f 0382 	bfc	r3, #2, #1
 8014e98:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8014e9c:	e004      	b.n	8014ea8 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014e9e:	f107 0310 	add.w	r3, r7, #16
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f000 fe58 	bl	8015b58 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8014ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3718      	adds	r7, #24
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	20000d9c 	.word	0x20000d9c
 8014eb8:	20000950 	.word	0x20000950
 8014ebc:	20000e5c 	.word	0x20000e5c

08014ec0 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b08c      	sub	sp, #48	; 0x30
 8014ec4:	af02      	add	r7, sp, #8
 8014ec6:	6078      	str	r0, [r7, #4]
 8014ec8:	460b      	mov	r3, r1
 8014eca:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014ecc:	2302      	movs	r3, #2
 8014ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014edc:	2300      	movs	r3, #0
 8014ede:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d101      	bne.n	8014eee <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014eea:	2303      	movs	r3, #3
 8014eec:	e0d4      	b.n	8015098 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8014eee:	f7fc fb89 	bl	8011604 <LoRaMacIsBusy>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d001      	beq.n	8014efc <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8014ef8:	2301      	movs	r3, #1
 8014efa:	e0cd      	b.n	8015098 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8014efc:	2300      	movs	r3, #0
 8014efe:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014f00:	2214      	movs	r2, #20
 8014f02:	2100      	movs	r1, #0
 8014f04:	4866      	ldr	r0, [pc, #408]	; (80150a0 <LoRaMacMcpsRequest+0x1e0>)
 8014f06:	f004 fce1 	bl	80198cc <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014f0a:	4b66      	ldr	r3, [pc, #408]	; (80150a4 <LoRaMacMcpsRequest+0x1e4>)
 8014f0c:	2201      	movs	r2, #1
 8014f0e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014f12:	4b64      	ldr	r3, [pc, #400]	; (80150a4 <LoRaMacMcpsRequest+0x1e4>)
 8014f14:	2201      	movs	r2, #1
 8014f16:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	2b03      	cmp	r3, #3
 8014f20:	d03d      	beq.n	8014f9e <LoRaMacMcpsRequest+0xde>
 8014f22:	2b03      	cmp	r3, #3
 8014f24:	dc4f      	bgt.n	8014fc6 <LoRaMacMcpsRequest+0x106>
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d002      	beq.n	8014f30 <LoRaMacMcpsRequest+0x70>
 8014f2a:	2b01      	cmp	r3, #1
 8014f2c:	d019      	beq.n	8014f62 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014f2e:	e04a      	b.n	8014fc6 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8014f30:	2301      	movs	r3, #1
 8014f32:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8014f34:	4b5b      	ldr	r3, [pc, #364]	; (80150a4 <LoRaMacMcpsRequest+0x1e4>)
 8014f36:	2201      	movs	r2, #1
 8014f38:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014f3c:	7b3b      	ldrb	r3, [r7, #12]
 8014f3e:	2202      	movs	r2, #2
 8014f40:	f362 1347 	bfi	r3, r2, #5, #3
 8014f44:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	791b      	ldrb	r3, [r3, #4]
 8014f4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	689b      	ldr	r3, [r3, #8]
 8014f52:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	899b      	ldrh	r3, [r3, #12]
 8014f58:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	7b9b      	ldrb	r3, [r3, #14]
 8014f5e:	777b      	strb	r3, [r7, #29]
            break;
 8014f60:	e032      	b.n	8014fc8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8014f62:	2301      	movs	r3, #1
 8014f64:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	7bdb      	ldrb	r3, [r3, #15]
 8014f6a:	2b08      	cmp	r3, #8
 8014f6c:	bf28      	it	cs
 8014f6e:	2308      	movcs	r3, #8
 8014f70:	b2da      	uxtb	r2, r3
 8014f72:	4b4c      	ldr	r3, [pc, #304]	; (80150a4 <LoRaMacMcpsRequest+0x1e4>)
 8014f74:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014f78:	7b3b      	ldrb	r3, [r7, #12]
 8014f7a:	2204      	movs	r2, #4
 8014f7c:	f362 1347 	bfi	r3, r2, #5, #3
 8014f80:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	791b      	ldrb	r3, [r3, #4]
 8014f86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	689b      	ldr	r3, [r3, #8]
 8014f8e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	899b      	ldrh	r3, [r3, #12]
 8014f94:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	7b9b      	ldrb	r3, [r3, #14]
 8014f9a:	777b      	strb	r3, [r7, #29]
            break;
 8014f9c:	e014      	b.n	8014fc8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8014fa2:	4b40      	ldr	r3, [pc, #256]	; (80150a4 <LoRaMacMcpsRequest+0x1e4>)
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014faa:	7b3b      	ldrb	r3, [r7, #12]
 8014fac:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8014fb0:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	891b      	ldrh	r3, [r3, #8]
 8014fbc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	7a9b      	ldrb	r3, [r3, #10]
 8014fc2:	777b      	strb	r3, [r7, #29]
            break;
 8014fc4:	e000      	b.n	8014fc8 <LoRaMacMcpsRequest+0x108>
            break;
 8014fc6:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014fc8:	2302      	movs	r3, #2
 8014fca:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014fcc:	4b36      	ldr	r3, [pc, #216]	; (80150a8 <LoRaMacMcpsRequest+0x1e8>)
 8014fce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014fd2:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014fd4:	4b34      	ldr	r3, [pc, #208]	; (80150a8 <LoRaMacMcpsRequest+0x1e8>)
 8014fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014fda:	f107 0214 	add.w	r2, r7, #20
 8014fde:	4611      	mov	r1, r2
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f002 f925 	bl	8017230 <RegionGetPhyParam>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	b25b      	sxtb	r3, r3
 8014fee:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8014ff2:	4293      	cmp	r3, r2
 8014ff4:	bfb8      	it	lt
 8014ff6:	4613      	movlt	r3, r2
 8014ff8:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8014ffa:	7f3b      	ldrb	r3, [r7, #28]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d044      	beq.n	801508a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8015000:	4b29      	ldr	r3, [pc, #164]	; (80150a8 <LoRaMacMcpsRequest+0x1e8>)
 8015002:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8015006:	f083 0301 	eor.w	r3, r3, #1
 801500a:	b2db      	uxtb	r3, r3
 801500c:	2b00      	cmp	r3, #0
 801500e:	d019      	beq.n	8015044 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8015010:	7f7b      	ldrb	r3, [r7, #29]
 8015012:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015014:	4b24      	ldr	r3, [pc, #144]	; (80150a8 <LoRaMacMcpsRequest+0x1e8>)
 8015016:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801501a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801501c:	4b22      	ldr	r3, [pc, #136]	; (80150a8 <LoRaMacMcpsRequest+0x1e8>)
 801501e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015022:	f107 0108 	add.w	r1, r7, #8
 8015026:	2205      	movs	r2, #5
 8015028:	4618      	mov	r0, r3
 801502a:	f002 f93c 	bl	80172a6 <RegionVerify>
 801502e:	4603      	mov	r3, r0
 8015030:	2b00      	cmp	r3, #0
 8015032:	d005      	beq.n	8015040 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015034:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015038:	4b1b      	ldr	r3, [pc, #108]	; (80150a8 <LoRaMacMcpsRequest+0x1e8>)
 801503a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801503e:	e001      	b.n	8015044 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015040:	2303      	movs	r3, #3
 8015042:	e029      	b.n	8015098 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8015044:	8bfa      	ldrh	r2, [r7, #30]
 8015046:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801504a:	f107 000c 	add.w	r0, r7, #12
 801504e:	78fb      	ldrb	r3, [r7, #3]
 8015050:	9300      	str	r3, [sp, #0]
 8015052:	4613      	mov	r3, r2
 8015054:	6a3a      	ldr	r2, [r7, #32]
 8015056:	f7fd fc7b 	bl	8012950 <Send>
 801505a:	4603      	mov	r3, r0
 801505c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015064:	2b00      	cmp	r3, #0
 8015066:	d10c      	bne.n	8015082 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	781a      	ldrb	r2, [r3, #0]
 801506c:	4b0d      	ldr	r3, [pc, #52]	; (80150a4 <LoRaMacMcpsRequest+0x1e4>)
 801506e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015072:	4a0c      	ldr	r2, [pc, #48]	; (80150a4 <LoRaMacMcpsRequest+0x1e4>)
 8015074:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015078:	f043 0301 	orr.w	r3, r3, #1
 801507c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8015080:	e003      	b.n	801508a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015082:	4b08      	ldr	r3, [pc, #32]	; (80150a4 <LoRaMacMcpsRequest+0x1e4>)
 8015084:	2200      	movs	r2, #0
 8015086:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801508a:	4b06      	ldr	r3, [pc, #24]	; (80150a4 <LoRaMacMcpsRequest+0x1e4>)
 801508c:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	611a      	str	r2, [r3, #16]

    return status;
 8015094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015098:	4618      	mov	r0, r3
 801509a:	3728      	adds	r7, #40	; 0x28
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	20000d88 	.word	0x20000d88
 80150a4:	20000950 	.word	0x20000950
 80150a8:	20000e5c 	.word	0x20000e5c

080150ac <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	4603      	mov	r3, r0
 80150b4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80150b6:	79fb      	ldrb	r3, [r7, #7]
 80150b8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80150ba:	4b0a      	ldr	r3, [pc, #40]	; (80150e4 <LoRaMacTestSetDutyCycleOn+0x38>)
 80150bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80150c0:	f107 010c 	add.w	r1, r7, #12
 80150c4:	220f      	movs	r2, #15
 80150c6:	4618      	mov	r0, r3
 80150c8:	f002 f8ed 	bl	80172a6 <RegionVerify>
 80150cc:	4603      	mov	r3, r0
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d003      	beq.n	80150da <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80150d2:	4a04      	ldr	r2, [pc, #16]	; (80150e4 <LoRaMacTestSetDutyCycleOn+0x38>)
 80150d4:	79fb      	ldrb	r3, [r7, #7]
 80150d6:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 80150da:	bf00      	nop
 80150dc:	3710      	adds	r7, #16
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
 80150e2:	bf00      	nop
 80150e4:	20000e5c 	.word	0x20000e5c

080150e8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80150ec:	f7fe ffec 	bl	80140c8 <LoRaMacStop>
 80150f0:	4603      	mov	r3, r0
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d114      	bne.n	8015120 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80150f6:	480c      	ldr	r0, [pc, #48]	; (8015128 <LoRaMacDeInitialization+0x40>)
 80150f8:	f008 fcf6 	bl	801dae8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80150fc:	480b      	ldr	r0, [pc, #44]	; (801512c <LoRaMacDeInitialization+0x44>)
 80150fe:	f008 fcf3 	bl	801dae8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015102:	480b      	ldr	r0, [pc, #44]	; (8015130 <LoRaMacDeInitialization+0x48>)
 8015104:	f008 fcf0 	bl	801dae8 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8015108:	480a      	ldr	r0, [pc, #40]	; (8015134 <LoRaMacDeInitialization+0x4c>)
 801510a:	f008 fced 	bl	801dae8 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801510e:	f000 f95e 	bl	80153ce <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8015112:	f7fd ff85 	bl	8013020 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8015116:	4b08      	ldr	r3, [pc, #32]	; (8015138 <LoRaMacDeInitialization+0x50>)
 8015118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801511a:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801511c:	2300      	movs	r3, #0
 801511e:	e000      	b.n	8015122 <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015120:	2301      	movs	r3, #1
    }
}
 8015122:	4618      	mov	r0, r3
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	20000cb8 	.word	0x20000cb8
 801512c:	20000cd0 	.word	0x20000cd0
 8015130:	20000ce8 	.word	0x20000ce8
 8015134:	20000d48 	.word	0x20000d48
 8015138:	0801f3a4 	.word	0x0801f3a4

0801513c <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b08c      	sub	sp, #48	; 0x30
 8015140:	af00      	add	r7, sp, #0
 8015142:	60f8      	str	r0, [r7, #12]
 8015144:	60b9      	str	r1, [r7, #8]
 8015146:	607a      	str	r2, [r7, #4]
 8015148:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801514a:	2300      	movs	r3, #0
 801514c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	7c1b      	ldrb	r3, [r3, #16]
 8015154:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	7c5b      	ldrb	r3, [r3, #17]
 801515c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	689a      	ldr	r2, [r3, #8]
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	795b      	ldrb	r3, [r3, #5]
 801516c:	2b00      	cmp	r3, #0
 801516e:	f000 808b 	beq.w	8015288 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015172:	2302      	movs	r3, #2
 8015174:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	7c9b      	ldrb	r3, [r3, #18]
 801517c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	7cdb      	ldrb	r3, [r3, #19]
 8015184:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015188:	4611      	mov	r1, r2
 801518a:	4618      	mov	r0, r3
 801518c:	f002 f850 	bl	8017230 <RegionGetPhyParam>
 8015190:	4603      	mov	r3, r0
 8015192:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015194:	6a3b      	ldr	r3, [r7, #32]
 8015196:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 801519a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801519e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80151a2:	4293      	cmp	r3, r2
 80151a4:	bfb8      	it	lt
 80151a6:	4613      	movlt	r3, r2
 80151a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80151ac:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80151b0:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d106      	bne.n	80151c6 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	2200      	movs	r2, #0
 80151bc:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80151be:	2300      	movs	r3, #0
 80151c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80151c4:	e060      	b.n	8015288 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	689b      	ldr	r3, [r3, #8]
 80151ca:	68fa      	ldr	r2, [r7, #12]
 80151cc:	8992      	ldrh	r2, [r2, #12]
 80151ce:	4293      	cmp	r3, r2
 80151d0:	d303      	bcc.n	80151da <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80151d2:	2301      	movs	r3, #1
 80151d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80151d8:	e002      	b.n	80151e0 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80151da:	2300      	movs	r3, #0
 80151dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	689b      	ldr	r3, [r3, #8]
 80151e4:	68fa      	ldr	r2, [r7, #12]
 80151e6:	8992      	ldrh	r2, [r2, #12]
 80151e8:	4611      	mov	r1, r2
 80151ea:	68fa      	ldr	r2, [r7, #12]
 80151ec:	89d2      	ldrh	r2, [r2, #14]
 80151ee:	440a      	add	r2, r1
 80151f0:	4293      	cmp	r3, r2
 80151f2:	d349      	bcc.n	8015288 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80151f4:	2308      	movs	r3, #8
 80151f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	7cdb      	ldrb	r3, [r3, #19]
 80151fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015202:	4611      	mov	r1, r2
 8015204:	4618      	mov	r0, r3
 8015206:	f002 f813 	bl	8017230 <RegionGetPhyParam>
 801520a:	4603      	mov	r3, r0
 801520c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801520e:	6a3b      	ldr	r3, [r7, #32]
 8015210:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	689b      	ldr	r3, [r3, #8]
 8015218:	68fa      	ldr	r2, [r7, #12]
 801521a:	89d2      	ldrh	r2, [r2, #14]
 801521c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015220:	fb01 f202 	mul.w	r2, r1, r2
 8015224:	1a9b      	subs	r3, r3, r2
 8015226:	2b01      	cmp	r3, #1
 8015228:	d12e      	bne.n	8015288 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801522a:	2322      	movs	r3, #34	; 0x22
 801522c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8015230:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015234:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	7c9b      	ldrb	r3, [r3, #18]
 801523c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	7cdb      	ldrb	r3, [r3, #19]
 8015244:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015248:	4611      	mov	r1, r2
 801524a:	4618      	mov	r0, r3
 801524c:	f001 fff0 	bl	8017230 <RegionGetPhyParam>
 8015250:	4603      	mov	r3, r0
 8015252:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8015254:	6a3b      	ldr	r3, [r7, #32]
 8015256:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801525a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801525e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015262:	429a      	cmp	r2, r3
 8015264:	d110      	bne.n	8015288 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8015266:	2300      	movs	r3, #0
 8015268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	791b      	ldrb	r3, [r3, #4]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d009      	beq.n	8015288 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015274:	2302      	movs	r3, #2
 8015276:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	7cdb      	ldrb	r3, [r3, #19]
 801527c:	f107 0214 	add.w	r2, r7, #20
 8015280:	4611      	mov	r1, r2
 8015282:	4618      	mov	r0, r3
 8015284:	f001 fffd 	bl	8017282 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801528e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015296:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801529c:	4618      	mov	r0, r3
 801529e:	3730      	adds	r7, #48	; 0x30
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
 80152b0:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	789b      	ldrb	r3, [r3, #2]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d107      	bne.n	80152ca <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80152ba:	683b      	ldr	r3, [r7, #0]
 80152bc:	687a      	ldr	r2, [r7, #4]
 80152be:	68b9      	ldr	r1, [r7, #8]
 80152c0:	68f8      	ldr	r0, [r7, #12]
 80152c2:	f7ff ff3b 	bl	801513c <CalcNextV10X>
 80152c6:	4603      	mov	r3, r0
 80152c8:	e000      	b.n	80152cc <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80152ca:	2300      	movs	r3, #0
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3710      	adds	r7, #16
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80152d4:	b480      	push	{r7}
 80152d6:	b085      	sub	sp, #20
 80152d8:	af00      	add	r7, sp, #0
 80152da:	60f8      	str	r0, [r7, #12]
 80152dc:	60b9      	str	r1, [r7, #8]
 80152de:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152e0:	bf00      	nop
 80152e2:	3714      	adds	r7, #20
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bc80      	pop	{r7}
 80152e8:	4770      	bx	lr

080152ea <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80152ea:	b480      	push	{r7}
 80152ec:	b083      	sub	sp, #12
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	4603      	mov	r3, r0
 80152f2:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152f4:	bf00      	nop
 80152f6:	370c      	adds	r7, #12
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bc80      	pop	{r7}
 80152fc:	4770      	bx	lr

080152fe <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80152fe:	b480      	push	{r7}
 8015300:	b083      	sub	sp, #12
 8015302:	af00      	add	r7, sp, #0
 8015304:	4603      	mov	r3, r0
 8015306:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015308:	bf00      	nop
 801530a:	370c      	adds	r7, #12
 801530c:	46bd      	mov	sp, r7
 801530e:	bc80      	pop	{r7}
 8015310:	4770      	bx	lr

08015312 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8015312:	b480      	push	{r7}
 8015314:	b083      	sub	sp, #12
 8015316:	af00      	add	r7, sp, #0
 8015318:	4603      	mov	r3, r0
 801531a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801531c:	bf00      	nop
 801531e:	370c      	adds	r7, #12
 8015320:	46bd      	mov	sp, r7
 8015322:	bc80      	pop	{r7}
 8015324:	4770      	bx	lr

08015326 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8015326:	b480      	push	{r7}
 8015328:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801532a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801532c:	4618      	mov	r0, r3
 801532e:	46bd      	mov	sp, r7
 8015330:	bc80      	pop	{r7}
 8015332:	4770      	bx	lr

08015334 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015334:	b480      	push	{r7}
 8015336:	b083      	sub	sp, #12
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801533c:	bf00      	nop
 801533e:	370c      	adds	r7, #12
 8015340:	46bd      	mov	sp, r7
 8015342:	bc80      	pop	{r7}
 8015344:	4770      	bx	lr

08015346 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015346:	b480      	push	{r7}
 8015348:	b083      	sub	sp, #12
 801534a:	af00      	add	r7, sp, #0
 801534c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801534e:	bf00      	nop
 8015350:	370c      	adds	r7, #12
 8015352:	46bd      	mov	sp, r7
 8015354:	bc80      	pop	{r7}
 8015356:	4770      	bx	lr

08015358 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015360:	bf00      	nop
 8015362:	370c      	adds	r7, #12
 8015364:	46bd      	mov	sp, r7
 8015366:	bc80      	pop	{r7}
 8015368:	4770      	bx	lr

0801536a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801536a:	b480      	push	{r7}
 801536c:	b083      	sub	sp, #12
 801536e:	af00      	add	r7, sp, #0
 8015370:	6078      	str	r0, [r7, #4]
 8015372:	460b      	mov	r3, r1
 8015374:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015376:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015378:	4618      	mov	r0, r3
 801537a:	370c      	adds	r7, #12
 801537c:	46bd      	mov	sp, r7
 801537e:	bc80      	pop	{r7}
 8015380:	4770      	bx	lr

08015382 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8015382:	b480      	push	{r7}
 8015384:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015386:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015388:	4618      	mov	r0, r3
 801538a:	46bd      	mov	sp, r7
 801538c:	bc80      	pop	{r7}
 801538e:	4770      	bx	lr

08015390 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8015390:	b480      	push	{r7}
 8015392:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015394:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015396:	4618      	mov	r0, r3
 8015398:	46bd      	mov	sp, r7
 801539a:	bc80      	pop	{r7}
 801539c:	4770      	bx	lr

0801539e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801539e:	b480      	push	{r7}
 80153a0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80153a2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bc80      	pop	{r7}
 80153aa:	4770      	bx	lr

080153ac <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80153ac:	b480      	push	{r7}
 80153ae:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80153b0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bc80      	pop	{r7}
 80153b8:	4770      	bx	lr

080153ba <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80153ba:	b480      	push	{r7}
 80153bc:	b083      	sub	sp, #12
 80153be:	af00      	add	r7, sp, #0
 80153c0:	4603      	mov	r3, r0
 80153c2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153c4:	bf00      	nop
 80153c6:	370c      	adds	r7, #12
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bc80      	pop	{r7}
 80153cc:	4770      	bx	lr

080153ce <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80153ce:	b480      	push	{r7}
 80153d0:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153d2:	bf00      	nop
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bc80      	pop	{r7}
 80153d8:	4770      	bx	lr

080153da <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80153da:	b480      	push	{r7}
 80153dc:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153de:	bf00      	nop
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bc80      	pop	{r7}
 80153e4:	4770      	bx	lr

080153e6 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80153e6:	b480      	push	{r7}
 80153e8:	b083      	sub	sp, #12
 80153ea:	af00      	add	r7, sp, #0
 80153ec:	4603      	mov	r3, r0
 80153ee:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80153f0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	370c      	adds	r7, #12
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bc80      	pop	{r7}
 80153fa:	4770      	bx	lr

080153fc <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80153fc:	b480      	push	{r7}
 80153fe:	b083      	sub	sp, #12
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015404:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015406:	4618      	mov	r0, r3
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	bc80      	pop	{r7}
 801540e:	4770      	bx	lr

08015410 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015410:	b480      	push	{r7}
 8015412:	b083      	sub	sp, #12
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015418:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801541a:	4618      	mov	r0, r3
 801541c:	370c      	adds	r7, #12
 801541e:	46bd      	mov	sp, r7
 8015420:	bc80      	pop	{r7}
 8015422:	4770      	bx	lr

08015424 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015424:	b480      	push	{r7}
 8015426:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015428:	bf00      	nop
 801542a:	46bd      	mov	sp, r7
 801542c:	bc80      	pop	{r7}
 801542e:	4770      	bx	lr

08015430 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
 8015436:	4603      	mov	r3, r0
 8015438:	6039      	str	r1, [r7, #0]
 801543a:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801543c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801543e:	4618      	mov	r0, r3
 8015440:	370c      	adds	r7, #12
 8015442:	46bd      	mov	sp, r7
 8015444:	bc80      	pop	{r7}
 8015446:	4770      	bx	lr

08015448 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	4603      	mov	r3, r0
 8015450:	603a      	str	r2, [r7, #0]
 8015452:	80fb      	strh	r3, [r7, #6]
 8015454:	460b      	mov	r3, r1
 8015456:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015458:	bf00      	nop
 801545a:	370c      	adds	r7, #12
 801545c:	46bd      	mov	sp, r7
 801545e:	bc80      	pop	{r7}
 8015460:	4770      	bx	lr

08015462 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015462:	b480      	push	{r7}
 8015464:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015466:	bf00      	nop
 8015468:	46bd      	mov	sp, r7
 801546a:	bc80      	pop	{r7}
 801546c:	4770      	bx	lr

0801546e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801546e:	b480      	push	{r7}
 8015470:	b083      	sub	sp, #12
 8015472:	af00      	add	r7, sp, #0
 8015474:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015476:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015478:	4618      	mov	r0, r3
 801547a:	370c      	adds	r7, #12
 801547c:	46bd      	mov	sp, r7
 801547e:	bc80      	pop	{r7}
 8015480:	4770      	bx	lr

08015482 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015482:	b480      	push	{r7}
 8015484:	b083      	sub	sp, #12
 8015486:	af00      	add	r7, sp, #0
 8015488:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801548a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801548c:	4618      	mov	r0, r3
 801548e:	370c      	adds	r7, #12
 8015490:	46bd      	mov	sp, r7
 8015492:	bc80      	pop	{r7}
 8015494:	4770      	bx	lr

08015496 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015496:	b480      	push	{r7}
 8015498:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801549a:	bf00      	nop
 801549c:	46bd      	mov	sp, r7
 801549e:	bc80      	pop	{r7}
 80154a0:	4770      	bx	lr

080154a2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80154a2:	b480      	push	{r7}
 80154a4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80154a6:	bf00      	nop
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bc80      	pop	{r7}
 80154ac:	4770      	bx	lr

080154ae <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80154ae:	b480      	push	{r7}
 80154b0:	b085      	sub	sp, #20
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80154ba:	2300      	movs	r3, #0
 80154bc:	81fb      	strh	r3, [r7, #14]
 80154be:	e00a      	b.n	80154d6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80154c0:	89fb      	ldrh	r3, [r7, #14]
 80154c2:	68ba      	ldr	r2, [r7, #8]
 80154c4:	4413      	add	r3, r2
 80154c6:	781b      	ldrb	r3, [r3, #0]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d001      	beq.n	80154d0 <IsSlotFree+0x22>
        {
            return false;
 80154cc:	2300      	movs	r3, #0
 80154ce:	e006      	b.n	80154de <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80154d0:	89fb      	ldrh	r3, [r7, #14]
 80154d2:	3301      	adds	r3, #1
 80154d4:	81fb      	strh	r3, [r7, #14]
 80154d6:	89fb      	ldrh	r3, [r7, #14]
 80154d8:	2b0f      	cmp	r3, #15
 80154da:	d9f1      	bls.n	80154c0 <IsSlotFree+0x12>
        }
    }
    return true;
 80154dc:	2301      	movs	r3, #1
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3714      	adds	r7, #20
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bc80      	pop	{r7}
 80154e6:	4770      	bx	lr

080154e8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80154ee:	2300      	movs	r3, #0
 80154f0:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80154f2:	e007      	b.n	8015504 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80154f4:	79fb      	ldrb	r3, [r7, #7]
 80154f6:	3301      	adds	r3, #1
 80154f8:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80154fa:	79fb      	ldrb	r3, [r7, #7]
 80154fc:	2b0f      	cmp	r3, #15
 80154fe:	d101      	bne.n	8015504 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015500:	2300      	movs	r3, #0
 8015502:	e012      	b.n	801552a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015504:	79fb      	ldrb	r3, [r7, #7]
 8015506:	011b      	lsls	r3, r3, #4
 8015508:	3308      	adds	r3, #8
 801550a:	4a0a      	ldr	r2, [pc, #40]	; (8015534 <MallocNewMacCommandSlot+0x4c>)
 801550c:	4413      	add	r3, r2
 801550e:	4618      	mov	r0, r3
 8015510:	f7ff ffcd 	bl	80154ae <IsSlotFree>
 8015514:	4603      	mov	r3, r0
 8015516:	f083 0301 	eor.w	r3, r3, #1
 801551a:	b2db      	uxtb	r3, r3
 801551c:	2b00      	cmp	r3, #0
 801551e:	d1e9      	bne.n	80154f4 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015520:	79fb      	ldrb	r3, [r7, #7]
 8015522:	011b      	lsls	r3, r3, #4
 8015524:	3308      	adds	r3, #8
 8015526:	4a03      	ldr	r2, [pc, #12]	; (8015534 <MallocNewMacCommandSlot+0x4c>)
 8015528:	4413      	add	r3, r2
}
 801552a:	4618      	mov	r0, r3
 801552c:	3708      	adds	r7, #8
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}
 8015532:	bf00      	nop
 8015534:	20001cc4 	.word	0x20001cc4

08015538 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b082      	sub	sp, #8
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d101      	bne.n	801554a <FreeMacCommandSlot+0x12>
    {
        return false;
 8015546:	2300      	movs	r3, #0
 8015548:	e005      	b.n	8015556 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801554a:	2210      	movs	r2, #16
 801554c:	2100      	movs	r1, #0
 801554e:	6878      	ldr	r0, [r7, #4]
 8015550:	f004 f9bc 	bl	80198cc <memset1>

    return true;
 8015554:	2301      	movs	r3, #1
}
 8015556:	4618      	mov	r0, r3
 8015558:	3708      	adds	r7, #8
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}

0801555e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801555e:	b480      	push	{r7}
 8015560:	b083      	sub	sp, #12
 8015562:	af00      	add	r7, sp, #0
 8015564:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d101      	bne.n	8015570 <LinkedListInit+0x12>
    {
        return false;
 801556c:	2300      	movs	r3, #0
 801556e:	e006      	b.n	801557e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2200      	movs	r2, #0
 8015574:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2200      	movs	r2, #0
 801557a:	605a      	str	r2, [r3, #4]

    return true;
 801557c:	2301      	movs	r3, #1
}
 801557e:	4618      	mov	r0, r3
 8015580:	370c      	adds	r7, #12
 8015582:	46bd      	mov	sp, r7
 8015584:	bc80      	pop	{r7}
 8015586:	4770      	bx	lr

08015588 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015588:	b480      	push	{r7}
 801558a:	b083      	sub	sp, #12
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
 8015590:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d002      	beq.n	801559e <LinkedListAdd+0x16>
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d101      	bne.n	80155a2 <LinkedListAdd+0x1a>
    {
        return false;
 801559e:	2300      	movs	r3, #0
 80155a0:	e015      	b.n	80155ce <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d102      	bne.n	80155b0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	683a      	ldr	r2, [r7, #0]
 80155ae:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	685b      	ldr	r3, [r3, #4]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d003      	beq.n	80155c0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	685b      	ldr	r3, [r3, #4]
 80155bc:	683a      	ldr	r2, [r7, #0]
 80155be:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	2200      	movs	r2, #0
 80155c4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	683a      	ldr	r2, [r7, #0]
 80155ca:	605a      	str	r2, [r3, #4]

    return true;
 80155cc:	2301      	movs	r3, #1
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	370c      	adds	r7, #12
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bc80      	pop	{r7}
 80155d6:	4770      	bx	lr

080155d8 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80155d8:	b480      	push	{r7}
 80155da:	b085      	sub	sp, #20
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d002      	beq.n	80155ee <LinkedListGetPrevious+0x16>
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d101      	bne.n	80155f2 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80155ee:	2300      	movs	r3, #0
 80155f0:	e016      	b.n	8015620 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80155f8:	683a      	ldr	r2, [r7, #0]
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d00c      	beq.n	801561a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015600:	e002      	b.n	8015608 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d007      	beq.n	801561e <LinkedListGetPrevious+0x46>
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	683a      	ldr	r2, [r7, #0]
 8015614:	429a      	cmp	r2, r3
 8015616:	d1f4      	bne.n	8015602 <LinkedListGetPrevious+0x2a>
 8015618:	e001      	b.n	801561e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801561a:	2300      	movs	r3, #0
 801561c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801561e:	68fb      	ldr	r3, [r7, #12]
}
 8015620:	4618      	mov	r0, r3
 8015622:	3714      	adds	r7, #20
 8015624:	46bd      	mov	sp, r7
 8015626:	bc80      	pop	{r7}
 8015628:	4770      	bx	lr

0801562a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b084      	sub	sp, #16
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d002      	beq.n	8015640 <LinkedListRemove+0x16>
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d101      	bne.n	8015644 <LinkedListRemove+0x1a>
    {
        return false;
 8015640:	2300      	movs	r3, #0
 8015642:	e020      	b.n	8015686 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015644:	6839      	ldr	r1, [r7, #0]
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f7ff ffc6 	bl	80155d8 <LinkedListGetPrevious>
 801564c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	683a      	ldr	r2, [r7, #0]
 8015654:	429a      	cmp	r2, r3
 8015656:	d103      	bne.n	8015660 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	683a      	ldr	r2, [r7, #0]
 8015666:	429a      	cmp	r2, r3
 8015668:	d102      	bne.n	8015670 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	68fa      	ldr	r2, [r7, #12]
 801566e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d003      	beq.n	801567e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	681a      	ldr	r2, [r3, #0]
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	2200      	movs	r2, #0
 8015682:	601a      	str	r2, [r3, #0]

    return true;
 8015684:	2301      	movs	r3, #1
}
 8015686:	4618      	mov	r0, r3
 8015688:	3710      	adds	r7, #16
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}

0801568e <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801568e:	b480      	push	{r7}
 8015690:	b083      	sub	sp, #12
 8015692:	af00      	add	r7, sp, #0
 8015694:	4603      	mov	r3, r0
 8015696:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015698:	79fb      	ldrb	r3, [r7, #7]
 801569a:	2b05      	cmp	r3, #5
 801569c:	d004      	beq.n	80156a8 <IsSticky+0x1a>
 801569e:	2b05      	cmp	r3, #5
 80156a0:	db04      	blt.n	80156ac <IsSticky+0x1e>
 80156a2:	3b08      	subs	r3, #8
 80156a4:	2b02      	cmp	r3, #2
 80156a6:	d801      	bhi.n	80156ac <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80156a8:	2301      	movs	r3, #1
 80156aa:	e000      	b.n	80156ae <IsSticky+0x20>
        default:
            return false;
 80156ac:	2300      	movs	r3, #0
    }
}
 80156ae:	4618      	mov	r0, r3
 80156b0:	370c      	adds	r7, #12
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bc80      	pop	{r7}
 80156b6:	4770      	bx	lr

080156b8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80156bc:	22fc      	movs	r2, #252	; 0xfc
 80156be:	2100      	movs	r1, #0
 80156c0:	4804      	ldr	r0, [pc, #16]	; (80156d4 <LoRaMacCommandsInit+0x1c>)
 80156c2:	f004 f903 	bl	80198cc <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80156c6:	4803      	ldr	r0, [pc, #12]	; (80156d4 <LoRaMacCommandsInit+0x1c>)
 80156c8:	f7ff ff49 	bl	801555e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80156cc:	2300      	movs	r3, #0
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop
 80156d4:	20001cc4 	.word	0x20001cc4

080156d8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b086      	sub	sp, #24
 80156dc:	af00      	add	r7, sp, #0
 80156de:	4603      	mov	r3, r0
 80156e0:	60b9      	str	r1, [r7, #8]
 80156e2:	607a      	str	r2, [r7, #4]
 80156e4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d101      	bne.n	80156f0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80156ec:	2301      	movs	r3, #1
 80156ee:	e033      	b.n	8015758 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80156f0:	f7ff fefa 	bl	80154e8 <MallocNewMacCommandSlot>
 80156f4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d101      	bne.n	8015700 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80156fc:	2302      	movs	r3, #2
 80156fe:	e02b      	b.n	8015758 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015700:	6979      	ldr	r1, [r7, #20]
 8015702:	4817      	ldr	r0, [pc, #92]	; (8015760 <LoRaMacCommandsAddCmd+0x88>)
 8015704:	f7ff ff40 	bl	8015588 <LinkedListAdd>
 8015708:	4603      	mov	r3, r0
 801570a:	f083 0301 	eor.w	r3, r3, #1
 801570e:	b2db      	uxtb	r3, r3
 8015710:	2b00      	cmp	r3, #0
 8015712:	d001      	beq.n	8015718 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015714:	2305      	movs	r3, #5
 8015716:	e01f      	b.n	8015758 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	7bfa      	ldrb	r2, [r7, #15]
 801571c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	687a      	ldr	r2, [r7, #4]
 8015722:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	3305      	adds	r3, #5
 8015728:	687a      	ldr	r2, [r7, #4]
 801572a:	b292      	uxth	r2, r2
 801572c:	68b9      	ldr	r1, [r7, #8]
 801572e:	4618      	mov	r0, r3
 8015730:	f004 f891 	bl	8019856 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015734:	7bfb      	ldrb	r3, [r7, #15]
 8015736:	4618      	mov	r0, r3
 8015738:	f7ff ffa9 	bl	801568e <IsSticky>
 801573c:	4603      	mov	r3, r0
 801573e:	461a      	mov	r2, r3
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015744:	4b06      	ldr	r3, [pc, #24]	; (8015760 <LoRaMacCommandsAddCmd+0x88>)
 8015746:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	4413      	add	r3, r2
 801574e:	3301      	adds	r3, #1
 8015750:	4a03      	ldr	r2, [pc, #12]	; (8015760 <LoRaMacCommandsAddCmd+0x88>)
 8015752:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015756:	2300      	movs	r3, #0
}
 8015758:	4618      	mov	r0, r3
 801575a:	3718      	adds	r7, #24
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	20001cc4 	.word	0x20001cc4

08015764 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d101      	bne.n	8015776 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015772:	2301      	movs	r3, #1
 8015774:	e021      	b.n	80157ba <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015776:	6879      	ldr	r1, [r7, #4]
 8015778:	4812      	ldr	r0, [pc, #72]	; (80157c4 <LoRaMacCommandsRemoveCmd+0x60>)
 801577a:	f7ff ff56 	bl	801562a <LinkedListRemove>
 801577e:	4603      	mov	r3, r0
 8015780:	f083 0301 	eor.w	r3, r3, #1
 8015784:	b2db      	uxtb	r3, r3
 8015786:	2b00      	cmp	r3, #0
 8015788:	d001      	beq.n	801578e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801578a:	2303      	movs	r3, #3
 801578c:	e015      	b.n	80157ba <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801578e:	4b0d      	ldr	r3, [pc, #52]	; (80157c4 <LoRaMacCommandsRemoveCmd+0x60>)
 8015790:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	689b      	ldr	r3, [r3, #8]
 8015798:	1ad3      	subs	r3, r2, r3
 801579a:	3b01      	subs	r3, #1
 801579c:	4a09      	ldr	r2, [pc, #36]	; (80157c4 <LoRaMacCommandsRemoveCmd+0x60>)
 801579e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7ff fec8 	bl	8015538 <FreeMacCommandSlot>
 80157a8:	4603      	mov	r3, r0
 80157aa:	f083 0301 	eor.w	r3, r3, #1
 80157ae:	b2db      	uxtb	r3, r3
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d001      	beq.n	80157b8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80157b4:	2305      	movs	r3, #5
 80157b6:	e000      	b.n	80157ba <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80157b8:	2300      	movs	r3, #0
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3708      	adds	r7, #8
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	20001cc4 	.word	0x20001cc4

080157c8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80157ce:	4b0f      	ldr	r3, [pc, #60]	; (801580c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80157d4:	e012      	b.n	80157fc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	7b1b      	ldrb	r3, [r3, #12]
 80157da:	f083 0301 	eor.w	r3, r3, #1
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d008      	beq.n	80157f6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f7ff ffba 	bl	8015764 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	607b      	str	r3, [r7, #4]
 80157f4:	e002      	b.n	80157fc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d1e9      	bne.n	80157d6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015802:	2300      	movs	r3, #0
}
 8015804:	4618      	mov	r0, r3
 8015806:	3708      	adds	r7, #8
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}
 801580c:	20001cc4 	.word	0x20001cc4

08015810 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015816:	4b0e      	ldr	r3, [pc, #56]	; (8015850 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801581c:	e00f      	b.n	801583e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	791b      	ldrb	r3, [r3, #4]
 8015828:	4618      	mov	r0, r3
 801582a:	f7ff ff30 	bl	801568e <IsSticky>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d002      	beq.n	801583a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f7ff ff95 	bl	8015764 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d1ec      	bne.n	801581e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015844:	2300      	movs	r3, #0
}
 8015846:	4618      	mov	r0, r3
 8015848:	3708      	adds	r7, #8
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}
 801584e:	bf00      	nop
 8015850:	20001cc4 	.word	0x20001cc4

08015854 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015854:	b480      	push	{r7}
 8015856:	b083      	sub	sp, #12
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d101      	bne.n	8015866 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015862:	2301      	movs	r3, #1
 8015864:	e005      	b.n	8015872 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015866:	4b05      	ldr	r3, [pc, #20]	; (801587c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015868:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015870:	2300      	movs	r3, #0
}
 8015872:	4618      	mov	r0, r3
 8015874:	370c      	adds	r7, #12
 8015876:	46bd      	mov	sp, r7
 8015878:	bc80      	pop	{r7}
 801587a:	4770      	bx	lr
 801587c:	20001cc4 	.word	0x20001cc4

08015880 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b088      	sub	sp, #32
 8015884:	af00      	add	r7, sp, #0
 8015886:	60f8      	str	r0, [r7, #12]
 8015888:	60b9      	str	r1, [r7, #8]
 801588a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801588c:	4b25      	ldr	r3, [pc, #148]	; (8015924 <LoRaMacCommandsSerializeCmds+0xa4>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015892:	2300      	movs	r3, #0
 8015894:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d002      	beq.n	80158a2 <LoRaMacCommandsSerializeCmds+0x22>
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d126      	bne.n	80158f0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80158a2:	2301      	movs	r3, #1
 80158a4:	e039      	b.n	801591a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80158a6:	7efb      	ldrb	r3, [r7, #27]
 80158a8:	68fa      	ldr	r2, [r7, #12]
 80158aa:	1ad2      	subs	r2, r2, r3
 80158ac:	69fb      	ldr	r3, [r7, #28]
 80158ae:	689b      	ldr	r3, [r3, #8]
 80158b0:	3301      	adds	r3, #1
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d320      	bcc.n	80158f8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80158b6:	7efb      	ldrb	r3, [r7, #27]
 80158b8:	1c5a      	adds	r2, r3, #1
 80158ba:	76fa      	strb	r2, [r7, #27]
 80158bc:	461a      	mov	r2, r3
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	4413      	add	r3, r2
 80158c2:	69fa      	ldr	r2, [r7, #28]
 80158c4:	7912      	ldrb	r2, [r2, #4]
 80158c6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80158c8:	7efb      	ldrb	r3, [r7, #27]
 80158ca:	687a      	ldr	r2, [r7, #4]
 80158cc:	18d0      	adds	r0, r2, r3
 80158ce:	69fb      	ldr	r3, [r7, #28]
 80158d0:	1d59      	adds	r1, r3, #5
 80158d2:	69fb      	ldr	r3, [r7, #28]
 80158d4:	689b      	ldr	r3, [r3, #8]
 80158d6:	b29b      	uxth	r3, r3
 80158d8:	461a      	mov	r2, r3
 80158da:	f003 ffbc 	bl	8019856 <memcpy1>
            itr += curElement->PayloadSize;
 80158de:	69fb      	ldr	r3, [r7, #28]
 80158e0:	689b      	ldr	r3, [r3, #8]
 80158e2:	b2da      	uxtb	r2, r3
 80158e4:	7efb      	ldrb	r3, [r7, #27]
 80158e6:	4413      	add	r3, r2
 80158e8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80158ea:	69fb      	ldr	r3, [r7, #28]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80158f0:	69fb      	ldr	r3, [r7, #28]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d1d7      	bne.n	80158a6 <LoRaMacCommandsSerializeCmds+0x26>
 80158f6:	e009      	b.n	801590c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80158f8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80158fa:	e007      	b.n	801590c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80158fc:	69fb      	ldr	r3, [r7, #28]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015902:	69f8      	ldr	r0, [r7, #28]
 8015904:	f7ff ff2e 	bl	8015764 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d1f4      	bne.n	80158fc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015912:	68b8      	ldr	r0, [r7, #8]
 8015914:	f7ff ff9e 	bl	8015854 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015918:	2300      	movs	r3, #0
}
 801591a:	4618      	mov	r0, r3
 801591c:	3720      	adds	r7, #32
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
 8015922:	bf00      	nop
 8015924:	20001cc4 	.word	0x20001cc4

08015928 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8015928:	b480      	push	{r7}
 801592a:	b085      	sub	sp, #20
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d101      	bne.n	801593a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015936:	2301      	movs	r3, #1
 8015938:	e016      	b.n	8015968 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801593a:	4b0e      	ldr	r3, [pc, #56]	; (8015974 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2200      	movs	r2, #0
 8015944:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8015946:	e00b      	b.n	8015960 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	7b1b      	ldrb	r3, [r3, #12]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d004      	beq.n	801595a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	2201      	movs	r2, #1
 8015954:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8015956:	2300      	movs	r3, #0
 8015958:	e006      	b.n	8015968 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d1f0      	bne.n	8015948 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015966:	2300      	movs	r3, #0
}
 8015968:	4618      	mov	r0, r3
 801596a:	3714      	adds	r7, #20
 801596c:	46bd      	mov	sp, r7
 801596e:	bc80      	pop	{r7}
 8015970:	4770      	bx	lr
 8015972:	bf00      	nop
 8015974:	20001cc4 	.word	0x20001cc4

08015978 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015978:	b480      	push	{r7}
 801597a:	b085      	sub	sp, #20
 801597c:	af00      	add	r7, sp, #0
 801597e:	4603      	mov	r3, r0
 8015980:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015982:	2300      	movs	r3, #0
 8015984:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015986:	79fb      	ldrb	r3, [r7, #7]
 8015988:	3b02      	subs	r3, #2
 801598a:	2b11      	cmp	r3, #17
 801598c:	d850      	bhi.n	8015a30 <LoRaMacCommandsGetCmdSize+0xb8>
 801598e:	a201      	add	r2, pc, #4	; (adr r2, 8015994 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015994:	080159dd 	.word	0x080159dd
 8015998:	080159e3 	.word	0x080159e3
 801599c:	080159e9 	.word	0x080159e9
 80159a0:	080159ef 	.word	0x080159ef
 80159a4:	080159f5 	.word	0x080159f5
 80159a8:	080159fb 	.word	0x080159fb
 80159ac:	08015a01 	.word	0x08015a01
 80159b0:	08015a07 	.word	0x08015a07
 80159b4:	08015a0d 	.word	0x08015a0d
 80159b8:	08015a31 	.word	0x08015a31
 80159bc:	08015a31 	.word	0x08015a31
 80159c0:	08015a13 	.word	0x08015a13
 80159c4:	08015a31 	.word	0x08015a31
 80159c8:	08015a31 	.word	0x08015a31
 80159cc:	08015a19 	.word	0x08015a19
 80159d0:	08015a1f 	.word	0x08015a1f
 80159d4:	08015a25 	.word	0x08015a25
 80159d8:	08015a2b 	.word	0x08015a2b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80159dc:	2303      	movs	r3, #3
 80159de:	73fb      	strb	r3, [r7, #15]
            break;
 80159e0:	e027      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80159e2:	2305      	movs	r3, #5
 80159e4:	73fb      	strb	r3, [r7, #15]
            break;
 80159e6:	e024      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80159e8:	2302      	movs	r3, #2
 80159ea:	73fb      	strb	r3, [r7, #15]
            break;
 80159ec:	e021      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80159ee:	2305      	movs	r3, #5
 80159f0:	73fb      	strb	r3, [r7, #15]
            break;
 80159f2:	e01e      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80159f4:	2301      	movs	r3, #1
 80159f6:	73fb      	strb	r3, [r7, #15]
            break;
 80159f8:	e01b      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80159fa:	2306      	movs	r3, #6
 80159fc:	73fb      	strb	r3, [r7, #15]
            break;
 80159fe:	e018      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015a00:	2302      	movs	r3, #2
 8015a02:	73fb      	strb	r3, [r7, #15]
            break;
 8015a04:	e015      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015a06:	2302      	movs	r3, #2
 8015a08:	73fb      	strb	r3, [r7, #15]
            break;
 8015a0a:	e012      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015a0c:	2305      	movs	r3, #5
 8015a0e:	73fb      	strb	r3, [r7, #15]
            break;
 8015a10:	e00f      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015a12:	2306      	movs	r3, #6
 8015a14:	73fb      	strb	r3, [r7, #15]
            break;
 8015a16:	e00c      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015a18:	2301      	movs	r3, #1
 8015a1a:	73fb      	strb	r3, [r7, #15]
            break;
 8015a1c:	e009      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015a1e:	2305      	movs	r3, #5
 8015a20:	73fb      	strb	r3, [r7, #15]
            break;
 8015a22:	e006      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015a24:	2304      	movs	r3, #4
 8015a26:	73fb      	strb	r3, [r7, #15]
            break;
 8015a28:	e003      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015a2a:	2304      	movs	r3, #4
 8015a2c:	73fb      	strb	r3, [r7, #15]
            break;
 8015a2e:	e000      	b.n	8015a32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015a30:	bf00      	nop
        }
    }
    return cidSize;
 8015a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3714      	adds	r7, #20
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bc80      	pop	{r7}
 8015a3c:	4770      	bx	lr
 8015a3e:	bf00      	nop

08015a40 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015a40:	b480      	push	{r7}
 8015a42:	b083      	sub	sp, #12
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	4a07      	ldr	r2, [pc, #28]	; (8015a68 <IncreaseBufferPointer+0x28>)
 8015a4c:	4293      	cmp	r3, r2
 8015a4e:	d102      	bne.n	8015a56 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015a50:	4b06      	ldr	r3, [pc, #24]	; (8015a6c <IncreaseBufferPointer+0x2c>)
 8015a52:	607b      	str	r3, [r7, #4]
 8015a54:	e002      	b.n	8015a5c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	3304      	adds	r3, #4
 8015a5a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015a5c:	687b      	ldr	r3, [r7, #4]
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	370c      	adds	r7, #12
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bc80      	pop	{r7}
 8015a66:	4770      	bx	lr
 8015a68:	20001ddc 	.word	0x20001ddc
 8015a6c:	20001dcc 	.word	0x20001dcc

08015a70 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015a70:	b480      	push	{r7}
 8015a72:	b083      	sub	sp, #12
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015a7a:	79fb      	ldrb	r3, [r7, #7]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d101      	bne.n	8015a84 <IsListEmpty+0x14>
    {
        return true;
 8015a80:	2301      	movs	r3, #1
 8015a82:	e000      	b.n	8015a86 <IsListEmpty+0x16>
    }
    return false;
 8015a84:	2300      	movs	r3, #0
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	370c      	adds	r7, #12
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bc80      	pop	{r7}
 8015a8e:	4770      	bx	lr

08015a90 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015a90:	b480      	push	{r7}
 8015a92:	b083      	sub	sp, #12
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	4603      	mov	r3, r0
 8015a98:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015a9a:	79fb      	ldrb	r3, [r7, #7]
 8015a9c:	2b04      	cmp	r3, #4
 8015a9e:	d901      	bls.n	8015aa4 <IsListFull+0x14>
    {
        return true;
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	e000      	b.n	8015aa6 <IsListFull+0x16>
    }
    return false;
 8015aa4:	2300      	movs	r3, #0
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	370c      	adds	r7, #12
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bc80      	pop	{r7}
 8015aae:	4770      	bx	lr

08015ab0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b086      	sub	sp, #24
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	60b9      	str	r1, [r7, #8]
 8015aba:	607a      	str	r2, [r7, #4]
 8015abc:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015ac2:	4b13      	ldr	r3, [pc, #76]	; (8015b10 <GetElement+0x60>)
 8015ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7ff ffd1 	bl	8015a70 <IsListEmpty>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d001      	beq.n	8015ad8 <GetElement+0x28>
    {
        return NULL;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	e017      	b.n	8015b08 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015ad8:	2300      	movs	r3, #0
 8015ada:	74fb      	strb	r3, [r7, #19]
 8015adc:	e00d      	b.n	8015afa <GetElement+0x4a>
    {
        if( element->Request == request )
 8015ade:	697b      	ldr	r3, [r7, #20]
 8015ae0:	781b      	ldrb	r3, [r3, #0]
 8015ae2:	7bfa      	ldrb	r2, [r7, #15]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d101      	bne.n	8015aec <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8015ae8:	697b      	ldr	r3, [r7, #20]
 8015aea:	e00d      	b.n	8015b08 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8015aec:	6978      	ldr	r0, [r7, #20]
 8015aee:	f7ff ffa7 	bl	8015a40 <IncreaseBufferPointer>
 8015af2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015af4:	7cfb      	ldrb	r3, [r7, #19]
 8015af6:	3301      	adds	r3, #1
 8015af8:	74fb      	strb	r3, [r7, #19]
 8015afa:	4b05      	ldr	r3, [pc, #20]	; (8015b10 <GetElement+0x60>)
 8015afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b00:	7cfa      	ldrb	r2, [r7, #19]
 8015b02:	429a      	cmp	r2, r3
 8015b04:	d3eb      	bcc.n	8015ade <GetElement+0x2e>
    }

    return NULL;
 8015b06:	2300      	movs	r3, #0
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3718      	adds	r7, #24
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}
 8015b10:	20001dc0 	.word	0x20001dc0

08015b14 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b082      	sub	sp, #8
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8015b1c:	4a0c      	ldr	r2, [pc, #48]	; (8015b50 <LoRaMacConfirmQueueInit+0x3c>)
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8015b22:	4b0b      	ldr	r3, [pc, #44]	; (8015b50 <LoRaMacConfirmQueueInit+0x3c>)
 8015b24:	2200      	movs	r2, #0
 8015b26:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015b2a:	4b09      	ldr	r3, [pc, #36]	; (8015b50 <LoRaMacConfirmQueueInit+0x3c>)
 8015b2c:	4a09      	ldr	r2, [pc, #36]	; (8015b54 <LoRaMacConfirmQueueInit+0x40>)
 8015b2e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015b30:	4b07      	ldr	r3, [pc, #28]	; (8015b50 <LoRaMacConfirmQueueInit+0x3c>)
 8015b32:	4a08      	ldr	r2, [pc, #32]	; (8015b54 <LoRaMacConfirmQueueInit+0x40>)
 8015b34:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8015b36:	2214      	movs	r2, #20
 8015b38:	21ff      	movs	r1, #255	; 0xff
 8015b3a:	4806      	ldr	r0, [pc, #24]	; (8015b54 <LoRaMacConfirmQueueInit+0x40>)
 8015b3c:	f003 fec6 	bl	80198cc <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015b40:	4b03      	ldr	r3, [pc, #12]	; (8015b50 <LoRaMacConfirmQueueInit+0x3c>)
 8015b42:	2201      	movs	r2, #1
 8015b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8015b48:	bf00      	nop
 8015b4a:	3708      	adds	r7, #8
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}
 8015b50:	20001dc0 	.word	0x20001dc0
 8015b54:	20001dcc 	.word	0x20001dcc

08015b58 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015b60:	4b19      	ldr	r3, [pc, #100]	; (8015bc8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7ff ff92 	bl	8015a90 <IsListFull>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d001      	beq.n	8015b76 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8015b72:	2300      	movs	r3, #0
 8015b74:	e023      	b.n	8015bbe <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015b76:	4b14      	ldr	r3, [pc, #80]	; (8015bc8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b78:	689b      	ldr	r3, [r3, #8]
 8015b7a:	687a      	ldr	r2, [r7, #4]
 8015b7c:	7812      	ldrb	r2, [r2, #0]
 8015b7e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015b80:	4b11      	ldr	r3, [pc, #68]	; (8015bc8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b82:	689b      	ldr	r3, [r3, #8]
 8015b84:	687a      	ldr	r2, [r7, #4]
 8015b86:	7852      	ldrb	r2, [r2, #1]
 8015b88:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015b8a:	4b0f      	ldr	r3, [pc, #60]	; (8015bc8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b8c:	689b      	ldr	r3, [r3, #8]
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	78d2      	ldrb	r2, [r2, #3]
 8015b92:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015b94:	4b0c      	ldr	r3, [pc, #48]	; (8015bc8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b96:	689b      	ldr	r3, [r3, #8]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8015b9c:	4b0a      	ldr	r3, [pc, #40]	; (8015bc8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	b2da      	uxtb	r2, r3
 8015ba6:	4b08      	ldr	r3, [pc, #32]	; (8015bc8 <LoRaMacConfirmQueueAdd+0x70>)
 8015ba8:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015bac:	4b06      	ldr	r3, [pc, #24]	; (8015bc8 <LoRaMacConfirmQueueAdd+0x70>)
 8015bae:	689b      	ldr	r3, [r3, #8]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7ff ff45 	bl	8015a40 <IncreaseBufferPointer>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	4a03      	ldr	r2, [pc, #12]	; (8015bc8 <LoRaMacConfirmQueueAdd+0x70>)
 8015bba:	6093      	str	r3, [r2, #8]

    return true;
 8015bbc:	2301      	movs	r3, #1
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3708      	adds	r7, #8
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	20001dc0 	.word	0x20001dc0

08015bcc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015bd0:	4b0e      	ldr	r3, [pc, #56]	; (8015c0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7ff ff4a 	bl	8015a70 <IsListEmpty>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d001      	beq.n	8015be6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8015be2:	2300      	movs	r3, #0
 8015be4:	e010      	b.n	8015c08 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015be6:	4b09      	ldr	r3, [pc, #36]	; (8015c0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bec:	3b01      	subs	r3, #1
 8015bee:	b2da      	uxtb	r2, r3
 8015bf0:	4b06      	ldr	r3, [pc, #24]	; (8015c0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bf2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015bf6:	4b05      	ldr	r3, [pc, #20]	; (8015c0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bf8:	685b      	ldr	r3, [r3, #4]
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7ff ff20 	bl	8015a40 <IncreaseBufferPointer>
 8015c00:	4603      	mov	r3, r0
 8015c02:	4a02      	ldr	r2, [pc, #8]	; (8015c0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015c04:	6053      	str	r3, [r2, #4]

    return true;
 8015c06:	2301      	movs	r3, #1
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	20001dc0 	.word	0x20001dc0

08015c10 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b084      	sub	sp, #16
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	4603      	mov	r3, r0
 8015c18:	460a      	mov	r2, r1
 8015c1a:	71fb      	strb	r3, [r7, #7]
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8015c20:	2300      	movs	r3, #0
 8015c22:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015c24:	4b10      	ldr	r3, [pc, #64]	; (8015c68 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7ff ff20 	bl	8015a70 <IsListEmpty>
 8015c30:	4603      	mov	r3, r0
 8015c32:	f083 0301 	eor.w	r3, r3, #1
 8015c36:	b2db      	uxtb	r3, r3
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d011      	beq.n	8015c60 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015c3c:	4b0a      	ldr	r3, [pc, #40]	; (8015c68 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015c3e:	6859      	ldr	r1, [r3, #4]
 8015c40:	4b09      	ldr	r3, [pc, #36]	; (8015c68 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015c42:	689a      	ldr	r2, [r3, #8]
 8015c44:	79bb      	ldrb	r3, [r7, #6]
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7ff ff32 	bl	8015ab0 <GetElement>
 8015c4c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d005      	beq.n	8015c60 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	79fa      	ldrb	r2, [r7, #7]
 8015c58:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2201      	movs	r2, #1
 8015c5e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8015c60:	bf00      	nop
 8015c62:	3710      	adds	r7, #16
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	20001dc0 	.word	0x20001dc0

08015c6c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b084      	sub	sp, #16
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	4603      	mov	r3, r0
 8015c74:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8015c76:	2300      	movs	r3, #0
 8015c78:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015c7a:	4b10      	ldr	r3, [pc, #64]	; (8015cbc <LoRaMacConfirmQueueGetStatus+0x50>)
 8015c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7ff fef5 	bl	8015a70 <IsListEmpty>
 8015c86:	4603      	mov	r3, r0
 8015c88:	f083 0301 	eor.w	r3, r3, #1
 8015c8c:	b2db      	uxtb	r3, r3
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d00e      	beq.n	8015cb0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015c92:	4b0a      	ldr	r3, [pc, #40]	; (8015cbc <LoRaMacConfirmQueueGetStatus+0x50>)
 8015c94:	6859      	ldr	r1, [r3, #4]
 8015c96:	4b09      	ldr	r3, [pc, #36]	; (8015cbc <LoRaMacConfirmQueueGetStatus+0x50>)
 8015c98:	689a      	ldr	r2, [r3, #8]
 8015c9a:	79fb      	ldrb	r3, [r7, #7]
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7ff ff07 	bl	8015ab0 <GetElement>
 8015ca2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d002      	beq.n	8015cb0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	785b      	ldrb	r3, [r3, #1]
 8015cae:	e000      	b.n	8015cb2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015cb0:	2301      	movs	r3, #1
}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	3710      	adds	r7, #16
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	20001dc0 	.word	0x20001dc0

08015cc0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b084      	sub	sp, #16
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015cca:	4b16      	ldr	r3, [pc, #88]	; (8015d24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015ccc:	685b      	ldr	r3, [r3, #4]
 8015cce:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8015cd0:	4a14      	ldr	r2, [pc, #80]	; (8015d24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015cd2:	79fb      	ldrb	r3, [r7, #7]
 8015cd4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015cd8:	4b12      	ldr	r3, [pc, #72]	; (8015d24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f7ff fec6 	bl	8015a70 <IsListEmpty>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	f083 0301 	eor.w	r3, r3, #1
 8015cea:	b2db      	uxtb	r3, r3
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d015      	beq.n	8015d1c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	79fa      	ldrb	r2, [r7, #7]
 8015cf4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	78db      	ldrb	r3, [r3, #3]
 8015cfa:	f083 0301 	eor.w	r3, r3, #1
 8015cfe:	b2db      	uxtb	r3, r3
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d002      	beq.n	8015d0a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	2201      	movs	r2, #1
 8015d08:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8015d0a:	68f8      	ldr	r0, [r7, #12]
 8015d0c:	f7ff fe98 	bl	8015a40 <IncreaseBufferPointer>
 8015d10:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015d12:	4b04      	ldr	r3, [pc, #16]	; (8015d24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015d14:	689b      	ldr	r3, [r3, #8]
 8015d16:	68fa      	ldr	r2, [r7, #12]
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d1e9      	bne.n	8015cf0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8015d1c:	bf00      	nop
 8015d1e:	3710      	adds	r7, #16
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	20001dc0 	.word	0x20001dc0

08015d28 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b082      	sub	sp, #8
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	4603      	mov	r3, r0
 8015d30:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8015d32:	4b09      	ldr	r3, [pc, #36]	; (8015d58 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015d34:	6859      	ldr	r1, [r3, #4]
 8015d36:	4b08      	ldr	r3, [pc, #32]	; (8015d58 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015d38:	689a      	ldr	r2, [r3, #8]
 8015d3a:	79fb      	ldrb	r3, [r7, #7]
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f7ff feb7 	bl	8015ab0 <GetElement>
 8015d42:	4603      	mov	r3, r0
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d001      	beq.n	8015d4c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8015d48:	2301      	movs	r3, #1
 8015d4a:	e000      	b.n	8015d4e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8015d4c:	2300      	movs	r3, #0
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3708      	adds	r7, #8
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	20001dc0 	.word	0x20001dc0

08015d5c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b084      	sub	sp, #16
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015d64:	4b22      	ldr	r3, [pc, #136]	; (8015df0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d6a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8015d70:	2300      	movs	r3, #0
 8015d72:	73fb      	strb	r3, [r7, #15]
 8015d74:	e032      	b.n	8015ddc <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015d76:	4b1e      	ldr	r3, [pc, #120]	; (8015df0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	781a      	ldrb	r2, [r3, #0]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015d80:	4b1b      	ldr	r3, [pc, #108]	; (8015df0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d82:	685b      	ldr	r3, [r3, #4]
 8015d84:	785a      	ldrb	r2, [r3, #1]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015d8a:	4b19      	ldr	r3, [pc, #100]	; (8015df0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	789b      	ldrb	r3, [r3, #2]
 8015d90:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015d92:	7b7b      	ldrb	r3, [r7, #13]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d005      	beq.n	8015da4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015d98:	4b15      	ldr	r3, [pc, #84]	; (8015df0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	689b      	ldr	r3, [r3, #8]
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	4798      	blx	r3
 8015da2:	e00b      	b.n	8015dbc <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015da4:	4b12      	ldr	r3, [pc, #72]	; (8015df0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015dac:	4b10      	ldr	r3, [pc, #64]	; (8015df0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015dae:	685b      	ldr	r3, [r3, #4]
 8015db0:	785b      	ldrb	r3, [r3, #1]
 8015db2:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015db4:	4b0e      	ldr	r3, [pc, #56]	; (8015df0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8015db6:	685b      	ldr	r3, [r3, #4]
 8015db8:	78db      	ldrb	r3, [r3, #3]
 8015dba:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015dbc:	f7ff ff06 	bl	8015bcc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015dc0:	7b7b      	ldrb	r3, [r7, #13]
 8015dc2:	f083 0301 	eor.w	r3, r3, #1
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d004      	beq.n	8015dd6 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015dcc:	f107 0308 	add.w	r3, r7, #8
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7ff fec1 	bl	8015b58 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015dd6:	7bfb      	ldrb	r3, [r7, #15]
 8015dd8:	3301      	adds	r3, #1
 8015dda:	73fb      	strb	r3, [r7, #15]
 8015ddc:	7bfa      	ldrb	r2, [r7, #15]
 8015dde:	7bbb      	ldrb	r3, [r7, #14]
 8015de0:	429a      	cmp	r2, r3
 8015de2:	d3c8      	bcc.n	8015d76 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8015de4:	bf00      	nop
 8015de6:	bf00      	nop
 8015de8:	3710      	adds	r7, #16
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	20001dc0 	.word	0x20001dc0

08015df4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015df4:	b480      	push	{r7}
 8015df6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015df8:	4b03      	ldr	r3, [pc, #12]	; (8015e08 <LoRaMacConfirmQueueGetCnt+0x14>)
 8015dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	46bd      	mov	sp, r7
 8015e02:	bc80      	pop	{r7}
 8015e04:	4770      	bx	lr
 8015e06:	bf00      	nop
 8015e08:	20001dc0 	.word	0x20001dc0

08015e0c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015e10:	4b06      	ldr	r3, [pc, #24]	; (8015e2c <LoRaMacConfirmQueueIsFull+0x20>)
 8015e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7ff fe3a 	bl	8015a90 <IsListFull>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d001      	beq.n	8015e26 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8015e22:	2301      	movs	r3, #1
 8015e24:	e000      	b.n	8015e28 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8015e26:	2300      	movs	r3, #0
    }
}
 8015e28:	4618      	mov	r0, r3
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	20001dc0 	.word	0x20001dc0

08015e30 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b08e      	sub	sp, #56	; 0x38
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	607b      	str	r3, [r7, #4]
 8015e3a:	460b      	mov	r3, r1
 8015e3c:	817b      	strh	r3, [r7, #10]
 8015e3e:	4613      	mov	r3, r2
 8015e40:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d101      	bne.n	8015e4c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e48:	230a      	movs	r3, #10
 8015e4a:	e086      	b.n	8015f5a <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8015e52:	2301      	movs	r3, #1
 8015e54:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8015e56:	2300      	movs	r3, #0
 8015e58:	623b      	str	r3, [r7, #32]
 8015e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015e5e:	2200      	movs	r2, #0
 8015e60:	601a      	str	r2, [r3, #0]
 8015e62:	605a      	str	r2, [r3, #4]
 8015e64:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8015e66:	2300      	movs	r3, #0
 8015e68:	613b      	str	r3, [r7, #16]
 8015e6a:	f107 0314 	add.w	r3, r7, #20
 8015e6e:	2200      	movs	r2, #0
 8015e70:	601a      	str	r2, [r3, #0]
 8015e72:	605a      	str	r2, [r3, #4]
 8015e74:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8015e76:	2301      	movs	r3, #1
 8015e78:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8015e7a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015e7e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	b2db      	uxtb	r3, r3
 8015e84:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	0a1b      	lsrs	r3, r3, #8
 8015e8a:	b2db      	uxtb	r3, r3
 8015e8c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	0c1b      	lsrs	r3, r3, #16
 8015e92:	b2db      	uxtb	r3, r3
 8015e94:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	0e1b      	lsrs	r3, r3, #24
 8015e9a:	b2db      	uxtb	r3, r3
 8015e9c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8015e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ea6:	0a1b      	lsrs	r3, r3, #8
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015eae:	0c1b      	lsrs	r3, r3, #16
 8015eb0:	b2db      	uxtb	r3, r3
 8015eb2:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015eb6:	0e1b      	lsrs	r3, r3, #24
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015ebc:	e048      	b.n	8015f50 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8015ebe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015ec0:	b2db      	uxtb	r3, r3
 8015ec2:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015ec4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015ec6:	3301      	adds	r3, #1
 8015ec8:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015eca:	f107 0320 	add.w	r3, r7, #32
 8015ece:	7a7a      	ldrb	r2, [r7, #9]
 8015ed0:	f107 0010 	add.w	r0, r7, #16
 8015ed4:	2110      	movs	r1, #16
 8015ed6:	f7f9 f846 	bl	800ef66 <SecureElementAesEncrypt>
 8015eda:	4603      	mov	r3, r0
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d001      	beq.n	8015ee4 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ee0:	230f      	movs	r3, #15
 8015ee2:	e03a      	b.n	8015f5a <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015eea:	e01e      	b.n	8015f2a <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015ef4:	4413      	add	r3, r2
 8015ef6:	461a      	mov	r2, r3
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	4413      	add	r3, r2
 8015efc:	7819      	ldrb	r1, [r3, #0]
 8015efe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f02:	3338      	adds	r3, #56	; 0x38
 8015f04:	443b      	add	r3, r7
 8015f06:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8015f0a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8015f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f12:	4403      	add	r3, r0
 8015f14:	4618      	mov	r0, r3
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	4403      	add	r3, r0
 8015f1a:	404a      	eors	r2, r1
 8015f1c:	b2d2      	uxtb	r2, r2
 8015f1e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015f20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f24:	3301      	adds	r3, #1
 8015f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f2e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015f32:	2a10      	cmp	r2, #16
 8015f34:	bfa8      	it	ge
 8015f36:	2210      	movge	r2, #16
 8015f38:	b212      	sxth	r2, r2
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	dbd6      	blt.n	8015eec <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8015f3e:	897b      	ldrh	r3, [r7, #10]
 8015f40:	3b10      	subs	r3, #16
 8015f42:	b29b      	uxth	r3, r3
 8015f44:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8015f46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015f4a:	3310      	adds	r3, #16
 8015f4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8015f50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	dcb2      	bgt.n	8015ebe <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015f58:	2300      	movs	r3, #0
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3738      	adds	r7, #56	; 0x38
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}

08015f62 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015f62:	b490      	push	{r4, r7}
 8015f64:	b082      	sub	sp, #8
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	4604      	mov	r4, r0
 8015f6a:	4608      	mov	r0, r1
 8015f6c:	4611      	mov	r1, r2
 8015f6e:	461a      	mov	r2, r3
 8015f70:	4623      	mov	r3, r4
 8015f72:	80fb      	strh	r3, [r7, #6]
 8015f74:	4603      	mov	r3, r0
 8015f76:	717b      	strb	r3, [r7, #5]
 8015f78:	460b      	mov	r3, r1
 8015f7a:	713b      	strb	r3, [r7, #4]
 8015f7c:	4613      	mov	r3, r2
 8015f7e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8015f80:	69bb      	ldr	r3, [r7, #24]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d101      	bne.n	8015f8a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f86:	230a      	movs	r3, #10
 8015f88:	e04e      	b.n	8016028 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8015f8a:	69bb      	ldr	r3, [r7, #24]
 8015f8c:	2249      	movs	r2, #73	; 0x49
 8015f8e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8015f90:	69bb      	ldr	r3, [r7, #24]
 8015f92:	3301      	adds	r3, #1
 8015f94:	2200      	movs	r2, #0
 8015f96:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015f98:	69bb      	ldr	r3, [r7, #24]
 8015f9a:	3302      	adds	r3, #2
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015fa0:	69bb      	ldr	r3, [r7, #24]
 8015fa2:	3303      	adds	r3, #3
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015fa8:	69bb      	ldr	r3, [r7, #24]
 8015faa:	3304      	adds	r3, #4
 8015fac:	2200      	movs	r2, #0
 8015fae:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015fb0:	69bb      	ldr	r3, [r7, #24]
 8015fb2:	3305      	adds	r3, #5
 8015fb4:	78fa      	ldrb	r2, [r7, #3]
 8015fb6:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	3306      	adds	r3, #6
 8015fbc:	693a      	ldr	r2, [r7, #16]
 8015fbe:	b2d2      	uxtb	r2, r2
 8015fc0:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015fc2:	693b      	ldr	r3, [r7, #16]
 8015fc4:	0a1a      	lsrs	r2, r3, #8
 8015fc6:	69bb      	ldr	r3, [r7, #24]
 8015fc8:	3307      	adds	r3, #7
 8015fca:	b2d2      	uxtb	r2, r2
 8015fcc:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	0c1a      	lsrs	r2, r3, #16
 8015fd2:	69bb      	ldr	r3, [r7, #24]
 8015fd4:	3308      	adds	r3, #8
 8015fd6:	b2d2      	uxtb	r2, r2
 8015fd8:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	0e1a      	lsrs	r2, r3, #24
 8015fde:	69bb      	ldr	r3, [r7, #24]
 8015fe0:	3309      	adds	r3, #9
 8015fe2:	b2d2      	uxtb	r2, r2
 8015fe4:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015fe6:	69bb      	ldr	r3, [r7, #24]
 8015fe8:	330a      	adds	r3, #10
 8015fea:	697a      	ldr	r2, [r7, #20]
 8015fec:	b2d2      	uxtb	r2, r2
 8015fee:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	0a1a      	lsrs	r2, r3, #8
 8015ff4:	69bb      	ldr	r3, [r7, #24]
 8015ff6:	330b      	adds	r3, #11
 8015ff8:	b2d2      	uxtb	r2, r2
 8015ffa:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	0c1a      	lsrs	r2, r3, #16
 8016000:	69bb      	ldr	r3, [r7, #24]
 8016002:	330c      	adds	r3, #12
 8016004:	b2d2      	uxtb	r2, r2
 8016006:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016008:	697b      	ldr	r3, [r7, #20]
 801600a:	0e1a      	lsrs	r2, r3, #24
 801600c:	69bb      	ldr	r3, [r7, #24]
 801600e:	330d      	adds	r3, #13
 8016010:	b2d2      	uxtb	r2, r2
 8016012:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016014:	69bb      	ldr	r3, [r7, #24]
 8016016:	330e      	adds	r3, #14
 8016018:	2200      	movs	r2, #0
 801601a:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801601c:	69bb      	ldr	r3, [r7, #24]
 801601e:	330f      	adds	r3, #15
 8016020:	88fa      	ldrh	r2, [r7, #6]
 8016022:	b2d2      	uxtb	r2, r2
 8016024:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016026:	2300      	movs	r3, #0
}
 8016028:	4618      	mov	r0, r3
 801602a:	3708      	adds	r7, #8
 801602c:	46bd      	mov	sp, r7
 801602e:	bc90      	pop	{r4, r7}
 8016030:	4770      	bx	lr

08016032 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8016032:	b590      	push	{r4, r7, lr}
 8016034:	b08b      	sub	sp, #44	; 0x2c
 8016036:	af04      	add	r7, sp, #16
 8016038:	6078      	str	r0, [r7, #4]
 801603a:	4608      	mov	r0, r1
 801603c:	4611      	mov	r1, r2
 801603e:	461a      	mov	r2, r3
 8016040:	4603      	mov	r3, r0
 8016042:	807b      	strh	r3, [r7, #2]
 8016044:	460b      	mov	r3, r1
 8016046:	707b      	strb	r3, [r7, #1]
 8016048:	4613      	mov	r3, r2
 801604a:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d002      	beq.n	8016058 <ComputeCmacB0+0x26>
 8016052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016054:	2b00      	cmp	r3, #0
 8016056:	d101      	bne.n	801605c <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016058:	230a      	movs	r3, #10
 801605a:	e024      	b.n	80160a6 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801605c:	887b      	ldrh	r3, [r7, #2]
 801605e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016062:	d901      	bls.n	8016068 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016064:	230e      	movs	r3, #14
 8016066:	e01e      	b.n	80160a6 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016068:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 801606c:	783a      	ldrb	r2, [r7, #0]
 801606e:	7879      	ldrb	r1, [r7, #1]
 8016070:	8878      	ldrh	r0, [r7, #2]
 8016072:	f107 0308 	add.w	r3, r7, #8
 8016076:	9302      	str	r3, [sp, #8]
 8016078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801607a:	9301      	str	r3, [sp, #4]
 801607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801607e:	9300      	str	r3, [sp, #0]
 8016080:	4623      	mov	r3, r4
 8016082:	f7ff ff6e 	bl	8015f62 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016086:	7879      	ldrb	r1, [r7, #1]
 8016088:	887a      	ldrh	r2, [r7, #2]
 801608a:	f107 0008 	add.w	r0, r7, #8
 801608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016090:	9300      	str	r3, [sp, #0]
 8016092:	460b      	mov	r3, r1
 8016094:	6879      	ldr	r1, [r7, #4]
 8016096:	f7f8 ff19 	bl	800eecc <SecureElementComputeAesCmac>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d001      	beq.n	80160a4 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80160a0:	230f      	movs	r3, #15
 80160a2:	e000      	b.n	80160a6 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80160a4:	2300      	movs	r3, #0
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	371c      	adds	r7, #28
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd90      	pop	{r4, r7, pc}

080160ae <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80160ae:	b590      	push	{r4, r7, lr}
 80160b0:	b0cd      	sub	sp, #308	; 0x134
 80160b2:	af04      	add	r7, sp, #16
 80160b4:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80160b8:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80160bc:	6020      	str	r0, [r4, #0]
 80160be:	460c      	mov	r4, r1
 80160c0:	4610      	mov	r0, r2
 80160c2:	4619      	mov	r1, r3
 80160c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160c8:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80160cc:	4622      	mov	r2, r4
 80160ce:	801a      	strh	r2, [r3, #0]
 80160d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160d4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80160d8:	4602      	mov	r2, r0
 80160da:	701a      	strb	r2, [r3, #0]
 80160dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80160e4:	460a      	mov	r2, r1
 80160e6:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80160e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d101      	bne.n	80160fa <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80160f6:	230a      	movs	r3, #10
 80160f8:	e063      	b.n	80161c2 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80160fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160fe:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016102:	881b      	ldrh	r3, [r3, #0]
 8016104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016108:	d901      	bls.n	801610e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801610a:	230e      	movs	r3, #14
 801610c:	e059      	b.n	80161c2 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801610e:	f107 030c 	add.w	r3, r7, #12
 8016112:	f44f 7288 	mov.w	r2, #272	; 0x110
 8016116:	2100      	movs	r1, #0
 8016118:	4618      	mov	r0, r3
 801611a:	f003 fbd7 	bl	80198cc <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801611e:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8016122:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016126:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801612a:	781a      	ldrb	r2, [r3, #0]
 801612c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016130:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016134:	7819      	ldrb	r1, [r3, #0]
 8016136:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801613a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801613e:	8818      	ldrh	r0, [r3, #0]
 8016140:	f107 030c 	add.w	r3, r7, #12
 8016144:	9302      	str	r3, [sp, #8]
 8016146:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801614a:	9301      	str	r3, [sp, #4]
 801614c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016150:	9300      	str	r3, [sp, #0]
 8016152:	4623      	mov	r3, r4
 8016154:	f7ff ff05 	bl	8015f62 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016158:	f107 030c 	add.w	r3, r7, #12
 801615c:	3310      	adds	r3, #16
 801615e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8016162:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8016166:	8812      	ldrh	r2, [r2, #0]
 8016168:	f507 7190 	add.w	r1, r7, #288	; 0x120
 801616c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016170:	6809      	ldr	r1, [r1, #0]
 8016172:	4618      	mov	r0, r3
 8016174:	f003 fb6f 	bl	8019856 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016178:	2306      	movs	r3, #6
 801617a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801617e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016182:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016186:	881b      	ldrh	r3, [r3, #0]
 8016188:	3310      	adds	r3, #16
 801618a:	b299      	uxth	r1, r3
 801618c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016190:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	f107 000c 	add.w	r0, r7, #12
 801619a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801619e:	f7f8 feb3 	bl	800ef08 <SecureElementVerifyAesCmac>
 80161a2:	4603      	mov	r3, r0
 80161a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80161a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d101      	bne.n	80161b4 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80161b0:	2300      	movs	r3, #0
 80161b2:	e006      	b.n	80161c2 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80161b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80161b8:	2b01      	cmp	r3, #1
 80161ba:	d101      	bne.n	80161c0 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80161bc:	2301      	movs	r3, #1
 80161be:	e000      	b.n	80161c2 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80161c0:	230f      	movs	r3, #15
}
 80161c2:	4618      	mov	r0, r3
 80161c4:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd90      	pop	{r4, r7, pc}

080161cc <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80161cc:	b480      	push	{r7}
 80161ce:	b085      	sub	sp, #20
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	4603      	mov	r3, r0
 80161d4:	6039      	str	r1, [r7, #0]
 80161d6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80161d8:	2300      	movs	r3, #0
 80161da:	73fb      	strb	r3, [r7, #15]
 80161dc:	e011      	b.n	8016202 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80161de:	7bfb      	ldrb	r3, [r7, #15]
 80161e0:	4a0c      	ldr	r2, [pc, #48]	; (8016214 <GetKeyAddrItem+0x48>)
 80161e2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80161e6:	79fa      	ldrb	r2, [r7, #7]
 80161e8:	429a      	cmp	r2, r3
 80161ea:	d107      	bne.n	80161fc <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80161ec:	7bfb      	ldrb	r3, [r7, #15]
 80161ee:	009b      	lsls	r3, r3, #2
 80161f0:	4a08      	ldr	r2, [pc, #32]	; (8016214 <GetKeyAddrItem+0x48>)
 80161f2:	441a      	add	r2, r3
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80161f8:	2300      	movs	r3, #0
 80161fa:	e006      	b.n	801620a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80161fc:	7bfb      	ldrb	r3, [r7, #15]
 80161fe:	3301      	adds	r3, #1
 8016200:	73fb      	strb	r3, [r7, #15]
 8016202:	7bfb      	ldrb	r3, [r7, #15]
 8016204:	2b01      	cmp	r3, #1
 8016206:	d9ea      	bls.n	80161de <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016208:	230c      	movs	r3, #12
}
 801620a:	4618      	mov	r0, r3
 801620c:	3714      	adds	r7, #20
 801620e:	46bd      	mov	sp, r7
 8016210:	bc80      	pop	{r7}
 8016212:	4770      	bx	lr
 8016214:	2000013c 	.word	0x2000013c

08016218 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b088      	sub	sp, #32
 801621c:	af00      	add	r7, sp, #0
 801621e:	60b9      	str	r1, [r7, #8]
 8016220:	607a      	str	r2, [r7, #4]
 8016222:	461a      	mov	r2, r3
 8016224:	4603      	mov	r3, r0
 8016226:	73fb      	strb	r3, [r7, #15]
 8016228:	4613      	mov	r3, r2
 801622a:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 801622c:	2300      	movs	r3, #0
 801622e:	613b      	str	r3, [r7, #16]
 8016230:	f107 0314 	add.w	r3, r7, #20
 8016234:	2200      	movs	r2, #0
 8016236:	601a      	str	r2, [r3, #0]
 8016238:	605a      	str	r2, [r3, #4]
 801623a:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 801623c:	7bfb      	ldrb	r3, [r7, #15]
 801623e:	2b02      	cmp	r3, #2
 8016240:	d002      	beq.n	8016248 <DeriveSessionKey10x+0x30>
 8016242:	2b03      	cmp	r3, #3
 8016244:	d003      	beq.n	801624e <DeriveSessionKey10x+0x36>
 8016246:	e005      	b.n	8016254 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8016248:	2301      	movs	r3, #1
 801624a:	743b      	strb	r3, [r7, #16]
            break;
 801624c:	e004      	b.n	8016258 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801624e:	2302      	movs	r3, #2
 8016250:	743b      	strb	r3, [r7, #16]
            break;
 8016252:	e001      	b.n	8016258 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016254:	230b      	movs	r3, #11
 8016256:	e02a      	b.n	80162ae <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	b2db      	uxtb	r3, r3
 801625c:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801625e:	68bb      	ldr	r3, [r7, #8]
 8016260:	0a1b      	lsrs	r3, r3, #8
 8016262:	b2db      	uxtb	r3, r3
 8016264:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	0c1b      	lsrs	r3, r3, #16
 801626a:	b2db      	uxtb	r3, r3
 801626c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	b2db      	uxtb	r3, r3
 8016272:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	0a1b      	lsrs	r3, r3, #8
 8016278:	b2db      	uxtb	r3, r3
 801627a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	0c1b      	lsrs	r3, r3, #16
 8016280:	b2db      	uxtb	r3, r3
 8016282:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016284:	89bb      	ldrh	r3, [r7, #12]
 8016286:	b2db      	uxtb	r3, r3
 8016288:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801628a:	89bb      	ldrh	r3, [r7, #12]
 801628c:	0a1b      	lsrs	r3, r3, #8
 801628e:	b29b      	uxth	r3, r3
 8016290:	b2db      	uxtb	r3, r3
 8016292:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016294:	7bfa      	ldrb	r2, [r7, #15]
 8016296:	f107 0310 	add.w	r3, r7, #16
 801629a:	2101      	movs	r1, #1
 801629c:	4618      	mov	r0, r3
 801629e:	f7f8 fec9 	bl	800f034 <SecureElementDeriveAndStoreKey>
 80162a2:	4603      	mov	r3, r0
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d001      	beq.n	80162ac <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80162a8:	230f      	movs	r3, #15
 80162aa:	e000      	b.n	80162ae <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80162ac:	2300      	movs	r3, #0
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3720      	adds	r7, #32
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
	...

080162b8 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80162b8:	b480      	push	{r7}
 80162ba:	b083      	sub	sp, #12
 80162bc:	af00      	add	r7, sp, #0
 80162be:	4603      	mov	r3, r0
 80162c0:	6039      	str	r1, [r7, #0]
 80162c2:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d101      	bne.n	80162ce <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80162ca:	230a      	movs	r3, #10
 80162cc:	e03b      	b.n	8016346 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 80162ce:	79fb      	ldrb	r3, [r7, #7]
 80162d0:	3b01      	subs	r3, #1
 80162d2:	2b03      	cmp	r3, #3
 80162d4:	d834      	bhi.n	8016340 <GetLastFcntDown+0x88>
 80162d6:	a201      	add	r2, pc, #4	; (adr r2, 80162dc <GetLastFcntDown+0x24>)
 80162d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162dc:	080162ed 	.word	0x080162ed
 80162e0:	08016305 	.word	0x08016305
 80162e4:	0801631d 	.word	0x0801631d
 80162e8:	08016335 	.word	0x08016335
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80162ec:	4b18      	ldr	r3, [pc, #96]	; (8016350 <GetLastFcntDown+0x98>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	691a      	ldr	r2, [r3, #16]
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80162f6:	4b16      	ldr	r3, [pc, #88]	; (8016350 <GetLastFcntDown+0x98>)
 80162f8:	681a      	ldr	r2, [r3, #0]
 80162fa:	4b15      	ldr	r3, [pc, #84]	; (8016350 <GetLastFcntDown+0x98>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	6912      	ldr	r2, [r2, #16]
 8016300:	621a      	str	r2, [r3, #32]
            break;
 8016302:	e01f      	b.n	8016344 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016304:	4b12      	ldr	r3, [pc, #72]	; (8016350 <GetLastFcntDown+0x98>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	695a      	ldr	r2, [r3, #20]
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801630e:	4b10      	ldr	r3, [pc, #64]	; (8016350 <GetLastFcntDown+0x98>)
 8016310:	681a      	ldr	r2, [r3, #0]
 8016312:	4b0f      	ldr	r3, [pc, #60]	; (8016350 <GetLastFcntDown+0x98>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	6952      	ldr	r2, [r2, #20]
 8016318:	621a      	str	r2, [r3, #32]
            break;
 801631a:	e013      	b.n	8016344 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801631c:	4b0c      	ldr	r3, [pc, #48]	; (8016350 <GetLastFcntDown+0x98>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	699a      	ldr	r2, [r3, #24]
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016326:	4b0a      	ldr	r3, [pc, #40]	; (8016350 <GetLastFcntDown+0x98>)
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	4b09      	ldr	r3, [pc, #36]	; (8016350 <GetLastFcntDown+0x98>)
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	6992      	ldr	r2, [r2, #24]
 8016330:	621a      	str	r2, [r3, #32]
            break;
 8016332:	e007      	b.n	8016344 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016334:	4b06      	ldr	r3, [pc, #24]	; (8016350 <GetLastFcntDown+0x98>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	69da      	ldr	r2, [r3, #28]
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	601a      	str	r2, [r3, #0]
            break;
 801633e:	e001      	b.n	8016344 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016340:	2305      	movs	r3, #5
 8016342:	e000      	b.n	8016346 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016344:	2300      	movs	r3, #0
}
 8016346:	4618      	mov	r0, r3
 8016348:	370c      	adds	r7, #12
 801634a:	46bd      	mov	sp, r7
 801634c:	bc80      	pop	{r7}
 801634e:	4770      	bx	lr
 8016350:	20001de4 	.word	0x20001de4

08016354 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b084      	sub	sp, #16
 8016358:	af00      	add	r7, sp, #0
 801635a:	4603      	mov	r3, r0
 801635c:	6039      	str	r1, [r7, #0]
 801635e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016360:	2300      	movs	r3, #0
 8016362:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016364:	f107 020c 	add.w	r2, r7, #12
 8016368:	79fb      	ldrb	r3, [r7, #7]
 801636a:	4611      	mov	r1, r2
 801636c:	4618      	mov	r0, r3
 801636e:	f7ff ffa3 	bl	80162b8 <GetLastFcntDown>
 8016372:	4603      	mov	r3, r0
 8016374:	2b00      	cmp	r3, #0
 8016376:	d001      	beq.n	801637c <CheckFCntDown+0x28>
    {
        return false;
 8016378:	2300      	movs	r3, #0
 801637a:	e00a      	b.n	8016392 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	683a      	ldr	r2, [r7, #0]
 8016380:	429a      	cmp	r2, r3
 8016382:	d803      	bhi.n	801638c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8016384:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801638a:	d101      	bne.n	8016390 <CheckFCntDown+0x3c>
    {
        return true;
 801638c:	2301      	movs	r3, #1
 801638e:	e000      	b.n	8016392 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016390:	2300      	movs	r3, #0
    }
}
 8016392:	4618      	mov	r0, r3
 8016394:	3710      	adds	r7, #16
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}
	...

0801639c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801639c:	b480      	push	{r7}
 801639e:	b083      	sub	sp, #12
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	4603      	mov	r3, r0
 80163a4:	6039      	str	r1, [r7, #0]
 80163a6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80163a8:	79fb      	ldrb	r3, [r7, #7]
 80163aa:	3b01      	subs	r3, #1
 80163ac:	2b03      	cmp	r3, #3
 80163ae:	d81f      	bhi.n	80163f0 <UpdateFCntDown+0x54>
 80163b0:	a201      	add	r2, pc, #4	; (adr r2, 80163b8 <UpdateFCntDown+0x1c>)
 80163b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163b6:	bf00      	nop
 80163b8:	080163c9 	.word	0x080163c9
 80163bc:	080163d3 	.word	0x080163d3
 80163c0:	080163dd 	.word	0x080163dd
 80163c4:	080163e7 	.word	0x080163e7
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80163c8:	4b0c      	ldr	r3, [pc, #48]	; (80163fc <UpdateFCntDown+0x60>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	683a      	ldr	r2, [r7, #0]
 80163ce:	611a      	str	r2, [r3, #16]
            break;
 80163d0:	e00f      	b.n	80163f2 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80163d2:	4b0a      	ldr	r3, [pc, #40]	; (80163fc <UpdateFCntDown+0x60>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	683a      	ldr	r2, [r7, #0]
 80163d8:	615a      	str	r2, [r3, #20]
            break;
 80163da:	e00a      	b.n	80163f2 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80163dc:	4b07      	ldr	r3, [pc, #28]	; (80163fc <UpdateFCntDown+0x60>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	683a      	ldr	r2, [r7, #0]
 80163e2:	619a      	str	r2, [r3, #24]
            break;
 80163e4:	e005      	b.n	80163f2 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80163e6:	4b05      	ldr	r3, [pc, #20]	; (80163fc <UpdateFCntDown+0x60>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	683a      	ldr	r2, [r7, #0]
 80163ec:	61da      	str	r2, [r3, #28]
            break;
 80163ee:	e000      	b.n	80163f2 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80163f0:	bf00      	nop
    }
}
 80163f2:	bf00      	nop
 80163f4:	370c      	adds	r7, #12
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bc80      	pop	{r7}
 80163fa:	4770      	bx	lr
 80163fc:	20001de4 	.word	0x20001de4

08016400 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016400:	b480      	push	{r7}
 8016402:	b083      	sub	sp, #12
 8016404:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016406:	4b18      	ldr	r3, [pc, #96]	; (8016468 <ResetFCnts+0x68>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	2200      	movs	r2, #0
 801640c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801640e:	4b16      	ldr	r3, [pc, #88]	; (8016468 <ResetFCnts+0x68>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	f04f 32ff 	mov.w	r2, #4294967295
 8016416:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016418:	4b13      	ldr	r3, [pc, #76]	; (8016468 <ResetFCnts+0x68>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	f04f 32ff 	mov.w	r2, #4294967295
 8016420:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016422:	4b11      	ldr	r3, [pc, #68]	; (8016468 <ResetFCnts+0x68>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f04f 32ff 	mov.w	r2, #4294967295
 801642a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801642c:	4b0e      	ldr	r3, [pc, #56]	; (8016468 <ResetFCnts+0x68>)
 801642e:	681a      	ldr	r2, [r3, #0]
 8016430:	4b0d      	ldr	r3, [pc, #52]	; (8016468 <ResetFCnts+0x68>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	6992      	ldr	r2, [r2, #24]
 8016436:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016438:	2300      	movs	r3, #0
 801643a:	607b      	str	r3, [r7, #4]
 801643c:	e00b      	b.n	8016456 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 801643e:	4b0a      	ldr	r3, [pc, #40]	; (8016468 <ResetFCnts+0x68>)
 8016440:	681a      	ldr	r2, [r3, #0]
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	3306      	adds	r3, #6
 8016446:	009b      	lsls	r3, r3, #2
 8016448:	4413      	add	r3, r2
 801644a:	f04f 32ff 	mov.w	r2, #4294967295
 801644e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	3301      	adds	r3, #1
 8016454:	607b      	str	r3, [r7, #4]
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	2b00      	cmp	r3, #0
 801645a:	ddf0      	ble.n	801643e <ResetFCnts+0x3e>
    }
}
 801645c:	bf00      	nop
 801645e:	bf00      	nop
 8016460:	370c      	adds	r7, #12
 8016462:	46bd      	mov	sp, r7
 8016464:	bc80      	pop	{r7}
 8016466:	4770      	bx	lr
 8016468:	20001de4 	.word	0x20001de4

0801646c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d101      	bne.n	801647e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801647a:	2309      	movs	r3, #9
 801647c:	e01c      	b.n	80164b8 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801647e:	4a10      	ldr	r2, [pc, #64]	; (80164c0 <LoRaMacCryptoInit+0x54>)
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016484:	4b0e      	ldr	r3, [pc, #56]	; (80164c0 <LoRaMacCryptoInit+0x54>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	2228      	movs	r2, #40	; 0x28
 801648a:	2100      	movs	r1, #0
 801648c:	4618      	mov	r0, r3
 801648e:	f003 fa1d 	bl	80198cc <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016492:	4b0b      	ldr	r3, [pc, #44]	; (80164c0 <LoRaMacCryptoInit+0x54>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2201      	movs	r2, #1
 8016498:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801649a:	4b09      	ldr	r3, [pc, #36]	; (80164c0 <LoRaMacCryptoInit+0x54>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	2201      	movs	r2, #1
 80164a0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80164a2:	4b07      	ldr	r3, [pc, #28]	; (80164c0 <LoRaMacCryptoInit+0x54>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	2201      	movs	r2, #1
 80164a8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80164aa:	4b05      	ldr	r3, [pc, #20]	; (80164c0 <LoRaMacCryptoInit+0x54>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	2200      	movs	r2, #0
 80164b0:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80164b2:	f7ff ffa5 	bl	8016400 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80164b6:	2300      	movs	r3, #0
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3708      	adds	r7, #8
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd80      	pop	{r7, pc}
 80164c0:	20001de4 	.word	0x20001de4

080164c4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80164c4:	b480      	push	{r7}
 80164c6:	b083      	sub	sp, #12
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80164cc:	4b04      	ldr	r3, [pc, #16]	; (80164e0 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	687a      	ldr	r2, [r7, #4]
 80164d2:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80164d4:	2300      	movs	r3, #0
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	370c      	adds	r7, #12
 80164da:	46bd      	mov	sp, r7
 80164dc:	bc80      	pop	{r7}
 80164de:	4770      	bx	lr
 80164e0:	20001de4 	.word	0x20001de4

080164e4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80164e4:	b480      	push	{r7}
 80164e6:	b083      	sub	sp, #12
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d101      	bne.n	80164f6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80164f2:	230a      	movs	r3, #10
 80164f4:	e006      	b.n	8016504 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80164f6:	4b06      	ldr	r3, [pc, #24]	; (8016510 <LoRaMacCryptoGetFCntUp+0x2c>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	68db      	ldr	r3, [r3, #12]
 80164fc:	1c5a      	adds	r2, r3, #1
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016502:	2300      	movs	r3, #0
}
 8016504:	4618      	mov	r0, r3
 8016506:	370c      	adds	r7, #12
 8016508:	46bd      	mov	sp, r7
 801650a:	bc80      	pop	{r7}
 801650c:	4770      	bx	lr
 801650e:	bf00      	nop
 8016510:	20001de4 	.word	0x20001de4

08016514 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016518:	b08a      	sub	sp, #40	; 0x28
 801651a:	af00      	add	r7, sp, #0
 801651c:	613a      	str	r2, [r7, #16]
 801651e:	60fb      	str	r3, [r7, #12]
 8016520:	4603      	mov	r3, r0
 8016522:	75fb      	strb	r3, [r7, #23]
 8016524:	460b      	mov	r3, r1
 8016526:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016528:	2300      	movs	r3, #0
 801652a:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 801652c:	2300      	movs	r3, #0
 801652e:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016530:	2313      	movs	r3, #19
 8016532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d101      	bne.n	8016540 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801653c:	230a      	movs	r3, #10
 801653e:	e057      	b.n	80165f0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016540:	f107 021c 	add.w	r2, r7, #28
 8016544:	7dfb      	ldrb	r3, [r7, #23]
 8016546:	4611      	mov	r1, r2
 8016548:	4618      	mov	r0, r3
 801654a:	f7ff feb5 	bl	80162b8 <GetLastFcntDown>
 801654e:	4603      	mov	r3, r0
 8016550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016558:	2b00      	cmp	r3, #0
 801655a:	d002      	beq.n	8016562 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 801655c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016560:	e046      	b.n	80165f0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8016562:	69fb      	ldr	r3, [r7, #28]
 8016564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016568:	d103      	bne.n	8016572 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	693a      	ldr	r2, [r7, #16]
 801656e:	601a      	str	r2, [r3, #0]
 8016570:	e01e      	b.n	80165b0 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016572:	69fb      	ldr	r3, [r7, #28]
 8016574:	b29b      	uxth	r3, r3
 8016576:	693a      	ldr	r2, [r7, #16]
 8016578:	1ad3      	subs	r3, r2, r3
 801657a:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 801657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801657e:	2b00      	cmp	r3, #0
 8016580:	dd05      	ble.n	801658e <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016582:	69fa      	ldr	r2, [r7, #28]
 8016584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016586:	441a      	add	r2, r3
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	601a      	str	r2, [r3, #0]
 801658c:	e010      	b.n	80165b0 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016590:	2b00      	cmp	r3, #0
 8016592:	d104      	bne.n	801659e <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016594:	69fa      	ldr	r2, [r7, #28]
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801659a:	2307      	movs	r3, #7
 801659c:	e028      	b.n	80165f0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801659e:	69fb      	ldr	r3, [r7, #28]
 80165a0:	0c1b      	lsrs	r3, r3, #16
 80165a2:	041b      	lsls	r3, r3, #16
 80165a4:	693a      	ldr	r2, [r7, #16]
 80165a6:	4413      	add	r3, r2
 80165a8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80165b0:	4b12      	ldr	r3, [pc, #72]	; (80165fc <LoRaMacCryptoGetFCntDown+0xe8>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	789b      	ldrb	r3, [r3, #2]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d119      	bne.n	80165ee <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	2200      	movs	r2, #0
 80165c0:	603b      	str	r3, [r7, #0]
 80165c2:	607a      	str	r2, [r7, #4]
 80165c4:	69fb      	ldr	r3, [r7, #28]
 80165c6:	2200      	movs	r2, #0
 80165c8:	469a      	mov	sl, r3
 80165ca:	4693      	mov	fp, r2
 80165cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80165d0:	4611      	mov	r1, r2
 80165d2:	ebb1 040a 	subs.w	r4, r1, sl
 80165d6:	eb63 050b 	sbc.w	r5, r3, fp
 80165da:	8abb      	ldrh	r3, [r7, #20]
 80165dc:	2200      	movs	r2, #0
 80165de:	4698      	mov	r8, r3
 80165e0:	4691      	mov	r9, r2
 80165e2:	4544      	cmp	r4, r8
 80165e4:	eb75 0309 	sbcs.w	r3, r5, r9
 80165e8:	db01      	blt.n	80165ee <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80165ea:	2308      	movs	r3, #8
 80165ec:	e000      	b.n	80165f0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80165ee:	2300      	movs	r3, #0
}
 80165f0:	4618      	mov	r0, r3
 80165f2:	3728      	adds	r7, #40	; 0x28
 80165f4:	46bd      	mov	sp, r7
 80165f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80165fa:	bf00      	nop
 80165fc:	20001de4 	.word	0x20001de4

08016600 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016600:	b480      	push	{r7}
 8016602:	b085      	sub	sp, #20
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d101      	bne.n	8016612 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801660e:	230a      	movs	r3, #10
 8016610:	e017      	b.n	8016642 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016612:	2300      	movs	r3, #0
 8016614:	60fb      	str	r3, [r7, #12]
 8016616:	e010      	b.n	801663a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016618:	4b0c      	ldr	r3, [pc, #48]	; (801664c <LoRaMacCryptoSetMulticastReference+0x4c>)
 801661a:	6819      	ldr	r1, [r3, #0]
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	222c      	movs	r2, #44	; 0x2c
 8016620:	fb02 f303 	mul.w	r3, r2, r3
 8016624:	687a      	ldr	r2, [r7, #4]
 8016626:	4413      	add	r3, r2
 8016628:	68fa      	ldr	r2, [r7, #12]
 801662a:	3206      	adds	r2, #6
 801662c:	0092      	lsls	r2, r2, #2
 801662e:	440a      	add	r2, r1
 8016630:	3204      	adds	r2, #4
 8016632:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	3301      	adds	r3, #1
 8016638:	60fb      	str	r3, [r7, #12]
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	2b00      	cmp	r3, #0
 801663e:	ddeb      	ble.n	8016618 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016640:	2300      	movs	r3, #0
}
 8016642:	4618      	mov	r0, r3
 8016644:	3714      	adds	r7, #20
 8016646:	46bd      	mov	sp, r7
 8016648:	bc80      	pop	{r7}
 801664a:	4770      	bx	lr
 801664c:	20001de4 	.word	0x20001de4

08016650 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b082      	sub	sp, #8
 8016654:	af00      	add	r7, sp, #0
 8016656:	4603      	mov	r3, r0
 8016658:	6039      	str	r1, [r7, #0]
 801665a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801665c:	79fb      	ldrb	r3, [r7, #7]
 801665e:	6839      	ldr	r1, [r7, #0]
 8016660:	4618      	mov	r0, r3
 8016662:	f7f8 fbd5 	bl	800ee10 <SecureElementSetKey>
 8016666:	4603      	mov	r3, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d001      	beq.n	8016670 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801666c:	230f      	movs	r3, #15
 801666e:	e018      	b.n	80166a2 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8016670:	79fb      	ldrb	r3, [r7, #7]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d114      	bne.n	80166a0 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8016676:	4b0d      	ldr	r3, [pc, #52]	; (80166ac <LoRaMacCryptoSetKey+0x5c>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	789b      	ldrb	r3, [r3, #2]
 801667c:	79fa      	ldrb	r2, [r7, #7]
 801667e:	4611      	mov	r1, r2
 8016680:	4618      	mov	r0, r3
 8016682:	f000 fa3f 	bl	8016b04 <LoRaMacCryptoDeriveMcRootKey>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d001      	beq.n	8016690 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801668c:	230f      	movs	r3, #15
 801668e:	e008      	b.n	80166a2 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016690:	2004      	movs	r0, #4
 8016692:	f000 fa62 	bl	8016b5a <LoRaMacCryptoDeriveMcKEKey>
 8016696:	4603      	mov	r3, r0
 8016698:	2b00      	cmp	r3, #0
 801669a:	d001      	beq.n	80166a0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801669c:	230f      	movs	r3, #15
 801669e:	e000      	b.n	80166a2 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80166a0:	2300      	movs	r3, #0
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3708      	adds	r7, #8
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
 80166aa:	bf00      	nop
 80166ac:	20001de4 	.word	0x20001de4

080166b0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b086      	sub	sp, #24
 80166b4:	af02      	add	r7, sp, #8
 80166b6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d101      	bne.n	80166c2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80166be:	230a      	movs	r3, #10
 80166c0:	e033      	b.n	801672a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80166c2:	2301      	movs	r3, #1
 80166c4:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80166c6:	2300      	movs	r3, #0
 80166c8:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80166ca:	f107 0308 	add.w	r3, r7, #8
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7f8 fd6e 	bl	800f1b0 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80166d4:	68ba      	ldr	r2, [r7, #8]
 80166d6:	4b17      	ldr	r3, [pc, #92]	; (8016734 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	b292      	uxth	r2, r2
 80166dc:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80166de:	4b15      	ldr	r3, [pc, #84]	; (8016734 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	889a      	ldrh	r2, [r3, #4]
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f000 fc18 	bl	8016f1e <LoRaMacSerializerJoinRequest>
 80166ee:	4603      	mov	r3, r0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d001      	beq.n	80166f8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80166f4:	2311      	movs	r3, #17
 80166f6:	e018      	b.n	801672a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	6819      	ldr	r1, [r3, #0]
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	3318      	adds	r3, #24
 8016700:	7bfa      	ldrb	r2, [r7, #15]
 8016702:	9300      	str	r3, [sp, #0]
 8016704:	4613      	mov	r3, r2
 8016706:	2213      	movs	r2, #19
 8016708:	2000      	movs	r0, #0
 801670a:	f7f8 fbdf 	bl	800eecc <SecureElementComputeAesCmac>
 801670e:	4603      	mov	r3, r0
 8016710:	2b00      	cmp	r3, #0
 8016712:	d001      	beq.n	8016718 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016714:	230f      	movs	r3, #15
 8016716:	e008      	b.n	801672a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f000 fc00 	bl	8016f1e <LoRaMacSerializerJoinRequest>
 801671e:	4603      	mov	r3, r0
 8016720:	2b00      	cmp	r3, #0
 8016722:	d001      	beq.n	8016728 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016724:	2311      	movs	r3, #17
 8016726:	e000      	b.n	801672a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016728:	2300      	movs	r3, #0
}
 801672a:	4618      	mov	r0, r3
 801672c:	3710      	adds	r7, #16
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	20001de4 	.word	0x20001de4

08016738 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016738:	b590      	push	{r4, r7, lr}
 801673a:	b097      	sub	sp, #92	; 0x5c
 801673c:	af04      	add	r7, sp, #16
 801673e:	4603      	mov	r3, r0
 8016740:	60b9      	str	r1, [r7, #8]
 8016742:	607a      	str	r2, [r7, #4]
 8016744:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d002      	beq.n	8016752 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d101      	bne.n	8016756 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016752:	230a      	movs	r3, #10
 8016754:	e0bd      	b.n	80168d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016756:	2313      	movs	r3, #19
 8016758:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801675c:	2300      	movs	r3, #0
 801675e:	61bb      	str	r3, [r7, #24]
 8016760:	f107 031c 	add.w	r3, r7, #28
 8016764:	221d      	movs	r2, #29
 8016766:	2100      	movs	r1, #0
 8016768:	4618      	mov	r0, r3
 801676a:	f007 fe3f 	bl	801e3ec <memset>
    uint8_t versionMinor         = 0;
 801676e:	2300      	movs	r3, #0
 8016770:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016772:	4b5a      	ldr	r3, [pc, #360]	; (80168dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	889b      	ldrh	r3, [r3, #4]
 8016778:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681c      	ldr	r4, [r3, #0]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	791b      	ldrb	r3, [r3, #4]
 8016784:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016788:	7bf8      	ldrb	r0, [r7, #15]
 801678a:	f107 0217 	add.w	r2, r7, #23
 801678e:	9202      	str	r2, [sp, #8]
 8016790:	f107 0218 	add.w	r2, r7, #24
 8016794:	9201      	str	r2, [sp, #4]
 8016796:	9300      	str	r3, [sp, #0]
 8016798:	4623      	mov	r3, r4
 801679a:	460a      	mov	r2, r1
 801679c:	68b9      	ldr	r1, [r7, #8]
 801679e:	f7f8 fc89 	bl	800f0b4 <SecureElementProcessJoinAccept>
 80167a2:	4603      	mov	r3, r0
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d001      	beq.n	80167ac <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80167a8:	230f      	movs	r3, #15
 80167aa:	e092      	b.n	80168d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	6818      	ldr	r0, [r3, #0]
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	791b      	ldrb	r3, [r3, #4]
 80167b4:	b29a      	uxth	r2, r3
 80167b6:	f107 0318 	add.w	r3, r7, #24
 80167ba:	4619      	mov	r1, r3
 80167bc:	f003 f84b 	bl	8019856 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	f000 f9ed 	bl	8016ba0 <LoRaMacParserJoinAccept>
 80167c6:	4603      	mov	r3, r0
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d001      	beq.n	80167d0 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80167cc:	2310      	movs	r3, #16
 80167ce:	e080      	b.n	80168d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	799b      	ldrb	r3, [r3, #6]
 80167d4:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	79db      	ldrb	r3, [r3, #7]
 80167da:	021b      	lsls	r3, r3, #8
 80167dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80167de:	4313      	orrs	r3, r2
 80167e0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	7a1b      	ldrb	r3, [r3, #8]
 80167e6:	041b      	lsls	r3, r3, #16
 80167e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80167ea:	4313      	orrs	r3, r2
 80167ec:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80167ee:	4b3b      	ldr	r3, [pc, #236]	; (80168dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	689b      	ldr	r3, [r3, #8]
 80167f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80167f6:	429a      	cmp	r2, r3
 80167f8:	d010      	beq.n	801681c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80167fa:	4b38      	ldr	r3, [pc, #224]	; (80168dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016800:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8016802:	7dfb      	ldrb	r3, [r7, #23]
 8016804:	2100      	movs	r1, #0
 8016806:	4618      	mov	r0, r3
 8016808:	f000 f97c 	bl	8016b04 <LoRaMacCryptoDeriveMcRootKey>
 801680c:	4603      	mov	r3, r0
 801680e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016812:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016816:	2b00      	cmp	r3, #0
 8016818:	d005      	beq.n	8016826 <LoRaMacCryptoHandleJoinAccept+0xee>
 801681a:	e001      	b.n	8016820 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801681c:	2303      	movs	r3, #3
 801681e:	e058      	b.n	80168d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8016820:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016824:	e055      	b.n	80168d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8016826:	2004      	movs	r0, #4
 8016828:	f000 f997 	bl	8016b5a <LoRaMacCryptoDeriveMcKEKey>
 801682c:	4603      	mov	r3, r0
 801682e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016832:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016836:	2b00      	cmp	r3, #0
 8016838:	d002      	beq.n	8016840 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801683a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801683e:	e048      	b.n	80168d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	7a5b      	ldrb	r3, [r3, #9]
 8016844:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	7a9b      	ldrb	r3, [r3, #10]
 801684a:	021b      	lsls	r3, r3, #8
 801684c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801684e:	4313      	orrs	r3, r2
 8016850:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	7adb      	ldrb	r3, [r3, #11]
 8016856:	041b      	lsls	r3, r3, #16
 8016858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801685a:	4313      	orrs	r3, r2
 801685c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801685e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016866:	2003      	movs	r0, #3
 8016868:	f7ff fcd6 	bl	8016218 <DeriveSessionKey10x>
 801686c:	4603      	mov	r3, r0
 801686e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016872:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016876:	2b00      	cmp	r3, #0
 8016878:	d002      	beq.n	8016880 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801687a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801687e:	e028      	b.n	80168d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016880:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016888:	2002      	movs	r0, #2
 801688a:	f7ff fcc5 	bl	8016218 <DeriveSessionKey10x>
 801688e:	4603      	mov	r3, r0
 8016890:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016894:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016898:	2b00      	cmp	r3, #0
 801689a:	d002      	beq.n	80168a2 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 801689c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80168a0:	e017      	b.n	80168d2 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80168a2:	4b0e      	ldr	r3, [pc, #56]	; (80168dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	7dfa      	ldrb	r2, [r7, #23]
 80168a8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80168aa:	4b0c      	ldr	r3, [pc, #48]	; (80168dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	2200      	movs	r2, #0
 80168b0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80168b2:	4b0a      	ldr	r3, [pc, #40]	; (80168dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	f04f 32ff 	mov.w	r2, #4294967295
 80168ba:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80168bc:	4b07      	ldr	r3, [pc, #28]	; (80168dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	f04f 32ff 	mov.w	r2, #4294967295
 80168c4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80168c6:	4b05      	ldr	r3, [pc, #20]	; (80168dc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	f04f 32ff 	mov.w	r2, #4294967295
 80168ce:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80168d0:	2300      	movs	r3, #0
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	374c      	adds	r7, #76	; 0x4c
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd90      	pop	{r4, r7, pc}
 80168da:	bf00      	nop
 80168dc:	20001de4 	.word	0x20001de4

080168e0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80168e0:	b590      	push	{r4, r7, lr}
 80168e2:	b08b      	sub	sp, #44	; 0x2c
 80168e4:	af04      	add	r7, sp, #16
 80168e6:	60f8      	str	r0, [r7, #12]
 80168e8:	607b      	str	r3, [r7, #4]
 80168ea:	460b      	mov	r3, r1
 80168ec:	72fb      	strb	r3, [r7, #11]
 80168ee:	4613      	mov	r3, r2
 80168f0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80168f2:	2313      	movs	r3, #19
 80168f4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80168f6:	2303      	movs	r3, #3
 80168f8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d101      	bne.n	8016904 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016900:	230a      	movs	r3, #10
 8016902:	e05f      	b.n	80169c4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016904:	4b31      	ldr	r3, [pc, #196]	; (80169cc <LoRaMacCryptoSecureMessage+0xec>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	68db      	ldr	r3, [r3, #12]
 801690a:	68fa      	ldr	r2, [r7, #12]
 801690c:	429a      	cmp	r2, r3
 801690e:	d201      	bcs.n	8016914 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016910:	2306      	movs	r3, #6
 8016912:	e057      	b.n	80169c4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	f893 3020 	ldrb.w	r3, [r3, #32]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d101      	bne.n	8016922 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801691e:	2302      	movs	r3, #2
 8016920:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016922:	4b2a      	ldr	r3, [pc, #168]	; (80169cc <LoRaMacCryptoSecureMessage+0xec>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	68db      	ldr	r3, [r3, #12]
 8016928:	68fa      	ldr	r2, [r7, #12]
 801692a:	429a      	cmp	r2, r3
 801692c:	d916      	bls.n	801695c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016938:	b219      	sxth	r1, r3
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	689c      	ldr	r4, [r3, #8]
 801693e:	7dfa      	ldrb	r2, [r7, #23]
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	9301      	str	r3, [sp, #4]
 8016944:	2300      	movs	r3, #0
 8016946:	9300      	str	r3, [sp, #0]
 8016948:	4623      	mov	r3, r4
 801694a:	f7ff fa71 	bl	8015e30 <PayloadEncrypt>
 801694e:	4603      	mov	r3, r0
 8016950:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016952:	7dbb      	ldrb	r3, [r7, #22]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d001      	beq.n	801695c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016958:	7dbb      	ldrb	r3, [r7, #22]
 801695a:	e033      	b.n	80169c4 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f000 fb60 	bl	8017022 <LoRaMacSerializerData>
 8016962:	4603      	mov	r3, r0
 8016964:	2b00      	cmp	r3, #0
 8016966:	d001      	beq.n	801696c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016968:	2311      	movs	r3, #17
 801696a:	e02b      	b.n	80169c4 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801696c:	2302      	movs	r3, #2
 801696e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6818      	ldr	r0, [r3, #0]
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	791b      	ldrb	r3, [r3, #4]
 8016978:	b29b      	uxth	r3, r3
 801697a:	3b04      	subs	r3, #4
 801697c:	b299      	uxth	r1, r3
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	689b      	ldr	r3, [r3, #8]
 8016982:	687a      	ldr	r2, [r7, #4]
 8016984:	322c      	adds	r2, #44	; 0x2c
 8016986:	7dfc      	ldrb	r4, [r7, #23]
 8016988:	9203      	str	r2, [sp, #12]
 801698a:	68fa      	ldr	r2, [r7, #12]
 801698c:	9202      	str	r2, [sp, #8]
 801698e:	9301      	str	r3, [sp, #4]
 8016990:	2300      	movs	r3, #0
 8016992:	9300      	str	r3, [sp, #0]
 8016994:	2300      	movs	r3, #0
 8016996:	4622      	mov	r2, r4
 8016998:	f7ff fb4b 	bl	8016032 <ComputeCmacB0>
 801699c:	4603      	mov	r3, r0
 801699e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80169a0:	7dbb      	ldrb	r3, [r7, #22]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d001      	beq.n	80169aa <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80169a6:	7dbb      	ldrb	r3, [r7, #22]
 80169a8:	e00c      	b.n	80169c4 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	f000 fb39 	bl	8017022 <LoRaMacSerializerData>
 80169b0:	4603      	mov	r3, r0
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d001      	beq.n	80169ba <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80169b6:	2311      	movs	r3, #17
 80169b8:	e004      	b.n	80169c4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80169ba:	4b04      	ldr	r3, [pc, #16]	; (80169cc <LoRaMacCryptoSecureMessage+0xec>)
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	68fa      	ldr	r2, [r7, #12]
 80169c0:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80169c2:	2300      	movs	r3, #0
}
 80169c4:	4618      	mov	r0, r3
 80169c6:	371c      	adds	r7, #28
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd90      	pop	{r4, r7, pc}
 80169cc:	20001de4 	.word	0x20001de4

080169d0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80169d0:	b590      	push	{r4, r7, lr}
 80169d2:	b08b      	sub	sp, #44	; 0x2c
 80169d4:	af04      	add	r7, sp, #16
 80169d6:	60b9      	str	r1, [r7, #8]
 80169d8:	607b      	str	r3, [r7, #4]
 80169da:	4603      	mov	r3, r0
 80169dc:	73fb      	strb	r3, [r7, #15]
 80169de:	4613      	mov	r3, r2
 80169e0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80169e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d101      	bne.n	80169ec <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80169e8:	230a      	movs	r3, #10
 80169ea:	e084      	b.n	8016af6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80169ec:	7bbb      	ldrb	r3, [r7, #14]
 80169ee:	6879      	ldr	r1, [r7, #4]
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7ff fcaf 	bl	8016354 <CheckFCntDown>
 80169f6:	4603      	mov	r3, r0
 80169f8:	f083 0301 	eor.w	r3, r3, #1
 80169fc:	b2db      	uxtb	r3, r3
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d001      	beq.n	8016a06 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016a02:	2306      	movs	r3, #6
 8016a04:	e077      	b.n	8016af6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016a06:	2313      	movs	r3, #19
 8016a08:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016a0a:	2303      	movs	r3, #3
 8016a0c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016a0e:	2302      	movs	r3, #2
 8016a10:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a14:	f000 f98f 	bl	8016d36 <LoRaMacParserData>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d001      	beq.n	8016a22 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016a1e:	2310      	movs	r3, #16
 8016a20:	e069      	b.n	8016af6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016a22:	f107 0210 	add.w	r2, r7, #16
 8016a26:	7bfb      	ldrb	r3, [r7, #15]
 8016a28:	4611      	mov	r1, r2
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7ff fbce 	bl	80161cc <GetKeyAddrItem>
 8016a30:	4603      	mov	r3, r0
 8016a32:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016a34:	7d7b      	ldrb	r3, [r7, #21]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d001      	beq.n	8016a3e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8016a3a:	7d7b      	ldrb	r3, [r7, #21]
 8016a3c:	e05b      	b.n	8016af6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016a3e:	693b      	ldr	r3, [r7, #16]
 8016a40:	785b      	ldrb	r3, [r3, #1]
 8016a42:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	789b      	ldrb	r3, [r3, #2]
 8016a48:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a4c:	689b      	ldr	r3, [r3, #8]
 8016a4e:	68ba      	ldr	r2, [r7, #8]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d001      	beq.n	8016a58 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016a54:	2302      	movs	r3, #2
 8016a56:	e04e      	b.n	8016af6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a5a:	7b1b      	ldrb	r3, [r3, #12]
 8016a5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016a60:	b2db      	uxtb	r3, r3
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	bf14      	ite	ne
 8016a66:	2301      	movne	r3, #1
 8016a68:	2300      	moveq	r3, #0
 8016a6a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016a6c:	4b24      	ldr	r3, [pc, #144]	; (8016b00 <LoRaMacCryptoUnsecureMessage+0x130>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	789b      	ldrb	r3, [r3, #2]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d101      	bne.n	8016a7a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016a76:	2300      	movs	r3, #0
 8016a78:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a7c:	6818      	ldr	r0, [r3, #0]
 8016a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a80:	791b      	ldrb	r3, [r3, #4]
 8016a82:	b29b      	uxth	r3, r3
 8016a84:	3b04      	subs	r3, #4
 8016a86:	b299      	uxth	r1, r3
 8016a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a8c:	7dbc      	ldrb	r4, [r7, #22]
 8016a8e:	7d3a      	ldrb	r2, [r7, #20]
 8016a90:	9303      	str	r3, [sp, #12]
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	9302      	str	r3, [sp, #8]
 8016a96:	68bb      	ldr	r3, [r7, #8]
 8016a98:	9301      	str	r3, [sp, #4]
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	9300      	str	r3, [sp, #0]
 8016a9e:	4623      	mov	r3, r4
 8016aa0:	f7ff fb05 	bl	80160ae <VerifyCmacB0>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016aa8:	7d7b      	ldrb	r3, [r7, #21]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d001      	beq.n	8016ab2 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8016aae:	7d7b      	ldrb	r3, [r7, #21]
 8016ab0:	e021      	b.n	8016af6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d101      	bne.n	8016ac0 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016abc:	2302      	movs	r3, #2
 8016abe:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ac2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016aca:	b219      	sxth	r1, r3
 8016acc:	7dfa      	ldrb	r2, [r7, #23]
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	9301      	str	r3, [sp, #4]
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	9300      	str	r3, [sp, #0]
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	f7ff f9aa 	bl	8015e30 <PayloadEncrypt>
 8016adc:	4603      	mov	r3, r0
 8016ade:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ae0:	7d7b      	ldrb	r3, [r7, #21]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d001      	beq.n	8016aea <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8016ae6:	7d7b      	ldrb	r3, [r7, #21]
 8016ae8:	e005      	b.n	8016af6 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8016aea:	7bbb      	ldrb	r3, [r7, #14]
 8016aec:	6879      	ldr	r1, [r7, #4]
 8016aee:	4618      	mov	r0, r3
 8016af0:	f7ff fc54 	bl	801639c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016af4:	2300      	movs	r3, #0
}
 8016af6:	4618      	mov	r0, r3
 8016af8:	371c      	adds	r7, #28
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd90      	pop	{r4, r7, pc}
 8016afe:	bf00      	nop
 8016b00:	20001de4 	.word	0x20001de4

08016b04 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b086      	sub	sp, #24
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	460a      	mov	r2, r1
 8016b0e:	71fb      	strb	r3, [r7, #7]
 8016b10:	4613      	mov	r3, r2
 8016b12:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8016b14:	79bb      	ldrb	r3, [r7, #6]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d001      	beq.n	8016b1e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016b1a:	230b      	movs	r3, #11
 8016b1c:	e019      	b.n	8016b52 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8016b1e:	2300      	movs	r3, #0
 8016b20:	60bb      	str	r3, [r7, #8]
 8016b22:	f107 030c 	add.w	r3, r7, #12
 8016b26:	2200      	movs	r2, #0
 8016b28:	601a      	str	r2, [r3, #0]
 8016b2a:	605a      	str	r2, [r3, #4]
 8016b2c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8016b2e:	79fb      	ldrb	r3, [r7, #7]
 8016b30:	2b01      	cmp	r3, #1
 8016b32:	d101      	bne.n	8016b38 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8016b34:	2320      	movs	r3, #32
 8016b36:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016b38:	79b9      	ldrb	r1, [r7, #6]
 8016b3a:	f107 0308 	add.w	r3, r7, #8
 8016b3e:	2204      	movs	r2, #4
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7f8 fa77 	bl	800f034 <SecureElementDeriveAndStoreKey>
 8016b46:	4603      	mov	r3, r0
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d001      	beq.n	8016b50 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016b4c:	230f      	movs	r3, #15
 8016b4e:	e000      	b.n	8016b52 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b50:	2300      	movs	r3, #0
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3718      	adds	r7, #24
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}

08016b5a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8016b5a:	b580      	push	{r7, lr}
 8016b5c:	b086      	sub	sp, #24
 8016b5e:	af00      	add	r7, sp, #0
 8016b60:	4603      	mov	r3, r0
 8016b62:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016b64:	79fb      	ldrb	r3, [r7, #7]
 8016b66:	2b04      	cmp	r3, #4
 8016b68:	d001      	beq.n	8016b6e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016b6a:	230b      	movs	r3, #11
 8016b6c:	e014      	b.n	8016b98 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8016b6e:	2300      	movs	r3, #0
 8016b70:	60bb      	str	r3, [r7, #8]
 8016b72:	f107 030c 	add.w	r3, r7, #12
 8016b76:	2200      	movs	r2, #0
 8016b78:	601a      	str	r2, [r3, #0]
 8016b7a:	605a      	str	r2, [r3, #4]
 8016b7c:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016b7e:	79f9      	ldrb	r1, [r7, #7]
 8016b80:	f107 0308 	add.w	r3, r7, #8
 8016b84:	227f      	movs	r2, #127	; 0x7f
 8016b86:	4618      	mov	r0, r3
 8016b88:	f7f8 fa54 	bl	800f034 <SecureElementDeriveAndStoreKey>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d001      	beq.n	8016b96 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016b92:	230f      	movs	r3, #15
 8016b94:	e000      	b.n	8016b98 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b96:	2300      	movs	r3, #0
}
 8016b98:	4618      	mov	r0, r3
 8016b9a:	3718      	adds	r7, #24
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	bd80      	pop	{r7, pc}

08016ba0 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b084      	sub	sp, #16
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d003      	beq.n	8016bb6 <LoRaMacParserJoinAccept+0x16>
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d101      	bne.n	8016bba <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016bb6:	2302      	movs	r3, #2
 8016bb8:	e0b9      	b.n	8016d2e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	681a      	ldr	r2, [r3, #0]
 8016bc2:	89fb      	ldrh	r3, [r7, #14]
 8016bc4:	1c59      	adds	r1, r3, #1
 8016bc6:	81f9      	strh	r1, [r7, #14]
 8016bc8:	4413      	add	r3, r2
 8016bca:	781a      	ldrb	r2, [r3, #0]
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	1d98      	adds	r0, r3, #6
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	681a      	ldr	r2, [r3, #0]
 8016bd8:	89fb      	ldrh	r3, [r7, #14]
 8016bda:	4413      	add	r3, r2
 8016bdc:	2203      	movs	r2, #3
 8016bde:	4619      	mov	r1, r3
 8016be0:	f002 fe39 	bl	8019856 <memcpy1>
    bufItr = bufItr + 3;
 8016be4:	89fb      	ldrh	r3, [r7, #14]
 8016be6:	3303      	adds	r3, #3
 8016be8:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f103 0009 	add.w	r0, r3, #9
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681a      	ldr	r2, [r3, #0]
 8016bf4:	89fb      	ldrh	r3, [r7, #14]
 8016bf6:	4413      	add	r3, r2
 8016bf8:	2203      	movs	r2, #3
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	f002 fe2b 	bl	8019856 <memcpy1>
    bufItr = bufItr + 3;
 8016c00:	89fb      	ldrh	r3, [r7, #14]
 8016c02:	3303      	adds	r3, #3
 8016c04:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681a      	ldr	r2, [r3, #0]
 8016c0a:	89fb      	ldrh	r3, [r7, #14]
 8016c0c:	1c59      	adds	r1, r3, #1
 8016c0e:	81f9      	strh	r1, [r7, #14]
 8016c10:	4413      	add	r3, r2
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	461a      	mov	r2, r3
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681a      	ldr	r2, [r3, #0]
 8016c1e:	89fb      	ldrh	r3, [r7, #14]
 8016c20:	1c59      	adds	r1, r3, #1
 8016c22:	81f9      	strh	r1, [r7, #14]
 8016c24:	4413      	add	r3, r2
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	021a      	lsls	r2, r3, #8
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	68db      	ldr	r3, [r3, #12]
 8016c2e:	431a      	orrs	r2, r3
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	681a      	ldr	r2, [r3, #0]
 8016c38:	89fb      	ldrh	r3, [r7, #14]
 8016c3a:	1c59      	adds	r1, r3, #1
 8016c3c:	81f9      	strh	r1, [r7, #14]
 8016c3e:	4413      	add	r3, r2
 8016c40:	781b      	ldrb	r3, [r3, #0]
 8016c42:	041a      	lsls	r2, r3, #16
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	68db      	ldr	r3, [r3, #12]
 8016c48:	431a      	orrs	r2, r3
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681a      	ldr	r2, [r3, #0]
 8016c52:	89fb      	ldrh	r3, [r7, #14]
 8016c54:	1c59      	adds	r1, r3, #1
 8016c56:	81f9      	strh	r1, [r7, #14]
 8016c58:	4413      	add	r3, r2
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	061a      	lsls	r2, r3, #24
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	68db      	ldr	r3, [r3, #12]
 8016c62:	431a      	orrs	r2, r3
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681a      	ldr	r2, [r3, #0]
 8016c6c:	89fb      	ldrh	r3, [r7, #14]
 8016c6e:	1c59      	adds	r1, r3, #1
 8016c70:	81f9      	strh	r1, [r7, #14]
 8016c72:	4413      	add	r3, r2
 8016c74:	781a      	ldrb	r2, [r3, #0]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681a      	ldr	r2, [r3, #0]
 8016c7e:	89fb      	ldrh	r3, [r7, #14]
 8016c80:	1c59      	adds	r1, r3, #1
 8016c82:	81f9      	strh	r1, [r7, #14]
 8016c84:	4413      	add	r3, r2
 8016c86:	781a      	ldrb	r2, [r3, #0]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	791b      	ldrb	r3, [r3, #4]
 8016c90:	1f1a      	subs	r2, r3, #4
 8016c92:	89fb      	ldrh	r3, [r7, #14]
 8016c94:	1ad3      	subs	r3, r2, r3
 8016c96:	2b10      	cmp	r3, #16
 8016c98:	d10e      	bne.n	8016cb8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	f103 0012 	add.w	r0, r3, #18
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681a      	ldr	r2, [r3, #0]
 8016ca4:	89fb      	ldrh	r3, [r7, #14]
 8016ca6:	4413      	add	r3, r2
 8016ca8:	2210      	movs	r2, #16
 8016caa:	4619      	mov	r1, r3
 8016cac:	f002 fdd3 	bl	8019856 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8016cb0:	89fb      	ldrh	r3, [r7, #14]
 8016cb2:	3310      	adds	r3, #16
 8016cb4:	81fb      	strh	r3, [r7, #14]
 8016cb6:	e008      	b.n	8016cca <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	791b      	ldrb	r3, [r3, #4]
 8016cbc:	1f1a      	subs	r2, r3, #4
 8016cbe:	89fb      	ldrh	r3, [r7, #14]
 8016cc0:	1ad3      	subs	r3, r2, r3
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	dd01      	ble.n	8016cca <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	e031      	b.n	8016d2e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	681a      	ldr	r2, [r3, #0]
 8016cce:	89fb      	ldrh	r3, [r7, #14]
 8016cd0:	1c59      	adds	r1, r3, #1
 8016cd2:	81f9      	strh	r1, [r7, #14]
 8016cd4:	4413      	add	r3, r2
 8016cd6:	781b      	ldrb	r3, [r3, #0]
 8016cd8:	461a      	mov	r2, r3
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681a      	ldr	r2, [r3, #0]
 8016ce2:	89fb      	ldrh	r3, [r7, #14]
 8016ce4:	1c59      	adds	r1, r3, #1
 8016ce6:	81f9      	strh	r1, [r7, #14]
 8016ce8:	4413      	add	r3, r2
 8016cea:	781b      	ldrb	r3, [r3, #0]
 8016cec:	021a      	lsls	r2, r3, #8
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf2:	431a      	orrs	r2, r3
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	89fb      	ldrh	r3, [r7, #14]
 8016cfe:	1c59      	adds	r1, r3, #1
 8016d00:	81f9      	strh	r1, [r7, #14]
 8016d02:	4413      	add	r3, r2
 8016d04:	781b      	ldrb	r3, [r3, #0]
 8016d06:	041a      	lsls	r2, r3, #16
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d0c:	431a      	orrs	r2, r3
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681a      	ldr	r2, [r3, #0]
 8016d16:	89fb      	ldrh	r3, [r7, #14]
 8016d18:	1c59      	adds	r1, r3, #1
 8016d1a:	81f9      	strh	r1, [r7, #14]
 8016d1c:	4413      	add	r3, r2
 8016d1e:	781b      	ldrb	r3, [r3, #0]
 8016d20:	061a      	lsls	r2, r3, #24
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d26:	431a      	orrs	r2, r3
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016d2c:	2300      	movs	r3, #0
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3710      	adds	r7, #16
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}

08016d36 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016d36:	b580      	push	{r7, lr}
 8016d38:	b084      	sub	sp, #16
 8016d3a:	af00      	add	r7, sp, #0
 8016d3c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d003      	beq.n	8016d4c <LoRaMacParserData+0x16>
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d101      	bne.n	8016d50 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016d4c:	2302      	movs	r3, #2
 8016d4e:	e0e2      	b.n	8016f16 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8016d50:	2300      	movs	r3, #0
 8016d52:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	681a      	ldr	r2, [r3, #0]
 8016d58:	89fb      	ldrh	r3, [r7, #14]
 8016d5a:	1c59      	adds	r1, r3, #1
 8016d5c:	81f9      	strh	r1, [r7, #14]
 8016d5e:	4413      	add	r3, r2
 8016d60:	781a      	ldrb	r2, [r3, #0]
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681a      	ldr	r2, [r3, #0]
 8016d6a:	89fb      	ldrh	r3, [r7, #14]
 8016d6c:	1c59      	adds	r1, r3, #1
 8016d6e:	81f9      	strh	r1, [r7, #14]
 8016d70:	4413      	add	r3, r2
 8016d72:	781b      	ldrb	r3, [r3, #0]
 8016d74:	461a      	mov	r2, r3
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681a      	ldr	r2, [r3, #0]
 8016d7e:	89fb      	ldrh	r3, [r7, #14]
 8016d80:	1c59      	adds	r1, r3, #1
 8016d82:	81f9      	strh	r1, [r7, #14]
 8016d84:	4413      	add	r3, r2
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	021a      	lsls	r2, r3, #8
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	689b      	ldr	r3, [r3, #8]
 8016d8e:	431a      	orrs	r2, r3
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	681a      	ldr	r2, [r3, #0]
 8016d98:	89fb      	ldrh	r3, [r7, #14]
 8016d9a:	1c59      	adds	r1, r3, #1
 8016d9c:	81f9      	strh	r1, [r7, #14]
 8016d9e:	4413      	add	r3, r2
 8016da0:	781b      	ldrb	r3, [r3, #0]
 8016da2:	041a      	lsls	r2, r3, #16
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	689b      	ldr	r3, [r3, #8]
 8016da8:	431a      	orrs	r2, r3
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	681a      	ldr	r2, [r3, #0]
 8016db2:	89fb      	ldrh	r3, [r7, #14]
 8016db4:	1c59      	adds	r1, r3, #1
 8016db6:	81f9      	strh	r1, [r7, #14]
 8016db8:	4413      	add	r3, r2
 8016dba:	781b      	ldrb	r3, [r3, #0]
 8016dbc:	061a      	lsls	r2, r3, #24
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	689b      	ldr	r3, [r3, #8]
 8016dc2:	431a      	orrs	r2, r3
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681a      	ldr	r2, [r3, #0]
 8016dcc:	89fb      	ldrh	r3, [r7, #14]
 8016dce:	1c59      	adds	r1, r3, #1
 8016dd0:	81f9      	strh	r1, [r7, #14]
 8016dd2:	4413      	add	r3, r2
 8016dd4:	781a      	ldrb	r2, [r3, #0]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	681a      	ldr	r2, [r3, #0]
 8016dde:	89fb      	ldrh	r3, [r7, #14]
 8016de0:	1c59      	adds	r1, r3, #1
 8016de2:	81f9      	strh	r1, [r7, #14]
 8016de4:	4413      	add	r3, r2
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	b29a      	uxth	r2, r3
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681a      	ldr	r2, [r3, #0]
 8016df2:	89fb      	ldrh	r3, [r7, #14]
 8016df4:	1c59      	adds	r1, r3, #1
 8016df6:	81f9      	strh	r1, [r7, #14]
 8016df8:	4413      	add	r3, r2
 8016dfa:	781b      	ldrb	r3, [r3, #0]
 8016dfc:	0219      	lsls	r1, r3, #8
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	89db      	ldrh	r3, [r3, #14]
 8016e02:	b21a      	sxth	r2, r3
 8016e04:	b20b      	sxth	r3, r1
 8016e06:	4313      	orrs	r3, r2
 8016e08:	b21b      	sxth	r3, r3
 8016e0a:	b29a      	uxth	r2, r3
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	f103 0010 	add.w	r0, r3, #16
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681a      	ldr	r2, [r3, #0]
 8016e1a:	89fb      	ldrh	r3, [r7, #14]
 8016e1c:	18d1      	adds	r1, r2, r3
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	7b1b      	ldrb	r3, [r3, #12]
 8016e22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	f002 fd13 	bl	8019856 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	7b1b      	ldrb	r3, [r3, #12]
 8016e34:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016e38:	b2db      	uxtb	r3, r3
 8016e3a:	b29a      	uxth	r2, r3
 8016e3c:	89fb      	ldrh	r3, [r7, #14]
 8016e3e:	4413      	add	r3, r2
 8016e40:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2200      	movs	r2, #0
 8016e46:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	791b      	ldrb	r3, [r3, #4]
 8016e56:	461a      	mov	r2, r3
 8016e58:	89fb      	ldrh	r3, [r7, #14]
 8016e5a:	1ad3      	subs	r3, r2, r3
 8016e5c:	2b04      	cmp	r3, #4
 8016e5e:	dd28      	ble.n	8016eb2 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681a      	ldr	r2, [r3, #0]
 8016e64:	89fb      	ldrh	r3, [r7, #14]
 8016e66:	1c59      	adds	r1, r3, #1
 8016e68:	81f9      	strh	r1, [r7, #14]
 8016e6a:	4413      	add	r3, r2
 8016e6c:	781a      	ldrb	r2, [r3, #0]
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	791a      	ldrb	r2, [r3, #4]
 8016e78:	89fb      	ldrh	r3, [r7, #14]
 8016e7a:	b2db      	uxtb	r3, r3
 8016e7c:	1ad3      	subs	r3, r2, r3
 8016e7e:	b2db      	uxtb	r3, r3
 8016e80:	3b04      	subs	r3, #4
 8016e82:	b2da      	uxtb	r2, r3
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681a      	ldr	r2, [r3, #0]
 8016e92:	89fb      	ldrh	r3, [r7, #14]
 8016e94:	18d1      	adds	r1, r2, r3
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	461a      	mov	r2, r3
 8016ea0:	f002 fcd9 	bl	8019856 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016eaa:	b29a      	uxth	r2, r3
 8016eac:	89fb      	ldrh	r3, [r7, #14]
 8016eae:	4413      	add	r3, r2
 8016eb0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681a      	ldr	r2, [r3, #0]
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	791b      	ldrb	r3, [r3, #4]
 8016eba:	3b04      	subs	r3, #4
 8016ebc:	4413      	add	r3, r2
 8016ebe:	781b      	ldrb	r3, [r3, #0]
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	6819      	ldr	r1, [r3, #0]
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	791b      	ldrb	r3, [r3, #4]
 8016ed2:	3b03      	subs	r3, #3
 8016ed4:	440b      	add	r3, r1
 8016ed6:	781b      	ldrb	r3, [r3, #0]
 8016ed8:	021b      	lsls	r3, r3, #8
 8016eda:	431a      	orrs	r2, r3
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	6819      	ldr	r1, [r3, #0]
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	791b      	ldrb	r3, [r3, #4]
 8016eec:	3b02      	subs	r3, #2
 8016eee:	440b      	add	r3, r1
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	041b      	lsls	r3, r3, #16
 8016ef4:	431a      	orrs	r2, r3
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	6819      	ldr	r1, [r3, #0]
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	791b      	ldrb	r3, [r3, #4]
 8016f06:	3b01      	subs	r3, #1
 8016f08:	440b      	add	r3, r1
 8016f0a:	781b      	ldrb	r3, [r3, #0]
 8016f0c:	061b      	lsls	r3, r3, #24
 8016f0e:	431a      	orrs	r2, r3
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016f14:	2300      	movs	r3, #0
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3710      	adds	r7, #16
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}

08016f1e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016f1e:	b580      	push	{r7, lr}
 8016f20:	b084      	sub	sp, #16
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d003      	beq.n	8016f34 <LoRaMacSerializerJoinRequest+0x16>
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d101      	bne.n	8016f38 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016f34:	2301      	movs	r3, #1
 8016f36:	e070      	b.n	801701a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	791b      	ldrb	r3, [r3, #4]
 8016f40:	2b16      	cmp	r3, #22
 8016f42:	d801      	bhi.n	8016f48 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016f44:	2302      	movs	r3, #2
 8016f46:	e068      	b.n	801701a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	681a      	ldr	r2, [r3, #0]
 8016f4c:	89fb      	ldrh	r3, [r7, #14]
 8016f4e:	1c59      	adds	r1, r3, #1
 8016f50:	81f9      	strh	r1, [r7, #14]
 8016f52:	4413      	add	r3, r2
 8016f54:	687a      	ldr	r2, [r7, #4]
 8016f56:	7952      	ldrb	r2, [r2, #5]
 8016f58:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	681a      	ldr	r2, [r3, #0]
 8016f5e:	89fb      	ldrh	r3, [r7, #14]
 8016f60:	18d0      	adds	r0, r2, r3
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	3306      	adds	r3, #6
 8016f66:	2208      	movs	r2, #8
 8016f68:	4619      	mov	r1, r3
 8016f6a:	f002 fc8f 	bl	801988c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016f6e:	89fb      	ldrh	r3, [r7, #14]
 8016f70:	3308      	adds	r3, #8
 8016f72:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681a      	ldr	r2, [r3, #0]
 8016f78:	89fb      	ldrh	r3, [r7, #14]
 8016f7a:	18d0      	adds	r0, r2, r3
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	330e      	adds	r3, #14
 8016f80:	2208      	movs	r2, #8
 8016f82:	4619      	mov	r1, r3
 8016f84:	f002 fc82 	bl	801988c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016f88:	89fb      	ldrh	r3, [r7, #14]
 8016f8a:	3308      	adds	r3, #8
 8016f8c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	8ad9      	ldrh	r1, [r3, #22]
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681a      	ldr	r2, [r3, #0]
 8016f96:	89fb      	ldrh	r3, [r7, #14]
 8016f98:	1c58      	adds	r0, r3, #1
 8016f9a:	81f8      	strh	r0, [r7, #14]
 8016f9c:	4413      	add	r3, r2
 8016f9e:	b2ca      	uxtb	r2, r1
 8016fa0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	8adb      	ldrh	r3, [r3, #22]
 8016fa6:	0a1b      	lsrs	r3, r3, #8
 8016fa8:	b299      	uxth	r1, r3
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	681a      	ldr	r2, [r3, #0]
 8016fae:	89fb      	ldrh	r3, [r7, #14]
 8016fb0:	1c58      	adds	r0, r3, #1
 8016fb2:	81f8      	strh	r0, [r7, #14]
 8016fb4:	4413      	add	r3, r2
 8016fb6:	b2ca      	uxtb	r2, r1
 8016fb8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6999      	ldr	r1, [r3, #24]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681a      	ldr	r2, [r3, #0]
 8016fc2:	89fb      	ldrh	r3, [r7, #14]
 8016fc4:	1c58      	adds	r0, r3, #1
 8016fc6:	81f8      	strh	r0, [r7, #14]
 8016fc8:	4413      	add	r3, r2
 8016fca:	b2ca      	uxtb	r2, r1
 8016fcc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	699b      	ldr	r3, [r3, #24]
 8016fd2:	0a19      	lsrs	r1, r3, #8
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	681a      	ldr	r2, [r3, #0]
 8016fd8:	89fb      	ldrh	r3, [r7, #14]
 8016fda:	1c58      	adds	r0, r3, #1
 8016fdc:	81f8      	strh	r0, [r7, #14]
 8016fde:	4413      	add	r3, r2
 8016fe0:	b2ca      	uxtb	r2, r1
 8016fe2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	699b      	ldr	r3, [r3, #24]
 8016fe8:	0c19      	lsrs	r1, r3, #16
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	89fb      	ldrh	r3, [r7, #14]
 8016ff0:	1c58      	adds	r0, r3, #1
 8016ff2:	81f8      	strh	r0, [r7, #14]
 8016ff4:	4413      	add	r3, r2
 8016ff6:	b2ca      	uxtb	r2, r1
 8016ff8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	699b      	ldr	r3, [r3, #24]
 8016ffe:	0e19      	lsrs	r1, r3, #24
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	681a      	ldr	r2, [r3, #0]
 8017004:	89fb      	ldrh	r3, [r7, #14]
 8017006:	1c58      	adds	r0, r3, #1
 8017008:	81f8      	strh	r0, [r7, #14]
 801700a:	4413      	add	r3, r2
 801700c:	b2ca      	uxtb	r2, r1
 801700e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017010:	89fb      	ldrh	r3, [r7, #14]
 8017012:	b2da      	uxtb	r2, r3
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017018:	2300      	movs	r3, #0
}
 801701a:	4618      	mov	r0, r3
 801701c:	3710      	adds	r7, #16
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}

08017022 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8017022:	b580      	push	{r7, lr}
 8017024:	b084      	sub	sp, #16
 8017026:	af00      	add	r7, sp, #0
 8017028:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d003      	beq.n	8017038 <LoRaMacSerializerData+0x16>
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d101      	bne.n	801703c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017038:	2301      	movs	r3, #1
 801703a:	e0e5      	b.n	8017208 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801703c:	2300      	movs	r3, #0
 801703e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8017040:	2308      	movs	r3, #8
 8017042:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	7b1b      	ldrb	r3, [r3, #12]
 8017048:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801704c:	b2db      	uxtb	r3, r3
 801704e:	b29a      	uxth	r2, r3
 8017050:	89bb      	ldrh	r3, [r7, #12]
 8017052:	4413      	add	r3, r2
 8017054:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801705c:	2b00      	cmp	r3, #0
 801705e:	d002      	beq.n	8017066 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8017060:	89bb      	ldrh	r3, [r7, #12]
 8017062:	3301      	adds	r3, #1
 8017064:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801706c:	b29a      	uxth	r2, r3
 801706e:	89bb      	ldrh	r3, [r7, #12]
 8017070:	4413      	add	r3, r2
 8017072:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017074:	89bb      	ldrh	r3, [r7, #12]
 8017076:	3304      	adds	r3, #4
 8017078:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	791b      	ldrb	r3, [r3, #4]
 801707e:	b29b      	uxth	r3, r3
 8017080:	89ba      	ldrh	r2, [r7, #12]
 8017082:	429a      	cmp	r2, r3
 8017084:	d901      	bls.n	801708a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017086:	2302      	movs	r3, #2
 8017088:	e0be      	b.n	8017208 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681a      	ldr	r2, [r3, #0]
 801708e:	89fb      	ldrh	r3, [r7, #14]
 8017090:	1c59      	adds	r1, r3, #1
 8017092:	81f9      	strh	r1, [r7, #14]
 8017094:	4413      	add	r3, r2
 8017096:	687a      	ldr	r2, [r7, #4]
 8017098:	7952      	ldrb	r2, [r2, #5]
 801709a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6899      	ldr	r1, [r3, #8]
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	681a      	ldr	r2, [r3, #0]
 80170a4:	89fb      	ldrh	r3, [r7, #14]
 80170a6:	1c58      	adds	r0, r3, #1
 80170a8:	81f8      	strh	r0, [r7, #14]
 80170aa:	4413      	add	r3, r2
 80170ac:	b2ca      	uxtb	r2, r1
 80170ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	689b      	ldr	r3, [r3, #8]
 80170b4:	0a19      	lsrs	r1, r3, #8
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681a      	ldr	r2, [r3, #0]
 80170ba:	89fb      	ldrh	r3, [r7, #14]
 80170bc:	1c58      	adds	r0, r3, #1
 80170be:	81f8      	strh	r0, [r7, #14]
 80170c0:	4413      	add	r3, r2
 80170c2:	b2ca      	uxtb	r2, r1
 80170c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	689b      	ldr	r3, [r3, #8]
 80170ca:	0c19      	lsrs	r1, r3, #16
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681a      	ldr	r2, [r3, #0]
 80170d0:	89fb      	ldrh	r3, [r7, #14]
 80170d2:	1c58      	adds	r0, r3, #1
 80170d4:	81f8      	strh	r0, [r7, #14]
 80170d6:	4413      	add	r3, r2
 80170d8:	b2ca      	uxtb	r2, r1
 80170da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	689b      	ldr	r3, [r3, #8]
 80170e0:	0e19      	lsrs	r1, r3, #24
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	681a      	ldr	r2, [r3, #0]
 80170e6:	89fb      	ldrh	r3, [r7, #14]
 80170e8:	1c58      	adds	r0, r3, #1
 80170ea:	81f8      	strh	r0, [r7, #14]
 80170ec:	4413      	add	r3, r2
 80170ee:	b2ca      	uxtb	r2, r1
 80170f0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	681a      	ldr	r2, [r3, #0]
 80170f6:	89fb      	ldrh	r3, [r7, #14]
 80170f8:	1c59      	adds	r1, r3, #1
 80170fa:	81f9      	strh	r1, [r7, #14]
 80170fc:	4413      	add	r3, r2
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	7b12      	ldrb	r2, [r2, #12]
 8017102:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	89d9      	ldrh	r1, [r3, #14]
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681a      	ldr	r2, [r3, #0]
 801710c:	89fb      	ldrh	r3, [r7, #14]
 801710e:	1c58      	adds	r0, r3, #1
 8017110:	81f8      	strh	r0, [r7, #14]
 8017112:	4413      	add	r3, r2
 8017114:	b2ca      	uxtb	r2, r1
 8017116:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	89db      	ldrh	r3, [r3, #14]
 801711c:	0a1b      	lsrs	r3, r3, #8
 801711e:	b299      	uxth	r1, r3
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	681a      	ldr	r2, [r3, #0]
 8017124:	89fb      	ldrh	r3, [r7, #14]
 8017126:	1c58      	adds	r0, r3, #1
 8017128:	81f8      	strh	r0, [r7, #14]
 801712a:	4413      	add	r3, r2
 801712c:	b2ca      	uxtb	r2, r1
 801712e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	681a      	ldr	r2, [r3, #0]
 8017134:	89fb      	ldrh	r3, [r7, #14]
 8017136:	18d0      	adds	r0, r2, r3
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f103 0110 	add.w	r1, r3, #16
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	7b1b      	ldrb	r3, [r3, #12]
 8017142:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017146:	b2db      	uxtb	r3, r3
 8017148:	b29b      	uxth	r3, r3
 801714a:	461a      	mov	r2, r3
 801714c:	f002 fb83 	bl	8019856 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	7b1b      	ldrb	r3, [r3, #12]
 8017154:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017158:	b2db      	uxtb	r3, r3
 801715a:	b29a      	uxth	r2, r3
 801715c:	89fb      	ldrh	r3, [r7, #14]
 801715e:	4413      	add	r3, r2
 8017160:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017168:	2b00      	cmp	r3, #0
 801716a:	d009      	beq.n	8017180 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681a      	ldr	r2, [r3, #0]
 8017170:	89fb      	ldrh	r3, [r7, #14]
 8017172:	1c59      	adds	r1, r3, #1
 8017174:	81f9      	strh	r1, [r7, #14]
 8017176:	4413      	add	r3, r2
 8017178:	687a      	ldr	r2, [r7, #4]
 801717a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801717e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	681a      	ldr	r2, [r3, #0]
 8017184:	89fb      	ldrh	r3, [r7, #14]
 8017186:	18d0      	adds	r0, r2, r3
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017192:	b29b      	uxth	r3, r3
 8017194:	461a      	mov	r2, r3
 8017196:	f002 fb5e 	bl	8019856 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80171a0:	b29a      	uxth	r2, r3
 80171a2:	89fb      	ldrh	r3, [r7, #14]
 80171a4:	4413      	add	r3, r2
 80171a6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	681a      	ldr	r2, [r3, #0]
 80171b0:	89fb      	ldrh	r3, [r7, #14]
 80171b2:	1c58      	adds	r0, r3, #1
 80171b4:	81f8      	strh	r0, [r7, #14]
 80171b6:	4413      	add	r3, r2
 80171b8:	b2ca      	uxtb	r2, r1
 80171ba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171c0:	0a19      	lsrs	r1, r3, #8
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681a      	ldr	r2, [r3, #0]
 80171c6:	89fb      	ldrh	r3, [r7, #14]
 80171c8:	1c58      	adds	r0, r3, #1
 80171ca:	81f8      	strh	r0, [r7, #14]
 80171cc:	4413      	add	r3, r2
 80171ce:	b2ca      	uxtb	r2, r1
 80171d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171d6:	0c19      	lsrs	r1, r3, #16
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681a      	ldr	r2, [r3, #0]
 80171dc:	89fb      	ldrh	r3, [r7, #14]
 80171de:	1c58      	adds	r0, r3, #1
 80171e0:	81f8      	strh	r0, [r7, #14]
 80171e2:	4413      	add	r3, r2
 80171e4:	b2ca      	uxtb	r2, r1
 80171e6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ec:	0e19      	lsrs	r1, r3, #24
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	681a      	ldr	r2, [r3, #0]
 80171f2:	89fb      	ldrh	r3, [r7, #14]
 80171f4:	1c58      	adds	r0, r3, #1
 80171f6:	81f8      	strh	r0, [r7, #14]
 80171f8:	4413      	add	r3, r2
 80171fa:	b2ca      	uxtb	r2, r1
 80171fc:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80171fe:	89fb      	ldrh	r3, [r7, #14]
 8017200:	b2da      	uxtb	r2, r3
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017206:	2300      	movs	r3, #0
}
 8017208:	4618      	mov	r0, r3
 801720a:	3710      	adds	r7, #16
 801720c:	46bd      	mov	sp, r7
 801720e:	bd80      	pop	{r7, pc}

08017210 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8017210:	b480      	push	{r7}
 8017212:	b083      	sub	sp, #12
 8017214:	af00      	add	r7, sp, #0
 8017216:	4603      	mov	r3, r0
 8017218:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801721a:	79fb      	ldrb	r3, [r7, #7]
 801721c:	2b05      	cmp	r3, #5
 801721e:	d101      	bne.n	8017224 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8017220:	2301      	movs	r3, #1
 8017222:	e000      	b.n	8017226 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017224:	2300      	movs	r3, #0
        }
    }
}
 8017226:	4618      	mov	r0, r3
 8017228:	370c      	adds	r7, #12
 801722a:	46bd      	mov	sp, r7
 801722c:	bc80      	pop	{r7}
 801722e:	4770      	bx	lr

08017230 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b084      	sub	sp, #16
 8017234:	af00      	add	r7, sp, #0
 8017236:	4603      	mov	r3, r0
 8017238:	6039      	str	r1, [r7, #0]
 801723a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801723c:	2300      	movs	r3, #0
 801723e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017240:	79fb      	ldrb	r3, [r7, #7]
 8017242:	2b05      	cmp	r3, #5
 8017244:	d105      	bne.n	8017252 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017246:	6838      	ldr	r0, [r7, #0]
 8017248:	f001 f994 	bl	8018574 <RegionEU868GetPhyParam>
 801724c:	4603      	mov	r3, r0
 801724e:	60fb      	str	r3, [r7, #12]
 8017250:	e001      	b.n	8017256 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017252:	68bb      	ldr	r3, [r7, #8]
 8017254:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	4618      	mov	r0, r3
 801725a:	3710      	adds	r7, #16
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}

08017260 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b082      	sub	sp, #8
 8017264:	af00      	add	r7, sp, #0
 8017266:	4603      	mov	r3, r0
 8017268:	6039      	str	r1, [r7, #0]
 801726a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801726c:	79fb      	ldrb	r3, [r7, #7]
 801726e:	2b05      	cmp	r3, #5
 8017270:	d103      	bne.n	801727a <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8017272:	6838      	ldr	r0, [r7, #0]
 8017274:	f001 faca 	bl	801880c <RegionEU868SetBandTxDone>
 8017278:	e000      	b.n	801727c <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801727a:	bf00      	nop
        }
    }
}
 801727c:	3708      	adds	r7, #8
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}

08017282 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017282:	b580      	push	{r7, lr}
 8017284:	b082      	sub	sp, #8
 8017286:	af00      	add	r7, sp, #0
 8017288:	4603      	mov	r3, r0
 801728a:	6039      	str	r1, [r7, #0]
 801728c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801728e:	79fb      	ldrb	r3, [r7, #7]
 8017290:	2b05      	cmp	r3, #5
 8017292:	d103      	bne.n	801729c <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8017294:	6838      	ldr	r0, [r7, #0]
 8017296:	f001 fae5 	bl	8018864 <RegionEU868InitDefaults>
 801729a:	e000      	b.n	801729e <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801729c:	bf00      	nop
        }
    }
}
 801729e:	bf00      	nop
 80172a0:	3708      	adds	r7, #8
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}

080172a6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80172a6:	b580      	push	{r7, lr}
 80172a8:	b082      	sub	sp, #8
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	4603      	mov	r3, r0
 80172ae:	6039      	str	r1, [r7, #0]
 80172b0:	71fb      	strb	r3, [r7, #7]
 80172b2:	4613      	mov	r3, r2
 80172b4:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80172b6:	79fb      	ldrb	r3, [r7, #7]
 80172b8:	2b05      	cmp	r3, #5
 80172ba:	d106      	bne.n	80172ca <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80172bc:	79bb      	ldrb	r3, [r7, #6]
 80172be:	4619      	mov	r1, r3
 80172c0:	6838      	ldr	r0, [r7, #0]
 80172c2:	f001 fb6d 	bl	80189a0 <RegionEU868Verify>
 80172c6:	4603      	mov	r3, r0
 80172c8:	e000      	b.n	80172cc <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80172ca:	2300      	movs	r3, #0
        }
    }
}
 80172cc:	4618      	mov	r0, r3
 80172ce:	3708      	adds	r7, #8
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}

080172d4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b082      	sub	sp, #8
 80172d8:	af00      	add	r7, sp, #0
 80172da:	4603      	mov	r3, r0
 80172dc:	6039      	str	r1, [r7, #0]
 80172de:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80172e0:	79fb      	ldrb	r3, [r7, #7]
 80172e2:	2b05      	cmp	r3, #5
 80172e4:	d103      	bne.n	80172ee <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80172e6:	6838      	ldr	r0, [r7, #0]
 80172e8:	f001 fbd6 	bl	8018a98 <RegionEU868ApplyCFList>
 80172ec:	e000      	b.n	80172f0 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80172ee:	bf00      	nop
        }
    }
}
 80172f0:	bf00      	nop
 80172f2:	3708      	adds	r7, #8
 80172f4:	46bd      	mov	sp, r7
 80172f6:	bd80      	pop	{r7, pc}

080172f8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b082      	sub	sp, #8
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	4603      	mov	r3, r0
 8017300:	6039      	str	r1, [r7, #0]
 8017302:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017304:	79fb      	ldrb	r3, [r7, #7]
 8017306:	2b05      	cmp	r3, #5
 8017308:	d104      	bne.n	8017314 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801730a:	6838      	ldr	r0, [r7, #0]
 801730c:	f001 fc38 	bl	8018b80 <RegionEU868ChanMaskSet>
 8017310:	4603      	mov	r3, r0
 8017312:	e000      	b.n	8017316 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017314:	2300      	movs	r3, #0
        }
    }
}
 8017316:	4618      	mov	r0, r3
 8017318:	3708      	adds	r7, #8
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}

0801731e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801731e:	b580      	push	{r7, lr}
 8017320:	b082      	sub	sp, #8
 8017322:	af00      	add	r7, sp, #0
 8017324:	603b      	str	r3, [r7, #0]
 8017326:	4603      	mov	r3, r0
 8017328:	71fb      	strb	r3, [r7, #7]
 801732a:	460b      	mov	r3, r1
 801732c:	71bb      	strb	r3, [r7, #6]
 801732e:	4613      	mov	r3, r2
 8017330:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017332:	79fb      	ldrb	r3, [r7, #7]
 8017334:	2b05      	cmp	r3, #5
 8017336:	d107      	bne.n	8017348 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017338:	7979      	ldrb	r1, [r7, #5]
 801733a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801733e:	693b      	ldr	r3, [r7, #16]
 8017340:	683a      	ldr	r2, [r7, #0]
 8017342:	f001 fc47 	bl	8018bd4 <RegionEU868ComputeRxWindowParameters>
 8017346:	e000      	b.n	801734a <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8017348:	bf00      	nop
        }
    }
}
 801734a:	bf00      	nop
 801734c:	3708      	adds	r7, #8
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}

08017352 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017352:	b580      	push	{r7, lr}
 8017354:	b084      	sub	sp, #16
 8017356:	af00      	add	r7, sp, #0
 8017358:	4603      	mov	r3, r0
 801735a:	60b9      	str	r1, [r7, #8]
 801735c:	607a      	str	r2, [r7, #4]
 801735e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017360:	7bfb      	ldrb	r3, [r7, #15]
 8017362:	2b05      	cmp	r3, #5
 8017364:	d105      	bne.n	8017372 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017366:	6879      	ldr	r1, [r7, #4]
 8017368:	68b8      	ldr	r0, [r7, #8]
 801736a:	f001 fc8d 	bl	8018c88 <RegionEU868RxConfig>
 801736e:	4603      	mov	r3, r0
 8017370:	e000      	b.n	8017374 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017372:	2300      	movs	r3, #0
        }
    }
}
 8017374:	4618      	mov	r0, r3
 8017376:	3710      	adds	r7, #16
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}

0801737c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b084      	sub	sp, #16
 8017380:	af00      	add	r7, sp, #0
 8017382:	60b9      	str	r1, [r7, #8]
 8017384:	607a      	str	r2, [r7, #4]
 8017386:	603b      	str	r3, [r7, #0]
 8017388:	4603      	mov	r3, r0
 801738a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801738c:	7bfb      	ldrb	r3, [r7, #15]
 801738e:	2b05      	cmp	r3, #5
 8017390:	d106      	bne.n	80173a0 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017392:	683a      	ldr	r2, [r7, #0]
 8017394:	6879      	ldr	r1, [r7, #4]
 8017396:	68b8      	ldr	r0, [r7, #8]
 8017398:	f001 fd46 	bl	8018e28 <RegionEU868TxConfig>
 801739c:	4603      	mov	r3, r0
 801739e:	e000      	b.n	80173a2 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80173a0:	2300      	movs	r3, #0
        }
    }
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3710      	adds	r7, #16
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}

080173aa <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80173aa:	b580      	push	{r7, lr}
 80173ac:	b086      	sub	sp, #24
 80173ae:	af02      	add	r7, sp, #8
 80173b0:	60b9      	str	r1, [r7, #8]
 80173b2:	607a      	str	r2, [r7, #4]
 80173b4:	603b      	str	r3, [r7, #0]
 80173b6:	4603      	mov	r3, r0
 80173b8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80173ba:	7bfb      	ldrb	r3, [r7, #15]
 80173bc:	2b05      	cmp	r3, #5
 80173be:	d109      	bne.n	80173d4 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80173c0:	69fb      	ldr	r3, [r7, #28]
 80173c2:	9300      	str	r3, [sp, #0]
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	683a      	ldr	r2, [r7, #0]
 80173c8:	6879      	ldr	r1, [r7, #4]
 80173ca:	68b8      	ldr	r0, [r7, #8]
 80173cc:	f001 fdfc 	bl	8018fc8 <RegionEU868LinkAdrReq>
 80173d0:	4603      	mov	r3, r0
 80173d2:	e000      	b.n	80173d6 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80173d4:	2300      	movs	r3, #0
        }
    }
}
 80173d6:	4618      	mov	r0, r3
 80173d8:	3710      	adds	r7, #16
 80173da:	46bd      	mov	sp, r7
 80173dc:	bd80      	pop	{r7, pc}

080173de <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80173de:	b580      	push	{r7, lr}
 80173e0:	b082      	sub	sp, #8
 80173e2:	af00      	add	r7, sp, #0
 80173e4:	4603      	mov	r3, r0
 80173e6:	6039      	str	r1, [r7, #0]
 80173e8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80173ea:	79fb      	ldrb	r3, [r7, #7]
 80173ec:	2b05      	cmp	r3, #5
 80173ee:	d104      	bne.n	80173fa <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80173f0:	6838      	ldr	r0, [r7, #0]
 80173f2:	f001 ff0b 	bl	801920c <RegionEU868RxParamSetupReq>
 80173f6:	4603      	mov	r3, r0
 80173f8:	e000      	b.n	80173fc <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80173fa:	2300      	movs	r3, #0
        }
    }
}
 80173fc:	4618      	mov	r0, r3
 80173fe:	3708      	adds	r7, #8
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}

08017404 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b082      	sub	sp, #8
 8017408:	af00      	add	r7, sp, #0
 801740a:	4603      	mov	r3, r0
 801740c:	6039      	str	r1, [r7, #0]
 801740e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017410:	79fb      	ldrb	r3, [r7, #7]
 8017412:	2b05      	cmp	r3, #5
 8017414:	d104      	bne.n	8017420 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017416:	6838      	ldr	r0, [r7, #0]
 8017418:	f001 ff36 	bl	8019288 <RegionEU868NewChannelReq>
 801741c:	4603      	mov	r3, r0
 801741e:	e000      	b.n	8017422 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017420:	2300      	movs	r3, #0
        }
    }
}
 8017422:	4618      	mov	r0, r3
 8017424:	3708      	adds	r7, #8
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}

0801742a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801742a:	b580      	push	{r7, lr}
 801742c:	b082      	sub	sp, #8
 801742e:	af00      	add	r7, sp, #0
 8017430:	4603      	mov	r3, r0
 8017432:	6039      	str	r1, [r7, #0]
 8017434:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017436:	79fb      	ldrb	r3, [r7, #7]
 8017438:	2b05      	cmp	r3, #5
 801743a:	d104      	bne.n	8017446 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801743c:	6838      	ldr	r0, [r7, #0]
 801743e:	f001 ff81 	bl	8019344 <RegionEU868TxParamSetupReq>
 8017442:	4603      	mov	r3, r0
 8017444:	e000      	b.n	8017448 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017446:	2300      	movs	r3, #0
        }
    }
}
 8017448:	4618      	mov	r0, r3
 801744a:	3708      	adds	r7, #8
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}

08017450 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b082      	sub	sp, #8
 8017454:	af00      	add	r7, sp, #0
 8017456:	4603      	mov	r3, r0
 8017458:	6039      	str	r1, [r7, #0]
 801745a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801745c:	79fb      	ldrb	r3, [r7, #7]
 801745e:	2b05      	cmp	r3, #5
 8017460:	d104      	bne.n	801746c <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017462:	6838      	ldr	r0, [r7, #0]
 8017464:	f001 ff7a 	bl	801935c <RegionEU868DlChannelReq>
 8017468:	4603      	mov	r3, r0
 801746a:	e000      	b.n	801746e <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801746c:	2300      	movs	r3, #0
        }
    }
}
 801746e:	4618      	mov	r0, r3
 8017470:	3708      	adds	r7, #8
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}

08017476 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017476:	b580      	push	{r7, lr}
 8017478:	b082      	sub	sp, #8
 801747a:	af00      	add	r7, sp, #0
 801747c:	4603      	mov	r3, r0
 801747e:	71fb      	strb	r3, [r7, #7]
 8017480:	460b      	mov	r3, r1
 8017482:	71bb      	strb	r3, [r7, #6]
 8017484:	4613      	mov	r3, r2
 8017486:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017488:	79fb      	ldrb	r3, [r7, #7]
 801748a:	2b05      	cmp	r3, #5
 801748c:	d108      	bne.n	80174a0 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801748e:	797a      	ldrb	r2, [r7, #5]
 8017490:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017494:	4611      	mov	r1, r2
 8017496:	4618      	mov	r0, r3
 8017498:	f001 ffa4 	bl	80193e4 <RegionEU868AlternateDr>
 801749c:	4603      	mov	r3, r0
 801749e:	e000      	b.n	80174a2 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80174a0:	2300      	movs	r3, #0
        }
    }
}
 80174a2:	4618      	mov	r0, r3
 80174a4:	3708      	adds	r7, #8
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}

080174aa <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80174aa:	b580      	push	{r7, lr}
 80174ac:	b084      	sub	sp, #16
 80174ae:	af00      	add	r7, sp, #0
 80174b0:	60b9      	str	r1, [r7, #8]
 80174b2:	607a      	str	r2, [r7, #4]
 80174b4:	603b      	str	r3, [r7, #0]
 80174b6:	4603      	mov	r3, r0
 80174b8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80174ba:	7bfb      	ldrb	r3, [r7, #15]
 80174bc:	2b05      	cmp	r3, #5
 80174be:	d107      	bne.n	80174d0 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80174c0:	69bb      	ldr	r3, [r7, #24]
 80174c2:	683a      	ldr	r2, [r7, #0]
 80174c4:	6879      	ldr	r1, [r7, #4]
 80174c6:	68b8      	ldr	r0, [r7, #8]
 80174c8:	f001 ff9c 	bl	8019404 <RegionEU868NextChannel>
 80174cc:	4603      	mov	r3, r0
 80174ce:	e000      	b.n	80174d2 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80174d0:	2309      	movs	r3, #9
        }
    }
}
 80174d2:	4618      	mov	r0, r3
 80174d4:	3710      	adds	r7, #16
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}

080174da <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80174da:	b580      	push	{r7, lr}
 80174dc:	b082      	sub	sp, #8
 80174de:	af00      	add	r7, sp, #0
 80174e0:	4603      	mov	r3, r0
 80174e2:	6039      	str	r1, [r7, #0]
 80174e4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80174e6:	79fb      	ldrb	r3, [r7, #7]
 80174e8:	2b05      	cmp	r3, #5
 80174ea:	d103      	bne.n	80174f4 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80174ec:	6838      	ldr	r0, [r7, #0]
 80174ee:	f002 f903 	bl	80196f8 <RegionEU868SetContinuousWave>
 80174f2:	e000      	b.n	80174f6 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80174f4:	bf00      	nop
        }
    }
}
 80174f6:	bf00      	nop
 80174f8:	3708      	adds	r7, #8
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}

080174fe <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80174fe:	b590      	push	{r4, r7, lr}
 8017500:	b083      	sub	sp, #12
 8017502:	af00      	add	r7, sp, #0
 8017504:	4604      	mov	r4, r0
 8017506:	4608      	mov	r0, r1
 8017508:	4611      	mov	r1, r2
 801750a:	461a      	mov	r2, r3
 801750c:	4623      	mov	r3, r4
 801750e:	71fb      	strb	r3, [r7, #7]
 8017510:	4603      	mov	r3, r0
 8017512:	71bb      	strb	r3, [r7, #6]
 8017514:	460b      	mov	r3, r1
 8017516:	717b      	strb	r3, [r7, #5]
 8017518:	4613      	mov	r3, r2
 801751a:	713b      	strb	r3, [r7, #4]
    switch( region )
 801751c:	79fb      	ldrb	r3, [r7, #7]
 801751e:	2b05      	cmp	r3, #5
 8017520:	d109      	bne.n	8017536 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017522:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017526:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801752a:	79bb      	ldrb	r3, [r7, #6]
 801752c:	4618      	mov	r0, r3
 801752e:	f002 f931 	bl	8019794 <RegionEU868ApplyDrOffset>
 8017532:	4603      	mov	r3, r0
 8017534:	e000      	b.n	8017538 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017536:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017538:	4618      	mov	r0, r3
 801753a:	370c      	adds	r7, #12
 801753c:	46bd      	mov	sp, r7
 801753e:	bd90      	pop	{r4, r7, pc}

08017540 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017540:	b480      	push	{r7}
 8017542:	b083      	sub	sp, #12
 8017544:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017546:	4b04      	ldr	r3, [pc, #16]	; (8017558 <RegionGetVersion+0x18>)
 8017548:	607b      	str	r3, [r7, #4]

    return version;
 801754a:	687b      	ldr	r3, [r7, #4]
}
 801754c:	4618      	mov	r0, r3
 801754e:	370c      	adds	r7, #12
 8017550:	46bd      	mov	sp, r7
 8017552:	bc80      	pop	{r7}
 8017554:	4770      	bx	lr
 8017556:	bf00      	nop
 8017558:	01010003 	.word	0x01010003

0801755c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801755c:	b480      	push	{r7}
 801755e:	b087      	sub	sp, #28
 8017560:	af00      	add	r7, sp, #0
 8017562:	60f8      	str	r0, [r7, #12]
 8017564:	4608      	mov	r0, r1
 8017566:	4639      	mov	r1, r7
 8017568:	e881 000c 	stmia.w	r1, {r2, r3}
 801756c:	4603      	mov	r3, r0
 801756e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	881b      	ldrh	r3, [r3, #0]
 8017574:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017576:	7afb      	ldrb	r3, [r7, #11]
 8017578:	f083 0301 	eor.w	r3, r3, #1
 801757c:	b2db      	uxtb	r3, r3
 801757e:	2b00      	cmp	r3, #0
 8017580:	d01b      	beq.n	80175ba <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017582:	f242 7310 	movw	r3, #10000	; 0x2710
 8017586:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801758e:	d202      	bcs.n	8017596 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017590:	2364      	movs	r3, #100	; 0x64
 8017592:	82bb      	strh	r3, [r7, #20]
 8017594:	e00b      	b.n	80175ae <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801759c:	4293      	cmp	r3, r2
 801759e:	d803      	bhi.n	80175a8 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80175a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80175a4:	82bb      	strh	r3, [r7, #20]
 80175a6:	e002      	b.n	80175ae <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80175a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80175ac:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80175ae:	8aba      	ldrh	r2, [r7, #20]
 80175b0:	8afb      	ldrh	r3, [r7, #22]
 80175b2:	4293      	cmp	r3, r2
 80175b4:	bf38      	it	cc
 80175b6:	4613      	movcc	r3, r2
 80175b8:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80175ba:	8afb      	ldrh	r3, [r7, #22]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d101      	bne.n	80175c4 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80175c0:	2301      	movs	r3, #1
 80175c2:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80175c4:	8afb      	ldrh	r3, [r7, #22]
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	371c      	adds	r7, #28
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bc80      	pop	{r7}
 80175ce:	4770      	bx	lr

080175d0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b08e      	sub	sp, #56	; 0x38
 80175d4:	af02      	add	r7, sp, #8
 80175d6:	60f8      	str	r0, [r7, #12]
 80175d8:	4608      	mov	r0, r1
 80175da:	4639      	mov	r1, r7
 80175dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80175e0:	4603      	mov	r3, r0
 80175e2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	881b      	ldrh	r3, [r3, #0]
 80175e8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80175ea:	4b4b      	ldr	r3, [pc, #300]	; (8017718 <SetMaxTimeCredits+0x148>)
 80175ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80175ee:	463b      	mov	r3, r7
 80175f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80175f4:	f005 fd68 	bl	801d0c8 <SysTimeToMs>
 80175f8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80175fa:	f107 0314 	add.w	r3, r7, #20
 80175fe:	2200      	movs	r2, #0
 8017600:	601a      	str	r2, [r3, #0]
 8017602:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017604:	7af9      	ldrb	r1, [r7, #11]
 8017606:	463b      	mov	r3, r7
 8017608:	cb0c      	ldmia	r3, {r2, r3}
 801760a:	68f8      	ldr	r0, [r7, #12]
 801760c:	f7ff ffa6 	bl	801755c <GetDutyCycle>
 8017610:	4603      	mov	r3, r0
 8017612:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017614:	7afb      	ldrb	r3, [r7, #11]
 8017616:	f083 0301 	eor.w	r3, r3, #1
 801761a:	b2db      	uxtb	r3, r3
 801761c:	2b00      	cmp	r3, #0
 801761e:	d062      	beq.n	80176e6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017620:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017622:	2b64      	cmp	r3, #100	; 0x64
 8017624:	d105      	bne.n	8017632 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017626:	4b3c      	ldr	r3, [pc, #240]	; (8017718 <SetMaxTimeCredits+0x148>)
 8017628:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801762e:	609a      	str	r2, [r3, #8]
 8017630:	e00b      	b.n	801764a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017632:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017638:	d105      	bne.n	8017646 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801763a:	4b38      	ldr	r3, [pc, #224]	; (801771c <SetMaxTimeCredits+0x14c>)
 801763c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017642:	609a      	str	r2, [r3, #8]
 8017644:	e001      	b.n	801764a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017646:	4b36      	ldr	r3, [pc, #216]	; (8017720 <SetMaxTimeCredits+0x150>)
 8017648:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	689a      	ldr	r2, [r3, #8]
 801764e:	f107 031c 	add.w	r3, r7, #28
 8017652:	4611      	mov	r1, r2
 8017654:	4618      	mov	r0, r3
 8017656:	f005 fd5f 	bl	801d118 <SysTimeFromMs>
 801765a:	f107 0014 	add.w	r0, r7, #20
 801765e:	6a3b      	ldr	r3, [r7, #32]
 8017660:	9300      	str	r3, [sp, #0]
 8017662:	69fb      	ldr	r3, [r7, #28]
 8017664:	463a      	mov	r2, r7
 8017666:	ca06      	ldmia	r2, {r1, r2}
 8017668:	f005 fc6f 	bl	801cf4a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801766c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017670:	f083 0301 	eor.w	r3, r3, #1
 8017674:	b2db      	uxtb	r3, r3
 8017676:	2b00      	cmp	r3, #0
 8017678:	d006      	beq.n	8017688 <SetMaxTimeCredits+0xb8>
 801767a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801767e:	f083 0301 	eor.w	r3, r3, #1
 8017682:	b2db      	uxtb	r3, r3
 8017684:	2b00      	cmp	r3, #0
 8017686:	d108      	bne.n	801769a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801768c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801768e:	429a      	cmp	r2, r3
 8017690:	d103      	bne.n	801769a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017692:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017694:	4a23      	ldr	r2, [pc, #140]	; (8017724 <SetMaxTimeCredits+0x154>)
 8017696:	4293      	cmp	r3, r2
 8017698:	d92f      	bls.n	80176fa <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801769e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	4a21      	ldr	r2, [pc, #132]	; (8017728 <SetMaxTimeCredits+0x158>)
 80176a4:	4293      	cmp	r3, r2
 80176a6:	d928      	bls.n	80176fa <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80176ae:	3b30      	subs	r3, #48	; 0x30
 80176b0:	4a1e      	ldr	r2, [pc, #120]	; (801772c <SetMaxTimeCredits+0x15c>)
 80176b2:	fba2 2303 	umull	r2, r3, r2, r3
 80176b6:	0c1b      	lsrs	r3, r3, #16
 80176b8:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	4a1c      	ldr	r2, [pc, #112]	; (8017730 <SetMaxTimeCredits+0x160>)
 80176be:	fb02 f303 	mul.w	r3, r2, r3
 80176c2:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80176c4:	697b      	ldr	r3, [r7, #20]
 80176c6:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80176ca:	3330      	adds	r3, #48	; 0x30
 80176cc:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80176ce:	2300      	movs	r3, #0
 80176d0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80176d2:	f107 0314 	add.w	r3, r7, #20
 80176d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80176da:	f005 fcf5 	bl	801d0c8 <SysTimeToMs>
 80176de:	4602      	mov	r2, r0
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	609a      	str	r2, [r3, #8]
 80176e4:	e009      	b.n	80176fa <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80176e6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80176ea:	f083 0301 	eor.w	r3, r3, #1
 80176ee:	b2db      	uxtb	r3, r3
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d002      	beq.n	80176fa <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176f8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	685b      	ldr	r3, [r3, #4]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d102      	bne.n	8017708 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017706:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801770c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801770e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017710:	4618      	mov	r0, r3
 8017712:	3730      	adds	r7, #48	; 0x30
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}
 8017718:	001b7740 	.word	0x001b7740
 801771c:	0112a880 	.word	0x0112a880
 8017720:	02932e00 	.word	0x02932e00
 8017724:	0001517f 	.word	0x0001517f
 8017728:	0001ec2f 	.word	0x0001ec2f
 801772c:	c22e4507 	.word	0xc22e4507
 8017730:	00015180 	.word	0x00015180

08017734 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b086      	sub	sp, #24
 8017738:	af02      	add	r7, sp, #8
 801773a:	6078      	str	r0, [r7, #4]
 801773c:	4608      	mov	r0, r1
 801773e:	4611      	mov	r1, r2
 8017740:	461a      	mov	r2, r3
 8017742:	4603      	mov	r3, r0
 8017744:	70fb      	strb	r3, [r7, #3]
 8017746:	460b      	mov	r3, r1
 8017748:	70bb      	strb	r3, [r7, #2]
 801774a:	4613      	mov	r3, r2
 801774c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801774e:	78f9      	ldrb	r1, [r7, #3]
 8017750:	787b      	ldrb	r3, [r7, #1]
 8017752:	9301      	str	r3, [sp, #4]
 8017754:	78bb      	ldrb	r3, [r7, #2]
 8017756:	9300      	str	r3, [sp, #0]
 8017758:	f107 0318 	add.w	r3, r7, #24
 801775c:	cb0c      	ldmia	r3, {r2, r3}
 801775e:	6878      	ldr	r0, [r7, #4]
 8017760:	f7ff ff36 	bl	80175d0 <SetMaxTimeCredits>
 8017764:	4603      	mov	r3, r0
 8017766:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017768:	78fb      	ldrb	r3, [r7, #3]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d00a      	beq.n	8017784 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	685b      	ldr	r3, [r3, #4]
 8017772:	4618      	mov	r0, r3
 8017774:	f006 fae4 	bl	801dd40 <UTIL_TIMER_GetElapsedTime>
 8017778:	4602      	mov	r2, r0
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	68db      	ldr	r3, [r3, #12]
 801777e:	441a      	add	r2, r3
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	68da      	ldr	r2, [r3, #12]
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	691b      	ldr	r3, [r3, #16]
 801778c:	429a      	cmp	r2, r3
 801778e:	d903      	bls.n	8017798 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	691a      	ldr	r2, [r3, #16]
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	6a3a      	ldr	r2, [r7, #32]
 801779c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801779e:	89fb      	ldrh	r3, [r7, #14]
}
 80177a0:	4618      	mov	r0, r3
 80177a2:	3710      	adds	r7, #16
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}

080177a8 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80177a8:	b480      	push	{r7}
 80177aa:	b085      	sub	sp, #20
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	4603      	mov	r3, r0
 80177b0:	460a      	mov	r2, r1
 80177b2:	80fb      	strh	r3, [r7, #6]
 80177b4:	4613      	mov	r3, r2
 80177b6:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80177b8:	2300      	movs	r3, #0
 80177ba:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80177bc:	2300      	movs	r3, #0
 80177be:	73bb      	strb	r3, [r7, #14]
 80177c0:	e011      	b.n	80177e6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80177c2:	88fa      	ldrh	r2, [r7, #6]
 80177c4:	7bbb      	ldrb	r3, [r7, #14]
 80177c6:	2101      	movs	r1, #1
 80177c8:	fa01 f303 	lsl.w	r3, r1, r3
 80177cc:	401a      	ands	r2, r3
 80177ce:	7bbb      	ldrb	r3, [r7, #14]
 80177d0:	2101      	movs	r1, #1
 80177d2:	fa01 f303 	lsl.w	r3, r1, r3
 80177d6:	429a      	cmp	r2, r3
 80177d8:	d102      	bne.n	80177e0 <CountChannels+0x38>
        {
            nbActiveBits++;
 80177da:	7bfb      	ldrb	r3, [r7, #15]
 80177dc:	3301      	adds	r3, #1
 80177de:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80177e0:	7bbb      	ldrb	r3, [r7, #14]
 80177e2:	3301      	adds	r3, #1
 80177e4:	73bb      	strb	r3, [r7, #14]
 80177e6:	7bba      	ldrb	r2, [r7, #14]
 80177e8:	797b      	ldrb	r3, [r7, #5]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d3e9      	bcc.n	80177c2 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80177ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80177f0:	4618      	mov	r0, r3
 80177f2:	3714      	adds	r7, #20
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bc80      	pop	{r7}
 80177f8:	4770      	bx	lr

080177fa <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80177fa:	b580      	push	{r7, lr}
 80177fc:	b084      	sub	sp, #16
 80177fe:	af00      	add	r7, sp, #0
 8017800:	6039      	str	r1, [r7, #0]
 8017802:	4611      	mov	r1, r2
 8017804:	461a      	mov	r2, r3
 8017806:	4603      	mov	r3, r0
 8017808:	71fb      	strb	r3, [r7, #7]
 801780a:	460b      	mov	r3, r1
 801780c:	71bb      	strb	r3, [r7, #6]
 801780e:	4613      	mov	r3, r2
 8017810:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017812:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017816:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801781a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801781e:	4618      	mov	r0, r3
 8017820:	f000 f85d 	bl	80178de <RegionCommonValueInRange>
 8017824:	4603      	mov	r3, r0
 8017826:	2b00      	cmp	r3, #0
 8017828:	d101      	bne.n	801782e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801782a:	2300      	movs	r3, #0
 801782c:	e053      	b.n	80178d6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801782e:	2300      	movs	r3, #0
 8017830:	73fb      	strb	r3, [r7, #15]
 8017832:	2300      	movs	r3, #0
 8017834:	73bb      	strb	r3, [r7, #14]
 8017836:	e049      	b.n	80178cc <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017838:	2300      	movs	r3, #0
 801783a:	737b      	strb	r3, [r7, #13]
 801783c:	e03d      	b.n	80178ba <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801783e:	7bbb      	ldrb	r3, [r7, #14]
 8017840:	005b      	lsls	r3, r3, #1
 8017842:	683a      	ldr	r2, [r7, #0]
 8017844:	4413      	add	r3, r2
 8017846:	881b      	ldrh	r3, [r3, #0]
 8017848:	461a      	mov	r2, r3
 801784a:	7b7b      	ldrb	r3, [r7, #13]
 801784c:	fa42 f303 	asr.w	r3, r2, r3
 8017850:	f003 0301 	and.w	r3, r3, #1
 8017854:	2b00      	cmp	r3, #0
 8017856:	d02d      	beq.n	80178b4 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017858:	7bfa      	ldrb	r2, [r7, #15]
 801785a:	7b7b      	ldrb	r3, [r7, #13]
 801785c:	4413      	add	r3, r2
 801785e:	461a      	mov	r2, r3
 8017860:	4613      	mov	r3, r2
 8017862:	005b      	lsls	r3, r3, #1
 8017864:	4413      	add	r3, r2
 8017866:	009b      	lsls	r3, r3, #2
 8017868:	461a      	mov	r2, r3
 801786a:	69fb      	ldr	r3, [r7, #28]
 801786c:	4413      	add	r3, r2
 801786e:	7a1b      	ldrb	r3, [r3, #8]
 8017870:	f343 0303 	sbfx	r3, r3, #0, #4
 8017874:	b25b      	sxtb	r3, r3
 8017876:	f003 030f 	and.w	r3, r3, #15
 801787a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801787c:	7bfa      	ldrb	r2, [r7, #15]
 801787e:	7b7b      	ldrb	r3, [r7, #13]
 8017880:	4413      	add	r3, r2
 8017882:	461a      	mov	r2, r3
 8017884:	4613      	mov	r3, r2
 8017886:	005b      	lsls	r3, r3, #1
 8017888:	4413      	add	r3, r2
 801788a:	009b      	lsls	r3, r3, #2
 801788c:	461a      	mov	r2, r3
 801788e:	69fb      	ldr	r3, [r7, #28]
 8017890:	4413      	add	r3, r2
 8017892:	7a1b      	ldrb	r3, [r3, #8]
 8017894:	f343 1303 	sbfx	r3, r3, #4, #4
 8017898:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801789a:	f003 030f 	and.w	r3, r3, #15
 801789e:	b25a      	sxtb	r2, r3
 80178a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80178a4:	4618      	mov	r0, r3
 80178a6:	f000 f81a 	bl	80178de <RegionCommonValueInRange>
 80178aa:	4603      	mov	r3, r0
 80178ac:	2b01      	cmp	r3, #1
 80178ae:	d101      	bne.n	80178b4 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80178b0:	2301      	movs	r3, #1
 80178b2:	e010      	b.n	80178d6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80178b4:	7b7b      	ldrb	r3, [r7, #13]
 80178b6:	3301      	adds	r3, #1
 80178b8:	737b      	strb	r3, [r7, #13]
 80178ba:	7b7b      	ldrb	r3, [r7, #13]
 80178bc:	2b0f      	cmp	r3, #15
 80178be:	d9be      	bls.n	801783e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80178c0:	7bfb      	ldrb	r3, [r7, #15]
 80178c2:	3310      	adds	r3, #16
 80178c4:	73fb      	strb	r3, [r7, #15]
 80178c6:	7bbb      	ldrb	r3, [r7, #14]
 80178c8:	3301      	adds	r3, #1
 80178ca:	73bb      	strb	r3, [r7, #14]
 80178cc:	7bfa      	ldrb	r2, [r7, #15]
 80178ce:	79fb      	ldrb	r3, [r7, #7]
 80178d0:	429a      	cmp	r2, r3
 80178d2:	d3b1      	bcc.n	8017838 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80178d4:	2300      	movs	r3, #0
}
 80178d6:	4618      	mov	r0, r3
 80178d8:	3710      	adds	r7, #16
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}

080178de <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80178de:	b480      	push	{r7}
 80178e0:	b083      	sub	sp, #12
 80178e2:	af00      	add	r7, sp, #0
 80178e4:	4603      	mov	r3, r0
 80178e6:	71fb      	strb	r3, [r7, #7]
 80178e8:	460b      	mov	r3, r1
 80178ea:	71bb      	strb	r3, [r7, #6]
 80178ec:	4613      	mov	r3, r2
 80178ee:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80178f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80178f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80178f8:	429a      	cmp	r2, r3
 80178fa:	db07      	blt.n	801790c <RegionCommonValueInRange+0x2e>
 80178fc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017900:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017904:	429a      	cmp	r2, r3
 8017906:	dc01      	bgt.n	801790c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017908:	2301      	movs	r3, #1
 801790a:	e000      	b.n	801790e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801790c:	2300      	movs	r3, #0
}
 801790e:	4618      	mov	r0, r3
 8017910:	370c      	adds	r7, #12
 8017912:	46bd      	mov	sp, r7
 8017914:	bc80      	pop	{r7}
 8017916:	4770      	bx	lr

08017918 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017918:	b480      	push	{r7}
 801791a:	b085      	sub	sp, #20
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
 8017920:	460b      	mov	r3, r1
 8017922:	70fb      	strb	r3, [r7, #3]
 8017924:	4613      	mov	r3, r2
 8017926:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017928:	78fb      	ldrb	r3, [r7, #3]
 801792a:	091b      	lsrs	r3, r3, #4
 801792c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801792e:	78bb      	ldrb	r3, [r7, #2]
 8017930:	091b      	lsrs	r3, r3, #4
 8017932:	b2db      	uxtb	r3, r3
 8017934:	7bfa      	ldrb	r2, [r7, #15]
 8017936:	429a      	cmp	r2, r3
 8017938:	d803      	bhi.n	8017942 <RegionCommonChanDisable+0x2a>
 801793a:	78fa      	ldrb	r2, [r7, #3]
 801793c:	78bb      	ldrb	r3, [r7, #2]
 801793e:	429a      	cmp	r2, r3
 8017940:	d301      	bcc.n	8017946 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017942:	2300      	movs	r3, #0
 8017944:	e017      	b.n	8017976 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017946:	7bfb      	ldrb	r3, [r7, #15]
 8017948:	005b      	lsls	r3, r3, #1
 801794a:	687a      	ldr	r2, [r7, #4]
 801794c:	4413      	add	r3, r2
 801794e:	881b      	ldrh	r3, [r3, #0]
 8017950:	b21a      	sxth	r2, r3
 8017952:	78fb      	ldrb	r3, [r7, #3]
 8017954:	f003 030f 	and.w	r3, r3, #15
 8017958:	2101      	movs	r1, #1
 801795a:	fa01 f303 	lsl.w	r3, r1, r3
 801795e:	b21b      	sxth	r3, r3
 8017960:	43db      	mvns	r3, r3
 8017962:	b21b      	sxth	r3, r3
 8017964:	4013      	ands	r3, r2
 8017966:	b219      	sxth	r1, r3
 8017968:	7bfb      	ldrb	r3, [r7, #15]
 801796a:	005b      	lsls	r3, r3, #1
 801796c:	687a      	ldr	r2, [r7, #4]
 801796e:	4413      	add	r3, r2
 8017970:	b28a      	uxth	r2, r1
 8017972:	801a      	strh	r2, [r3, #0]

    return true;
 8017974:	2301      	movs	r3, #1
}
 8017976:	4618      	mov	r0, r3
 8017978:	3714      	adds	r7, #20
 801797a:	46bd      	mov	sp, r7
 801797c:	bc80      	pop	{r7}
 801797e:	4770      	bx	lr

08017980 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b084      	sub	sp, #16
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
 8017988:	460b      	mov	r3, r1
 801798a:	70fb      	strb	r3, [r7, #3]
 801798c:	4613      	mov	r3, r2
 801798e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017990:	2300      	movs	r3, #0
 8017992:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d101      	bne.n	801799e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801799a:	2300      	movs	r3, #0
 801799c:	e018      	b.n	80179d0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801799e:	78fb      	ldrb	r3, [r7, #3]
 80179a0:	73bb      	strb	r3, [r7, #14]
 80179a2:	e010      	b.n	80179c6 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80179a4:	7bbb      	ldrb	r3, [r7, #14]
 80179a6:	005b      	lsls	r3, r3, #1
 80179a8:	687a      	ldr	r2, [r7, #4]
 80179aa:	4413      	add	r3, r2
 80179ac:	881b      	ldrh	r3, [r3, #0]
 80179ae:	2110      	movs	r1, #16
 80179b0:	4618      	mov	r0, r3
 80179b2:	f7ff fef9 	bl	80177a8 <CountChannels>
 80179b6:	4603      	mov	r3, r0
 80179b8:	461a      	mov	r2, r3
 80179ba:	7bfb      	ldrb	r3, [r7, #15]
 80179bc:	4413      	add	r3, r2
 80179be:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80179c0:	7bbb      	ldrb	r3, [r7, #14]
 80179c2:	3301      	adds	r3, #1
 80179c4:	73bb      	strb	r3, [r7, #14]
 80179c6:	7bba      	ldrb	r2, [r7, #14]
 80179c8:	78bb      	ldrb	r3, [r7, #2]
 80179ca:	429a      	cmp	r2, r3
 80179cc:	d3ea      	bcc.n	80179a4 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80179ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	3710      	adds	r7, #16
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}

080179d8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80179d8:	b480      	push	{r7}
 80179da:	b087      	sub	sp, #28
 80179dc:	af00      	add	r7, sp, #0
 80179de:	60f8      	str	r0, [r7, #12]
 80179e0:	60b9      	str	r1, [r7, #8]
 80179e2:	4613      	mov	r3, r2
 80179e4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d016      	beq.n	8017a1a <RegionCommonChanMaskCopy+0x42>
 80179ec:	68bb      	ldr	r3, [r7, #8]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d013      	beq.n	8017a1a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80179f2:	2300      	movs	r3, #0
 80179f4:	75fb      	strb	r3, [r7, #23]
 80179f6:	e00c      	b.n	8017a12 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80179f8:	7dfb      	ldrb	r3, [r7, #23]
 80179fa:	005b      	lsls	r3, r3, #1
 80179fc:	68ba      	ldr	r2, [r7, #8]
 80179fe:	441a      	add	r2, r3
 8017a00:	7dfb      	ldrb	r3, [r7, #23]
 8017a02:	005b      	lsls	r3, r3, #1
 8017a04:	68f9      	ldr	r1, [r7, #12]
 8017a06:	440b      	add	r3, r1
 8017a08:	8812      	ldrh	r2, [r2, #0]
 8017a0a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017a0c:	7dfb      	ldrb	r3, [r7, #23]
 8017a0e:	3301      	adds	r3, #1
 8017a10:	75fb      	strb	r3, [r7, #23]
 8017a12:	7dfa      	ldrb	r2, [r7, #23]
 8017a14:	79fb      	ldrb	r3, [r7, #7]
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d3ee      	bcc.n	80179f8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017a1a:	bf00      	nop
 8017a1c:	371c      	adds	r7, #28
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bc80      	pop	{r7}
 8017a22:	4770      	bx	lr

08017a24 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017a24:	b082      	sub	sp, #8
 8017a26:	b580      	push	{r7, lr}
 8017a28:	b086      	sub	sp, #24
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	60f8      	str	r0, [r7, #12]
 8017a2e:	60b9      	str	r1, [r7, #8]
 8017a30:	627b      	str	r3, [r7, #36]	; 0x24
 8017a32:	4613      	mov	r3, r2
 8017a34:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017a36:	79f9      	ldrb	r1, [r7, #7]
 8017a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a3c:	cb0c      	ldmia	r3, {r2, r3}
 8017a3e:	68f8      	ldr	r0, [r7, #12]
 8017a40:	f7ff fd8c 	bl	801755c <GetDutyCycle>
 8017a44:	4603      	mov	r3, r0
 8017a46:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	68da      	ldr	r2, [r3, #12]
 8017a4c:	8afb      	ldrh	r3, [r7, #22]
 8017a4e:	68b9      	ldr	r1, [r7, #8]
 8017a50:	fb01 f303 	mul.w	r3, r1, r3
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d909      	bls.n	8017a6c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	68da      	ldr	r2, [r3, #12]
 8017a5c:	8afb      	ldrh	r3, [r7, #22]
 8017a5e:	68b9      	ldr	r1, [r7, #8]
 8017a60:	fb01 f303 	mul.w	r3, r1, r3
 8017a64:	1ad2      	subs	r2, r2, r3
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017a6a:	e002      	b.n	8017a72 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	2200      	movs	r2, #0
 8017a70:	60da      	str	r2, [r3, #12]
}
 8017a72:	bf00      	nop
 8017a74:	3718      	adds	r7, #24
 8017a76:	46bd      	mov	sp, r7
 8017a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017a7c:	b002      	add	sp, #8
 8017a7e:	4770      	bx	lr

08017a80 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a82:	b08f      	sub	sp, #60	; 0x3c
 8017a84:	af04      	add	r7, sp, #16
 8017a86:	6039      	str	r1, [r7, #0]
 8017a88:	4611      	mov	r1, r2
 8017a8a:	461a      	mov	r2, r3
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	71fb      	strb	r3, [r7, #7]
 8017a90:	460b      	mov	r3, r1
 8017a92:	71bb      	strb	r3, [r7, #6]
 8017a94:	4613      	mov	r3, r2
 8017a96:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017a98:	f04f 33ff 	mov.w	r3, #4294967295
 8017a9c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017a9e:	f006 f93d 	bl	801dd1c <UTIL_TIMER_GetCurrentTime>
 8017aa2:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8017aac:	2300      	movs	r3, #0
 8017aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017ab8:	e0ba      	b.n	8017c30 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017aba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017abe:	4613      	mov	r3, r2
 8017ac0:	005b      	lsls	r3, r3, #1
 8017ac2:	4413      	add	r3, r2
 8017ac4:	00db      	lsls	r3, r3, #3
 8017ac6:	461a      	mov	r2, r3
 8017ac8:	683b      	ldr	r3, [r7, #0]
 8017aca:	189c      	adds	r4, r3, r2
 8017acc:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8017ad0:	797a      	ldrb	r2, [r7, #5]
 8017ad2:	79fd      	ldrb	r5, [r7, #7]
 8017ad4:	69fb      	ldr	r3, [r7, #28]
 8017ad6:	9302      	str	r3, [sp, #8]
 8017ad8:	46ec      	mov	ip, sp
 8017ada:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017ade:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017ae2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017ae6:	4633      	mov	r3, r6
 8017ae8:	4629      	mov	r1, r5
 8017aea:	4620      	mov	r0, r4
 8017aec:	f7ff fe22 	bl	8017734 <UpdateTimeCredits>
 8017af0:	4603      	mov	r3, r0
 8017af2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017af4:	8afa      	ldrh	r2, [r7, #22]
 8017af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017af8:	fb02 f303 	mul.w	r3, r2, r3
 8017afc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017afe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b02:	4613      	mov	r3, r2
 8017b04:	005b      	lsls	r3, r3, #1
 8017b06:	4413      	add	r3, r2
 8017b08:	00db      	lsls	r3, r3, #3
 8017b0a:	461a      	mov	r2, r3
 8017b0c:	683b      	ldr	r3, [r7, #0]
 8017b0e:	4413      	add	r3, r2
 8017b10:	68db      	ldr	r3, [r3, #12]
 8017b12:	69ba      	ldr	r2, [r7, #24]
 8017b14:	429a      	cmp	r2, r3
 8017b16:	d308      	bcc.n	8017b2a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017b18:	797b      	ldrb	r3, [r7, #5]
 8017b1a:	f083 0301 	eor.w	r3, r3, #1
 8017b1e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d013      	beq.n	8017b4c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017b24:	79fb      	ldrb	r3, [r7, #7]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d010      	beq.n	8017b4c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8017b2a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b2e:	4613      	mov	r3, r2
 8017b30:	005b      	lsls	r3, r3, #1
 8017b32:	4413      	add	r3, r2
 8017b34:	00db      	lsls	r3, r3, #3
 8017b36:	461a      	mov	r2, r3
 8017b38:	683b      	ldr	r3, [r7, #0]
 8017b3a:	4413      	add	r3, r2
 8017b3c:	2201      	movs	r2, #1
 8017b3e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b44:	3301      	adds	r3, #1
 8017b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8017b4a:	e06c      	b.n	8017c26 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017b4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b50:	4613      	mov	r3, r2
 8017b52:	005b      	lsls	r3, r3, #1
 8017b54:	4413      	add	r3, r2
 8017b56:	00db      	lsls	r3, r3, #3
 8017b58:	461a      	mov	r2, r3
 8017b5a:	683b      	ldr	r3, [r7, #0]
 8017b5c:	4413      	add	r3, r2
 8017b5e:	2200      	movs	r2, #0
 8017b60:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8017b62:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b66:	4613      	mov	r3, r2
 8017b68:	005b      	lsls	r3, r3, #1
 8017b6a:	4413      	add	r3, r2
 8017b6c:	00db      	lsls	r3, r3, #3
 8017b6e:	461a      	mov	r2, r3
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	4413      	add	r3, r2
 8017b74:	691b      	ldr	r3, [r3, #16]
 8017b76:	69ba      	ldr	r2, [r7, #24]
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d215      	bcs.n	8017ba8 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017b7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b80:	4613      	mov	r3, r2
 8017b82:	005b      	lsls	r3, r3, #1
 8017b84:	4413      	add	r3, r2
 8017b86:	00db      	lsls	r3, r3, #3
 8017b88:	461a      	mov	r2, r3
 8017b8a:	683b      	ldr	r3, [r7, #0]
 8017b8c:	4413      	add	r3, r2
 8017b8e:	68db      	ldr	r3, [r3, #12]
 8017b90:	69ba      	ldr	r2, [r7, #24]
 8017b92:	1ad3      	subs	r3, r2, r3
 8017b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b96:	4293      	cmp	r3, r2
 8017b98:	bf28      	it	cs
 8017b9a:	4613      	movcs	r3, r2
 8017b9c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017b9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017ba2:	3301      	adds	r3, #1
 8017ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8017ba8:	79fb      	ldrb	r3, [r7, #7]
 8017baa:	f083 0301 	eor.w	r3, r3, #1
 8017bae:	b2db      	uxtb	r3, r3
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d038      	beq.n	8017c26 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	60fb      	str	r3, [r7, #12]
 8017bb8:	2300      	movs	r3, #0
 8017bba:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017bbc:	8afb      	ldrh	r3, [r7, #22]
 8017bbe:	2b64      	cmp	r3, #100	; 0x64
 8017bc0:	d103      	bne.n	8017bca <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8017bc2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8017bc6:	60fb      	str	r3, [r7, #12]
 8017bc8:	e009      	b.n	8017bde <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017bca:	8afb      	ldrh	r3, [r7, #22]
 8017bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017bd0:	d103      	bne.n	8017bda <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8017bd2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8017bd6:	60fb      	str	r3, [r7, #12]
 8017bd8:	e001      	b.n	8017bde <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017bda:	4b1e      	ldr	r3, [pc, #120]	; (8017c54 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017bdc:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017be0:	4a1c      	ldr	r2, [pc, #112]	; (8017c54 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017be2:	4293      	cmp	r3, r2
 8017be4:	d90e      	bls.n	8017c04 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8017be6:	68fa      	ldr	r2, [r7, #12]
 8017be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017bea:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017bee:	3b30      	subs	r3, #48	; 0x30
 8017bf0:	4919      	ldr	r1, [pc, #100]	; (8017c58 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8017bf2:	fba1 1303 	umull	r1, r3, r1, r3
 8017bf6:	0c1b      	lsrs	r3, r3, #16
 8017bf8:	3301      	adds	r3, #1
 8017bfa:	4918      	ldr	r1, [pc, #96]	; (8017c5c <RegionCommonUpdateBandTimeOff+0x1dc>)
 8017bfc:	fb01 f303 	mul.w	r3, r1, r3
 8017c00:	4413      	add	r3, r2
 8017c02:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017c04:	f107 000c 	add.w	r0, r7, #12
 8017c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c0a:	9300      	str	r3, [sp, #0]
 8017c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c0e:	f107 020c 	add.w	r2, r7, #12
 8017c12:	ca06      	ldmia	r2, {r1, r2}
 8017c14:	f005 f999 	bl	801cf4a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8017c18:	f107 030c 	add.w	r3, r7, #12
 8017c1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c20:	f005 fa52 	bl	801d0c8 <SysTimeToMs>
 8017c24:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8017c26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c2a:	3301      	adds	r3, #1
 8017c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017c30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017c34:	79bb      	ldrb	r3, [r7, #6]
 8017c36:	429a      	cmp	r2, r3
 8017c38:	f4ff af3f 	bcc.w	8017aba <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d102      	bne.n	8017c4a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017c44:	f04f 33ff 	mov.w	r3, #4294967295
 8017c48:	e000      	b.n	8017c4c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8017c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	372c      	adds	r7, #44	; 0x2c
 8017c50:	46bd      	mov	sp, r7
 8017c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c54:	0001ec30 	.word	0x0001ec30
 8017c58:	c22e4507 	.word	0xc22e4507
 8017c5c:	00015180 	.word	0x00015180

08017c60 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017c60:	b480      	push	{r7}
 8017c62:	b085      	sub	sp, #20
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
 8017c68:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	2b03      	cmp	r3, #3
 8017c74:	d13f      	bne.n	8017cf6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	3301      	adds	r3, #1
 8017c7a:	781b      	ldrb	r3, [r3, #0]
 8017c7c:	b25a      	sxtb	r2, r3
 8017c7e:	683b      	ldr	r3, [r7, #0]
 8017c80:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017c82:	683b      	ldr	r3, [r7, #0]
 8017c84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c88:	f003 030f 	and.w	r3, r3, #15
 8017c8c:	b25a      	sxtb	r2, r3
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017c92:	683b      	ldr	r3, [r7, #0]
 8017c94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c98:	b2db      	uxtb	r3, r3
 8017c9a:	091b      	lsrs	r3, r3, #4
 8017c9c:	b2db      	uxtb	r3, r3
 8017c9e:	b25a      	sxtb	r2, r3
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	3302      	adds	r3, #2
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	b29a      	uxth	r2, r3
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017cb0:	683b      	ldr	r3, [r7, #0]
 8017cb2:	889b      	ldrh	r3, [r3, #4]
 8017cb4:	b21a      	sxth	r2, r3
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	3303      	adds	r3, #3
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	021b      	lsls	r3, r3, #8
 8017cbe:	b21b      	sxth	r3, r3
 8017cc0:	4313      	orrs	r3, r2
 8017cc2:	b21b      	sxth	r3, r3
 8017cc4:	b29a      	uxth	r2, r3
 8017cc6:	683b      	ldr	r3, [r7, #0]
 8017cc8:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	791a      	ldrb	r2, [r3, #4]
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	091b      	lsrs	r3, r3, #4
 8017cd8:	b2db      	uxtb	r3, r3
 8017cda:	f003 0307 	and.w	r3, r3, #7
 8017cde:	b2da      	uxtb	r2, r3
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017ce4:	683b      	ldr	r3, [r7, #0]
 8017ce6:	781b      	ldrb	r3, [r3, #0]
 8017ce8:	f003 030f 	and.w	r3, r3, #15
 8017cec:	b2da      	uxtb	r2, r3
 8017cee:	683b      	ldr	r3, [r7, #0]
 8017cf0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017cf2:	2305      	movs	r3, #5
 8017cf4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8017cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	3714      	adds	r7, #20
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	bc80      	pop	{r7}
 8017d00:	4770      	bx	lr

08017d02 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017d02:	b5b0      	push	{r4, r5, r7, lr}
 8017d04:	b088      	sub	sp, #32
 8017d06:	af02      	add	r7, sp, #8
 8017d08:	60f8      	str	r0, [r7, #12]
 8017d0a:	60b9      	str	r1, [r7, #8]
 8017d0c:	607a      	str	r2, [r7, #4]
 8017d0e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	791b      	ldrb	r3, [r3, #4]
 8017d14:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	799b      	ldrb	r3, [r3, #6]
 8017d1a:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	79db      	ldrb	r3, [r3, #7]
 8017d20:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	7a1b      	ldrb	r3, [r3, #8]
 8017d26:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	795b      	ldrb	r3, [r3, #5]
 8017d2c:	f083 0301 	eor.w	r3, r3, #1
 8017d30:	b2db      	uxtb	r3, r3
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d008      	beq.n	8017d48 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	7adb      	ldrb	r3, [r3, #11]
 8017d3a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	7a5b      	ldrb	r3, [r3, #9]
 8017d40:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	7a9b      	ldrb	r3, [r3, #10]
 8017d46:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017d48:	7dfb      	ldrb	r3, [r7, #23]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d04a      	beq.n	8017de4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017d4e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017d52:	2b0f      	cmp	r3, #15
 8017d54:	d103      	bne.n	8017d5e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	7a5b      	ldrb	r3, [r3, #9]
 8017d5a:	75bb      	strb	r3, [r7, #22]
 8017d5c:	e01d      	b.n	8017d9a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	7b18      	ldrb	r0, [r3, #12]
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	6919      	ldr	r1, [r3, #16]
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017d72:	68fa      	ldr	r2, [r7, #12]
 8017d74:	6992      	ldr	r2, [r2, #24]
 8017d76:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8017d7a:	9201      	str	r2, [sp, #4]
 8017d7c:	9300      	str	r3, [sp, #0]
 8017d7e:	462b      	mov	r3, r5
 8017d80:	4622      	mov	r2, r4
 8017d82:	f7ff fd3a 	bl	80177fa <RegionCommonChanVerifyDr>
 8017d86:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017d88:	f083 0301 	eor.w	r3, r3, #1
 8017d8c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d003      	beq.n	8017d9a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017d92:	7dfb      	ldrb	r3, [r7, #23]
 8017d94:	f023 0302 	bic.w	r3, r3, #2
 8017d98:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8017d9a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017d9e:	2b0f      	cmp	r3, #15
 8017da0:	d103      	bne.n	8017daa <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	7a9b      	ldrb	r3, [r3, #10]
 8017da6:	757b      	strb	r3, [r7, #21]
 8017da8:	e01c      	b.n	8017de4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8017db6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f7ff fd8f 	bl	80178de <RegionCommonValueInRange>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d10e      	bne.n	8017de4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017dcc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017dd0:	429a      	cmp	r2, r3
 8017dd2:	da03      	bge.n	8017ddc <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	7f5b      	ldrb	r3, [r3, #29]
 8017dd8:	757b      	strb	r3, [r7, #21]
 8017dda:	e003      	b.n	8017de4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017ddc:	7dfb      	ldrb	r3, [r7, #23]
 8017dde:	f023 0304 	bic.w	r3, r3, #4
 8017de2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017de4:	7dfb      	ldrb	r3, [r7, #23]
 8017de6:	2b07      	cmp	r3, #7
 8017de8:	d105      	bne.n	8017df6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8017dea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d101      	bne.n	8017df6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017df2:	2301      	movs	r3, #1
 8017df4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017df6:	68bb      	ldr	r3, [r7, #8]
 8017df8:	7dba      	ldrb	r2, [r7, #22]
 8017dfa:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	7d7a      	ldrb	r2, [r7, #21]
 8017e00:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017e02:	7d3a      	ldrb	r2, [r7, #20]
 8017e04:	683b      	ldr	r3, [r7, #0]
 8017e06:	701a      	strb	r2, [r3, #0]

    return status;
 8017e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3718      	adds	r7, #24
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017e14 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017e14:	b480      	push	{r7}
 8017e16:	b083      	sub	sp, #12
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	6039      	str	r1, [r7, #0]
 8017e1e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017e20:	79fb      	ldrb	r3, [r7, #7]
 8017e22:	4a06      	ldr	r2, [pc, #24]	; (8017e3c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017e24:	fa02 f303 	lsl.w	r3, r2, r3
 8017e28:	461a      	mov	r2, r3
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	370c      	adds	r7, #12
 8017e34:	46bd      	mov	sp, r7
 8017e36:	bc80      	pop	{r7}
 8017e38:	4770      	bx	lr
 8017e3a:	bf00      	nop
 8017e3c:	000f4240 	.word	0x000f4240

08017e40 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017e40:	b480      	push	{r7}
 8017e42:	b083      	sub	sp, #12
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	4603      	mov	r3, r0
 8017e48:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8017e4a:	79fb      	ldrb	r3, [r7, #7]
 8017e4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017e50:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017e54:	4618      	mov	r0, r3
 8017e56:	370c      	adds	r7, #12
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	bc80      	pop	{r7}
 8017e5c:	4770      	bx	lr
	...

08017e60 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017e60:	b480      	push	{r7}
 8017e62:	b085      	sub	sp, #20
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	60f8      	str	r0, [r7, #12]
 8017e68:	607a      	str	r2, [r7, #4]
 8017e6a:	603b      	str	r3, [r7, #0]
 8017e6c:	460b      	mov	r3, r1
 8017e6e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017e70:	7afa      	ldrb	r2, [r7, #11]
 8017e72:	7afb      	ldrb	r3, [r7, #11]
 8017e74:	3b04      	subs	r3, #4
 8017e76:	4619      	mov	r1, r3
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	fb03 f101 	mul.w	r1, r3, r1
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017e84:	fb00 f303 	mul.w	r3, r0, r3
 8017e88:	440b      	add	r3, r1
 8017e8a:	005b      	lsls	r3, r3, #1
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d013      	beq.n	8017eb8 <RegionCommonComputeRxWindowParameters+0x58>
 8017e90:	7afb      	ldrb	r3, [r7, #11]
 8017e92:	3b04      	subs	r3, #4
 8017e94:	4619      	mov	r1, r3
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	fb03 f101 	mul.w	r1, r3, r1
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017ea2:	fb00 f303 	mul.w	r3, r0, r3
 8017ea6:	440b      	add	r3, r1
 8017ea8:	0059      	lsls	r1, r3, #1
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	440b      	add	r3, r1
 8017eae:	1e59      	subs	r1, r3, #1
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8017eb6:	e00f      	b.n	8017ed8 <RegionCommonComputeRxWindowParameters+0x78>
 8017eb8:	7afb      	ldrb	r3, [r7, #11]
 8017eba:	3b04      	subs	r3, #4
 8017ebc:	4619      	mov	r1, r3
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	fb03 f101 	mul.w	r1, r3, r1
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017eca:	fb00 f303 	mul.w	r3, r0, r3
 8017ece:	440b      	add	r3, r1
 8017ed0:	0059      	lsls	r1, r3, #1
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	bf38      	it	cc
 8017edc:	461a      	movcc	r2, r3
 8017ede:	69bb      	ldr	r3, [r7, #24]
 8017ee0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	009b      	lsls	r3, r3, #2
 8017ee6:	4619      	mov	r1, r3
 8017ee8:	69bb      	ldr	r3, [r7, #24]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	68fa      	ldr	r2, [r7, #12]
 8017eee:	fb02 f303 	mul.w	r3, r2, r3
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d007      	beq.n	8017f06 <RegionCommonComputeRxWindowParameters+0xa6>
 8017ef6:	69bb      	ldr	r3, [r7, #24]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	68fa      	ldr	r2, [r7, #12]
 8017efc:	fb02 f303 	mul.w	r3, r2, r3
 8017f00:	3301      	adds	r3, #1
 8017f02:	085b      	lsrs	r3, r3, #1
 8017f04:	e005      	b.n	8017f12 <RegionCommonComputeRxWindowParameters+0xb2>
 8017f06:	69bb      	ldr	r3, [r7, #24]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	68fa      	ldr	r2, [r7, #12]
 8017f0c:	fb02 f303 	mul.w	r3, r2, r3
 8017f10:	085b      	lsrs	r3, r3, #1
 8017f12:	1acb      	subs	r3, r1, r3
 8017f14:	683a      	ldr	r2, [r7, #0]
 8017f16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017f1a:	fb01 f202 	mul.w	r2, r1, r2
 8017f1e:	1a9b      	subs	r3, r3, r2
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	dd27      	ble.n	8017f74 <RegionCommonComputeRxWindowParameters+0x114>
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	009b      	lsls	r3, r3, #2
 8017f28:	4619      	mov	r1, r3
 8017f2a:	69bb      	ldr	r3, [r7, #24]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	68fa      	ldr	r2, [r7, #12]
 8017f30:	fb02 f303 	mul.w	r3, r2, r3
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d007      	beq.n	8017f48 <RegionCommonComputeRxWindowParameters+0xe8>
 8017f38:	69bb      	ldr	r3, [r7, #24]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	68fa      	ldr	r2, [r7, #12]
 8017f3e:	fb02 f303 	mul.w	r3, r2, r3
 8017f42:	3301      	adds	r3, #1
 8017f44:	085b      	lsrs	r3, r3, #1
 8017f46:	e005      	b.n	8017f54 <RegionCommonComputeRxWindowParameters+0xf4>
 8017f48:	69bb      	ldr	r3, [r7, #24]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	68fa      	ldr	r2, [r7, #12]
 8017f4e:	fb02 f303 	mul.w	r3, r2, r3
 8017f52:	085b      	lsrs	r3, r3, #1
 8017f54:	1acb      	subs	r3, r1, r3
 8017f56:	683a      	ldr	r2, [r7, #0]
 8017f58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017f5c:	fb01 f202 	mul.w	r2, r1, r2
 8017f60:	1a9b      	subs	r3, r3, r2
 8017f62:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8017f66:	4a19      	ldr	r2, [pc, #100]	; (8017fcc <RegionCommonComputeRxWindowParameters+0x16c>)
 8017f68:	fb82 1203 	smull	r1, r2, r2, r3
 8017f6c:	1192      	asrs	r2, r2, #6
 8017f6e:	17db      	asrs	r3, r3, #31
 8017f70:	1ad3      	subs	r3, r2, r3
 8017f72:	e024      	b.n	8017fbe <RegionCommonComputeRxWindowParameters+0x15e>
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	009b      	lsls	r3, r3, #2
 8017f78:	4619      	mov	r1, r3
 8017f7a:	69bb      	ldr	r3, [r7, #24]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	68fa      	ldr	r2, [r7, #12]
 8017f80:	fb02 f303 	mul.w	r3, r2, r3
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d007      	beq.n	8017f98 <RegionCommonComputeRxWindowParameters+0x138>
 8017f88:	69bb      	ldr	r3, [r7, #24]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	68fa      	ldr	r2, [r7, #12]
 8017f8e:	fb02 f303 	mul.w	r3, r2, r3
 8017f92:	3301      	adds	r3, #1
 8017f94:	085b      	lsrs	r3, r3, #1
 8017f96:	e005      	b.n	8017fa4 <RegionCommonComputeRxWindowParameters+0x144>
 8017f98:	69bb      	ldr	r3, [r7, #24]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	68fa      	ldr	r2, [r7, #12]
 8017f9e:	fb02 f303 	mul.w	r3, r2, r3
 8017fa2:	085b      	lsrs	r3, r3, #1
 8017fa4:	1acb      	subs	r3, r1, r3
 8017fa6:	683a      	ldr	r2, [r7, #0]
 8017fa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017fac:	fb01 f202 	mul.w	r2, r1, r2
 8017fb0:	1a9b      	subs	r3, r3, r2
 8017fb2:	4a06      	ldr	r2, [pc, #24]	; (8017fcc <RegionCommonComputeRxWindowParameters+0x16c>)
 8017fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8017fb8:	1192      	asrs	r2, r2, #6
 8017fba:	17db      	asrs	r3, r3, #31
 8017fbc:	1ad3      	subs	r3, r2, r3
 8017fbe:	69fa      	ldr	r2, [r7, #28]
 8017fc0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017fc2:	bf00      	nop
 8017fc4:	3714      	adds	r7, #20
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	bc80      	pop	{r7}
 8017fca:	4770      	bx	lr
 8017fcc:	10624dd3 	.word	0x10624dd3

08017fd0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b086      	sub	sp, #24
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	60b9      	str	r1, [r7, #8]
 8017fda:	607a      	str	r2, [r7, #4]
 8017fdc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017fde:	2300      	movs	r3, #0
 8017fe0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017fe6:	005b      	lsls	r3, r3, #1
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7e8 fe51 	bl	8000c90 <__aeabi_ui2f>
 8017fee:	4603      	mov	r3, r0
 8017ff0:	4619      	mov	r1, r3
 8017ff2:	68b8      	ldr	r0, [r7, #8]
 8017ff4:	f7e8 fd9a 	bl	8000b2c <__aeabi_fsub>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	6879      	ldr	r1, [r7, #4]
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f7e8 fd95 	bl	8000b2c <__aeabi_fsub>
 8018002:	4603      	mov	r3, r0
 8018004:	4618      	mov	r0, r3
 8018006:	f7e8 fa23 	bl	8000450 <__aeabi_f2d>
 801800a:	4602      	mov	r2, r0
 801800c:	460b      	mov	r3, r1
 801800e:	4610      	mov	r0, r2
 8018010:	4619      	mov	r1, r3
 8018012:	f006 fa7d 	bl	801e510 <floor>
 8018016:	4602      	mov	r2, r0
 8018018:	460b      	mov	r3, r1
 801801a:	4610      	mov	r0, r2
 801801c:	4619      	mov	r1, r3
 801801e:	f7e8 fd09 	bl	8000a34 <__aeabi_d2iz>
 8018022:	4603      	mov	r3, r0
 8018024:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8018026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801802a:	4618      	mov	r0, r3
 801802c:	3718      	adds	r7, #24
 801802e:	46bd      	mov	sp, r7
 8018030:	bd80      	pop	{r7, pc}

08018032 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8018032:	b590      	push	{r4, r7, lr}
 8018034:	b087      	sub	sp, #28
 8018036:	af00      	add	r7, sp, #0
 8018038:	60f8      	str	r0, [r7, #12]
 801803a:	60b9      	str	r1, [r7, #8]
 801803c:	607a      	str	r2, [r7, #4]
 801803e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018040:	2300      	movs	r3, #0
 8018042:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018044:	2300      	movs	r3, #0
 8018046:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018048:	2300      	movs	r3, #0
 801804a:	757b      	strb	r3, [r7, #21]
 801804c:	2300      	movs	r3, #0
 801804e:	753b      	strb	r3, [r7, #20]
 8018050:	e09c      	b.n	801818c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018052:	2300      	movs	r3, #0
 8018054:	74fb      	strb	r3, [r7, #19]
 8018056:	e08f      	b.n	8018178 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	685a      	ldr	r2, [r3, #4]
 801805c:	7d3b      	ldrb	r3, [r7, #20]
 801805e:	005b      	lsls	r3, r3, #1
 8018060:	4413      	add	r3, r2
 8018062:	881b      	ldrh	r3, [r3, #0]
 8018064:	461a      	mov	r2, r3
 8018066:	7cfb      	ldrb	r3, [r7, #19]
 8018068:	fa42 f303 	asr.w	r3, r2, r3
 801806c:	f003 0301 	and.w	r3, r3, #1
 8018070:	2b00      	cmp	r3, #0
 8018072:	d07e      	beq.n	8018172 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	689a      	ldr	r2, [r3, #8]
 8018078:	7d79      	ldrb	r1, [r7, #21]
 801807a:	7cfb      	ldrb	r3, [r7, #19]
 801807c:	440b      	add	r3, r1
 801807e:	4619      	mov	r1, r3
 8018080:	460b      	mov	r3, r1
 8018082:	005b      	lsls	r3, r3, #1
 8018084:	440b      	add	r3, r1
 8018086:	009b      	lsls	r3, r3, #2
 8018088:	4413      	add	r3, r2
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d06b      	beq.n	8018168 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	781b      	ldrb	r3, [r3, #0]
 8018094:	f083 0301 	eor.w	r3, r3, #1
 8018098:	b2db      	uxtb	r3, r3
 801809a:	2b00      	cmp	r3, #0
 801809c:	d011      	beq.n	80180c2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d00d      	beq.n	80180c2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	695a      	ldr	r2, [r3, #20]
 80180aa:	7d3b      	ldrb	r3, [r7, #20]
 80180ac:	005b      	lsls	r3, r3, #1
 80180ae:	4413      	add	r3, r2
 80180b0:	881b      	ldrh	r3, [r3, #0]
 80180b2:	461a      	mov	r2, r3
 80180b4:	7cfb      	ldrb	r3, [r7, #19]
 80180b6:	fa42 f303 	asr.w	r3, r2, r3
 80180ba:	f003 0301 	and.w	r3, r3, #1
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d054      	beq.n	801816c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	785b      	ldrb	r3, [r3, #1]
 80180c6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	689a      	ldr	r2, [r3, #8]
 80180cc:	7d79      	ldrb	r1, [r7, #21]
 80180ce:	7cfb      	ldrb	r3, [r7, #19]
 80180d0:	440b      	add	r3, r1
 80180d2:	4619      	mov	r1, r3
 80180d4:	460b      	mov	r3, r1
 80180d6:	005b      	lsls	r3, r3, #1
 80180d8:	440b      	add	r3, r1
 80180da:	009b      	lsls	r3, r3, #2
 80180dc:	4413      	add	r3, r2
 80180de:	7a1b      	ldrb	r3, [r3, #8]
 80180e0:	f343 0303 	sbfx	r3, r3, #0, #4
 80180e4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80180e6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	689a      	ldr	r2, [r3, #8]
 80180ec:	7d79      	ldrb	r1, [r7, #21]
 80180ee:	7cfb      	ldrb	r3, [r7, #19]
 80180f0:	440b      	add	r3, r1
 80180f2:	4619      	mov	r1, r3
 80180f4:	460b      	mov	r3, r1
 80180f6:	005b      	lsls	r3, r3, #1
 80180f8:	440b      	add	r3, r1
 80180fa:	009b      	lsls	r3, r3, #2
 80180fc:	4413      	add	r3, r2
 80180fe:	7a1b      	ldrb	r3, [r3, #8]
 8018100:	f343 1303 	sbfx	r3, r3, #4, #4
 8018104:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018106:	461a      	mov	r2, r3
 8018108:	4621      	mov	r1, r4
 801810a:	f7ff fbe8 	bl	80178de <RegionCommonValueInRange>
 801810e:	4603      	mov	r3, r0
 8018110:	2b00      	cmp	r3, #0
 8018112:	d02d      	beq.n	8018170 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	68da      	ldr	r2, [r3, #12]
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	6899      	ldr	r1, [r3, #8]
 801811c:	7d78      	ldrb	r0, [r7, #21]
 801811e:	7cfb      	ldrb	r3, [r7, #19]
 8018120:	4403      	add	r3, r0
 8018122:	4618      	mov	r0, r3
 8018124:	4603      	mov	r3, r0
 8018126:	005b      	lsls	r3, r3, #1
 8018128:	4403      	add	r3, r0
 801812a:	009b      	lsls	r3, r3, #2
 801812c:	440b      	add	r3, r1
 801812e:	7a5b      	ldrb	r3, [r3, #9]
 8018130:	4619      	mov	r1, r3
 8018132:	460b      	mov	r3, r1
 8018134:	005b      	lsls	r3, r3, #1
 8018136:	440b      	add	r3, r1
 8018138:	00db      	lsls	r3, r3, #3
 801813a:	4413      	add	r3, r2
 801813c:	7d1b      	ldrb	r3, [r3, #20]
 801813e:	f083 0301 	eor.w	r3, r3, #1
 8018142:	b2db      	uxtb	r3, r3
 8018144:	2b00      	cmp	r3, #0
 8018146:	d003      	beq.n	8018150 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018148:	7dbb      	ldrb	r3, [r7, #22]
 801814a:	3301      	adds	r3, #1
 801814c:	75bb      	strb	r3, [r7, #22]
                    continue;
 801814e:	e010      	b.n	8018172 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018150:	7dfb      	ldrb	r3, [r7, #23]
 8018152:	1c5a      	adds	r2, r3, #1
 8018154:	75fa      	strb	r2, [r7, #23]
 8018156:	461a      	mov	r2, r3
 8018158:	68bb      	ldr	r3, [r7, #8]
 801815a:	4413      	add	r3, r2
 801815c:	7d79      	ldrb	r1, [r7, #21]
 801815e:	7cfa      	ldrb	r2, [r7, #19]
 8018160:	440a      	add	r2, r1
 8018162:	b2d2      	uxtb	r2, r2
 8018164:	701a      	strb	r2, [r3, #0]
 8018166:	e004      	b.n	8018172 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018168:	bf00      	nop
 801816a:	e002      	b.n	8018172 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801816c:	bf00      	nop
 801816e:	e000      	b.n	8018172 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018170:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018172:	7cfb      	ldrb	r3, [r7, #19]
 8018174:	3301      	adds	r3, #1
 8018176:	74fb      	strb	r3, [r7, #19]
 8018178:	7cfb      	ldrb	r3, [r7, #19]
 801817a:	2b0f      	cmp	r3, #15
 801817c:	f67f af6c 	bls.w	8018058 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018180:	7d7b      	ldrb	r3, [r7, #21]
 8018182:	3310      	adds	r3, #16
 8018184:	757b      	strb	r3, [r7, #21]
 8018186:	7d3b      	ldrb	r3, [r7, #20]
 8018188:	3301      	adds	r3, #1
 801818a:	753b      	strb	r3, [r7, #20]
 801818c:	7d7b      	ldrb	r3, [r7, #21]
 801818e:	b29a      	uxth	r2, r3
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	8a1b      	ldrh	r3, [r3, #16]
 8018194:	429a      	cmp	r2, r3
 8018196:	f4ff af5c 	bcc.w	8018052 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	7dfa      	ldrb	r2, [r7, #23]
 801819e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80181a0:	683b      	ldr	r3, [r7, #0]
 80181a2:	7dba      	ldrb	r2, [r7, #22]
 80181a4:	701a      	strb	r2, [r3, #0]
}
 80181a6:	bf00      	nop
 80181a8:	371c      	adds	r7, #28
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd90      	pop	{r4, r7, pc}

080181ae <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80181ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181b0:	b08b      	sub	sp, #44	; 0x2c
 80181b2:	af04      	add	r7, sp, #16
 80181b4:	60f8      	str	r0, [r7, #12]
 80181b6:	60b9      	str	r1, [r7, #8]
 80181b8:	607a      	str	r2, [r7, #4]
 80181ba:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	685b      	ldr	r3, [r3, #4]
 80181c0:	4618      	mov	r0, r3
 80181c2:	f005 fdbd 	bl	801dd40 <UTIL_TIMER_GetElapsedTime>
 80181c6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	681a      	ldr	r2, [r3, #0]
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	1ad2      	subs	r2, r2, r3
 80181d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181d2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80181d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181d6:	2201      	movs	r2, #1
 80181d8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	2200      	movs	r2, #0
 80181de:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	685b      	ldr	r3, [r3, #4]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d004      	beq.n	80181f2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80181ec:	697a      	ldr	r2, [r7, #20]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d32b      	bcc.n	801824a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80181f2:	68bb      	ldr	r3, [r7, #8]
 80181f4:	2200      	movs	r2, #0
 80181f6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	69db      	ldr	r3, [r3, #28]
 80181fc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018202:	68dd      	ldr	r5, [r3, #12]
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	7a5e      	ldrb	r6, [r3, #9]
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	f893 c008 	ldrb.w	ip, [r3, #8]
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	7d1b      	ldrb	r3, [r3, #20]
 8018212:	68fa      	ldr	r2, [r7, #12]
 8018214:	6992      	ldr	r2, [r2, #24]
 8018216:	9203      	str	r2, [sp, #12]
 8018218:	68fa      	ldr	r2, [r7, #12]
 801821a:	f10d 0e04 	add.w	lr, sp, #4
 801821e:	320c      	adds	r2, #12
 8018220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018224:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018228:	9300      	str	r3, [sp, #0]
 801822a:	4663      	mov	r3, ip
 801822c:	4632      	mov	r2, r6
 801822e:	4629      	mov	r1, r5
 8018230:	4620      	mov	r0, r4
 8018232:	f7ff fc25 	bl	8017a80 <RegionCommonUpdateBandTimeOff>
 8018236:	4602      	mov	r2, r0
 8018238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801823a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	69d8      	ldr	r0, [r3, #28]
 8018240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018242:	683a      	ldr	r2, [r7, #0]
 8018244:	6879      	ldr	r1, [r7, #4]
 8018246:	f7ff fef4 	bl	8018032 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	781b      	ldrb	r3, [r3, #0]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d004      	beq.n	801825c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018254:	2200      	movs	r2, #0
 8018256:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018258:	2300      	movs	r3, #0
 801825a:	e006      	b.n	801826a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825e:	781b      	ldrb	r3, [r3, #0]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d001      	beq.n	8018268 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018264:	230b      	movs	r3, #11
 8018266:	e000      	b.n	801826a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018268:	230c      	movs	r3, #12
    }
}
 801826a:	4618      	mov	r0, r3
 801826c:	371c      	adds	r7, #28
 801826e:	46bd      	mov	sp, r7
 8018270:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018272 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018272:	b5b0      	push	{r4, r5, r7, lr}
 8018274:	b086      	sub	sp, #24
 8018276:	af02      	add	r7, sp, #8
 8018278:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	781b      	ldrb	r3, [r3, #0]
 801827e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	f993 2000 	ldrsb.w	r2, [r3]
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801828c:	429a      	cmp	r2, r3
 801828e:	d103      	bne.n	8018298 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018296:	e026      	b.n	80182e6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018298:	7bfb      	ldrb	r3, [r7, #15]
 801829a:	3b01      	subs	r3, #1
 801829c:	b2db      	uxtb	r3, r3
 801829e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80182a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d019      	beq.n	80182e2 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	78d8      	ldrb	r0, [r3, #3]
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	6859      	ldr	r1, [r3, #4]
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182c2:	687a      	ldr	r2, [r7, #4]
 80182c4:	6892      	ldr	r2, [r2, #8]
 80182c6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80182ca:	9201      	str	r2, [sp, #4]
 80182cc:	9300      	str	r3, [sp, #0]
 80182ce:	462b      	mov	r3, r5
 80182d0:	4622      	mov	r2, r4
 80182d2:	f7ff fa92 	bl	80177fa <RegionCommonChanVerifyDr>
 80182d6:	4603      	mov	r3, r0
 80182d8:	f083 0301 	eor.w	r3, r3, #1
 80182dc:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d1da      	bne.n	8018298 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80182e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3710      	adds	r7, #16
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bdb0      	pop	{r4, r5, r7, pc}

080182ee <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80182ee:	b480      	push	{r7}
 80182f0:	b083      	sub	sp, #12
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	4603      	mov	r3, r0
 80182f6:	460a      	mov	r2, r1
 80182f8:	71fb      	strb	r3, [r7, #7]
 80182fa:	4613      	mov	r3, r2
 80182fc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80182fe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018306:	4293      	cmp	r3, r2
 8018308:	bfb8      	it	lt
 801830a:	4613      	movlt	r3, r2
 801830c:	b25b      	sxtb	r3, r3
}
 801830e:	4618      	mov	r0, r3
 8018310:	370c      	adds	r7, #12
 8018312:	46bd      	mov	sp, r7
 8018314:	bc80      	pop	{r7}
 8018316:	4770      	bx	lr

08018318 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018318:	b480      	push	{r7}
 801831a:	b083      	sub	sp, #12
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
 8018320:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	009b      	lsls	r3, r3, #2
 8018326:	683a      	ldr	r2, [r7, #0]
 8018328:	4413      	add	r3, r2
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	4a07      	ldr	r2, [pc, #28]	; (801834c <RegionCommonGetBandwidth+0x34>)
 801832e:	4293      	cmp	r3, r2
 8018330:	d004      	beq.n	801833c <RegionCommonGetBandwidth+0x24>
 8018332:	4a07      	ldr	r2, [pc, #28]	; (8018350 <RegionCommonGetBandwidth+0x38>)
 8018334:	4293      	cmp	r3, r2
 8018336:	d003      	beq.n	8018340 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018338:	2300      	movs	r3, #0
 801833a:	e002      	b.n	8018342 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801833c:	2301      	movs	r3, #1
 801833e:	e000      	b.n	8018342 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018340:	2302      	movs	r3, #2
    }
}
 8018342:	4618      	mov	r0, r3
 8018344:	370c      	adds	r7, #12
 8018346:	46bd      	mov	sp, r7
 8018348:	bc80      	pop	{r7}
 801834a:	4770      	bx	lr
 801834c:	0003d090 	.word	0x0003d090
 8018350:	0007a120 	.word	0x0007a120

08018354 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b086      	sub	sp, #24
 8018358:	af04      	add	r7, sp, #16
 801835a:	4603      	mov	r3, r0
 801835c:	6039      	str	r1, [r7, #0]
 801835e:	71fb      	strb	r3, [r7, #7]
 8018360:	4613      	mov	r3, r2
 8018362:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018364:	79fb      	ldrb	r3, [r7, #7]
 8018366:	2b05      	cmp	r3, #5
 8018368:	d810      	bhi.n	801838c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801836a:	79fb      	ldrb	r3, [r7, #7]
 801836c:	4a0f      	ldr	r2, [pc, #60]	; (80183ac <RegionCommonRxConfigPrint+0x58>)
 801836e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018372:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018376:	9202      	str	r2, [sp, #8]
 8018378:	683a      	ldr	r2, [r7, #0]
 801837a:	9201      	str	r2, [sp, #4]
 801837c:	9300      	str	r3, [sp, #0]
 801837e:	4b0c      	ldr	r3, [pc, #48]	; (80183b0 <RegionCommonRxConfigPrint+0x5c>)
 8018380:	2201      	movs	r2, #1
 8018382:	2100      	movs	r1, #0
 8018384:	2002      	movs	r0, #2
 8018386:	f005 fdb9 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801838a:	e00a      	b.n	80183a2 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801838c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018390:	9301      	str	r3, [sp, #4]
 8018392:	683b      	ldr	r3, [r7, #0]
 8018394:	9300      	str	r3, [sp, #0]
 8018396:	4b07      	ldr	r3, [pc, #28]	; (80183b4 <RegionCommonRxConfigPrint+0x60>)
 8018398:	2201      	movs	r2, #1
 801839a:	2100      	movs	r1, #0
 801839c:	2002      	movs	r0, #2
 801839e:	f005 fdad 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 80183a2:	bf00      	nop
 80183a4:	3708      	adds	r7, #8
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}
 80183aa:	bf00      	nop
 80183ac:	20000144 	.word	0x20000144
 80183b0:	0801edc8 	.word	0x0801edc8
 80183b4:	0801ede8 	.word	0x0801ede8

080183b8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b084      	sub	sp, #16
 80183bc:	af02      	add	r7, sp, #8
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	460b      	mov	r3, r1
 80183c2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80183c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80183c8:	9301      	str	r3, [sp, #4]
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	9300      	str	r3, [sp, #0]
 80183ce:	4b05      	ldr	r3, [pc, #20]	; (80183e4 <RegionCommonTxConfigPrint+0x2c>)
 80183d0:	2201      	movs	r2, #1
 80183d2:	2100      	movs	r1, #0
 80183d4:	2002      	movs	r0, #2
 80183d6:	f005 fd91 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
}
 80183da:	bf00      	nop
 80183dc:	3708      	adds	r7, #8
 80183de:	46bd      	mov	sp, r7
 80183e0:	bd80      	pop	{r7, pc}
 80183e2:	bf00      	nop
 80183e4:	0801ee04 	.word	0x0801ee04

080183e8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b082      	sub	sp, #8
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
 80183f0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80183f2:	4b2d      	ldr	r3, [pc, #180]	; (80184a8 <VerifyRfFreq+0xc0>)
 80183f4:	6a1b      	ldr	r3, [r3, #32]
 80183f6:	6878      	ldr	r0, [r7, #4]
 80183f8:	4798      	blx	r3
 80183fa:	4603      	mov	r3, r0
 80183fc:	f083 0301 	eor.w	r3, r3, #1
 8018400:	b2db      	uxtb	r3, r3
 8018402:	2b00      	cmp	r3, #0
 8018404:	d001      	beq.n	801840a <VerifyRfFreq+0x22>
    {
        return false;
 8018406:	2300      	movs	r3, #0
 8018408:	e04a      	b.n	80184a0 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	4a27      	ldr	r2, [pc, #156]	; (80184ac <VerifyRfFreq+0xc4>)
 801840e:	4293      	cmp	r3, r2
 8018410:	d307      	bcc.n	8018422 <VerifyRfFreq+0x3a>
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	4a26      	ldr	r2, [pc, #152]	; (80184b0 <VerifyRfFreq+0xc8>)
 8018416:	4293      	cmp	r3, r2
 8018418:	d803      	bhi.n	8018422 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801841a:	683b      	ldr	r3, [r7, #0]
 801841c:	2202      	movs	r2, #2
 801841e:	701a      	strb	r2, [r3, #0]
 8018420:	e03d      	b.n	801849e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	4a22      	ldr	r2, [pc, #136]	; (80184b0 <VerifyRfFreq+0xc8>)
 8018426:	4293      	cmp	r3, r2
 8018428:	d907      	bls.n	801843a <VerifyRfFreq+0x52>
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	4a21      	ldr	r2, [pc, #132]	; (80184b4 <VerifyRfFreq+0xcc>)
 801842e:	4293      	cmp	r3, r2
 8018430:	d803      	bhi.n	801843a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	2200      	movs	r2, #0
 8018436:	701a      	strb	r2, [r3, #0]
 8018438:	e031      	b.n	801849e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	4a1d      	ldr	r2, [pc, #116]	; (80184b4 <VerifyRfFreq+0xcc>)
 801843e:	4293      	cmp	r3, r2
 8018440:	d907      	bls.n	8018452 <VerifyRfFreq+0x6a>
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	4a1c      	ldr	r2, [pc, #112]	; (80184b8 <VerifyRfFreq+0xd0>)
 8018446:	4293      	cmp	r3, r2
 8018448:	d803      	bhi.n	8018452 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	2201      	movs	r2, #1
 801844e:	701a      	strb	r2, [r3, #0]
 8018450:	e025      	b.n	801849e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	4a19      	ldr	r2, [pc, #100]	; (80184bc <VerifyRfFreq+0xd4>)
 8018456:	4293      	cmp	r3, r2
 8018458:	d907      	bls.n	801846a <VerifyRfFreq+0x82>
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	4a18      	ldr	r2, [pc, #96]	; (80184c0 <VerifyRfFreq+0xd8>)
 801845e:	4293      	cmp	r3, r2
 8018460:	d803      	bhi.n	801846a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018462:	683b      	ldr	r3, [r7, #0]
 8018464:	2205      	movs	r2, #5
 8018466:	701a      	strb	r2, [r3, #0]
 8018468:	e019      	b.n	801849e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	4a15      	ldr	r2, [pc, #84]	; (80184c4 <VerifyRfFreq+0xdc>)
 801846e:	4293      	cmp	r3, r2
 8018470:	d907      	bls.n	8018482 <VerifyRfFreq+0x9a>
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	4a14      	ldr	r2, [pc, #80]	; (80184c8 <VerifyRfFreq+0xe0>)
 8018476:	4293      	cmp	r3, r2
 8018478:	d803      	bhi.n	8018482 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801847a:	683b      	ldr	r3, [r7, #0]
 801847c:	2203      	movs	r2, #3
 801847e:	701a      	strb	r2, [r3, #0]
 8018480:	e00d      	b.n	801849e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	4a11      	ldr	r2, [pc, #68]	; (80184cc <VerifyRfFreq+0xe4>)
 8018486:	4293      	cmp	r3, r2
 8018488:	d307      	bcc.n	801849a <VerifyRfFreq+0xb2>
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	4a10      	ldr	r2, [pc, #64]	; (80184d0 <VerifyRfFreq+0xe8>)
 801848e:	4293      	cmp	r3, r2
 8018490:	d803      	bhi.n	801849a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018492:	683b      	ldr	r3, [r7, #0]
 8018494:	2204      	movs	r2, #4
 8018496:	701a      	strb	r2, [r3, #0]
 8018498:	e001      	b.n	801849e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801849a:	2300      	movs	r3, #0
 801849c:	e000      	b.n	80184a0 <VerifyRfFreq+0xb8>
    }
    return true;
 801849e:	2301      	movs	r3, #1
}
 80184a0:	4618      	mov	r0, r3
 80184a2:	3708      	adds	r7, #8
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}
 80184a8:	0801f3a4 	.word	0x0801f3a4
 80184ac:	337055c0 	.word	0x337055c0
 80184b0:	338eda3f 	.word	0x338eda3f
 80184b4:	33bca100 	.word	0x33bca100
 80184b8:	33c5c8c0 	.word	0x33c5c8c0
 80184bc:	33c74f5f 	.word	0x33c74f5f
 80184c0:	33cef080 	.word	0x33cef080
 80184c4:	33d1fdbf 	.word	0x33d1fdbf
 80184c8:	33d5ce50 	.word	0x33d5ce50
 80184cc:	33d691a0 	.word	0x33d691a0
 80184d0:	33db2580 	.word	0x33db2580

080184d4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80184d4:	b590      	push	{r4, r7, lr}
 80184d6:	b08b      	sub	sp, #44	; 0x2c
 80184d8:	af04      	add	r7, sp, #16
 80184da:	4603      	mov	r3, r0
 80184dc:	460a      	mov	r2, r1
 80184de:	71fb      	strb	r3, [r7, #7]
 80184e0:	4613      	mov	r3, r2
 80184e2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80184e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80184e8:	4a1f      	ldr	r2, [pc, #124]	; (8018568 <GetTimeOnAir+0x94>)
 80184ea:	5cd3      	ldrb	r3, [r2, r3]
 80184ec:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80184ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80184f2:	491e      	ldr	r1, [pc, #120]	; (801856c <GetTimeOnAir+0x98>)
 80184f4:	4618      	mov	r0, r3
 80184f6:	f7ff ff0f 	bl	8018318 <RegionCommonGetBandwidth>
 80184fa:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80184fc:	2300      	movs	r3, #0
 80184fe:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018504:	2b07      	cmp	r3, #7
 8018506:	d118      	bne.n	801853a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018508:	4b19      	ldr	r3, [pc, #100]	; (8018570 <GetTimeOnAir+0x9c>)
 801850a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801850c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018514:	fb02 f303 	mul.w	r3, r2, r3
 8018518:	4619      	mov	r1, r3
 801851a:	88bb      	ldrh	r3, [r7, #4]
 801851c:	b2db      	uxtb	r3, r3
 801851e:	2201      	movs	r2, #1
 8018520:	9203      	str	r2, [sp, #12]
 8018522:	9302      	str	r3, [sp, #8]
 8018524:	2300      	movs	r3, #0
 8018526:	9301      	str	r3, [sp, #4]
 8018528:	2305      	movs	r3, #5
 801852a:	9300      	str	r3, [sp, #0]
 801852c:	2300      	movs	r3, #0
 801852e:	460a      	mov	r2, r1
 8018530:	68f9      	ldr	r1, [r7, #12]
 8018532:	2000      	movs	r0, #0
 8018534:	47a0      	blx	r4
 8018536:	6178      	str	r0, [r7, #20]
 8018538:	e011      	b.n	801855e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801853a:	4b0d      	ldr	r3, [pc, #52]	; (8018570 <GetTimeOnAir+0x9c>)
 801853c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801853e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018542:	88bb      	ldrh	r3, [r7, #4]
 8018544:	b2db      	uxtb	r3, r3
 8018546:	2101      	movs	r1, #1
 8018548:	9103      	str	r1, [sp, #12]
 801854a:	9302      	str	r3, [sp, #8]
 801854c:	2300      	movs	r3, #0
 801854e:	9301      	str	r3, [sp, #4]
 8018550:	2308      	movs	r3, #8
 8018552:	9300      	str	r3, [sp, #0]
 8018554:	2301      	movs	r3, #1
 8018556:	68f9      	ldr	r1, [r7, #12]
 8018558:	2001      	movs	r0, #1
 801855a:	47a0      	blx	r4
 801855c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801855e:	697b      	ldr	r3, [r7, #20]
}
 8018560:	4618      	mov	r0, r3
 8018562:	371c      	adds	r7, #28
 8018564:	46bd      	mov	sp, r7
 8018566:	bd90      	pop	{r4, r7, pc}
 8018568:	0801f36c 	.word	0x0801f36c
 801856c:	0801f374 	.word	0x0801f374
 8018570:	0801f3a4 	.word	0x0801f3a4

08018574 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b088      	sub	sp, #32
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801857c:	2300      	movs	r3, #0
 801857e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	781b      	ldrb	r3, [r3, #0]
 8018584:	3b01      	subs	r3, #1
 8018586:	2b38      	cmp	r3, #56	; 0x38
 8018588:	f200 8128 	bhi.w	80187dc <RegionEU868GetPhyParam+0x268>
 801858c:	a201      	add	r2, pc, #4	; (adr r2, 8018594 <RegionEU868GetPhyParam+0x20>)
 801858e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018592:	bf00      	nop
 8018594:	08018679 	.word	0x08018679
 8018598:	0801867f 	.word	0x0801867f
 801859c:	080187dd 	.word	0x080187dd
 80185a0:	080187dd 	.word	0x080187dd
 80185a4:	080187dd 	.word	0x080187dd
 80185a8:	08018685 	.word	0x08018685
 80185ac:	080187dd 	.word	0x080187dd
 80185b0:	080186bf 	.word	0x080186bf
 80185b4:	080187dd 	.word	0x080187dd
 80185b8:	080186c5 	.word	0x080186c5
 80185bc:	080186cb 	.word	0x080186cb
 80185c0:	080186d1 	.word	0x080186d1
 80185c4:	080186d7 	.word	0x080186d7
 80185c8:	080186e7 	.word	0x080186e7
 80185cc:	080186f7 	.word	0x080186f7
 80185d0:	080186fd 	.word	0x080186fd
 80185d4:	08018705 	.word	0x08018705
 80185d8:	0801870d 	.word	0x0801870d
 80185dc:	08018715 	.word	0x08018715
 80185e0:	0801871d 	.word	0x0801871d
 80185e4:	08018725 	.word	0x08018725
 80185e8:	0801872d 	.word	0x0801872d
 80185ec:	08018741 	.word	0x08018741
 80185f0:	08018747 	.word	0x08018747
 80185f4:	0801874d 	.word	0x0801874d
 80185f8:	08018753 	.word	0x08018753
 80185fc:	0801875f 	.word	0x0801875f
 8018600:	0801876b 	.word	0x0801876b
 8018604:	08018771 	.word	0x08018771
 8018608:	08018779 	.word	0x08018779
 801860c:	0801877f 	.word	0x0801877f
 8018610:	08018785 	.word	0x08018785
 8018614:	0801878d 	.word	0x0801878d
 8018618:	0801868b 	.word	0x0801868b
 801861c:	080187dd 	.word	0x080187dd
 8018620:	080187dd 	.word	0x080187dd
 8018624:	080187dd 	.word	0x080187dd
 8018628:	080187dd 	.word	0x080187dd
 801862c:	080187dd 	.word	0x080187dd
 8018630:	080187dd 	.word	0x080187dd
 8018634:	080187dd 	.word	0x080187dd
 8018638:	080187dd 	.word	0x080187dd
 801863c:	080187dd 	.word	0x080187dd
 8018640:	080187dd 	.word	0x080187dd
 8018644:	080187dd 	.word	0x080187dd
 8018648:	080187dd 	.word	0x080187dd
 801864c:	080187dd 	.word	0x080187dd
 8018650:	08018793 	.word	0x08018793
 8018654:	08018799 	.word	0x08018799
 8018658:	080187a7 	.word	0x080187a7
 801865c:	080187dd 	.word	0x080187dd
 8018660:	080187dd 	.word	0x080187dd
 8018664:	080187ad 	.word	0x080187ad
 8018668:	080187b3 	.word	0x080187b3
 801866c:	080187dd 	.word	0x080187dd
 8018670:	080187b9 	.word	0x080187b9
 8018674:	080187c9 	.word	0x080187c9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018678:	2300      	movs	r3, #0
 801867a:	61bb      	str	r3, [r7, #24]
            break;
 801867c:	e0af      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801867e:	2300      	movs	r3, #0
 8018680:	61bb      	str	r3, [r7, #24]
            break;
 8018682:	e0ac      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018684:	2300      	movs	r3, #0
 8018686:	61bb      	str	r3, [r7, #24]
            break;
 8018688:	e0a9      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018690:	733b      	strb	r3, [r7, #12]
 8018692:	2307      	movs	r3, #7
 8018694:	737b      	strb	r3, [r7, #13]
 8018696:	2300      	movs	r3, #0
 8018698:	73bb      	strb	r3, [r7, #14]
 801869a:	2310      	movs	r3, #16
 801869c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801869e:	4b53      	ldr	r3, [pc, #332]	; (80187ec <RegionEU868GetPhyParam+0x278>)
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80186a6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80186a8:	4b50      	ldr	r3, [pc, #320]	; (80187ec <RegionEU868GetPhyParam+0x278>)
 80186aa:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80186ac:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80186ae:	f107 030c 	add.w	r3, r7, #12
 80186b2:	4618      	mov	r0, r3
 80186b4:	f7ff fddd 	bl	8018272 <RegionCommonGetNextLowerTxDr>
 80186b8:	4603      	mov	r3, r0
 80186ba:	61bb      	str	r3, [r7, #24]
            break;
 80186bc:	e08f      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80186be:	2300      	movs	r3, #0
 80186c0:	61bb      	str	r3, [r7, #24]
            break;
 80186c2:	e08c      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80186c4:	2300      	movs	r3, #0
 80186c6:	61bb      	str	r3, [r7, #24]
            break;
 80186c8:	e089      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80186ca:	2340      	movs	r3, #64	; 0x40
 80186cc:	61bb      	str	r3, [r7, #24]
            break;
 80186ce:	e086      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80186d0:	2320      	movs	r3, #32
 80186d2:	61bb      	str	r3, [r7, #24]
            break;
 80186d4:	e083      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80186dc:	461a      	mov	r2, r3
 80186de:	4b44      	ldr	r3, [pc, #272]	; (80187f0 <RegionEU868GetPhyParam+0x27c>)
 80186e0:	5c9b      	ldrb	r3, [r3, r2]
 80186e2:	61bb      	str	r3, [r7, #24]
            break;
 80186e4:	e07b      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80186ec:	461a      	mov	r2, r3
 80186ee:	4b41      	ldr	r3, [pc, #260]	; (80187f4 <RegionEU868GetPhyParam+0x280>)
 80186f0:	5c9b      	ldrb	r3, [r3, r2]
 80186f2:	61bb      	str	r3, [r7, #24]
            break;
 80186f4:	e073      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80186f6:	2301      	movs	r3, #1
 80186f8:	61bb      	str	r3, [r7, #24]
            break;
 80186fa:	e070      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80186fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018700:	61bb      	str	r3, [r7, #24]
            break;
 8018702:	e06c      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018708:	61bb      	str	r3, [r7, #24]
            break;
 801870a:	e068      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801870c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018710:	61bb      	str	r3, [r7, #24]
            break;
 8018712:	e064      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018714:	f241 3388 	movw	r3, #5000	; 0x1388
 8018718:	61bb      	str	r3, [r7, #24]
            break;
 801871a:	e060      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801871c:	f241 7370 	movw	r3, #6000	; 0x1770
 8018720:	61bb      	str	r3, [r7, #24]
            break;
 8018722:	e05c      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018728:	61bb      	str	r3, [r7, #24]
            break;
 801872a:	e058      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801872c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018730:	4831      	ldr	r0, [pc, #196]	; (80187f8 <RegionEU868GetPhyParam+0x284>)
 8018732:	f001 f879 	bl	8019828 <randr>
 8018736:	4603      	mov	r3, r0
 8018738:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801873c:	61bb      	str	r3, [r7, #24]
            break;
 801873e:	e04e      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018740:	2300      	movs	r3, #0
 8018742:	61bb      	str	r3, [r7, #24]
            break;
 8018744:	e04b      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018746:	4b2d      	ldr	r3, [pc, #180]	; (80187fc <RegionEU868GetPhyParam+0x288>)
 8018748:	61bb      	str	r3, [r7, #24]
            break;
 801874a:	e048      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801874c:	2300      	movs	r3, #0
 801874e:	61bb      	str	r3, [r7, #24]
            break;
 8018750:	e045      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018752:	4b26      	ldr	r3, [pc, #152]	; (80187ec <RegionEU868GetPhyParam+0x278>)
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801875a:	61bb      	str	r3, [r7, #24]
            break;
 801875c:	e03f      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801875e:	4b23      	ldr	r3, [pc, #140]	; (80187ec <RegionEU868GetPhyParam+0x278>)
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018766:	61bb      	str	r3, [r7, #24]
            break;
 8018768:	e039      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801876a:	2310      	movs	r3, #16
 801876c:	61bb      	str	r3, [r7, #24]
            break;
 801876e:	e036      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018770:	4b1e      	ldr	r3, [pc, #120]	; (80187ec <RegionEU868GetPhyParam+0x278>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	61bb      	str	r3, [r7, #24]
            break;
 8018776:	e032      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018778:	2300      	movs	r3, #0
 801877a:	61bb      	str	r3, [r7, #24]
            break;
 801877c:	e02f      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801877e:	2300      	movs	r3, #0
 8018780:	61bb      	str	r3, [r7, #24]
            break;
 8018782:	e02c      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018784:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018788:	61bb      	str	r3, [r7, #24]
            break;
 801878a:	e028      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801878c:	4b1c      	ldr	r3, [pc, #112]	; (8018800 <RegionEU868GetPhyParam+0x28c>)
 801878e:	61bb      	str	r3, [r7, #24]
            break;
 8018790:	e025      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018792:	4b1a      	ldr	r3, [pc, #104]	; (80187fc <RegionEU868GetPhyParam+0x288>)
 8018794:	61bb      	str	r3, [r7, #24]
            break;
 8018796:	e022      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018798:	2311      	movs	r3, #17
 801879a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801879c:	2302      	movs	r3, #2
 801879e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80187a0:	2300      	movs	r3, #0
 80187a2:	76bb      	strb	r3, [r7, #26]
            break;
 80187a4:	e01b      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80187a6:	2303      	movs	r3, #3
 80187a8:	61bb      	str	r3, [r7, #24]
            break;
 80187aa:	e018      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80187ac:	4b13      	ldr	r3, [pc, #76]	; (80187fc <RegionEU868GetPhyParam+0x288>)
 80187ae:	61bb      	str	r3, [r7, #24]
            break;
 80187b0:	e015      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80187b2:	2303      	movs	r3, #3
 80187b4:	61bb      	str	r3, [r7, #24]
            break;
 80187b6:	e012      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80187be:	461a      	mov	r2, r3
 80187c0:	4b10      	ldr	r3, [pc, #64]	; (8018804 <RegionEU868GetPhyParam+0x290>)
 80187c2:	5c9b      	ldrb	r3, [r3, r2]
 80187c4:	61bb      	str	r3, [r7, #24]
            break;
 80187c6:	e00a      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80187ce:	490e      	ldr	r1, [pc, #56]	; (8018808 <RegionEU868GetPhyParam+0x294>)
 80187d0:	4618      	mov	r0, r3
 80187d2:	f7ff fda1 	bl	8018318 <RegionCommonGetBandwidth>
 80187d6:	4603      	mov	r3, r0
 80187d8:	61bb      	str	r3, [r7, #24]
            break;
 80187da:	e000      	b.n	80187de <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 80187dc:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80187de:	69bb      	ldr	r3, [r7, #24]
 80187e0:	61fb      	str	r3, [r7, #28]
 80187e2:	69fb      	ldr	r3, [r7, #28]
}
 80187e4:	4618      	mov	r0, r3
 80187e6:	3720      	adds	r7, #32
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}
 80187ec:	20001dec 	.word	0x20001dec
 80187f0:	0801f394 	.word	0x0801f394
 80187f4:	0801f39c 	.word	0x0801f39c
 80187f8:	fffffc18 	.word	0xfffffc18
 80187fc:	33d3e608 	.word	0x33d3e608
 8018800:	4009999a 	.word	0x4009999a
 8018804:	0801f36c 	.word	0x0801f36c
 8018808:	0801f374 	.word	0x0801f374

0801880c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801880c:	b590      	push	{r4, r7, lr}
 801880e:	b085      	sub	sp, #20
 8018810:	af02      	add	r7, sp, #8
 8018812:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018814:	4b11      	ldr	r3, [pc, #68]	; (801885c <RegionEU868SetBandTxDone+0x50>)
 8018816:	681a      	ldr	r2, [r3, #0]
 8018818:	4b11      	ldr	r3, [pc, #68]	; (8018860 <RegionEU868SetBandTxDone+0x54>)
 801881a:	6819      	ldr	r1, [r3, #0]
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	781b      	ldrb	r3, [r3, #0]
 8018820:	4618      	mov	r0, r3
 8018822:	4603      	mov	r3, r0
 8018824:	005b      	lsls	r3, r3, #1
 8018826:	4403      	add	r3, r0
 8018828:	009b      	lsls	r3, r3, #2
 801882a:	440b      	add	r3, r1
 801882c:	3309      	adds	r3, #9
 801882e:	781b      	ldrb	r3, [r3, #0]
 8018830:	4619      	mov	r1, r3
 8018832:	460b      	mov	r3, r1
 8018834:	005b      	lsls	r3, r3, #1
 8018836:	440b      	add	r3, r1
 8018838:	00db      	lsls	r3, r3, #3
 801883a:	18d0      	adds	r0, r2, r3
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	6899      	ldr	r1, [r3, #8]
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	785c      	ldrb	r4, [r3, #1]
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	691a      	ldr	r2, [r3, #16]
 8018848:	9200      	str	r2, [sp, #0]
 801884a:	68db      	ldr	r3, [r3, #12]
 801884c:	4622      	mov	r2, r4
 801884e:	f7ff f8e9 	bl	8017a24 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018852:	bf00      	nop
 8018854:	370c      	adds	r7, #12
 8018856:	46bd      	mov	sp, r7
 8018858:	bd90      	pop	{r4, r7, pc}
 801885a:	bf00      	nop
 801885c:	20001de8 	.word	0x20001de8
 8018860:	20001dec 	.word	0x20001dec

08018864 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b0b0      	sub	sp, #192	; 0xc0
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801886c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018870:	2290      	movs	r2, #144	; 0x90
 8018872:	2100      	movs	r1, #0
 8018874:	4618      	mov	r0, r3
 8018876:	f005 fdb9 	bl	801e3ec <memset>
 801887a:	2364      	movs	r3, #100	; 0x64
 801887c:	863b      	strh	r3, [r7, #48]	; 0x30
 801887e:	2364      	movs	r3, #100	; 0x64
 8018880:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018888:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 801888c:	230a      	movs	r3, #10
 801888e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8018892:	2364      	movs	r3, #100	; 0x64
 8018894:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8018898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801889c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	7a1b      	ldrb	r3, [r3, #8]
 80188a4:	2b02      	cmp	r3, #2
 80188a6:	d05e      	beq.n	8018966 <RegionEU868InitDefaults+0x102>
 80188a8:	2b02      	cmp	r3, #2
 80188aa:	dc6b      	bgt.n	8018984 <RegionEU868InitDefaults+0x120>
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d002      	beq.n	80188b6 <RegionEU868InitDefaults+0x52>
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	d03f      	beq.n	8018934 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80188b4:	e066      	b.n	8018984 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d063      	beq.n	8018986 <RegionEU868InitDefaults+0x122>
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	685b      	ldr	r3, [r3, #4]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d05f      	beq.n	8018986 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	4a30      	ldr	r2, [pc, #192]	; (801898c <RegionEU868InitDefaults+0x128>)
 80188cc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	685b      	ldr	r3, [r3, #4]
 80188d2:	4a2f      	ldr	r2, [pc, #188]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 80188d4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80188d6:	4b2d      	ldr	r3, [pc, #180]	; (801898c <RegionEU868InitDefaults+0x128>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	4618      	mov	r0, r3
 80188dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80188e0:	2290      	movs	r2, #144	; 0x90
 80188e2:	4619      	mov	r1, r3
 80188e4:	f000 ffb7 	bl	8019856 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80188e8:	4b29      	ldr	r3, [pc, #164]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	4a29      	ldr	r2, [pc, #164]	; (8018994 <RegionEU868InitDefaults+0x130>)
 80188ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80188f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80188f4:	4b26      	ldr	r3, [pc, #152]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	4a27      	ldr	r2, [pc, #156]	; (8018998 <RegionEU868InitDefaults+0x134>)
 80188fa:	330c      	adds	r3, #12
 80188fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80188fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018902:	4b23      	ldr	r3, [pc, #140]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	4a25      	ldr	r2, [pc, #148]	; (801899c <RegionEU868InitDefaults+0x138>)
 8018908:	3318      	adds	r3, #24
 801890a:	ca07      	ldmia	r2, {r0, r1, r2}
 801890c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018910:	4b1f      	ldr	r3, [pc, #124]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	2207      	movs	r2, #7
 8018916:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801891a:	4b1d      	ldr	r3, [pc, #116]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018922:	4b1b      	ldr	r3, [pc, #108]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801892a:	2201      	movs	r2, #1
 801892c:	4619      	mov	r1, r3
 801892e:	f7ff f853 	bl	80179d8 <RegionCommonChanMaskCopy>
 8018932:	e028      	b.n	8018986 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018934:	4b16      	ldr	r3, [pc, #88]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	2200      	movs	r2, #0
 801893a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801893c:	4b14      	ldr	r3, [pc, #80]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	2200      	movs	r2, #0
 8018942:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018944:	4b12      	ldr	r3, [pc, #72]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	2200      	movs	r2, #0
 801894a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801894c:	4b10      	ldr	r3, [pc, #64]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018954:	4b0e      	ldr	r3, [pc, #56]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801895c:	2201      	movs	r2, #1
 801895e:	4619      	mov	r1, r3
 8018960:	f7ff f83a 	bl	80179d8 <RegionCommonChanMaskCopy>
            break;
 8018964:	e00f      	b.n	8018986 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018966:	4b0a      	ldr	r3, [pc, #40]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 801896e:	4b08      	ldr	r3, [pc, #32]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8018976:	4b06      	ldr	r3, [pc, #24]	; (8018990 <RegionEU868InitDefaults+0x12c>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	430a      	orrs	r2, r1
 801897c:	b292      	uxth	r2, r2
 801897e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8018982:	e000      	b.n	8018986 <RegionEU868InitDefaults+0x122>
            break;
 8018984:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018986:	37c0      	adds	r7, #192	; 0xc0
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}
 801898c:	20001de8 	.word	0x20001de8
 8018990:	20001dec 	.word	0x20001dec
 8018994:	0801ee20 	.word	0x0801ee20
 8018998:	0801ee2c 	.word	0x0801ee2c
 801899c:	0801ee38 	.word	0x0801ee38

080189a0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b084      	sub	sp, #16
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
 80189a8:	460b      	mov	r3, r1
 80189aa:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80189ac:	78fb      	ldrb	r3, [r7, #3]
 80189ae:	2b0f      	cmp	r3, #15
 80189b0:	d86c      	bhi.n	8018a8c <RegionEU868Verify+0xec>
 80189b2:	a201      	add	r2, pc, #4	; (adr r2, 80189b8 <RegionEU868Verify+0x18>)
 80189b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189b8:	080189f9 	.word	0x080189f9
 80189bc:	08018a8d 	.word	0x08018a8d
 80189c0:	08018a8d 	.word	0x08018a8d
 80189c4:	08018a8d 	.word	0x08018a8d
 80189c8:	08018a8d 	.word	0x08018a8d
 80189cc:	08018a11 	.word	0x08018a11
 80189d0:	08018a2f 	.word	0x08018a2f
 80189d4:	08018a4d 	.word	0x08018a4d
 80189d8:	08018a8d 	.word	0x08018a8d
 80189dc:	08018a6b 	.word	0x08018a6b
 80189e0:	08018a6b 	.word	0x08018a6b
 80189e4:	08018a8d 	.word	0x08018a8d
 80189e8:	08018a8d 	.word	0x08018a8d
 80189ec:	08018a8d 	.word	0x08018a8d
 80189f0:	08018a8d 	.word	0x08018a8d
 80189f4:	08018a89 	.word	0x08018a89
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80189f8:	2300      	movs	r3, #0
 80189fa:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	f107 020f 	add.w	r2, r7, #15
 8018a04:	4611      	mov	r1, r2
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7ff fcee 	bl	80183e8 <VerifyRfFreq>
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	e03e      	b.n	8018a8e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	f993 3000 	ldrsb.w	r3, [r3]
 8018a16:	2207      	movs	r2, #7
 8018a18:	2100      	movs	r1, #0
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f7fe ff5f 	bl	80178de <RegionCommonValueInRange>
 8018a20:	4603      	mov	r3, r0
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	bf14      	ite	ne
 8018a26:	2301      	movne	r3, #1
 8018a28:	2300      	moveq	r3, #0
 8018a2a:	b2db      	uxtb	r3, r3
 8018a2c:	e02f      	b.n	8018a8e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	f993 3000 	ldrsb.w	r3, [r3]
 8018a34:	2205      	movs	r2, #5
 8018a36:	2100      	movs	r1, #0
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f7fe ff50 	bl	80178de <RegionCommonValueInRange>
 8018a3e:	4603      	mov	r3, r0
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	bf14      	ite	ne
 8018a44:	2301      	movne	r3, #1
 8018a46:	2300      	moveq	r3, #0
 8018a48:	b2db      	uxtb	r3, r3
 8018a4a:	e020      	b.n	8018a8e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8018a52:	2207      	movs	r2, #7
 8018a54:	2100      	movs	r1, #0
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7fe ff41 	bl	80178de <RegionCommonValueInRange>
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	bf14      	ite	ne
 8018a62:	2301      	movne	r3, #1
 8018a64:	2300      	moveq	r3, #0
 8018a66:	b2db      	uxtb	r3, r3
 8018a68:	e011      	b.n	8018a8e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8018a70:	2207      	movs	r2, #7
 8018a72:	2100      	movs	r1, #0
 8018a74:	4618      	mov	r0, r3
 8018a76:	f7fe ff32 	bl	80178de <RegionCommonValueInRange>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	bf14      	ite	ne
 8018a80:	2301      	movne	r3, #1
 8018a82:	2300      	moveq	r3, #0
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	e002      	b.n	8018a8e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8018a88:	2301      	movs	r3, #1
 8018a8a:	e000      	b.n	8018a8e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8018a8c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8018a8e:	4618      	mov	r0, r3
 8018a90:	3710      	adds	r7, #16
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd80      	pop	{r7, pc}
 8018a96:	bf00      	nop

08018a98 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b08a      	sub	sp, #40	; 0x28
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018aa0:	2350      	movs	r3, #80	; 0x50
 8018aa2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	791b      	ldrb	r3, [r3, #4]
 8018aaa:	2b10      	cmp	r3, #16
 8018aac:	d162      	bne.n	8018b74 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	330f      	adds	r3, #15
 8018ab4:	781b      	ldrb	r3, [r3, #0]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d15e      	bne.n	8018b78 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018aba:	2300      	movs	r3, #0
 8018abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ac0:	2303      	movs	r3, #3
 8018ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018ac6:	e050      	b.n	8018b6a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8018ac8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018acc:	2b07      	cmp	r3, #7
 8018ace:	d824      	bhi.n	8018b1a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	681a      	ldr	r2, [r3, #0]
 8018ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ad8:	4413      	add	r3, r2
 8018ada:	781b      	ldrb	r3, [r3, #0]
 8018adc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8018ade:	69ba      	ldr	r2, [r7, #24]
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	6819      	ldr	r1, [r3, #0]
 8018ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ae8:	3301      	adds	r3, #1
 8018aea:	440b      	add	r3, r1
 8018aec:	781b      	ldrb	r3, [r3, #0]
 8018aee:	021b      	lsls	r3, r3, #8
 8018af0:	4313      	orrs	r3, r2
 8018af2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8018af4:	69ba      	ldr	r2, [r7, #24]
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	6819      	ldr	r1, [r3, #0]
 8018afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018afe:	3302      	adds	r3, #2
 8018b00:	440b      	add	r3, r1
 8018b02:	781b      	ldrb	r3, [r3, #0]
 8018b04:	041b      	lsls	r3, r3, #16
 8018b06:	4313      	orrs	r3, r2
 8018b08:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8018b0a:	69bb      	ldr	r3, [r7, #24]
 8018b0c:	2264      	movs	r2, #100	; 0x64
 8018b0e:	fb02 f303 	mul.w	r3, r2, r3
 8018b12:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018b14:	2300      	movs	r3, #0
 8018b16:	61fb      	str	r3, [r7, #28]
 8018b18:	e006      	b.n	8018b28 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8018b1e:	2300      	movs	r3, #0
 8018b20:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8018b24:	2300      	movs	r3, #0
 8018b26:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8018b28:	69bb      	ldr	r3, [r7, #24]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d00b      	beq.n	8018b46 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8018b2e:	f107 0318 	add.w	r3, r7, #24
 8018b32:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8018b34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b38:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018b3a:	f107 0310 	add.w	r3, r7, #16
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f000 fd0e 	bl	8019560 <RegionEU868ChannelAdd>
 8018b44:	e007      	b.n	8018b56 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b4a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8018b4c:	f107 030c 	add.w	r3, r7, #12
 8018b50:	4618      	mov	r0, r3
 8018b52:	f000 fda7 	bl	80196a4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b5a:	3303      	adds	r3, #3
 8018b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b64:	3301      	adds	r3, #1
 8018b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b6e:	2b0f      	cmp	r3, #15
 8018b70:	d9aa      	bls.n	8018ac8 <RegionEU868ApplyCFList+0x30>
 8018b72:	e002      	b.n	8018b7a <RegionEU868ApplyCFList+0xe2>
        return;
 8018b74:	bf00      	nop
 8018b76:	e000      	b.n	8018b7a <RegionEU868ApplyCFList+0xe2>
        return;
 8018b78:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018b7a:	3728      	adds	r7, #40	; 0x28
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}

08018b80 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b082      	sub	sp, #8
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	791b      	ldrb	r3, [r3, #4]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d002      	beq.n	8018b96 <RegionEU868ChanMaskSet+0x16>
 8018b90:	2b01      	cmp	r3, #1
 8018b92:	d00b      	beq.n	8018bac <RegionEU868ChanMaskSet+0x2c>
 8018b94:	e015      	b.n	8018bc2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018b96:	4b0e      	ldr	r3, [pc, #56]	; (8018bd0 <RegionEU868ChanMaskSet+0x50>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	2201      	movs	r2, #1
 8018ba4:	4619      	mov	r1, r3
 8018ba6:	f7fe ff17 	bl	80179d8 <RegionCommonChanMaskCopy>
            break;
 8018baa:	e00c      	b.n	8018bc6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018bac:	4b08      	ldr	r3, [pc, #32]	; (8018bd0 <RegionEU868ChanMaskSet+0x50>)
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	2201      	movs	r2, #1
 8018bba:	4619      	mov	r1, r3
 8018bbc:	f7fe ff0c 	bl	80179d8 <RegionCommonChanMaskCopy>
            break;
 8018bc0:	e001      	b.n	8018bc6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	e000      	b.n	8018bc8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8018bc6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018bc8:	4618      	mov	r0, r3
 8018bca:	3708      	adds	r7, #8
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd80      	pop	{r7, pc}
 8018bd0:	20001dec 	.word	0x20001dec

08018bd4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b088      	sub	sp, #32
 8018bd8:	af02      	add	r7, sp, #8
 8018bda:	60ba      	str	r2, [r7, #8]
 8018bdc:	607b      	str	r3, [r7, #4]
 8018bde:	4603      	mov	r3, r0
 8018be0:	73fb      	strb	r3, [r7, #15]
 8018be2:	460b      	mov	r3, r1
 8018be4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8018be6:	2300      	movs	r3, #0
 8018be8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8018bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018bee:	2b07      	cmp	r3, #7
 8018bf0:	bfa8      	it	ge
 8018bf2:	2307      	movge	r3, #7
 8018bf4:	b25a      	sxtb	r2, r3
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c00:	491e      	ldr	r1, [pc, #120]	; (8018c7c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7ff fb88 	bl	8018318 <RegionCommonGetBandwidth>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	b2da      	uxtb	r2, r3
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c16:	2b07      	cmp	r3, #7
 8018c18:	d10a      	bne.n	8018c30 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c20:	461a      	mov	r2, r3
 8018c22:	4b17      	ldr	r3, [pc, #92]	; (8018c80 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018c24:	5c9b      	ldrb	r3, [r3, r2]
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7ff f90a 	bl	8017e40 <RegionCommonComputeSymbolTimeFsk>
 8018c2c:	6178      	str	r0, [r7, #20]
 8018c2e:	e011      	b.n	8018c54 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c36:	461a      	mov	r2, r3
 8018c38:	4b11      	ldr	r3, [pc, #68]	; (8018c80 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018c3a:	5c9a      	ldrb	r2, [r3, r2]
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c42:	4619      	mov	r1, r3
 8018c44:	4b0d      	ldr	r3, [pc, #52]	; (8018c7c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018c46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018c4a:	4619      	mov	r1, r3
 8018c4c:	4610      	mov	r0, r2
 8018c4e:	f7ff f8e1 	bl	8017e14 <RegionCommonComputeSymbolTimeLoRa>
 8018c52:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018c54:	4b0b      	ldr	r3, [pc, #44]	; (8018c84 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8018c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c58:	4798      	blx	r3
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	3308      	adds	r3, #8
 8018c5e:	687a      	ldr	r2, [r7, #4]
 8018c60:	320c      	adds	r2, #12
 8018c62:	7bb9      	ldrb	r1, [r7, #14]
 8018c64:	9201      	str	r2, [sp, #4]
 8018c66:	9300      	str	r3, [sp, #0]
 8018c68:	4603      	mov	r3, r0
 8018c6a:	68ba      	ldr	r2, [r7, #8]
 8018c6c:	6978      	ldr	r0, [r7, #20]
 8018c6e:	f7ff f8f7 	bl	8017e60 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8018c72:	bf00      	nop
 8018c74:	3718      	adds	r7, #24
 8018c76:	46bd      	mov	sp, r7
 8018c78:	bd80      	pop	{r7, pc}
 8018c7a:	bf00      	nop
 8018c7c:	0801f374 	.word	0x0801f374
 8018c80:	0801f36c 	.word	0x0801f36c
 8018c84:	0801f3a4 	.word	0x0801f3a4

08018c88 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018c88:	b5b0      	push	{r4, r5, r7, lr}
 8018c8a:	b090      	sub	sp, #64	; 0x40
 8018c8c:	af0a      	add	r7, sp, #40	; 0x28
 8018c8e:	6078      	str	r0, [r7, #4]
 8018c90:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	785b      	ldrb	r3, [r3, #1]
 8018c96:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018c98:	2300      	movs	r3, #0
 8018c9a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	685b      	ldr	r3, [r3, #4]
 8018ca4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018ca6:	4b5a      	ldr	r3, [pc, #360]	; (8018e10 <RegionEU868RxConfig+0x188>)
 8018ca8:	685b      	ldr	r3, [r3, #4]
 8018caa:	4798      	blx	r3
 8018cac:	4603      	mov	r3, r0
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d001      	beq.n	8018cb6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	e0a8      	b.n	8018e08 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	7cdb      	ldrb	r3, [r3, #19]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d126      	bne.n	8018d0c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8018cbe:	4b55      	ldr	r3, [pc, #340]	; (8018e14 <RegionEU868RxConfig+0x18c>)
 8018cc0:	681a      	ldr	r2, [r3, #0]
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	781b      	ldrb	r3, [r3, #0]
 8018cc6:	4619      	mov	r1, r3
 8018cc8:	460b      	mov	r3, r1
 8018cca:	005b      	lsls	r3, r3, #1
 8018ccc:	440b      	add	r3, r1
 8018cce:	009b      	lsls	r3, r3, #2
 8018cd0:	4413      	add	r3, r2
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018cd6:	4b4f      	ldr	r3, [pc, #316]	; (8018e14 <RegionEU868RxConfig+0x18c>)
 8018cd8:	681a      	ldr	r2, [r3, #0]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	4619      	mov	r1, r3
 8018ce0:	460b      	mov	r3, r1
 8018ce2:	005b      	lsls	r3, r3, #1
 8018ce4:	440b      	add	r3, r1
 8018ce6:	009b      	lsls	r3, r3, #2
 8018ce8:	4413      	add	r3, r2
 8018cea:	3304      	adds	r3, #4
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d00c      	beq.n	8018d0c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8018cf2:	4b48      	ldr	r3, [pc, #288]	; (8018e14 <RegionEU868RxConfig+0x18c>)
 8018cf4:	681a      	ldr	r2, [r3, #0]
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	781b      	ldrb	r3, [r3, #0]
 8018cfa:	4619      	mov	r1, r3
 8018cfc:	460b      	mov	r3, r1
 8018cfe:	005b      	lsls	r3, r3, #1
 8018d00:	440b      	add	r3, r1
 8018d02:	009b      	lsls	r3, r3, #2
 8018d04:	4413      	add	r3, r2
 8018d06:	3304      	adds	r3, #4
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d10:	4a41      	ldr	r2, [pc, #260]	; (8018e18 <RegionEU868RxConfig+0x190>)
 8018d12:	5cd3      	ldrb	r3, [r2, r3]
 8018d14:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018d16:	4b3e      	ldr	r3, [pc, #248]	; (8018e10 <RegionEU868RxConfig+0x188>)
 8018d18:	68db      	ldr	r3, [r3, #12]
 8018d1a:	6938      	ldr	r0, [r7, #16]
 8018d1c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d22:	2b07      	cmp	r3, #7
 8018d24:	d128      	bne.n	8018d78 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8018d26:	2300      	movs	r3, #0
 8018d28:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018d2a:	4b39      	ldr	r3, [pc, #228]	; (8018e10 <RegionEU868RxConfig+0x188>)
 8018d2c:	699c      	ldr	r4, [r3, #24]
 8018d2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018d36:	fb02 f303 	mul.w	r3, r2, r3
 8018d3a:	4619      	mov	r1, r3
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	689b      	ldr	r3, [r3, #8]
 8018d40:	b29b      	uxth	r3, r3
 8018d42:	687a      	ldr	r2, [r7, #4]
 8018d44:	7c92      	ldrb	r2, [r2, #18]
 8018d46:	7df8      	ldrb	r0, [r7, #23]
 8018d48:	9209      	str	r2, [sp, #36]	; 0x24
 8018d4a:	2200      	movs	r2, #0
 8018d4c:	9208      	str	r2, [sp, #32]
 8018d4e:	2200      	movs	r2, #0
 8018d50:	9207      	str	r2, [sp, #28]
 8018d52:	2200      	movs	r2, #0
 8018d54:	9206      	str	r2, [sp, #24]
 8018d56:	2201      	movs	r2, #1
 8018d58:	9205      	str	r2, [sp, #20]
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	9204      	str	r2, [sp, #16]
 8018d5e:	2200      	movs	r2, #0
 8018d60:	9203      	str	r2, [sp, #12]
 8018d62:	9302      	str	r3, [sp, #8]
 8018d64:	2305      	movs	r3, #5
 8018d66:	9301      	str	r3, [sp, #4]
 8018d68:	4b2c      	ldr	r3, [pc, #176]	; (8018e1c <RegionEU868RxConfig+0x194>)
 8018d6a:	9300      	str	r3, [sp, #0]
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	460a      	mov	r2, r1
 8018d70:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018d74:	47a0      	blx	r4
 8018d76:	e024      	b.n	8018dc2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8018d78:	2301      	movs	r3, #1
 8018d7a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018d7c:	4b24      	ldr	r3, [pc, #144]	; (8018e10 <RegionEU868RxConfig+0x188>)
 8018d7e:	699c      	ldr	r4, [r3, #24]
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	789b      	ldrb	r3, [r3, #2]
 8018d84:	461d      	mov	r5, r3
 8018d86:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	689b      	ldr	r3, [r3, #8]
 8018d8e:	b29b      	uxth	r3, r3
 8018d90:	687a      	ldr	r2, [r7, #4]
 8018d92:	7c92      	ldrb	r2, [r2, #18]
 8018d94:	7df8      	ldrb	r0, [r7, #23]
 8018d96:	9209      	str	r2, [sp, #36]	; 0x24
 8018d98:	2201      	movs	r2, #1
 8018d9a:	9208      	str	r2, [sp, #32]
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	9207      	str	r2, [sp, #28]
 8018da0:	2200      	movs	r2, #0
 8018da2:	9206      	str	r2, [sp, #24]
 8018da4:	2200      	movs	r2, #0
 8018da6:	9205      	str	r2, [sp, #20]
 8018da8:	2200      	movs	r2, #0
 8018daa:	9204      	str	r2, [sp, #16]
 8018dac:	2200      	movs	r2, #0
 8018dae:	9203      	str	r2, [sp, #12]
 8018db0:	9302      	str	r3, [sp, #8]
 8018db2:	2308      	movs	r3, #8
 8018db4:	9301      	str	r3, [sp, #4]
 8018db6:	2300      	movs	r3, #0
 8018db8:	9300      	str	r3, [sp, #0]
 8018dba:	2301      	movs	r3, #1
 8018dbc:	460a      	mov	r2, r1
 8018dbe:	4629      	mov	r1, r5
 8018dc0:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	7c5b      	ldrb	r3, [r3, #17]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d005      	beq.n	8018dd6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8018dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018dce:	4a14      	ldr	r2, [pc, #80]	; (8018e20 <RegionEU868RxConfig+0x198>)
 8018dd0:	5cd3      	ldrb	r3, [r2, r3]
 8018dd2:	75bb      	strb	r3, [r7, #22]
 8018dd4:	e004      	b.n	8018de0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8018dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018dda:	4a12      	ldr	r2, [pc, #72]	; (8018e24 <RegionEU868RxConfig+0x19c>)
 8018ddc:	5cd3      	ldrb	r3, [r2, r3]
 8018dde:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018de0:	4b0b      	ldr	r3, [pc, #44]	; (8018e10 <RegionEU868RxConfig+0x188>)
 8018de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018de4:	7dba      	ldrb	r2, [r7, #22]
 8018de6:	320d      	adds	r2, #13
 8018de8:	b2d1      	uxtb	r1, r2
 8018dea:	7dfa      	ldrb	r2, [r7, #23]
 8018dec:	4610      	mov	r0, r2
 8018dee:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	7cdb      	ldrb	r3, [r3, #19]
 8018df4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018df8:	6939      	ldr	r1, [r7, #16]
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7ff faaa 	bl	8018354 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018e00:	683b      	ldr	r3, [r7, #0]
 8018e02:	7bfa      	ldrb	r2, [r7, #15]
 8018e04:	701a      	strb	r2, [r3, #0]
    return true;
 8018e06:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018e08:	4618      	mov	r0, r3
 8018e0a:	3718      	adds	r7, #24
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8018e10:	0801f3a4 	.word	0x0801f3a4
 8018e14:	20001dec 	.word	0x20001dec
 8018e18:	0801f36c 	.word	0x0801f36c
 8018e1c:	00014585 	.word	0x00014585
 8018e20:	0801f39c 	.word	0x0801f39c
 8018e24:	0801f394 	.word	0x0801f394

08018e28 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018e28:	b590      	push	{r4, r7, lr}
 8018e2a:	b093      	sub	sp, #76	; 0x4c
 8018e2c:	af0a      	add	r7, sp, #40	; 0x28
 8018e2e:	60f8      	str	r0, [r7, #12]
 8018e30:	60b9      	str	r1, [r7, #8]
 8018e32:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018e3a:	461a      	mov	r2, r3
 8018e3c:	4b5d      	ldr	r3, [pc, #372]	; (8018fb4 <RegionEU868TxConfig+0x18c>)
 8018e3e:	5c9b      	ldrb	r3, [r3, r2]
 8018e40:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018e48:	4b5b      	ldr	r3, [pc, #364]	; (8018fb8 <RegionEU868TxConfig+0x190>)
 8018e4a:	681a      	ldr	r2, [r3, #0]
 8018e4c:	4b5b      	ldr	r3, [pc, #364]	; (8018fbc <RegionEU868TxConfig+0x194>)
 8018e4e:	6819      	ldr	r1, [r3, #0]
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	781b      	ldrb	r3, [r3, #0]
 8018e54:	461c      	mov	r4, r3
 8018e56:	4623      	mov	r3, r4
 8018e58:	005b      	lsls	r3, r3, #1
 8018e5a:	4423      	add	r3, r4
 8018e5c:	009b      	lsls	r3, r3, #2
 8018e5e:	440b      	add	r3, r1
 8018e60:	3309      	adds	r3, #9
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	4619      	mov	r1, r3
 8018e66:	460b      	mov	r3, r1
 8018e68:	005b      	lsls	r3, r3, #1
 8018e6a:	440b      	add	r3, r1
 8018e6c:	00db      	lsls	r3, r3, #3
 8018e6e:	4413      	add	r3, r2
 8018e70:	3302      	adds	r3, #2
 8018e72:	f993 3000 	ldrsb.w	r3, [r3]
 8018e76:	4619      	mov	r1, r3
 8018e78:	f7ff fa39 	bl	80182ee <RegionCommonLimitTxPower>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018e86:	494e      	ldr	r1, [pc, #312]	; (8018fc0 <RegionEU868TxConfig+0x198>)
 8018e88:	4618      	mov	r0, r3
 8018e8a:	f7ff fa45 	bl	8018318 <RegionCommonGetBandwidth>
 8018e8e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018e90:	2300      	movs	r3, #0
 8018e92:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	6859      	ldr	r1, [r3, #4]
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	689a      	ldr	r2, [r3, #8]
 8018e9c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f7ff f895 	bl	8017fd0 <RegionCommonComputeTxPower>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018eaa:	4b46      	ldr	r3, [pc, #280]	; (8018fc4 <RegionEU868TxConfig+0x19c>)
 8018eac:	68da      	ldr	r2, [r3, #12]
 8018eae:	4b43      	ldr	r3, [pc, #268]	; (8018fbc <RegionEU868TxConfig+0x194>)
 8018eb0:	6819      	ldr	r1, [r3, #0]
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	781b      	ldrb	r3, [r3, #0]
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	4603      	mov	r3, r0
 8018eba:	005b      	lsls	r3, r3, #1
 8018ebc:	4403      	add	r3, r0
 8018ebe:	009b      	lsls	r3, r3, #2
 8018ec0:	440b      	add	r3, r1
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ece:	2b07      	cmp	r3, #7
 8018ed0:	d124      	bne.n	8018f1c <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018ed6:	4b3b      	ldr	r3, [pc, #236]	; (8018fc4 <RegionEU868TxConfig+0x19c>)
 8018ed8:	69dc      	ldr	r4, [r3, #28]
 8018eda:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018ee2:	fb02 f303 	mul.w	r3, r2, r3
 8018ee6:	461a      	mov	r2, r3
 8018ee8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018eec:	7ff8      	ldrb	r0, [r7, #31]
 8018eee:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8018ef2:	9308      	str	r3, [sp, #32]
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	9307      	str	r3, [sp, #28]
 8018ef8:	2300      	movs	r3, #0
 8018efa:	9306      	str	r3, [sp, #24]
 8018efc:	2300      	movs	r3, #0
 8018efe:	9305      	str	r3, [sp, #20]
 8018f00:	2301      	movs	r3, #1
 8018f02:	9304      	str	r3, [sp, #16]
 8018f04:	2300      	movs	r3, #0
 8018f06:	9303      	str	r3, [sp, #12]
 8018f08:	2305      	movs	r3, #5
 8018f0a:	9302      	str	r3, [sp, #8]
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	9301      	str	r3, [sp, #4]
 8018f10:	9200      	str	r2, [sp, #0]
 8018f12:	69bb      	ldr	r3, [r7, #24]
 8018f14:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8018f18:	47a0      	blx	r4
 8018f1a:	e01d      	b.n	8018f58 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8018f1c:	2301      	movs	r3, #1
 8018f1e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018f20:	4b28      	ldr	r3, [pc, #160]	; (8018fc4 <RegionEU868TxConfig+0x19c>)
 8018f22:	69dc      	ldr	r4, [r3, #28]
 8018f24:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018f28:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018f2c:	7ff8      	ldrb	r0, [r7, #31]
 8018f2e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018f32:	9208      	str	r2, [sp, #32]
 8018f34:	2200      	movs	r2, #0
 8018f36:	9207      	str	r2, [sp, #28]
 8018f38:	2200      	movs	r2, #0
 8018f3a:	9206      	str	r2, [sp, #24]
 8018f3c:	2200      	movs	r2, #0
 8018f3e:	9205      	str	r2, [sp, #20]
 8018f40:	2201      	movs	r2, #1
 8018f42:	9204      	str	r2, [sp, #16]
 8018f44:	2200      	movs	r2, #0
 8018f46:	9203      	str	r2, [sp, #12]
 8018f48:	2208      	movs	r2, #8
 8018f4a:	9202      	str	r2, [sp, #8]
 8018f4c:	2201      	movs	r2, #1
 8018f4e:	9201      	str	r2, [sp, #4]
 8018f50:	9300      	str	r3, [sp, #0]
 8018f52:	69bb      	ldr	r3, [r7, #24]
 8018f54:	2200      	movs	r2, #0
 8018f56:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018f58:	4b18      	ldr	r3, [pc, #96]	; (8018fbc <RegionEU868TxConfig+0x194>)
 8018f5a:	681a      	ldr	r2, [r3, #0]
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	781b      	ldrb	r3, [r3, #0]
 8018f60:	4619      	mov	r1, r3
 8018f62:	460b      	mov	r3, r1
 8018f64:	005b      	lsls	r3, r3, #1
 8018f66:	440b      	add	r3, r1
 8018f68:	009b      	lsls	r3, r3, #2
 8018f6a:	4413      	add	r3, r2
 8018f6c:	681a      	ldr	r2, [r3, #0]
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f74:	4619      	mov	r1, r3
 8018f76:	4610      	mov	r0, r2
 8018f78:	f7ff fa1e 	bl	80183b8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	899b      	ldrh	r3, [r3, #12]
 8018f86:	4619      	mov	r1, r3
 8018f88:	4610      	mov	r0, r2
 8018f8a:	f7ff faa3 	bl	80184d4 <GetTimeOnAir>
 8018f8e:	4602      	mov	r2, r0
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018f94:	4b0b      	ldr	r3, [pc, #44]	; (8018fc4 <RegionEU868TxConfig+0x19c>)
 8018f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f98:	68fa      	ldr	r2, [r7, #12]
 8018f9a:	8992      	ldrh	r2, [r2, #12]
 8018f9c:	b2d1      	uxtb	r1, r2
 8018f9e:	7ffa      	ldrb	r2, [r7, #31]
 8018fa0:	4610      	mov	r0, r2
 8018fa2:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018fa4:	68bb      	ldr	r3, [r7, #8]
 8018fa6:	7f7a      	ldrb	r2, [r7, #29]
 8018fa8:	701a      	strb	r2, [r3, #0]
    return true;
 8018faa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018fac:	4618      	mov	r0, r3
 8018fae:	3724      	adds	r7, #36	; 0x24
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd90      	pop	{r4, r7, pc}
 8018fb4:	0801f36c 	.word	0x0801f36c
 8018fb8:	20001de8 	.word	0x20001de8
 8018fbc:	20001dec 	.word	0x20001dec
 8018fc0:	0801f374 	.word	0x0801f374
 8018fc4:	0801f3a4 	.word	0x0801f3a4

08018fc8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018fc8:	b590      	push	{r4, r7, lr}
 8018fca:	b093      	sub	sp, #76	; 0x4c
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	60f8      	str	r0, [r7, #12]
 8018fd0:	60b9      	str	r1, [r7, #8]
 8018fd2:	607a      	str	r2, [r7, #4]
 8018fd4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018fd6:	2307      	movs	r3, #7
 8018fd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018fdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	601a      	str	r2, [r3, #0]
 8018fe4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8018fec:	2300      	movs	r3, #0
 8018fee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018ff6:	e085      	b.n	8019104 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	685a      	ldr	r2, [r3, #4]
 8018ffc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019000:	4413      	add	r3, r2
 8019002:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019006:	4611      	mov	r1, r2
 8019008:	4618      	mov	r0, r3
 801900a:	f7fe fe29 	bl	8017c60 <RegionCommonParseLinkAdrReq>
 801900e:	4603      	mov	r3, r0
 8019010:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8019014:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019018:	2b00      	cmp	r3, #0
 801901a:	d07b      	beq.n	8019114 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801901c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019020:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019024:	4413      	add	r3, r2
 8019026:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801902a:	2307      	movs	r3, #7
 801902c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019030:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019034:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019036:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801903a:	2b00      	cmp	r3, #0
 801903c:	d109      	bne.n	8019052 <RegionEU868LinkAdrReq+0x8a>
 801903e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019040:	2b00      	cmp	r3, #0
 8019042:	d106      	bne.n	8019052 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019044:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019048:	f023 0301 	bic.w	r3, r3, #1
 801904c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019050:	e058      	b.n	8019104 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019052:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019056:	2b00      	cmp	r3, #0
 8019058:	d003      	beq.n	8019062 <RegionEU868LinkAdrReq+0x9a>
 801905a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801905e:	2b05      	cmp	r3, #5
 8019060:	d903      	bls.n	801906a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019062:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019066:	2b06      	cmp	r3, #6
 8019068:	d906      	bls.n	8019078 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801906a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801906e:	f023 0301 	bic.w	r3, r3, #1
 8019072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019076:	e045      	b.n	8019104 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019078:	2300      	movs	r3, #0
 801907a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801907e:	e03d      	b.n	80190fc <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019080:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019084:	2b06      	cmp	r3, #6
 8019086:	d118      	bne.n	80190ba <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019088:	4b5f      	ldr	r3, [pc, #380]	; (8019208 <RegionEU868LinkAdrReq+0x240>)
 801908a:	6819      	ldr	r1, [r3, #0]
 801908c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019090:	4613      	mov	r3, r2
 8019092:	005b      	lsls	r3, r3, #1
 8019094:	4413      	add	r3, r2
 8019096:	009b      	lsls	r3, r3, #2
 8019098:	440b      	add	r3, r1
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d028      	beq.n	80190f2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80190a0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80190a4:	2201      	movs	r2, #1
 80190a6:	fa02 f303 	lsl.w	r3, r2, r3
 80190aa:	b21a      	sxth	r2, r3
 80190ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80190ae:	b21b      	sxth	r3, r3
 80190b0:	4313      	orrs	r3, r2
 80190b2:	b21b      	sxth	r3, r3
 80190b4:	b29b      	uxth	r3, r3
 80190b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80190b8:	e01b      	b.n	80190f2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80190ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80190bc:	461a      	mov	r2, r3
 80190be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80190c2:	fa42 f303 	asr.w	r3, r2, r3
 80190c6:	f003 0301 	and.w	r3, r3, #1
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d011      	beq.n	80190f2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80190ce:	4b4e      	ldr	r3, [pc, #312]	; (8019208 <RegionEU868LinkAdrReq+0x240>)
 80190d0:	6819      	ldr	r1, [r3, #0]
 80190d2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80190d6:	4613      	mov	r3, r2
 80190d8:	005b      	lsls	r3, r3, #1
 80190da:	4413      	add	r3, r2
 80190dc:	009b      	lsls	r3, r3, #2
 80190de:	440b      	add	r3, r1
 80190e0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d105      	bne.n	80190f2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80190e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80190ea:	f023 0301 	bic.w	r3, r3, #1
 80190ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80190f2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80190f6:	3301      	adds	r3, #1
 80190f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80190fc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019100:	2b0f      	cmp	r3, #15
 8019102:	d9bd      	bls.n	8019080 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	7a1b      	ldrb	r3, [r3, #8]
 8019108:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801910c:	429a      	cmp	r2, r3
 801910e:	f4ff af73 	bcc.w	8018ff8 <RegionEU868LinkAdrReq+0x30>
 8019112:	e000      	b.n	8019116 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8019114:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019116:	2302      	movs	r3, #2
 8019118:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	7a5b      	ldrb	r3, [r3, #9]
 8019120:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8019124:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019128:	4618      	mov	r0, r3
 801912a:	f7ff fa23 	bl	8018574 <RegionEU868GetPhyParam>
 801912e:	4603      	mov	r3, r0
 8019130:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8019132:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019136:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	7a9b      	ldrb	r3, [r3, #10]
 801913c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801913e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019142:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019144:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8019148:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801914a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801914e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019156:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801915e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	7b5b      	ldrb	r3, [r3, #13]
 8019164:	b25b      	sxtb	r3, r3
 8019166:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019168:	2310      	movs	r3, #16
 801916a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801916c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019170:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019174:	b25b      	sxtb	r3, r3
 8019176:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801917a:	2307      	movs	r3, #7
 801917c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019180:	4b21      	ldr	r3, [pc, #132]	; (8019208 <RegionEU868LinkAdrReq+0x240>)
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019186:	2307      	movs	r3, #7
 8019188:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801918c:	2300      	movs	r3, #0
 801918e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019198:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801919c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80191a0:	1c9a      	adds	r2, r3, #2
 80191a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80191a6:	1c59      	adds	r1, r3, #1
 80191a8:	f107 0010 	add.w	r0, r7, #16
 80191ac:	4623      	mov	r3, r4
 80191ae:	f7fe fda8 	bl	8017d02 <RegionCommonLinkAdrReqVerifyParams>
 80191b2:	4603      	mov	r3, r0
 80191b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80191b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80191bc:	2b07      	cmp	r3, #7
 80191be:	d10d      	bne.n	80191dc <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80191c0:	4b11      	ldr	r3, [pc, #68]	; (8019208 <RegionEU868LinkAdrReq+0x240>)
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80191c8:	220c      	movs	r2, #12
 80191ca:	2100      	movs	r1, #0
 80191cc:	4618      	mov	r0, r3
 80191ce:	f000 fb7d 	bl	80198cc <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80191d2:	4b0d      	ldr	r3, [pc, #52]	; (8019208 <RegionEU868LinkAdrReq+0x240>)
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80191d8:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80191dc:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80191e0:	68bb      	ldr	r3, [r7, #8]
 80191e2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80191e4:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80191ec:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80191f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80191f6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80191fa:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80191fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019200:	4618      	mov	r0, r3
 8019202:	374c      	adds	r7, #76	; 0x4c
 8019204:	46bd      	mov	sp, r7
 8019206:	bd90      	pop	{r4, r7, pc}
 8019208:	20001dec 	.word	0x20001dec

0801920c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b084      	sub	sp, #16
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019214:	2307      	movs	r3, #7
 8019216:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019218:	2300      	movs	r3, #0
 801921a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	685b      	ldr	r3, [r3, #4]
 8019220:	f107 020e 	add.w	r2, r7, #14
 8019224:	4611      	mov	r1, r2
 8019226:	4618      	mov	r0, r3
 8019228:	f7ff f8de 	bl	80183e8 <VerifyRfFreq>
 801922c:	4603      	mov	r3, r0
 801922e:	f083 0301 	eor.w	r3, r3, #1
 8019232:	b2db      	uxtb	r3, r3
 8019234:	2b00      	cmp	r3, #0
 8019236:	d003      	beq.n	8019240 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019238:	7bfb      	ldrb	r3, [r7, #15]
 801923a:	f023 0301 	bic.w	r3, r3, #1
 801923e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	f993 3000 	ldrsb.w	r3, [r3]
 8019246:	2207      	movs	r2, #7
 8019248:	2100      	movs	r1, #0
 801924a:	4618      	mov	r0, r3
 801924c:	f7fe fb47 	bl	80178de <RegionCommonValueInRange>
 8019250:	4603      	mov	r3, r0
 8019252:	2b00      	cmp	r3, #0
 8019254:	d103      	bne.n	801925e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019256:	7bfb      	ldrb	r3, [r7, #15]
 8019258:	f023 0302 	bic.w	r3, r3, #2
 801925c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019264:	2205      	movs	r2, #5
 8019266:	2100      	movs	r1, #0
 8019268:	4618      	mov	r0, r3
 801926a:	f7fe fb38 	bl	80178de <RegionCommonValueInRange>
 801926e:	4603      	mov	r3, r0
 8019270:	2b00      	cmp	r3, #0
 8019272:	d103      	bne.n	801927c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019274:	7bfb      	ldrb	r3, [r7, #15]
 8019276:	f023 0304 	bic.w	r3, r3, #4
 801927a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801927c:	7bfb      	ldrb	r3, [r7, #15]
}
 801927e:	4618      	mov	r0, r3
 8019280:	3710      	adds	r7, #16
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
	...

08019288 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b086      	sub	sp, #24
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019290:	2303      	movs	r3, #3
 8019292:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	2b00      	cmp	r3, #0
 801929c:	d114      	bne.n	80192c8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80192a8:	f107 0308 	add.w	r3, r7, #8
 80192ac:	4618      	mov	r0, r3
 80192ae:	f000 f9f9 	bl	80196a4 <RegionEU868ChannelsRemove>
 80192b2:	4603      	mov	r3, r0
 80192b4:	f083 0301 	eor.w	r3, r3, #1
 80192b8:	b2db      	uxtb	r3, r3
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d03b      	beq.n	8019336 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80192be:	7dfb      	ldrb	r3, [r7, #23]
 80192c0:	f023 0303 	bic.w	r3, r3, #3
 80192c4:	75fb      	strb	r3, [r7, #23]
 80192c6:	e036      	b.n	8019336 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80192d4:	b2db      	uxtb	r3, r3
 80192d6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80192d8:	f107 030c 	add.w	r3, r7, #12
 80192dc:	4618      	mov	r0, r3
 80192de:	f000 f93f 	bl	8019560 <RegionEU868ChannelAdd>
 80192e2:	4603      	mov	r3, r0
 80192e4:	2b06      	cmp	r3, #6
 80192e6:	d820      	bhi.n	801932a <RegionEU868NewChannelReq+0xa2>
 80192e8:	a201      	add	r2, pc, #4	; (adr r2, 80192f0 <RegionEU868NewChannelReq+0x68>)
 80192ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192ee:	bf00      	nop
 80192f0:	08019335 	.word	0x08019335
 80192f4:	0801932b 	.word	0x0801932b
 80192f8:	0801932b 	.word	0x0801932b
 80192fc:	0801932b 	.word	0x0801932b
 8019300:	0801930d 	.word	0x0801930d
 8019304:	08019317 	.word	0x08019317
 8019308:	08019321 	.word	0x08019321
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801930c:	7dfb      	ldrb	r3, [r7, #23]
 801930e:	f023 0301 	bic.w	r3, r3, #1
 8019312:	75fb      	strb	r3, [r7, #23]
                break;
 8019314:	e00f      	b.n	8019336 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019316:	7dfb      	ldrb	r3, [r7, #23]
 8019318:	f023 0302 	bic.w	r3, r3, #2
 801931c:	75fb      	strb	r3, [r7, #23]
                break;
 801931e:	e00a      	b.n	8019336 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019320:	7dfb      	ldrb	r3, [r7, #23]
 8019322:	f023 0303 	bic.w	r3, r3, #3
 8019326:	75fb      	strb	r3, [r7, #23]
                break;
 8019328:	e005      	b.n	8019336 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801932a:	7dfb      	ldrb	r3, [r7, #23]
 801932c:	f023 0303 	bic.w	r3, r3, #3
 8019330:	75fb      	strb	r3, [r7, #23]
                break;
 8019332:	e000      	b.n	8019336 <RegionEU868NewChannelReq+0xae>
                break;
 8019334:	bf00      	nop
            }
        }
    }

    return status;
 8019336:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801933a:	4618      	mov	r0, r3
 801933c:	3718      	adds	r7, #24
 801933e:	46bd      	mov	sp, r7
 8019340:	bd80      	pop	{r7, pc}
 8019342:	bf00      	nop

08019344 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019344:	b480      	push	{r7}
 8019346:	b083      	sub	sp, #12
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801934c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019350:	4618      	mov	r0, r3
 8019352:	370c      	adds	r7, #12
 8019354:	46bd      	mov	sp, r7
 8019356:	bc80      	pop	{r7}
 8019358:	4770      	bx	lr
	...

0801935c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b084      	sub	sp, #16
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019364:	2303      	movs	r3, #3
 8019366:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019368:	2300      	movs	r3, #0
 801936a:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	685b      	ldr	r3, [r3, #4]
 8019370:	f107 020e 	add.w	r2, r7, #14
 8019374:	4611      	mov	r1, r2
 8019376:	4618      	mov	r0, r3
 8019378:	f7ff f836 	bl	80183e8 <VerifyRfFreq>
 801937c:	4603      	mov	r3, r0
 801937e:	f083 0301 	eor.w	r3, r3, #1
 8019382:	b2db      	uxtb	r3, r3
 8019384:	2b00      	cmp	r3, #0
 8019386:	d003      	beq.n	8019390 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8019388:	7bfb      	ldrb	r3, [r7, #15]
 801938a:	f023 0301 	bic.w	r3, r3, #1
 801938e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019390:	4b13      	ldr	r3, [pc, #76]	; (80193e0 <RegionEU868DlChannelReq+0x84>)
 8019392:	681a      	ldr	r2, [r3, #0]
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	781b      	ldrb	r3, [r3, #0]
 8019398:	4619      	mov	r1, r3
 801939a:	460b      	mov	r3, r1
 801939c:	005b      	lsls	r3, r3, #1
 801939e:	440b      	add	r3, r1
 80193a0:	009b      	lsls	r3, r3, #2
 80193a2:	4413      	add	r3, r2
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d103      	bne.n	80193b2 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 80193aa:	7bfb      	ldrb	r3, [r7, #15]
 80193ac:	f023 0302 	bic.w	r3, r3, #2
 80193b0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80193b2:	7bfb      	ldrb	r3, [r7, #15]
 80193b4:	2b03      	cmp	r3, #3
 80193b6:	d10d      	bne.n	80193d4 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80193b8:	4b09      	ldr	r3, [pc, #36]	; (80193e0 <RegionEU868DlChannelReq+0x84>)
 80193ba:	6819      	ldr	r1, [r3, #0]
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	781b      	ldrb	r3, [r3, #0]
 80193c0:	4618      	mov	r0, r3
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	685a      	ldr	r2, [r3, #4]
 80193c6:	4603      	mov	r3, r0
 80193c8:	005b      	lsls	r3, r3, #1
 80193ca:	4403      	add	r3, r0
 80193cc:	009b      	lsls	r3, r3, #2
 80193ce:	440b      	add	r3, r1
 80193d0:	3304      	adds	r3, #4
 80193d2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80193d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80193d8:	4618      	mov	r0, r3
 80193da:	3710      	adds	r7, #16
 80193dc:	46bd      	mov	sp, r7
 80193de:	bd80      	pop	{r7, pc}
 80193e0:	20001dec 	.word	0x20001dec

080193e4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80193e4:	b480      	push	{r7}
 80193e6:	b083      	sub	sp, #12
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	4603      	mov	r3, r0
 80193ec:	460a      	mov	r2, r1
 80193ee:	71fb      	strb	r3, [r7, #7]
 80193f0:	4613      	mov	r3, r2
 80193f2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80193f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80193f8:	4618      	mov	r0, r3
 80193fa:	370c      	adds	r7, #12
 80193fc:	46bd      	mov	sp, r7
 80193fe:	bc80      	pop	{r7}
 8019400:	4770      	bx	lr
	...

08019404 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b09a      	sub	sp, #104	; 0x68
 8019408:	af02      	add	r7, sp, #8
 801940a:	60f8      	str	r0, [r7, #12]
 801940c:	60b9      	str	r1, [r7, #8]
 801940e:	607a      	str	r2, [r7, #4]
 8019410:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8019412:	2300      	movs	r3, #0
 8019414:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019418:	2300      	movs	r3, #0
 801941a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801941e:	2300      	movs	r3, #0
 8019420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019422:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019426:	2200      	movs	r2, #0
 8019428:	601a      	str	r2, [r3, #0]
 801942a:	605a      	str	r2, [r3, #4]
 801942c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801942e:	230c      	movs	r3, #12
 8019430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019434:	2307      	movs	r3, #7
 8019436:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019438:	4b47      	ldr	r3, [pc, #284]	; (8019558 <RegionEU868NextChannel+0x154>)
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019440:	2201      	movs	r2, #1
 8019442:	2100      	movs	r1, #0
 8019444:	4618      	mov	r0, r3
 8019446:	f7fe fa9b 	bl	8017980 <RegionCommonCountChannels>
 801944a:	4603      	mov	r3, r0
 801944c:	2b00      	cmp	r3, #0
 801944e:	d10a      	bne.n	8019466 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019450:	4b41      	ldr	r3, [pc, #260]	; (8019558 <RegionEU868NextChannel+0x154>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019458:	4b3f      	ldr	r3, [pc, #252]	; (8019558 <RegionEU868NextChannel+0x154>)
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	f042 0207 	orr.w	r2, r2, #7
 8019460:	b292      	uxth	r2, r2
 8019462:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	7a5b      	ldrb	r3, [r3, #9]
 801946a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019472:	b2db      	uxtb	r3, r3
 8019474:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019476:	4b38      	ldr	r3, [pc, #224]	; (8019558 <RegionEU868NextChannel+0x154>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801947e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019480:	4b35      	ldr	r3, [pc, #212]	; (8019558 <RegionEU868NextChannel+0x154>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019486:	4b35      	ldr	r3, [pc, #212]	; (801955c <RegionEU868NextChannel+0x158>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801948c:	2310      	movs	r3, #16
 801948e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019490:	f107 0312 	add.w	r3, r7, #18
 8019494:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	685b      	ldr	r3, [r3, #4]
 80194a0:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	7a9b      	ldrb	r3, [r3, #10]
 80194a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80194aa:	2306      	movs	r3, #6
 80194ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80194b0:	68fa      	ldr	r2, [r7, #12]
 80194b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80194b6:	320c      	adds	r2, #12
 80194b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194bc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	7d1b      	ldrb	r3, [r3, #20]
 80194c4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	8adb      	ldrh	r3, [r3, #22]
 80194d2:	4619      	mov	r1, r3
 80194d4:	4610      	mov	r0, r2
 80194d6:	f7fe fffd 	bl	80184d4 <GetTimeOnAir>
 80194da:	4603      	mov	r3, r0
 80194dc:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80194de:	f107 0314 	add.w	r3, r7, #20
 80194e2:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80194e4:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80194e8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80194ec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	9301      	str	r3, [sp, #4]
 80194f4:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80194f8:	9300      	str	r3, [sp, #0]
 80194fa:	460b      	mov	r3, r1
 80194fc:	6839      	ldr	r1, [r7, #0]
 80194fe:	f7fe fe56 	bl	80181ae <RegionCommonIdentifyChannels>
 8019502:	4603      	mov	r3, r0
 8019504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019508:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801950c:	2b00      	cmp	r3, #0
 801950e:	d10e      	bne.n	801952e <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019510:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019514:	3b01      	subs	r3, #1
 8019516:	4619      	mov	r1, r3
 8019518:	2000      	movs	r0, #0
 801951a:	f000 f985 	bl	8019828 <randr>
 801951e:	4603      	mov	r3, r0
 8019520:	3360      	adds	r3, #96	; 0x60
 8019522:	443b      	add	r3, r7
 8019524:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	701a      	strb	r2, [r3, #0]
 801952c:	e00e      	b.n	801954c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801952e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019532:	2b0c      	cmp	r3, #12
 8019534:	d10a      	bne.n	801954c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019536:	4b08      	ldr	r3, [pc, #32]	; (8019558 <RegionEU868NextChannel+0x154>)
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801953e:	4b06      	ldr	r3, [pc, #24]	; (8019558 <RegionEU868NextChannel+0x154>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	f042 0207 	orr.w	r2, r2, #7
 8019546:	b292      	uxth	r2, r2
 8019548:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 801954c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019550:	4618      	mov	r0, r3
 8019552:	3760      	adds	r7, #96	; 0x60
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}
 8019558:	20001dec 	.word	0x20001dec
 801955c:	20001de8 	.word	0x20001de8

08019560 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b084      	sub	sp, #16
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019568:	2300      	movs	r3, #0
 801956a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801956c:	2300      	movs	r3, #0
 801956e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019570:	2300      	movs	r3, #0
 8019572:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	791b      	ldrb	r3, [r3, #4]
 8019578:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801957a:	7b7b      	ldrb	r3, [r7, #13]
 801957c:	2b02      	cmp	r3, #2
 801957e:	d801      	bhi.n	8019584 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019580:	2306      	movs	r3, #6
 8019582:	e089      	b.n	8019698 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019584:	7b7b      	ldrb	r3, [r7, #13]
 8019586:	2b0f      	cmp	r3, #15
 8019588:	d901      	bls.n	801958e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801958a:	2303      	movs	r3, #3
 801958c:	e084      	b.n	8019698 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	7a1b      	ldrb	r3, [r3, #8]
 8019594:	f343 0303 	sbfx	r3, r3, #0, #4
 8019598:	b25b      	sxtb	r3, r3
 801959a:	2207      	movs	r2, #7
 801959c:	2100      	movs	r1, #0
 801959e:	4618      	mov	r0, r3
 80195a0:	f7fe f99d 	bl	80178de <RegionCommonValueInRange>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d101      	bne.n	80195ae <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80195aa:	2301      	movs	r3, #1
 80195ac:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	7a1b      	ldrb	r3, [r3, #8]
 80195b4:	f343 1303 	sbfx	r3, r3, #4, #4
 80195b8:	b25b      	sxtb	r3, r3
 80195ba:	2207      	movs	r2, #7
 80195bc:	2100      	movs	r1, #0
 80195be:	4618      	mov	r0, r3
 80195c0:	f7fe f98d 	bl	80178de <RegionCommonValueInRange>
 80195c4:	4603      	mov	r3, r0
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d101      	bne.n	80195ce <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80195ca:	2301      	movs	r3, #1
 80195cc:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	7a1b      	ldrb	r3, [r3, #8]
 80195d4:	f343 0303 	sbfx	r3, r3, #0, #4
 80195d8:	b25a      	sxtb	r2, r3
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	7a1b      	ldrb	r3, [r3, #8]
 80195e0:	f343 1303 	sbfx	r3, r3, #4, #4
 80195e4:	b25b      	sxtb	r3, r3
 80195e6:	429a      	cmp	r2, r3
 80195e8:	dd01      	ble.n	80195ee <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80195ea:	2301      	movs	r3, #1
 80195ec:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80195ee:	7bbb      	ldrb	r3, [r7, #14]
 80195f0:	f083 0301 	eor.w	r3, r3, #1
 80195f4:	b2db      	uxtb	r3, r3
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d010      	beq.n	801961c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	f107 020c 	add.w	r2, r7, #12
 8019604:	4611      	mov	r1, r2
 8019606:	4618      	mov	r0, r3
 8019608:	f7fe feee 	bl	80183e8 <VerifyRfFreq>
 801960c:	4603      	mov	r3, r0
 801960e:	f083 0301 	eor.w	r3, r3, #1
 8019612:	b2db      	uxtb	r3, r3
 8019614:	2b00      	cmp	r3, #0
 8019616:	d001      	beq.n	801961c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019618:	2301      	movs	r3, #1
 801961a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801961c:	7bfb      	ldrb	r3, [r7, #15]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d004      	beq.n	801962c <RegionEU868ChannelAdd+0xcc>
 8019622:	7bbb      	ldrb	r3, [r7, #14]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d001      	beq.n	801962c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019628:	2306      	movs	r3, #6
 801962a:	e035      	b.n	8019698 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801962c:	7bfb      	ldrb	r3, [r7, #15]
 801962e:	2b00      	cmp	r3, #0
 8019630:	d001      	beq.n	8019636 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019632:	2305      	movs	r3, #5
 8019634:	e030      	b.n	8019698 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019636:	7bbb      	ldrb	r3, [r7, #14]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d001      	beq.n	8019640 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801963c:	2304      	movs	r3, #4
 801963e:	e02b      	b.n	8019698 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019640:	4b17      	ldr	r3, [pc, #92]	; (80196a0 <RegionEU868ChannelAdd+0x140>)
 8019642:	6819      	ldr	r1, [r3, #0]
 8019644:	7b7a      	ldrb	r2, [r7, #13]
 8019646:	4613      	mov	r3, r2
 8019648:	005b      	lsls	r3, r3, #1
 801964a:	4413      	add	r3, r2
 801964c:	009b      	lsls	r3, r3, #2
 801964e:	18c8      	adds	r0, r1, r3
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	220c      	movs	r2, #12
 8019656:	4619      	mov	r1, r3
 8019658:	f000 f8fd 	bl	8019856 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801965c:	4b10      	ldr	r3, [pc, #64]	; (80196a0 <RegionEU868ChannelAdd+0x140>)
 801965e:	6819      	ldr	r1, [r3, #0]
 8019660:	7b7a      	ldrb	r2, [r7, #13]
 8019662:	7b38      	ldrb	r0, [r7, #12]
 8019664:	4613      	mov	r3, r2
 8019666:	005b      	lsls	r3, r3, #1
 8019668:	4413      	add	r3, r2
 801966a:	009b      	lsls	r3, r3, #2
 801966c:	440b      	add	r3, r1
 801966e:	3309      	adds	r3, #9
 8019670:	4602      	mov	r2, r0
 8019672:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019674:	4b0a      	ldr	r3, [pc, #40]	; (80196a0 <RegionEU868ChannelAdd+0x140>)
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 801967c:	b21a      	sxth	r2, r3
 801967e:	7b7b      	ldrb	r3, [r7, #13]
 8019680:	2101      	movs	r1, #1
 8019682:	fa01 f303 	lsl.w	r3, r1, r3
 8019686:	b21b      	sxth	r3, r3
 8019688:	4313      	orrs	r3, r2
 801968a:	b21a      	sxth	r2, r3
 801968c:	4b04      	ldr	r3, [pc, #16]	; (80196a0 <RegionEU868ChannelAdd+0x140>)
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	b292      	uxth	r2, r2
 8019692:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8019696:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019698:	4618      	mov	r0, r3
 801969a:	3710      	adds	r7, #16
 801969c:	46bd      	mov	sp, r7
 801969e:	bd80      	pop	{r7, pc}
 80196a0:	20001dec 	.word	0x20001dec

080196a4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b086      	sub	sp, #24
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80196b2:	7dfb      	ldrb	r3, [r7, #23]
 80196b4:	2b02      	cmp	r3, #2
 80196b6:	d801      	bhi.n	80196bc <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80196b8:	2300      	movs	r3, #0
 80196ba:	e016      	b.n	80196ea <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80196bc:	4b0d      	ldr	r3, [pc, #52]	; (80196f4 <RegionEU868ChannelsRemove+0x50>)
 80196be:	6819      	ldr	r1, [r3, #0]
 80196c0:	7dfa      	ldrb	r2, [r7, #23]
 80196c2:	4613      	mov	r3, r2
 80196c4:	005b      	lsls	r3, r3, #1
 80196c6:	4413      	add	r3, r2
 80196c8:	009b      	lsls	r3, r3, #2
 80196ca:	440b      	add	r3, r1
 80196cc:	461a      	mov	r2, r3
 80196ce:	2300      	movs	r3, #0
 80196d0:	6013      	str	r3, [r2, #0]
 80196d2:	6053      	str	r3, [r2, #4]
 80196d4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80196d6:	4b07      	ldr	r3, [pc, #28]	; (80196f4 <RegionEU868ChannelsRemove+0x50>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80196de:	7df9      	ldrb	r1, [r7, #23]
 80196e0:	2210      	movs	r2, #16
 80196e2:	4618      	mov	r0, r3
 80196e4:	f7fe f918 	bl	8017918 <RegionCommonChanDisable>
 80196e8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80196ea:	4618      	mov	r0, r3
 80196ec:	3718      	adds	r7, #24
 80196ee:	46bd      	mov	sp, r7
 80196f0:	bd80      	pop	{r7, pc}
 80196f2:	bf00      	nop
 80196f4:	20001dec 	.word	0x20001dec

080196f8 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80196f8:	b590      	push	{r4, r7, lr}
 80196fa:	b085      	sub	sp, #20
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019706:	4b20      	ldr	r3, [pc, #128]	; (8019788 <RegionEU868SetContinuousWave+0x90>)
 8019708:	681a      	ldr	r2, [r3, #0]
 801970a:	4b20      	ldr	r3, [pc, #128]	; (801978c <RegionEU868SetContinuousWave+0x94>)
 801970c:	6819      	ldr	r1, [r3, #0]
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	461c      	mov	r4, r3
 8019714:	4623      	mov	r3, r4
 8019716:	005b      	lsls	r3, r3, #1
 8019718:	4423      	add	r3, r4
 801971a:	009b      	lsls	r3, r3, #2
 801971c:	440b      	add	r3, r1
 801971e:	3309      	adds	r3, #9
 8019720:	781b      	ldrb	r3, [r3, #0]
 8019722:	4619      	mov	r1, r3
 8019724:	460b      	mov	r3, r1
 8019726:	005b      	lsls	r3, r3, #1
 8019728:	440b      	add	r3, r1
 801972a:	00db      	lsls	r3, r3, #3
 801972c:	4413      	add	r3, r2
 801972e:	3302      	adds	r3, #2
 8019730:	f993 3000 	ldrsb.w	r3, [r3]
 8019734:	4619      	mov	r1, r3
 8019736:	f7fe fdda 	bl	80182ee <RegionCommonLimitTxPower>
 801973a:	4603      	mov	r3, r0
 801973c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801973e:	2300      	movs	r3, #0
 8019740:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019742:	4b12      	ldr	r3, [pc, #72]	; (801978c <RegionEU868SetContinuousWave+0x94>)
 8019744:	681a      	ldr	r2, [r3, #0]
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	781b      	ldrb	r3, [r3, #0]
 801974a:	4619      	mov	r1, r3
 801974c:	460b      	mov	r3, r1
 801974e:	005b      	lsls	r3, r3, #1
 8019750:	440b      	add	r3, r1
 8019752:	009b      	lsls	r3, r3, #2
 8019754:	4413      	add	r3, r2
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6859      	ldr	r1, [r3, #4]
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	689a      	ldr	r2, [r3, #8]
 8019762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019766:	4618      	mov	r0, r3
 8019768:	f7fe fc32 	bl	8017fd0 <RegionCommonComputeTxPower>
 801976c:	4603      	mov	r3, r0
 801976e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019770:	4b07      	ldr	r3, [pc, #28]	; (8019790 <RegionEU868SetContinuousWave+0x98>)
 8019772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019774:	687a      	ldr	r2, [r7, #4]
 8019776:	8992      	ldrh	r2, [r2, #12]
 8019778:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801977c:	68b8      	ldr	r0, [r7, #8]
 801977e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019780:	bf00      	nop
 8019782:	3714      	adds	r7, #20
 8019784:	46bd      	mov	sp, r7
 8019786:	bd90      	pop	{r4, r7, pc}
 8019788:	20001de8 	.word	0x20001de8
 801978c:	20001dec 	.word	0x20001dec
 8019790:	0801f3a4 	.word	0x0801f3a4

08019794 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019794:	b480      	push	{r7}
 8019796:	b085      	sub	sp, #20
 8019798:	af00      	add	r7, sp, #0
 801979a:	4603      	mov	r3, r0
 801979c:	71fb      	strb	r3, [r7, #7]
 801979e:	460b      	mov	r3, r1
 80197a0:	71bb      	strb	r3, [r7, #6]
 80197a2:	4613      	mov	r3, r2
 80197a4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80197a6:	79ba      	ldrb	r2, [r7, #6]
 80197a8:	797b      	ldrb	r3, [r7, #5]
 80197aa:	1ad3      	subs	r3, r2, r3
 80197ac:	b2db      	uxtb	r3, r3
 80197ae:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80197b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	da01      	bge.n	80197bc <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80197b8:	2300      	movs	r3, #0
 80197ba:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80197bc:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80197be:	4618      	mov	r0, r3
 80197c0:	3714      	adds	r7, #20
 80197c2:	46bd      	mov	sp, r7
 80197c4:	bc80      	pop	{r7}
 80197c6:	4770      	bx	lr

080197c8 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80197c8:	b480      	push	{r7}
 80197ca:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80197cc:	4b0d      	ldr	r3, [pc, #52]	; (8019804 <rand1+0x3c>)
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	4a0d      	ldr	r2, [pc, #52]	; (8019808 <rand1+0x40>)
 80197d2:	fb02 f303 	mul.w	r3, r2, r3
 80197d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80197da:	3339      	adds	r3, #57	; 0x39
 80197dc:	4a09      	ldr	r2, [pc, #36]	; (8019804 <rand1+0x3c>)
 80197de:	6013      	str	r3, [r2, #0]
 80197e0:	4b08      	ldr	r3, [pc, #32]	; (8019804 <rand1+0x3c>)
 80197e2:	681a      	ldr	r2, [r3, #0]
 80197e4:	2303      	movs	r3, #3
 80197e6:	fba3 1302 	umull	r1, r3, r3, r2
 80197ea:	1ad1      	subs	r1, r2, r3
 80197ec:	0849      	lsrs	r1, r1, #1
 80197ee:	440b      	add	r3, r1
 80197f0:	0f99      	lsrs	r1, r3, #30
 80197f2:	460b      	mov	r3, r1
 80197f4:	07db      	lsls	r3, r3, #31
 80197f6:	1a5b      	subs	r3, r3, r1
 80197f8:	1ad1      	subs	r1, r2, r3
 80197fa:	460b      	mov	r3, r1
}
 80197fc:	4618      	mov	r0, r3
 80197fe:	46bd      	mov	sp, r7
 8019800:	bc80      	pop	{r7}
 8019802:	4770      	bx	lr
 8019804:	2000015c 	.word	0x2000015c
 8019808:	41c64e6d 	.word	0x41c64e6d

0801980c <srand1>:

void srand1( uint32_t seed )
{
 801980c:	b480      	push	{r7}
 801980e:	b083      	sub	sp, #12
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
    next = seed;
 8019814:	4a03      	ldr	r2, [pc, #12]	; (8019824 <srand1+0x18>)
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	6013      	str	r3, [r2, #0]
}
 801981a:	bf00      	nop
 801981c:	370c      	adds	r7, #12
 801981e:	46bd      	mov	sp, r7
 8019820:	bc80      	pop	{r7}
 8019822:	4770      	bx	lr
 8019824:	2000015c 	.word	0x2000015c

08019828 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b082      	sub	sp, #8
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
 8019830:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019832:	f7ff ffc9 	bl	80197c8 <rand1>
 8019836:	4602      	mov	r2, r0
 8019838:	6839      	ldr	r1, [r7, #0]
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	1acb      	subs	r3, r1, r3
 801983e:	3301      	adds	r3, #1
 8019840:	fb92 f1f3 	sdiv	r1, r2, r3
 8019844:	fb01 f303 	mul.w	r3, r1, r3
 8019848:	1ad2      	subs	r2, r2, r3
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	4413      	add	r3, r2
}
 801984e:	4618      	mov	r0, r3
 8019850:	3708      	adds	r7, #8
 8019852:	46bd      	mov	sp, r7
 8019854:	bd80      	pop	{r7, pc}

08019856 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019856:	b480      	push	{r7}
 8019858:	b085      	sub	sp, #20
 801985a:	af00      	add	r7, sp, #0
 801985c:	60f8      	str	r0, [r7, #12]
 801985e:	60b9      	str	r1, [r7, #8]
 8019860:	4613      	mov	r3, r2
 8019862:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019864:	e007      	b.n	8019876 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019866:	68ba      	ldr	r2, [r7, #8]
 8019868:	1c53      	adds	r3, r2, #1
 801986a:	60bb      	str	r3, [r7, #8]
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	1c59      	adds	r1, r3, #1
 8019870:	60f9      	str	r1, [r7, #12]
 8019872:	7812      	ldrb	r2, [r2, #0]
 8019874:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019876:	88fb      	ldrh	r3, [r7, #6]
 8019878:	1e5a      	subs	r2, r3, #1
 801987a:	80fa      	strh	r2, [r7, #6]
 801987c:	2b00      	cmp	r3, #0
 801987e:	d1f2      	bne.n	8019866 <memcpy1+0x10>
    }
}
 8019880:	bf00      	nop
 8019882:	bf00      	nop
 8019884:	3714      	adds	r7, #20
 8019886:	46bd      	mov	sp, r7
 8019888:	bc80      	pop	{r7}
 801988a:	4770      	bx	lr

0801988c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801988c:	b480      	push	{r7}
 801988e:	b085      	sub	sp, #20
 8019890:	af00      	add	r7, sp, #0
 8019892:	60f8      	str	r0, [r7, #12]
 8019894:	60b9      	str	r1, [r7, #8]
 8019896:	4613      	mov	r3, r2
 8019898:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801989a:	88fb      	ldrh	r3, [r7, #6]
 801989c:	3b01      	subs	r3, #1
 801989e:	68fa      	ldr	r2, [r7, #12]
 80198a0:	4413      	add	r3, r2
 80198a2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80198a4:	e007      	b.n	80198b6 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80198a6:	68ba      	ldr	r2, [r7, #8]
 80198a8:	1c53      	adds	r3, r2, #1
 80198aa:	60bb      	str	r3, [r7, #8]
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	1e59      	subs	r1, r3, #1
 80198b0:	60f9      	str	r1, [r7, #12]
 80198b2:	7812      	ldrb	r2, [r2, #0]
 80198b4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80198b6:	88fb      	ldrh	r3, [r7, #6]
 80198b8:	1e5a      	subs	r2, r3, #1
 80198ba:	80fa      	strh	r2, [r7, #6]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d1f2      	bne.n	80198a6 <memcpyr+0x1a>
    }
}
 80198c0:	bf00      	nop
 80198c2:	bf00      	nop
 80198c4:	3714      	adds	r7, #20
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bc80      	pop	{r7}
 80198ca:	4770      	bx	lr

080198cc <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80198cc:	b480      	push	{r7}
 80198ce:	b083      	sub	sp, #12
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
 80198d4:	460b      	mov	r3, r1
 80198d6:	70fb      	strb	r3, [r7, #3]
 80198d8:	4613      	mov	r3, r2
 80198da:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80198dc:	e004      	b.n	80198e8 <memset1+0x1c>
    {
        *dst++ = value;
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	1c5a      	adds	r2, r3, #1
 80198e2:	607a      	str	r2, [r7, #4]
 80198e4:	78fa      	ldrb	r2, [r7, #3]
 80198e6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80198e8:	883b      	ldrh	r3, [r7, #0]
 80198ea:	1e5a      	subs	r2, r3, #1
 80198ec:	803a      	strh	r2, [r7, #0]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d1f5      	bne.n	80198de <memset1+0x12>
    }
}
 80198f2:	bf00      	nop
 80198f4:	bf00      	nop
 80198f6:	370c      	adds	r7, #12
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bc80      	pop	{r7}
 80198fc:	4770      	bx	lr
	...

08019900 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019900:	b480      	push	{r7}
 8019902:	b085      	sub	sp, #20
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
 8019908:	460b      	mov	r3, r1
 801990a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801990c:	f04f 33ff 	mov.w	r3, #4294967295
 8019910:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d101      	bne.n	801991c <Crc32+0x1c>
    {
        return 0;
 8019918:	2300      	movs	r3, #0
 801991a:	e026      	b.n	801996a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801991c:	2300      	movs	r3, #0
 801991e:	817b      	strh	r3, [r7, #10]
 8019920:	e01d      	b.n	801995e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019922:	897b      	ldrh	r3, [r7, #10]
 8019924:	687a      	ldr	r2, [r7, #4]
 8019926:	4413      	add	r3, r2
 8019928:	781b      	ldrb	r3, [r3, #0]
 801992a:	461a      	mov	r2, r3
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	4053      	eors	r3, r2
 8019930:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019932:	2300      	movs	r3, #0
 8019934:	813b      	strh	r3, [r7, #8]
 8019936:	e00c      	b.n	8019952 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	085a      	lsrs	r2, r3, #1
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	f003 0301 	and.w	r3, r3, #1
 8019942:	425b      	negs	r3, r3
 8019944:	490b      	ldr	r1, [pc, #44]	; (8019974 <Crc32+0x74>)
 8019946:	400b      	ands	r3, r1
 8019948:	4053      	eors	r3, r2
 801994a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801994c:	893b      	ldrh	r3, [r7, #8]
 801994e:	3301      	adds	r3, #1
 8019950:	813b      	strh	r3, [r7, #8]
 8019952:	893b      	ldrh	r3, [r7, #8]
 8019954:	2b07      	cmp	r3, #7
 8019956:	d9ef      	bls.n	8019938 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019958:	897b      	ldrh	r3, [r7, #10]
 801995a:	3301      	adds	r3, #1
 801995c:	817b      	strh	r3, [r7, #10]
 801995e:	897a      	ldrh	r2, [r7, #10]
 8019960:	887b      	ldrh	r3, [r7, #2]
 8019962:	429a      	cmp	r2, r3
 8019964:	d3dd      	bcc.n	8019922 <Crc32+0x22>
        }
    }

    return ~crc;
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	43db      	mvns	r3, r3
}
 801996a:	4618      	mov	r0, r3
 801996c:	3714      	adds	r7, #20
 801996e:	46bd      	mov	sp, r7
 8019970:	bc80      	pop	{r7}
 8019972:	4770      	bx	lr
 8019974:	edb88320 	.word	0xedb88320

08019978 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b084      	sub	sp, #16
 801997c:	af02      	add	r7, sp, #8
 801997e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019980:	4a24      	ldr	r2, [pc, #144]	; (8019a14 <RadioInit+0x9c>)
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8019986:	4b24      	ldr	r3, [pc, #144]	; (8019a18 <RadioInit+0xa0>)
 8019988:	2200      	movs	r2, #0
 801998a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801998c:	4b22      	ldr	r3, [pc, #136]	; (8019a18 <RadioInit+0xa0>)
 801998e:	2200      	movs	r2, #0
 8019990:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019992:	4b21      	ldr	r3, [pc, #132]	; (8019a18 <RadioInit+0xa0>)
 8019994:	2200      	movs	r2, #0
 8019996:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019998:	4b1f      	ldr	r3, [pc, #124]	; (8019a18 <RadioInit+0xa0>)
 801999a:	2200      	movs	r2, #0
 801999c:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801999e:	481f      	ldr	r0, [pc, #124]	; (8019a1c <RadioInit+0xa4>)
 80199a0:	f001 ff8a 	bl	801b8b8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80199a4:	4b1c      	ldr	r3, [pc, #112]	; (8019a18 <RadioInit+0xa0>)
 80199a6:	2200      	movs	r2, #0
 80199a8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80199aa:	4b1b      	ldr	r3, [pc, #108]	; (8019a18 <RadioInit+0xa0>)
 80199ac:	2200      	movs	r2, #0
 80199ae:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80199b0:	f002 fa18 	bl	801bde4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80199b4:	2100      	movs	r1, #0
 80199b6:	2000      	movs	r0, #0
 80199b8:	f002 fde0 	bl	801c57c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80199bc:	2204      	movs	r2, #4
 80199be:	2100      	movs	r1, #0
 80199c0:	2001      	movs	r0, #1
 80199c2:	f002 fb9d 	bl	801c100 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80199c6:	2300      	movs	r3, #0
 80199c8:	2200      	movs	r2, #0
 80199ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80199ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80199d2:	f002 facd 	bl	801bf70 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80199d6:	f000 fe83 	bl	801a6e0 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80199da:	2300      	movs	r3, #0
 80199dc:	9300      	str	r3, [sp, #0]
 80199de:	4b10      	ldr	r3, [pc, #64]	; (8019a20 <RadioInit+0xa8>)
 80199e0:	2200      	movs	r2, #0
 80199e2:	f04f 31ff 	mov.w	r1, #4294967295
 80199e6:	480f      	ldr	r0, [pc, #60]	; (8019a24 <RadioInit+0xac>)
 80199e8:	f003 ffda 	bl	801d9a0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80199ec:	2300      	movs	r3, #0
 80199ee:	9300      	str	r3, [sp, #0]
 80199f0:	4b0d      	ldr	r3, [pc, #52]	; (8019a28 <RadioInit+0xb0>)
 80199f2:	2200      	movs	r2, #0
 80199f4:	f04f 31ff 	mov.w	r1, #4294967295
 80199f8:	480c      	ldr	r0, [pc, #48]	; (8019a2c <RadioInit+0xb4>)
 80199fa:	f003 ffd1 	bl	801d9a0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80199fe:	4809      	ldr	r0, [pc, #36]	; (8019a24 <RadioInit+0xac>)
 8019a00:	f004 f872 	bl	801dae8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019a04:	4809      	ldr	r0, [pc, #36]	; (8019a2c <RadioInit+0xb4>)
 8019a06:	f004 f86f 	bl	801dae8 <UTIL_TIMER_Stop>
}
 8019a0a:	bf00      	nop
 8019a0c:	3708      	adds	r7, #8
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}
 8019a12:	bf00      	nop
 8019a14:	20001ef0 	.word	0x20001ef0
 8019a18:	20001ef4 	.word	0x20001ef4
 8019a1c:	0801aacd 	.word	0x0801aacd
 8019a20:	0801aa55 	.word	0x0801aa55
 8019a24:	20001f50 	.word	0x20001f50
 8019a28:	0801aa69 	.word	0x0801aa69
 8019a2c:	20001f68 	.word	0x20001f68

08019a30 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019a30:	b580      	push	{r7, lr}
 8019a32:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019a34:	f001 ff82 	bl	801b93c <SUBGRF_GetOperatingMode>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	2b07      	cmp	r3, #7
 8019a3c:	d00a      	beq.n	8019a54 <RadioGetStatus+0x24>
 8019a3e:	2b07      	cmp	r3, #7
 8019a40:	dc0a      	bgt.n	8019a58 <RadioGetStatus+0x28>
 8019a42:	2b04      	cmp	r3, #4
 8019a44:	d002      	beq.n	8019a4c <RadioGetStatus+0x1c>
 8019a46:	2b05      	cmp	r3, #5
 8019a48:	d002      	beq.n	8019a50 <RadioGetStatus+0x20>
 8019a4a:	e005      	b.n	8019a58 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019a4c:	2302      	movs	r3, #2
 8019a4e:	e004      	b.n	8019a5a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019a50:	2301      	movs	r3, #1
 8019a52:	e002      	b.n	8019a5a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019a54:	2303      	movs	r3, #3
 8019a56:	e000      	b.n	8019a5a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8019a58:	2300      	movs	r3, #0
    }
}
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	bd80      	pop	{r7, pc}
	...

08019a60 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b082      	sub	sp, #8
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	4603      	mov	r3, r0
 8019a68:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8019a6a:	4a2a      	ldr	r2, [pc, #168]	; (8019b14 <RadioSetModem+0xb4>)
 8019a6c:	79fb      	ldrb	r3, [r7, #7]
 8019a6e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8019a70:	79fb      	ldrb	r3, [r7, #7]
 8019a72:	4618      	mov	r0, r3
 8019a74:	f003 f945 	bl	801cd02 <RFW_SetRadioModem>
    switch( modem )
 8019a78:	79fb      	ldrb	r3, [r7, #7]
 8019a7a:	2b05      	cmp	r3, #5
 8019a7c:	d80e      	bhi.n	8019a9c <RadioSetModem+0x3c>
 8019a7e:	a201      	add	r2, pc, #4	; (adr r2, 8019a84 <RadioSetModem+0x24>)
 8019a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a84:	08019aab 	.word	0x08019aab
 8019a88:	08019ab9 	.word	0x08019ab9
 8019a8c:	08019a9d 	.word	0x08019a9d
 8019a90:	08019adf 	.word	0x08019adf
 8019a94:	08019aed 	.word	0x08019aed
 8019a98:	08019afb 	.word	0x08019afb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8019a9c:	2003      	movs	r0, #3
 8019a9e:	f002 fb09 	bl	801c0b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019aa2:	4b1c      	ldr	r3, [pc, #112]	; (8019b14 <RadioSetModem+0xb4>)
 8019aa4:	2200      	movs	r2, #0
 8019aa6:	735a      	strb	r2, [r3, #13]
        break;
 8019aa8:	e02f      	b.n	8019b0a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019aaa:	2000      	movs	r0, #0
 8019aac:	f002 fb02 	bl	801c0b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ab0:	4b18      	ldr	r3, [pc, #96]	; (8019b14 <RadioSetModem+0xb4>)
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	735a      	strb	r2, [r3, #13]
        break;
 8019ab6:	e028      	b.n	8019b0a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8019ab8:	2001      	movs	r0, #1
 8019aba:	f002 fafb 	bl	801c0b4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019abe:	4b15      	ldr	r3, [pc, #84]	; (8019b14 <RadioSetModem+0xb4>)
 8019ac0:	7b5a      	ldrb	r2, [r3, #13]
 8019ac2:	4b14      	ldr	r3, [pc, #80]	; (8019b14 <RadioSetModem+0xb4>)
 8019ac4:	7b1b      	ldrb	r3, [r3, #12]
 8019ac6:	429a      	cmp	r2, r3
 8019ac8:	d01e      	beq.n	8019b08 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8019aca:	4b12      	ldr	r3, [pc, #72]	; (8019b14 <RadioSetModem+0xb4>)
 8019acc:	7b1a      	ldrb	r2, [r3, #12]
 8019ace:	4b11      	ldr	r3, [pc, #68]	; (8019b14 <RadioSetModem+0xb4>)
 8019ad0:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019ad2:	4b10      	ldr	r3, [pc, #64]	; (8019b14 <RadioSetModem+0xb4>)
 8019ad4:	7b5b      	ldrb	r3, [r3, #13]
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	f000 ff86 	bl	801a9e8 <RadioSetPublicNetwork>
        }
        break;
 8019adc:	e014      	b.n	8019b08 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019ade:	2002      	movs	r0, #2
 8019ae0:	f002 fae8 	bl	801c0b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ae4:	4b0b      	ldr	r3, [pc, #44]	; (8019b14 <RadioSetModem+0xb4>)
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	735a      	strb	r2, [r3, #13]
        break;
 8019aea:	e00e      	b.n	8019b0a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019aec:	2002      	movs	r0, #2
 8019aee:	f002 fae1 	bl	801c0b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019af2:	4b08      	ldr	r3, [pc, #32]	; (8019b14 <RadioSetModem+0xb4>)
 8019af4:	2200      	movs	r2, #0
 8019af6:	735a      	strb	r2, [r3, #13]
        break;
 8019af8:	e007      	b.n	8019b0a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019afa:	2000      	movs	r0, #0
 8019afc:	f002 fada 	bl	801c0b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019b00:	4b04      	ldr	r3, [pc, #16]	; (8019b14 <RadioSetModem+0xb4>)
 8019b02:	2200      	movs	r2, #0
 8019b04:	735a      	strb	r2, [r3, #13]
        break;
 8019b06:	e000      	b.n	8019b0a <RadioSetModem+0xaa>
        break;
 8019b08:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8019b0a:	bf00      	nop
 8019b0c:	3708      	adds	r7, #8
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bd80      	pop	{r7, pc}
 8019b12:	bf00      	nop
 8019b14:	20001ef4 	.word	0x20001ef4

08019b18 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019b18:	b580      	push	{r7, lr}
 8019b1a:	b082      	sub	sp, #8
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019b20:	6878      	ldr	r0, [r7, #4]
 8019b22:	f002 fa81 	bl	801c028 <SUBGRF_SetRfFrequency>
}
 8019b26:	bf00      	nop
 8019b28:	3708      	adds	r7, #8
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}

08019b2e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019b2e:	b580      	push	{r7, lr}
 8019b30:	b090      	sub	sp, #64	; 0x40
 8019b32:	af0a      	add	r7, sp, #40	; 0x28
 8019b34:	60f8      	str	r0, [r7, #12]
 8019b36:	60b9      	str	r1, [r7, #8]
 8019b38:	603b      	str	r3, [r7, #0]
 8019b3a:	4613      	mov	r3, r2
 8019b3c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019b3e:	2301      	movs	r3, #1
 8019b40:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019b42:	2300      	movs	r3, #0
 8019b44:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8019b46:	2300      	movs	r3, #0
 8019b48:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8019b4a:	f000 fddc 	bl	801a706 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8019b4e:	2000      	movs	r0, #0
 8019b50:	f7ff ff86 	bl	8019a60 <RadioSetModem>

    RadioSetChannel( freq );
 8019b54:	68f8      	ldr	r0, [r7, #12]
 8019b56:	f7ff ffdf 	bl	8019b18 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8019b5a:	2301      	movs	r3, #1
 8019b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8019b5e:	2300      	movs	r3, #0
 8019b60:	9308      	str	r3, [sp, #32]
 8019b62:	2300      	movs	r3, #0
 8019b64:	9307      	str	r3, [sp, #28]
 8019b66:	2300      	movs	r3, #0
 8019b68:	9306      	str	r3, [sp, #24]
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	9305      	str	r3, [sp, #20]
 8019b6e:	2300      	movs	r3, #0
 8019b70:	9304      	str	r3, [sp, #16]
 8019b72:	2300      	movs	r3, #0
 8019b74:	9303      	str	r3, [sp, #12]
 8019b76:	2300      	movs	r3, #0
 8019b78:	9302      	str	r3, [sp, #8]
 8019b7a:	2303      	movs	r3, #3
 8019b7c:	9301      	str	r3, [sp, #4]
 8019b7e:	68bb      	ldr	r3, [r7, #8]
 8019b80:	9300      	str	r3, [sp, #0]
 8019b82:	2300      	movs	r3, #0
 8019b84:	f44f 7216 	mov.w	r2, #600	; 0x258
 8019b88:	68b9      	ldr	r1, [r7, #8]
 8019b8a:	2000      	movs	r0, #0
 8019b8c:	f000 f83c 	bl	8019c08 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019b90:	2000      	movs	r0, #0
 8019b92:	f000 fdbf 	bl	801a714 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8019b96:	f000 ff55 	bl	801aa44 <RadioGetWakeupTime>
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	f7e8 ff9b 	bl	8002ad8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019ba2:	f004 f8bb 	bl	801dd1c <UTIL_TIMER_GetCurrentTime>
 8019ba6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019ba8:	e00d      	b.n	8019bc6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8019baa:	2000      	movs	r0, #0
 8019bac:	f000 fe9a 	bl	801a8e4 <RadioRssi>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8019bb4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019bbc:	429a      	cmp	r2, r3
 8019bbe:	dd02      	ble.n	8019bc6 <RadioIsChannelFree+0x98>
        {
            status = false;
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	75fb      	strb	r3, [r7, #23]
            break;
 8019bc4:	e006      	b.n	8019bd4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019bc6:	6938      	ldr	r0, [r7, #16]
 8019bc8:	f004 f8ba 	bl	801dd40 <UTIL_TIMER_GetElapsedTime>
 8019bcc:	4602      	mov	r2, r0
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	4293      	cmp	r3, r2
 8019bd2:	d8ea      	bhi.n	8019baa <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8019bd4:	f000 fd97 	bl	801a706 <RadioStandby>

    return status;
 8019bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8019bda:	4618      	mov	r0, r3
 8019bdc:	3718      	adds	r7, #24
 8019bde:	46bd      	mov	sp, r7
 8019be0:	bd80      	pop	{r7, pc}

08019be2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019be2:	b580      	push	{r7, lr}
 8019be4:	b082      	sub	sp, #8
 8019be6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019be8:	2300      	movs	r3, #0
 8019bea:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019bec:	2300      	movs	r3, #0
 8019bee:	2200      	movs	r2, #0
 8019bf0:	2100      	movs	r1, #0
 8019bf2:	2000      	movs	r0, #0
 8019bf4:	f002 f9bc 	bl	801bf70 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019bf8:	f001 ff71 	bl	801bade <SUBGRF_GetRandom>
 8019bfc:	6078      	str	r0, [r7, #4]

    return rnd;
 8019bfe:	687b      	ldr	r3, [r7, #4]
}
 8019c00:	4618      	mov	r0, r3
 8019c02:	3708      	adds	r7, #8
 8019c04:	46bd      	mov	sp, r7
 8019c06:	bd80      	pop	{r7, pc}

08019c08 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019c08:	b580      	push	{r7, lr}
 8019c0a:	b08a      	sub	sp, #40	; 0x28
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	60b9      	str	r1, [r7, #8]
 8019c10:	607a      	str	r2, [r7, #4]
 8019c12:	461a      	mov	r2, r3
 8019c14:	4603      	mov	r3, r0
 8019c16:	73fb      	strb	r3, [r7, #15]
 8019c18:	4613      	mov	r3, r2
 8019c1a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8019c1c:	4ab9      	ldr	r2, [pc, #740]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019c1e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019c22:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8019c24:	f003 f82b 	bl	801cc7e <RFW_DeInit>
    if( rxContinuous == true )
 8019c28:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d001      	beq.n	8019c34 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019c30:	2300      	movs	r3, #0
 8019c32:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019c34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d004      	beq.n	8019c46 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019c3c:	4ab2      	ldr	r2, [pc, #712]	; (8019f08 <RadioSetRxConfig+0x300>)
 8019c3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019c42:	7013      	strb	r3, [r2, #0]
 8019c44:	e002      	b.n	8019c4c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8019c46:	4bb0      	ldr	r3, [pc, #704]	; (8019f08 <RadioSetRxConfig+0x300>)
 8019c48:	22ff      	movs	r2, #255	; 0xff
 8019c4a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019c4c:	7bfb      	ldrb	r3, [r7, #15]
 8019c4e:	2b05      	cmp	r3, #5
 8019c50:	d009      	beq.n	8019c66 <RadioSetRxConfig+0x5e>
 8019c52:	2b05      	cmp	r3, #5
 8019c54:	f300 81ca 	bgt.w	8019fec <RadioSetRxConfig+0x3e4>
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	f000 80bf 	beq.w	8019ddc <RadioSetRxConfig+0x1d4>
 8019c5e:	2b01      	cmp	r3, #1
 8019c60:	f000 8124 	beq.w	8019eac <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8019c64:	e1c2      	b.n	8019fec <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8019c66:	2001      	movs	r0, #1
 8019c68:	f002 f87e 	bl	801bd68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019c6c:	4ba5      	ldr	r3, [pc, #660]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019c6e:	2200      	movs	r2, #0
 8019c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019c74:	4aa3      	ldr	r2, [pc, #652]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8019c7a:	4ba2      	ldr	r3, [pc, #648]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019c7c:	2209      	movs	r2, #9
 8019c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8019c82:	4ba0      	ldr	r3, [pc, #640]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019c84:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019c88:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019c8a:	68b8      	ldr	r0, [r7, #8]
 8019c8c:	f002 ff2a 	bl	801cae4 <SUBGRF_GetFskBandwidthRegValue>
 8019c90:	4603      	mov	r3, r0
 8019c92:	461a      	mov	r2, r3
 8019c94:	4b9b      	ldr	r3, [pc, #620]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019c9a:	4b9a      	ldr	r3, [pc, #616]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019ca0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019ca2:	00db      	lsls	r3, r3, #3
 8019ca4:	b29a      	uxth	r2, r3
 8019ca6:	4b97      	ldr	r3, [pc, #604]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019ca8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8019caa:	4b96      	ldr	r3, [pc, #600]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019cac:	2200      	movs	r2, #0
 8019cae:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8019cb0:	4b94      	ldr	r3, [pc, #592]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019cb2:	2210      	movs	r2, #16
 8019cb4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019cb6:	4b93      	ldr	r3, [pc, #588]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019cb8:	2200      	movs	r2, #0
 8019cba:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8019cbc:	4b91      	ldr	r3, [pc, #580]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019cc2:	4b91      	ldr	r3, [pc, #580]	; (8019f08 <RadioSetRxConfig+0x300>)
 8019cc4:	781a      	ldrb	r2, [r3, #0]
 8019cc6:	4b8f      	ldr	r3, [pc, #572]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019cc8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019cca:	4b8e      	ldr	r3, [pc, #568]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019ccc:	2201      	movs	r2, #1
 8019cce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019cd0:	4b8c      	ldr	r3, [pc, #560]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019cd6:	2005      	movs	r0, #5
 8019cd8:	f7ff fec2 	bl	8019a60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019cdc:	488b      	ldr	r0, [pc, #556]	; (8019f0c <RadioSetRxConfig+0x304>)
 8019cde:	f002 fadd 	bl	801c29c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019ce2:	488b      	ldr	r0, [pc, #556]	; (8019f10 <RadioSetRxConfig+0x308>)
 8019ce4:	f002 fbac 	bl	801c440 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019ce8:	4a8a      	ldr	r2, [pc, #552]	; (8019f14 <RadioSetRxConfig+0x30c>)
 8019cea:	f107 031c 	add.w	r3, r7, #28
 8019cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019cf2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019cf6:	f107 031c 	add.w	r3, r7, #28
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	f001 fe6d 	bl	801b9da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019d00:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019d04:	f001 feb8 	bl	801ba78 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019d08:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019d0c:	f000 fe09 	bl	801a922 <RadioRead>
 8019d10:	4603      	mov	r3, r0
 8019d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8019d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d1a:	f023 0310 	bic.w	r3, r3, #16
 8019d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8019d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d26:	4619      	mov	r1, r3
 8019d28:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019d2c:	f000 fde7 	bl	801a8fe <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019d30:	2104      	movs	r1, #4
 8019d32:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8019d36:	f000 fde2 	bl	801a8fe <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8019d3a:	f640 009b 	movw	r0, #2203	; 0x89b
 8019d3e:	f000 fdf0 	bl	801a922 <RadioRead>
 8019d42:	4603      	mov	r3, r0
 8019d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d4c:	f023 031c 	bic.w	r3, r3, #28
 8019d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8019d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d58:	f043 0308 	orr.w	r3, r3, #8
 8019d5c:	b2db      	uxtb	r3, r3
 8019d5e:	4619      	mov	r1, r3
 8019d60:	f640 009b 	movw	r0, #2203	; 0x89b
 8019d64:	f000 fdcb 	bl	801a8fe <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8019d68:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019d6c:	f000 fdd9 	bl	801a922 <RadioRead>
 8019d70:	4603      	mov	r3, r0
 8019d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d7a:	f023 0318 	bic.w	r3, r3, #24
 8019d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d86:	f043 0318 	orr.w	r3, r3, #24
 8019d8a:	b2db      	uxtb	r3, r3
 8019d8c:	4619      	mov	r1, r3
 8019d8e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019d92:	f000 fdb4 	bl	801a8fe <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8019d96:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019d9a:	f000 fdc2 	bl	801a922 <RadioRead>
 8019d9e:	4603      	mov	r3, r0
 8019da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019db4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8019db8:	b2db      	uxtb	r3, r3
 8019dba:	4619      	mov	r1, r3
 8019dbc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019dc0:	f000 fd9d 	bl	801a8fe <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019dc4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019dc6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019dca:	fb02 f303 	mul.w	r3, r2, r3
 8019dce:	461a      	mov	r2, r3
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019dd6:	4a4b      	ldr	r2, [pc, #300]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019dd8:	6093      	str	r3, [r2, #8]
            break;
 8019dda:	e108      	b.n	8019fee <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019ddc:	2000      	movs	r0, #0
 8019dde:	f001 ffc3 	bl	801bd68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019de2:	4b48      	ldr	r3, [pc, #288]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019de4:	2200      	movs	r2, #0
 8019de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019dea:	4a46      	ldr	r2, [pc, #280]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019df0:	4b44      	ldr	r3, [pc, #272]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019df2:	220b      	movs	r2, #11
 8019df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019df8:	68b8      	ldr	r0, [r7, #8]
 8019dfa:	f002 fe73 	bl	801cae4 <SUBGRF_GetFskBandwidthRegValue>
 8019dfe:	4603      	mov	r3, r0
 8019e00:	461a      	mov	r2, r3
 8019e02:	4b40      	ldr	r3, [pc, #256]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019e08:	4b3e      	ldr	r3, [pc, #248]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019e0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019e10:	00db      	lsls	r3, r3, #3
 8019e12:	b29a      	uxth	r2, r3
 8019e14:	4b3b      	ldr	r3, [pc, #236]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e16:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019e18:	4b3a      	ldr	r3, [pc, #232]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e1a:	2204      	movs	r2, #4
 8019e1c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8019e1e:	4b39      	ldr	r3, [pc, #228]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e20:	2218      	movs	r2, #24
 8019e22:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019e24:	4b37      	ldr	r3, [pc, #220]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e26:	2200      	movs	r2, #0
 8019e28:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019e2a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019e2e:	f083 0301 	eor.w	r3, r3, #1
 8019e32:	b2db      	uxtb	r3, r3
 8019e34:	461a      	mov	r2, r3
 8019e36:	4b33      	ldr	r3, [pc, #204]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e38:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019e3a:	4b33      	ldr	r3, [pc, #204]	; (8019f08 <RadioSetRxConfig+0x300>)
 8019e3c:	781a      	ldrb	r2, [r3, #0]
 8019e3e:	4b31      	ldr	r3, [pc, #196]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e40:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8019e42:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d003      	beq.n	8019e52 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019e4a:	4b2e      	ldr	r3, [pc, #184]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e4c:	22f2      	movs	r2, #242	; 0xf2
 8019e4e:	75da      	strb	r2, [r3, #23]
 8019e50:	e002      	b.n	8019e58 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019e52:	4b2c      	ldr	r3, [pc, #176]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e54:	2201      	movs	r2, #1
 8019e56:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019e58:	4b2a      	ldr	r3, [pc, #168]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019e5a:	2201      	movs	r2, #1
 8019e5c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019e5e:	f000 fc52 	bl	801a706 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8019e62:	2000      	movs	r0, #0
 8019e64:	f7ff fdfc 	bl	8019a60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e68:	4828      	ldr	r0, [pc, #160]	; (8019f0c <RadioSetRxConfig+0x304>)
 8019e6a:	f002 fa17 	bl	801c29c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e6e:	4828      	ldr	r0, [pc, #160]	; (8019f10 <RadioSetRxConfig+0x308>)
 8019e70:	f002 fae6 	bl	801c440 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019e74:	4a28      	ldr	r2, [pc, #160]	; (8019f18 <RadioSetRxConfig+0x310>)
 8019e76:	f107 0314 	add.w	r3, r7, #20
 8019e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019e7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019e82:	f107 0314 	add.w	r3, r7, #20
 8019e86:	4618      	mov	r0, r3
 8019e88:	f001 fda7 	bl	801b9da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019e8c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019e90:	f001 fdf2 	bl	801ba78 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019e94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019e96:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019e9a:	fb02 f303 	mul.w	r3, r2, r3
 8019e9e:	461a      	mov	r2, r3
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019ea6:	4a17      	ldr	r2, [pc, #92]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019ea8:	6093      	str	r3, [r2, #8]
            break;
 8019eaa:	e0a0      	b.n	8019fee <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019eac:	2000      	movs	r0, #0
 8019eae:	f001 ff5b 	bl	801bd68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019eb2:	4b14      	ldr	r3, [pc, #80]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019eb4:	2201      	movs	r2, #1
 8019eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	b2da      	uxtb	r2, r3
 8019ebe:	4b11      	ldr	r3, [pc, #68]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019ec4:	4a15      	ldr	r2, [pc, #84]	; (8019f1c <RadioSetRxConfig+0x314>)
 8019ec6:	68bb      	ldr	r3, [r7, #8]
 8019ec8:	4413      	add	r3, r2
 8019eca:	781a      	ldrb	r2, [r3, #0]
 8019ecc:	4b0d      	ldr	r3, [pc, #52]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019ece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019ed2:	4a0c      	ldr	r2, [pc, #48]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019ed4:	7bbb      	ldrb	r3, [r7, #14]
 8019ed6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d105      	bne.n	8019eec <RadioSetRxConfig+0x2e4>
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	2b0b      	cmp	r3, #11
 8019ee4:	d008      	beq.n	8019ef8 <RadioSetRxConfig+0x2f0>
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	2b0c      	cmp	r3, #12
 8019eea:	d005      	beq.n	8019ef8 <RadioSetRxConfig+0x2f0>
 8019eec:	68bb      	ldr	r3, [r7, #8]
 8019eee:	2b01      	cmp	r3, #1
 8019ef0:	d116      	bne.n	8019f20 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	2b0c      	cmp	r3, #12
 8019ef6:	d113      	bne.n	8019f20 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019ef8:	4b02      	ldr	r3, [pc, #8]	; (8019f04 <RadioSetRxConfig+0x2fc>)
 8019efa:	2201      	movs	r2, #1
 8019efc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019f00:	e012      	b.n	8019f28 <RadioSetRxConfig+0x320>
 8019f02:	bf00      	nop
 8019f04:	20001ef4 	.word	0x20001ef4
 8019f08:	20000160 	.word	0x20000160
 8019f0c:	20001f2c 	.word	0x20001f2c
 8019f10:	20001f02 	.word	0x20001f02
 8019f14:	0801ee44 	.word	0x0801ee44
 8019f18:	0801ee4c 	.word	0x0801ee4c
 8019f1c:	0801f428 	.word	0x0801f428
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019f20:	4b35      	ldr	r3, [pc, #212]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f22:	2200      	movs	r2, #0
 8019f24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019f28:	4b33      	ldr	r3, [pc, #204]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f2a:	2201      	movs	r2, #1
 8019f2c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019f2e:	4b32      	ldr	r3, [pc, #200]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019f34:	2b05      	cmp	r3, #5
 8019f36:	d004      	beq.n	8019f42 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019f38:	4b2f      	ldr	r3, [pc, #188]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019f3e:	2b06      	cmp	r3, #6
 8019f40:	d10a      	bne.n	8019f58 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8019f42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f44:	2b0b      	cmp	r3, #11
 8019f46:	d803      	bhi.n	8019f50 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019f48:	4b2b      	ldr	r3, [pc, #172]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f4a:	220c      	movs	r2, #12
 8019f4c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019f4e:	e006      	b.n	8019f5e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019f50:	4a29      	ldr	r2, [pc, #164]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f54:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019f56:	e002      	b.n	8019f5e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019f58:	4a27      	ldr	r2, [pc, #156]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f5c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019f5e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019f62:	4b25      	ldr	r3, [pc, #148]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f64:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019f66:	4b25      	ldr	r3, [pc, #148]	; (8019ffc <RadioSetRxConfig+0x3f4>)
 8019f68:	781a      	ldrb	r2, [r3, #0]
 8019f6a:	4b23      	ldr	r3, [pc, #140]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f6c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019f6e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8019f72:	4b21      	ldr	r3, [pc, #132]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f74:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019f78:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019f7c:	4b1e      	ldr	r3, [pc, #120]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019f82:	f000 fbc0 	bl	801a706 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019f86:	2001      	movs	r0, #1
 8019f88:	f7ff fd6a 	bl	8019a60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019f8c:	481c      	ldr	r0, [pc, #112]	; (801a000 <RadioSetRxConfig+0x3f8>)
 8019f8e:	f002 f985 	bl	801c29c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f92:	481c      	ldr	r0, [pc, #112]	; (801a004 <RadioSetRxConfig+0x3fc>)
 8019f94:	f002 fa54 	bl	801c440 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019f98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019f9a:	b2db      	uxtb	r3, r3
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f001 fef2 	bl	801bd86 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019fa2:	4b15      	ldr	r3, [pc, #84]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019fa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019fa8:	2b01      	cmp	r3, #1
 8019faa:	d10d      	bne.n	8019fc8 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019fac:	f240 7036 	movw	r0, #1846	; 0x736
 8019fb0:	f002 fba2 	bl	801c6f8 <SUBGRF_ReadRegister>
 8019fb4:	4603      	mov	r3, r0
 8019fb6:	f023 0304 	bic.w	r3, r3, #4
 8019fba:	b2db      	uxtb	r3, r3
 8019fbc:	4619      	mov	r1, r3
 8019fbe:	f240 7036 	movw	r0, #1846	; 0x736
 8019fc2:	f002 fb85 	bl	801c6d0 <SUBGRF_WriteRegister>
 8019fc6:	e00c      	b.n	8019fe2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019fc8:	f240 7036 	movw	r0, #1846	; 0x736
 8019fcc:	f002 fb94 	bl	801c6f8 <SUBGRF_ReadRegister>
 8019fd0:	4603      	mov	r3, r0
 8019fd2:	f043 0304 	orr.w	r3, r3, #4
 8019fd6:	b2db      	uxtb	r3, r3
 8019fd8:	4619      	mov	r1, r3
 8019fda:	f240 7036 	movw	r0, #1846	; 0x736
 8019fde:	f002 fb77 	bl	801c6d0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8019fe2:	4b05      	ldr	r3, [pc, #20]	; (8019ff8 <RadioSetRxConfig+0x3f0>)
 8019fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fe8:	609a      	str	r2, [r3, #8]
            break;
 8019fea:	e000      	b.n	8019fee <RadioSetRxConfig+0x3e6>
            break;
 8019fec:	bf00      	nop
    }
}
 8019fee:	bf00      	nop
 8019ff0:	3728      	adds	r7, #40	; 0x28
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd80      	pop	{r7, pc}
 8019ff6:	bf00      	nop
 8019ff8:	20001ef4 	.word	0x20001ef4
 8019ffc:	20000160 	.word	0x20000160
 801a000:	20001f2c 	.word	0x20001f2c
 801a004:	20001f02 	.word	0x20001f02

0801a008 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b086      	sub	sp, #24
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	60ba      	str	r2, [r7, #8]
 801a010:	607b      	str	r3, [r7, #4]
 801a012:	4603      	mov	r3, r0
 801a014:	73fb      	strb	r3, [r7, #15]
 801a016:	460b      	mov	r3, r1
 801a018:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801a01a:	f002 fe30 	bl	801cc7e <RFW_DeInit>
    switch( modem )
 801a01e:	7bfb      	ldrb	r3, [r7, #15]
 801a020:	2b04      	cmp	r3, #4
 801a022:	f000 80c7 	beq.w	801a1b4 <RadioSetTxConfig+0x1ac>
 801a026:	2b04      	cmp	r3, #4
 801a028:	f300 80d6 	bgt.w	801a1d8 <RadioSetTxConfig+0x1d0>
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d002      	beq.n	801a036 <RadioSetTxConfig+0x2e>
 801a030:	2b01      	cmp	r3, #1
 801a032:	d059      	beq.n	801a0e8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a034:	e0d0      	b.n	801a1d8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a036:	4b74      	ldr	r3, [pc, #464]	; (801a208 <RadioSetTxConfig+0x200>)
 801a038:	2200      	movs	r2, #0
 801a03a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a03e:	4a72      	ldr	r2, [pc, #456]	; (801a208 <RadioSetTxConfig+0x200>)
 801a040:	6a3b      	ldr	r3, [r7, #32]
 801a042:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a044:	4b70      	ldr	r3, [pc, #448]	; (801a208 <RadioSetTxConfig+0x200>)
 801a046:	220b      	movs	r2, #11
 801a048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a04c:	6878      	ldr	r0, [r7, #4]
 801a04e:	f002 fd49 	bl	801cae4 <SUBGRF_GetFskBandwidthRegValue>
 801a052:	4603      	mov	r3, r0
 801a054:	461a      	mov	r2, r3
 801a056:	4b6c      	ldr	r3, [pc, #432]	; (801a208 <RadioSetTxConfig+0x200>)
 801a058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a05c:	4a6a      	ldr	r2, [pc, #424]	; (801a208 <RadioSetTxConfig+0x200>)
 801a05e:	68bb      	ldr	r3, [r7, #8]
 801a060:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a062:	4b69      	ldr	r3, [pc, #420]	; (801a208 <RadioSetTxConfig+0x200>)
 801a064:	2200      	movs	r2, #0
 801a066:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a068:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a06a:	00db      	lsls	r3, r3, #3
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	4b66      	ldr	r3, [pc, #408]	; (801a208 <RadioSetTxConfig+0x200>)
 801a070:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a072:	4b65      	ldr	r3, [pc, #404]	; (801a208 <RadioSetTxConfig+0x200>)
 801a074:	2204      	movs	r2, #4
 801a076:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a078:	4b63      	ldr	r3, [pc, #396]	; (801a208 <RadioSetTxConfig+0x200>)
 801a07a:	2218      	movs	r2, #24
 801a07c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a07e:	4b62      	ldr	r3, [pc, #392]	; (801a208 <RadioSetTxConfig+0x200>)
 801a080:	2200      	movs	r2, #0
 801a082:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a084:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a088:	f083 0301 	eor.w	r3, r3, #1
 801a08c:	b2db      	uxtb	r3, r3
 801a08e:	461a      	mov	r2, r3
 801a090:	4b5d      	ldr	r3, [pc, #372]	; (801a208 <RadioSetTxConfig+0x200>)
 801a092:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a094:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d003      	beq.n	801a0a4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a09c:	4b5a      	ldr	r3, [pc, #360]	; (801a208 <RadioSetTxConfig+0x200>)
 801a09e:	22f2      	movs	r2, #242	; 0xf2
 801a0a0:	75da      	strb	r2, [r3, #23]
 801a0a2:	e002      	b.n	801a0aa <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a0a4:	4b58      	ldr	r3, [pc, #352]	; (801a208 <RadioSetTxConfig+0x200>)
 801a0a6:	2201      	movs	r2, #1
 801a0a8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a0aa:	4b57      	ldr	r3, [pc, #348]	; (801a208 <RadioSetTxConfig+0x200>)
 801a0ac:	2201      	movs	r2, #1
 801a0ae:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a0b0:	f000 fb29 	bl	801a706 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a0b4:	2000      	movs	r0, #0
 801a0b6:	f7ff fcd3 	bl	8019a60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a0ba:	4854      	ldr	r0, [pc, #336]	; (801a20c <RadioSetTxConfig+0x204>)
 801a0bc:	f002 f8ee 	bl	801c29c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0c0:	4853      	ldr	r0, [pc, #332]	; (801a210 <RadioSetTxConfig+0x208>)
 801a0c2:	f002 f9bd 	bl	801c440 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a0c6:	4a53      	ldr	r2, [pc, #332]	; (801a214 <RadioSetTxConfig+0x20c>)
 801a0c8:	f107 0310 	add.w	r3, r7, #16
 801a0cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a0d0:	e883 0003 	stmia.w	r3, {r0, r1}
 801a0d4:	f107 0310 	add.w	r3, r7, #16
 801a0d8:	4618      	mov	r0, r3
 801a0da:	f001 fc7e 	bl	801b9da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a0de:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a0e2:	f001 fcc9 	bl	801ba78 <SUBGRF_SetWhiteningSeed>
            break;
 801a0e6:	e078      	b.n	801a1da <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a0e8:	4b47      	ldr	r3, [pc, #284]	; (801a208 <RadioSetTxConfig+0x200>)
 801a0ea:	2201      	movs	r2, #1
 801a0ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a0f0:	6a3b      	ldr	r3, [r7, #32]
 801a0f2:	b2da      	uxtb	r2, r3
 801a0f4:	4b44      	ldr	r3, [pc, #272]	; (801a208 <RadioSetTxConfig+0x200>)
 801a0f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a0fa:	4a47      	ldr	r2, [pc, #284]	; (801a218 <RadioSetTxConfig+0x210>)
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	4413      	add	r3, r2
 801a100:	781a      	ldrb	r2, [r3, #0]
 801a102:	4b41      	ldr	r3, [pc, #260]	; (801a208 <RadioSetTxConfig+0x200>)
 801a104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a108:	4a3f      	ldr	r2, [pc, #252]	; (801a208 <RadioSetTxConfig+0x200>)
 801a10a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a10e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d105      	bne.n	801a124 <RadioSetTxConfig+0x11c>
 801a118:	6a3b      	ldr	r3, [r7, #32]
 801a11a:	2b0b      	cmp	r3, #11
 801a11c:	d008      	beq.n	801a130 <RadioSetTxConfig+0x128>
 801a11e:	6a3b      	ldr	r3, [r7, #32]
 801a120:	2b0c      	cmp	r3, #12
 801a122:	d005      	beq.n	801a130 <RadioSetTxConfig+0x128>
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	2b01      	cmp	r3, #1
 801a128:	d107      	bne.n	801a13a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a12a:	6a3b      	ldr	r3, [r7, #32]
 801a12c:	2b0c      	cmp	r3, #12
 801a12e:	d104      	bne.n	801a13a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a130:	4b35      	ldr	r3, [pc, #212]	; (801a208 <RadioSetTxConfig+0x200>)
 801a132:	2201      	movs	r2, #1
 801a134:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a138:	e003      	b.n	801a142 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a13a:	4b33      	ldr	r3, [pc, #204]	; (801a208 <RadioSetTxConfig+0x200>)
 801a13c:	2200      	movs	r2, #0
 801a13e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a142:	4b31      	ldr	r3, [pc, #196]	; (801a208 <RadioSetTxConfig+0x200>)
 801a144:	2201      	movs	r2, #1
 801a146:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a148:	4b2f      	ldr	r3, [pc, #188]	; (801a208 <RadioSetTxConfig+0x200>)
 801a14a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a14e:	2b05      	cmp	r3, #5
 801a150:	d004      	beq.n	801a15c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a152:	4b2d      	ldr	r3, [pc, #180]	; (801a208 <RadioSetTxConfig+0x200>)
 801a154:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a158:	2b06      	cmp	r3, #6
 801a15a:	d10a      	bne.n	801a172 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a15c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a15e:	2b0b      	cmp	r3, #11
 801a160:	d803      	bhi.n	801a16a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a162:	4b29      	ldr	r3, [pc, #164]	; (801a208 <RadioSetTxConfig+0x200>)
 801a164:	220c      	movs	r2, #12
 801a166:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a168:	e006      	b.n	801a178 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a16a:	4a27      	ldr	r2, [pc, #156]	; (801a208 <RadioSetTxConfig+0x200>)
 801a16c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a16e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a170:	e002      	b.n	801a178 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a172:	4a25      	ldr	r2, [pc, #148]	; (801a208 <RadioSetTxConfig+0x200>)
 801a174:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a176:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a178:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a17c:	4b22      	ldr	r3, [pc, #136]	; (801a208 <RadioSetTxConfig+0x200>)
 801a17e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a180:	4b26      	ldr	r3, [pc, #152]	; (801a21c <RadioSetTxConfig+0x214>)
 801a182:	781a      	ldrb	r2, [r3, #0]
 801a184:	4b20      	ldr	r3, [pc, #128]	; (801a208 <RadioSetTxConfig+0x200>)
 801a186:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a188:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a18c:	4b1e      	ldr	r3, [pc, #120]	; (801a208 <RadioSetTxConfig+0x200>)
 801a18e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a192:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a196:	4b1c      	ldr	r3, [pc, #112]	; (801a208 <RadioSetTxConfig+0x200>)
 801a198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a19c:	f000 fab3 	bl	801a706 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a1a0:	2001      	movs	r0, #1
 801a1a2:	f7ff fc5d 	bl	8019a60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a1a6:	4819      	ldr	r0, [pc, #100]	; (801a20c <RadioSetTxConfig+0x204>)
 801a1a8:	f002 f878 	bl	801c29c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a1ac:	4818      	ldr	r0, [pc, #96]	; (801a210 <RadioSetTxConfig+0x208>)
 801a1ae:	f002 f947 	bl	801c440 <SUBGRF_SetPacketParams>
            break;
 801a1b2:	e012      	b.n	801a1da <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a1b4:	2004      	movs	r0, #4
 801a1b6:	f7ff fc53 	bl	8019a60 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a1ba:	4b13      	ldr	r3, [pc, #76]	; (801a208 <RadioSetTxConfig+0x200>)
 801a1bc:	2202      	movs	r2, #2
 801a1be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a1c2:	4a11      	ldr	r2, [pc, #68]	; (801a208 <RadioSetTxConfig+0x200>)
 801a1c4:	6a3b      	ldr	r3, [r7, #32]
 801a1c6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a1c8:	4b0f      	ldr	r3, [pc, #60]	; (801a208 <RadioSetTxConfig+0x200>)
 801a1ca:	2216      	movs	r2, #22
 801a1cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a1d0:	480e      	ldr	r0, [pc, #56]	; (801a20c <RadioSetTxConfig+0x204>)
 801a1d2:	f002 f863 	bl	801c29c <SUBGRF_SetModulationParams>
            break;
 801a1d6:	e000      	b.n	801a1da <RadioSetTxConfig+0x1d2>
            break;
 801a1d8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a1da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a1de:	4618      	mov	r0, r3
 801a1e0:	f002 fb92 	bl	801c908 <SUBGRF_SetRfTxPower>
 801a1e4:	4603      	mov	r3, r0
 801a1e6:	461a      	mov	r2, r3
 801a1e8:	4b07      	ldr	r3, [pc, #28]	; (801a208 <RadioSetTxConfig+0x200>)
 801a1ea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801a1ee:	4b06      	ldr	r3, [pc, #24]	; (801a208 <RadioSetTxConfig+0x200>)
 801a1f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	f002 fd56 	bl	801cca6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a1fa:	4a03      	ldr	r2, [pc, #12]	; (801a208 <RadioSetTxConfig+0x200>)
 801a1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1fe:	6053      	str	r3, [r2, #4]
}
 801a200:	bf00      	nop
 801a202:	3718      	adds	r7, #24
 801a204:	46bd      	mov	sp, r7
 801a206:	bd80      	pop	{r7, pc}
 801a208:	20001ef4 	.word	0x20001ef4
 801a20c:	20001f2c 	.word	0x20001f2c
 801a210:	20001f02 	.word	0x20001f02
 801a214:	0801ee4c 	.word	0x0801ee4c
 801a218:	0801f428 	.word	0x0801f428
 801a21c:	20000160 	.word	0x20000160

0801a220 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a220:	b480      	push	{r7}
 801a222:	b083      	sub	sp, #12
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
    return true;
 801a228:	2301      	movs	r3, #1
}
 801a22a:	4618      	mov	r0, r3
 801a22c:	370c      	adds	r7, #12
 801a22e:	46bd      	mov	sp, r7
 801a230:	bc80      	pop	{r7}
 801a232:	4770      	bx	lr

0801a234 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a234:	b480      	push	{r7}
 801a236:	b085      	sub	sp, #20
 801a238:	af00      	add	r7, sp, #0
 801a23a:	4603      	mov	r3, r0
 801a23c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a23e:	2300      	movs	r3, #0
 801a240:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a242:	79fb      	ldrb	r3, [r7, #7]
 801a244:	2b0a      	cmp	r3, #10
 801a246:	d83e      	bhi.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
 801a248:	a201      	add	r2, pc, #4	; (adr r2, 801a250 <RadioGetLoRaBandwidthInHz+0x1c>)
 801a24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a24e:	bf00      	nop
 801a250:	0801a27d 	.word	0x0801a27d
 801a254:	0801a28d 	.word	0x0801a28d
 801a258:	0801a29d 	.word	0x0801a29d
 801a25c:	0801a2ad 	.word	0x0801a2ad
 801a260:	0801a2b5 	.word	0x0801a2b5
 801a264:	0801a2bb 	.word	0x0801a2bb
 801a268:	0801a2c1 	.word	0x0801a2c1
 801a26c:	0801a2c7 	.word	0x0801a2c7
 801a270:	0801a285 	.word	0x0801a285
 801a274:	0801a295 	.word	0x0801a295
 801a278:	0801a2a5 	.word	0x0801a2a5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a27c:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a280:	60fb      	str	r3, [r7, #12]
        break;
 801a282:	e020      	b.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a284:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a288:	60fb      	str	r3, [r7, #12]
        break;
 801a28a:	e01c      	b.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a28c:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a290:	60fb      	str	r3, [r7, #12]
        break;
 801a292:	e018      	b.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a294:	f245 1361 	movw	r3, #20833	; 0x5161
 801a298:	60fb      	str	r3, [r7, #12]
        break;
 801a29a:	e014      	b.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a29c:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a2a0:	60fb      	str	r3, [r7, #12]
        break;
 801a2a2:	e010      	b.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a2a4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a2a8:	60fb      	str	r3, [r7, #12]
        break;
 801a2aa:	e00c      	b.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a2ac:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a2b0:	60fb      	str	r3, [r7, #12]
        break;
 801a2b2:	e008      	b.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a2b4:	4b07      	ldr	r3, [pc, #28]	; (801a2d4 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a2b6:	60fb      	str	r3, [r7, #12]
        break;
 801a2b8:	e005      	b.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a2ba:	4b07      	ldr	r3, [pc, #28]	; (801a2d8 <RadioGetLoRaBandwidthInHz+0xa4>)
 801a2bc:	60fb      	str	r3, [r7, #12]
        break;
 801a2be:	e002      	b.n	801a2c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a2c0:	4b06      	ldr	r3, [pc, #24]	; (801a2dc <RadioGetLoRaBandwidthInHz+0xa8>)
 801a2c2:	60fb      	str	r3, [r7, #12]
        break;
 801a2c4:	bf00      	nop
    }

    return bandwidthInHz;
 801a2c6:	68fb      	ldr	r3, [r7, #12]
}
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	3714      	adds	r7, #20
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	bc80      	pop	{r7}
 801a2d0:	4770      	bx	lr
 801a2d2:	bf00      	nop
 801a2d4:	0001e848 	.word	0x0001e848
 801a2d8:	0003d090 	.word	0x0003d090
 801a2dc:	0007a120 	.word	0x0007a120

0801a2e0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a2e0:	b480      	push	{r7}
 801a2e2:	b083      	sub	sp, #12
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
 801a2e8:	4608      	mov	r0, r1
 801a2ea:	4611      	mov	r1, r2
 801a2ec:	461a      	mov	r2, r3
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	70fb      	strb	r3, [r7, #3]
 801a2f2:	460b      	mov	r3, r1
 801a2f4:	803b      	strh	r3, [r7, #0]
 801a2f6:	4613      	mov	r3, r2
 801a2f8:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801a2fa:	883b      	ldrh	r3, [r7, #0]
 801a2fc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a2fe:	78ba      	ldrb	r2, [r7, #2]
 801a300:	f082 0201 	eor.w	r2, r2, #1
 801a304:	b2d2      	uxtb	r2, r2
 801a306:	2a00      	cmp	r2, #0
 801a308:	d001      	beq.n	801a30e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a30a:	2208      	movs	r2, #8
 801a30c:	e000      	b.n	801a310 <RadioGetGfskTimeOnAirNumerator+0x30>
 801a30e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a310:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a312:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a316:	7c3b      	ldrb	r3, [r7, #16]
 801a318:	7d39      	ldrb	r1, [r7, #20]
 801a31a:	2900      	cmp	r1, #0
 801a31c:	d001      	beq.n	801a322 <RadioGetGfskTimeOnAirNumerator+0x42>
 801a31e:	2102      	movs	r1, #2
 801a320:	e000      	b.n	801a324 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a322:	2100      	movs	r1, #0
 801a324:	440b      	add	r3, r1
 801a326:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a328:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801a32a:	4618      	mov	r0, r3
 801a32c:	370c      	adds	r7, #12
 801a32e:	46bd      	mov	sp, r7
 801a330:	bc80      	pop	{r7}
 801a332:	4770      	bx	lr

0801a334 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a334:	b480      	push	{r7}
 801a336:	b08b      	sub	sp, #44	; 0x2c
 801a338:	af00      	add	r7, sp, #0
 801a33a:	60f8      	str	r0, [r7, #12]
 801a33c:	60b9      	str	r1, [r7, #8]
 801a33e:	4611      	mov	r1, r2
 801a340:	461a      	mov	r2, r3
 801a342:	460b      	mov	r3, r1
 801a344:	71fb      	strb	r3, [r7, #7]
 801a346:	4613      	mov	r3, r2
 801a348:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a34a:	79fb      	ldrb	r3, [r7, #7]
 801a34c:	3304      	adds	r3, #4
 801a34e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a350:	2300      	movs	r3, #0
 801a352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a356:	68bb      	ldr	r3, [r7, #8]
 801a358:	2b05      	cmp	r3, #5
 801a35a:	d002      	beq.n	801a362 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a35c:	68bb      	ldr	r3, [r7, #8]
 801a35e:	2b06      	cmp	r3, #6
 801a360:	d104      	bne.n	801a36c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a362:	88bb      	ldrh	r3, [r7, #4]
 801a364:	2b0b      	cmp	r3, #11
 801a366:	d801      	bhi.n	801a36c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a368:	230c      	movs	r3, #12
 801a36a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d105      	bne.n	801a37e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a372:	68bb      	ldr	r3, [r7, #8]
 801a374:	2b0b      	cmp	r3, #11
 801a376:	d008      	beq.n	801a38a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	2b0c      	cmp	r3, #12
 801a37c:	d005      	beq.n	801a38a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	2b01      	cmp	r3, #1
 801a382:	d105      	bne.n	801a390 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a384:	68bb      	ldr	r3, [r7, #8]
 801a386:	2b0c      	cmp	r3, #12
 801a388:	d102      	bne.n	801a390 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a38a:	2301      	movs	r3, #1
 801a38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a390:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a394:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a396:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a39a:	2a00      	cmp	r2, #0
 801a39c:	d001      	beq.n	801a3a2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a39e:	2210      	movs	r2, #16
 801a3a0:	e000      	b.n	801a3a4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a3a2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a3a4:	4413      	add	r3, r2
 801a3a6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a3a8:	68bb      	ldr	r3, [r7, #8]
 801a3aa:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a3ac:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a3ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a3b2:	2a00      	cmp	r2, #0
 801a3b4:	d001      	beq.n	801a3ba <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	e000      	b.n	801a3bc <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a3ba:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a3bc:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a3be:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	2b06      	cmp	r3, #6
 801a3c4:	d803      	bhi.n	801a3ce <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	009b      	lsls	r3, r3, #2
 801a3ca:	623b      	str	r3, [r7, #32]
 801a3cc:	e00e      	b.n	801a3ec <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a3ce:	69fb      	ldr	r3, [r7, #28]
 801a3d0:	3308      	adds	r3, #8
 801a3d2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d004      	beq.n	801a3e6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a3dc:	68bb      	ldr	r3, [r7, #8]
 801a3de:	3b02      	subs	r3, #2
 801a3e0:	009b      	lsls	r3, r3, #2
 801a3e2:	623b      	str	r3, [r7, #32]
 801a3e4:	e002      	b.n	801a3ec <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a3e6:	68bb      	ldr	r3, [r7, #8]
 801a3e8:	009b      	lsls	r3, r3, #2
 801a3ea:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a3ec:	69fb      	ldr	r3, [r7, #28]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	da01      	bge.n	801a3f6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a3f6:	69fa      	ldr	r2, [r7, #28]
 801a3f8:	6a3b      	ldr	r3, [r7, #32]
 801a3fa:	4413      	add	r3, r2
 801a3fc:	1e5a      	subs	r2, r3, #1
 801a3fe:	6a3b      	ldr	r3, [r7, #32]
 801a400:	fb92 f3f3 	sdiv	r3, r2, r3
 801a404:	697a      	ldr	r2, [r7, #20]
 801a406:	fb03 f202 	mul.w	r2, r3, r2
 801a40a:	88bb      	ldrh	r3, [r7, #4]
 801a40c:	4413      	add	r3, r2
    int32_t intermediate =
 801a40e:	330c      	adds	r3, #12
 801a410:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	2b06      	cmp	r3, #6
 801a416:	d802      	bhi.n	801a41e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a418:	69bb      	ldr	r3, [r7, #24]
 801a41a:	3302      	adds	r3, #2
 801a41c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a41e:	69bb      	ldr	r3, [r7, #24]
 801a420:	009b      	lsls	r3, r3, #2
 801a422:	1c5a      	adds	r2, r3, #1
 801a424:	68bb      	ldr	r3, [r7, #8]
 801a426:	3b02      	subs	r3, #2
 801a428:	fa02 f303 	lsl.w	r3, r2, r3
}
 801a42c:	4618      	mov	r0, r3
 801a42e:	372c      	adds	r7, #44	; 0x2c
 801a430:	46bd      	mov	sp, r7
 801a432:	bc80      	pop	{r7}
 801a434:	4770      	bx	lr
	...

0801a438 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801a438:	b580      	push	{r7, lr}
 801a43a:	b08a      	sub	sp, #40	; 0x28
 801a43c:	af04      	add	r7, sp, #16
 801a43e:	60b9      	str	r1, [r7, #8]
 801a440:	607a      	str	r2, [r7, #4]
 801a442:	461a      	mov	r2, r3
 801a444:	4603      	mov	r3, r0
 801a446:	73fb      	strb	r3, [r7, #15]
 801a448:	4613      	mov	r3, r2
 801a44a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801a44c:	2300      	movs	r3, #0
 801a44e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a450:	2301      	movs	r3, #1
 801a452:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a454:	7bfb      	ldrb	r3, [r7, #15]
 801a456:	2b00      	cmp	r3, #0
 801a458:	d002      	beq.n	801a460 <RadioTimeOnAir+0x28>
 801a45a:	2b01      	cmp	r3, #1
 801a45c:	d017      	beq.n	801a48e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801a45e:	e035      	b.n	801a4cc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801a460:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801a464:	8c3a      	ldrh	r2, [r7, #32]
 801a466:	7bb9      	ldrb	r1, [r7, #14]
 801a468:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a46c:	9301      	str	r3, [sp, #4]
 801a46e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a472:	9300      	str	r3, [sp, #0]
 801a474:	4603      	mov	r3, r0
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	f7ff ff32 	bl	801a2e0 <RadioGetGfskTimeOnAirNumerator>
 801a47c:	4603      	mov	r3, r0
 801a47e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a482:	fb02 f303 	mul.w	r3, r2, r3
 801a486:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	613b      	str	r3, [r7, #16]
        break;
 801a48c:	e01e      	b.n	801a4cc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801a48e:	8c39      	ldrh	r1, [r7, #32]
 801a490:	7bba      	ldrb	r2, [r7, #14]
 801a492:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a496:	9302      	str	r3, [sp, #8]
 801a498:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a49c:	9301      	str	r3, [sp, #4]
 801a49e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a4a2:	9300      	str	r3, [sp, #0]
 801a4a4:	460b      	mov	r3, r1
 801a4a6:	6879      	ldr	r1, [r7, #4]
 801a4a8:	68b8      	ldr	r0, [r7, #8]
 801a4aa:	f7ff ff43 	bl	801a334 <RadioGetLoRaTimeOnAirNumerator>
 801a4ae:	4603      	mov	r3, r0
 801a4b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a4b4:	fb02 f303 	mul.w	r3, r2, r3
 801a4b8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801a4ba:	4a0a      	ldr	r2, [pc, #40]	; (801a4e4 <RadioTimeOnAir+0xac>)
 801a4bc:	68bb      	ldr	r3, [r7, #8]
 801a4be:	4413      	add	r3, r2
 801a4c0:	781b      	ldrb	r3, [r3, #0]
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	f7ff feb6 	bl	801a234 <RadioGetLoRaBandwidthInHz>
 801a4c8:	6138      	str	r0, [r7, #16]
        break;
 801a4ca:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 801a4cc:	697a      	ldr	r2, [r7, #20]
 801a4ce:	693b      	ldr	r3, [r7, #16]
 801a4d0:	4413      	add	r3, r2
 801a4d2:	1e5a      	subs	r2, r3, #1
 801a4d4:	693b      	ldr	r3, [r7, #16]
 801a4d6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a4da:	4618      	mov	r0, r3
 801a4dc:	3718      	adds	r7, #24
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	bd80      	pop	{r7, pc}
 801a4e2:	bf00      	nop
 801a4e4:	0801f428 	.word	0x0801f428

0801a4e8 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	b084      	sub	sp, #16
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	6078      	str	r0, [r7, #4]
 801a4f0:	460b      	mov	r3, r1
 801a4f2:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	f240 2101 	movw	r1, #513	; 0x201
 801a4fc:	f240 2001 	movw	r0, #513	; 0x201
 801a500:	f001 fd36 	bl	801bf70 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a504:	4b71      	ldr	r3, [pc, #452]	; (801a6cc <RadioSend+0x1e4>)
 801a506:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a50a:	2101      	movs	r1, #1
 801a50c:	4618      	mov	r0, r3
 801a50e:	f002 f9d3 	bl	801c8b8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801a512:	4b6e      	ldr	r3, [pc, #440]	; (801a6cc <RadioSend+0x1e4>)
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	2b01      	cmp	r3, #1
 801a518:	d112      	bne.n	801a540 <RadioSend+0x58>
 801a51a:	4b6c      	ldr	r3, [pc, #432]	; (801a6cc <RadioSend+0x1e4>)
 801a51c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a520:	2b06      	cmp	r3, #6
 801a522:	d10d      	bne.n	801a540 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a524:	f640 0089 	movw	r0, #2185	; 0x889
 801a528:	f002 f8e6 	bl	801c6f8 <SUBGRF_ReadRegister>
 801a52c:	4603      	mov	r3, r0
 801a52e:	f023 0304 	bic.w	r3, r3, #4
 801a532:	b2db      	uxtb	r3, r3
 801a534:	4619      	mov	r1, r3
 801a536:	f640 0089 	movw	r0, #2185	; 0x889
 801a53a:	f002 f8c9 	bl	801c6d0 <SUBGRF_WriteRegister>
 801a53e:	e00c      	b.n	801a55a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a540:	f640 0089 	movw	r0, #2185	; 0x889
 801a544:	f002 f8d8 	bl	801c6f8 <SUBGRF_ReadRegister>
 801a548:	4603      	mov	r3, r0
 801a54a:	f043 0304 	orr.w	r3, r3, #4
 801a54e:	b2db      	uxtb	r3, r3
 801a550:	4619      	mov	r1, r3
 801a552:	f640 0089 	movw	r0, #2185	; 0x889
 801a556:	f002 f8bb 	bl	801c6d0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 801a55a:	4b5c      	ldr	r3, [pc, #368]	; (801a6cc <RadioSend+0x1e4>)
 801a55c:	781b      	ldrb	r3, [r3, #0]
 801a55e:	2b04      	cmp	r3, #4
 801a560:	f200 80a7 	bhi.w	801a6b2 <RadioSend+0x1ca>
 801a564:	a201      	add	r2, pc, #4	; (adr r2, 801a56c <RadioSend+0x84>)
 801a566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a56a:	bf00      	nop
 801a56c:	0801a59b 	.word	0x0801a59b
 801a570:	0801a581 	.word	0x0801a581
 801a574:	0801a59b 	.word	0x0801a59b
 801a578:	0801a5fb 	.word	0x0801a5fb
 801a57c:	0801a61b 	.word	0x0801a61b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801a580:	4a52      	ldr	r2, [pc, #328]	; (801a6cc <RadioSend+0x1e4>)
 801a582:	78fb      	ldrb	r3, [r7, #3]
 801a584:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a586:	4852      	ldr	r0, [pc, #328]	; (801a6d0 <RadioSend+0x1e8>)
 801a588:	f001 ff5a 	bl	801c440 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a58c:	78fb      	ldrb	r3, [r7, #3]
 801a58e:	2200      	movs	r2, #0
 801a590:	4619      	mov	r1, r3
 801a592:	6878      	ldr	r0, [r7, #4]
 801a594:	f001 fa0e 	bl	801b9b4 <SUBGRF_SendPayload>
            break;
 801a598:	e08c      	b.n	801a6b4 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801a59a:	f002 fb76 	bl	801cc8a <RFW_Is_Init>
 801a59e:	4603      	mov	r3, r0
 801a5a0:	2b01      	cmp	r3, #1
 801a5a2:	d11d      	bne.n	801a5e0 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801a5a4:	f107 020d 	add.w	r2, r7, #13
 801a5a8:	78fb      	ldrb	r3, [r7, #3]
 801a5aa:	4619      	mov	r1, r3
 801a5ac:	6878      	ldr	r0, [r7, #4]
 801a5ae:	f002 fb84 	bl	801ccba <RFW_TransmitInit>
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d10c      	bne.n	801a5d2 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801a5b8:	7b7a      	ldrb	r2, [r7, #13]
 801a5ba:	4b44      	ldr	r3, [pc, #272]	; (801a6cc <RadioSend+0x1e4>)
 801a5bc:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a5be:	4844      	ldr	r0, [pc, #272]	; (801a6d0 <RadioSend+0x1e8>)
 801a5c0:	f001 ff3e 	bl	801c440 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801a5c4:	7b7b      	ldrb	r3, [r7, #13]
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	4619      	mov	r1, r3
 801a5ca:	6878      	ldr	r0, [r7, #4]
 801a5cc:	f001 f9f2 	bl	801b9b4 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801a5d0:	e070      	b.n	801a6b4 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801a5d2:	4b40      	ldr	r3, [pc, #256]	; (801a6d4 <RadioSend+0x1ec>)
 801a5d4:	2201      	movs	r2, #1
 801a5d6:	2100      	movs	r1, #0
 801a5d8:	2002      	movs	r0, #2
 801a5da:	f003 fc8f 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
 801a5de:	e072      	b.n	801a6c6 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801a5e0:	4a3a      	ldr	r2, [pc, #232]	; (801a6cc <RadioSend+0x1e4>)
 801a5e2:	78fb      	ldrb	r3, [r7, #3]
 801a5e4:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a5e6:	483a      	ldr	r0, [pc, #232]	; (801a6d0 <RadioSend+0x1e8>)
 801a5e8:	f001 ff2a 	bl	801c440 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801a5ec:	78fb      	ldrb	r3, [r7, #3]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	4619      	mov	r1, r3
 801a5f2:	6878      	ldr	r0, [r7, #4]
 801a5f4:	f001 f9de 	bl	801b9b4 <SUBGRF_SendPayload>
            break;
 801a5f8:	e05c      	b.n	801a6b4 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a5fa:	4b34      	ldr	r3, [pc, #208]	; (801a6cc <RadioSend+0x1e4>)
 801a5fc:	2202      	movs	r2, #2
 801a5fe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801a600:	4a32      	ldr	r2, [pc, #200]	; (801a6cc <RadioSend+0x1e4>)
 801a602:	78fb      	ldrb	r3, [r7, #3]
 801a604:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a606:	4832      	ldr	r0, [pc, #200]	; (801a6d0 <RadioSend+0x1e8>)
 801a608:	f001 ff1a 	bl	801c440 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a60c:	78fb      	ldrb	r3, [r7, #3]
 801a60e:	2200      	movs	r2, #0
 801a610:	4619      	mov	r1, r3
 801a612:	6878      	ldr	r0, [r7, #4]
 801a614:	f001 f9ce 	bl	801b9b4 <SUBGRF_SendPayload>
            break;
 801a618:	e04c      	b.n	801a6b4 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801a61a:	78fb      	ldrb	r3, [r7, #3]
 801a61c:	461a      	mov	r2, r3
 801a61e:	6879      	ldr	r1, [r7, #4]
 801a620:	482d      	ldr	r0, [pc, #180]	; (801a6d8 <RadioSend+0x1f0>)
 801a622:	f000 fcbe 	bl	801afa2 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a626:	4b29      	ldr	r3, [pc, #164]	; (801a6cc <RadioSend+0x1e4>)
 801a628:	2202      	movs	r2, #2
 801a62a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801a62c:	78fb      	ldrb	r3, [r7, #3]
 801a62e:	3301      	adds	r3, #1
 801a630:	b2da      	uxtb	r2, r3
 801a632:	4b26      	ldr	r3, [pc, #152]	; (801a6cc <RadioSend+0x1e4>)
 801a634:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a636:	4826      	ldr	r0, [pc, #152]	; (801a6d0 <RadioSend+0x1e8>)
 801a638:	f001 ff02 	bl	801c440 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801a63c:	2100      	movs	r1, #0
 801a63e:	20f1      	movs	r0, #241	; 0xf1
 801a640:	f000 f95d 	bl	801a8fe <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801a644:	2100      	movs	r1, #0
 801a646:	20f0      	movs	r0, #240	; 0xf0
 801a648:	f000 f959 	bl	801a8fe <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801a64c:	4b1f      	ldr	r3, [pc, #124]	; (801a6cc <RadioSend+0x1e4>)
 801a64e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a650:	2b64      	cmp	r3, #100	; 0x64
 801a652:	d108      	bne.n	801a666 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801a654:	2170      	movs	r1, #112	; 0x70
 801a656:	20f3      	movs	r0, #243	; 0xf3
 801a658:	f000 f951 	bl	801a8fe <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801a65c:	211d      	movs	r1, #29
 801a65e:	20f2      	movs	r0, #242	; 0xf2
 801a660:	f000 f94d 	bl	801a8fe <RadioWrite>
 801a664:	e007      	b.n	801a676 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801a666:	21e1      	movs	r1, #225	; 0xe1
 801a668:	20f3      	movs	r0, #243	; 0xf3
 801a66a:	f000 f948 	bl	801a8fe <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801a66e:	2104      	movs	r1, #4
 801a670:	20f2      	movs	r0, #242	; 0xf2
 801a672:	f000 f944 	bl	801a8fe <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801a676:	78fb      	ldrb	r3, [r7, #3]
 801a678:	b29b      	uxth	r3, r3
 801a67a:	00db      	lsls	r3, r3, #3
 801a67c:	b29b      	uxth	r3, r3
 801a67e:	3302      	adds	r3, #2
 801a680:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801a682:	89fb      	ldrh	r3, [r7, #14]
 801a684:	0a1b      	lsrs	r3, r3, #8
 801a686:	b29b      	uxth	r3, r3
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	4619      	mov	r1, r3
 801a68c:	20f4      	movs	r0, #244	; 0xf4
 801a68e:	f000 f936 	bl	801a8fe <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801a692:	89fb      	ldrh	r3, [r7, #14]
 801a694:	b2db      	uxtb	r3, r3
 801a696:	4619      	mov	r1, r3
 801a698:	20f5      	movs	r0, #245	; 0xf5
 801a69a:	f000 f930 	bl	801a8fe <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801a69e:	78fb      	ldrb	r3, [r7, #3]
 801a6a0:	3301      	adds	r3, #1
 801a6a2:	b2db      	uxtb	r3, r3
 801a6a4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801a6a8:	4619      	mov	r1, r3
 801a6aa:	480b      	ldr	r0, [pc, #44]	; (801a6d8 <RadioSend+0x1f0>)
 801a6ac:	f001 f982 	bl	801b9b4 <SUBGRF_SendPayload>
            break;
 801a6b0:	e000      	b.n	801a6b4 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a6b2:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801a6b4:	4b05      	ldr	r3, [pc, #20]	; (801a6cc <RadioSend+0x1e4>)
 801a6b6:	685b      	ldr	r3, [r3, #4]
 801a6b8:	4619      	mov	r1, r3
 801a6ba:	4808      	ldr	r0, [pc, #32]	; (801a6dc <RadioSend+0x1f4>)
 801a6bc:	f003 fa84 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a6c0:	4806      	ldr	r0, [pc, #24]	; (801a6dc <RadioSend+0x1f4>)
 801a6c2:	f003 f9a3 	bl	801da0c <UTIL_TIMER_Start>
}
 801a6c6:	3710      	adds	r7, #16
 801a6c8:	46bd      	mov	sp, r7
 801a6ca:	bd80      	pop	{r7, pc}
 801a6cc:	20001ef4 	.word	0x20001ef4
 801a6d0:	20001f02 	.word	0x20001f02
 801a6d4:	0801ee54 	.word	0x0801ee54
 801a6d8:	20001df0 	.word	0x20001df0
 801a6dc:	20001f50 	.word	0x20001f50

0801a6e0 <RadioSleep>:

static void RadioSleep( void )
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b082      	sub	sp, #8
 801a6e4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801a6ea:	793b      	ldrb	r3, [r7, #4]
 801a6ec:	f043 0304 	orr.w	r3, r3, #4
 801a6f0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801a6f2:	7938      	ldrb	r0, [r7, #4]
 801a6f4:	f001 fa3a 	bl	801bb6c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801a6f8:	2002      	movs	r0, #2
 801a6fa:	f7e8 f9ed 	bl	8002ad8 <HAL_Delay>
}
 801a6fe:	bf00      	nop
 801a700:	3708      	adds	r7, #8
 801a702:	46bd      	mov	sp, r7
 801a704:	bd80      	pop	{r7, pc}

0801a706 <RadioStandby>:

static void RadioStandby( void )
{
 801a706:	b580      	push	{r7, lr}
 801a708:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801a70a:	2000      	movs	r0, #0
 801a70c:	f001 fa60 	bl	801bbd0 <SUBGRF_SetStandby>
}
 801a710:	bf00      	nop
 801a712:	bd80      	pop	{r7, pc}

0801a714 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801a714:	b580      	push	{r7, lr}
 801a716:	b082      	sub	sp, #8
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 801a71c:	f002 fab5 	bl	801cc8a <RFW_Is_Init>
 801a720:	4603      	mov	r3, r0
 801a722:	2b01      	cmp	r3, #1
 801a724:	d102      	bne.n	801a72c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801a726:	f002 fad8 	bl	801ccda <RFW_ReceiveInit>
 801a72a:	e007      	b.n	801a73c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a72c:	2300      	movs	r3, #0
 801a72e:	2200      	movs	r2, #0
 801a730:	f240 2162 	movw	r1, #610	; 0x262
 801a734:	f240 2062 	movw	r0, #610	; 0x262
 801a738:	f001 fc1a 	bl	801bf70 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d006      	beq.n	801a750 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a742:	6879      	ldr	r1, [r7, #4]
 801a744:	4811      	ldr	r0, [pc, #68]	; (801a78c <RadioRx+0x78>)
 801a746:	f003 fa3f 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a74a:	4810      	ldr	r0, [pc, #64]	; (801a78c <RadioRx+0x78>)
 801a74c:	f003 f95e 	bl	801da0c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a750:	4b0f      	ldr	r3, [pc, #60]	; (801a790 <RadioRx+0x7c>)
 801a752:	2200      	movs	r2, #0
 801a754:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a756:	4b0e      	ldr	r3, [pc, #56]	; (801a790 <RadioRx+0x7c>)
 801a758:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a75c:	2100      	movs	r1, #0
 801a75e:	4618      	mov	r0, r3
 801a760:	f002 f8aa 	bl	801c8b8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801a764:	4b0a      	ldr	r3, [pc, #40]	; (801a790 <RadioRx+0x7c>)
 801a766:	785b      	ldrb	r3, [r3, #1]
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d004      	beq.n	801a776 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a76c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a770:	f001 fa6a 	bl	801bc48 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801a774:	e005      	b.n	801a782 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801a776:	4b06      	ldr	r3, [pc, #24]	; (801a790 <RadioRx+0x7c>)
 801a778:	689b      	ldr	r3, [r3, #8]
 801a77a:	019b      	lsls	r3, r3, #6
 801a77c:	4618      	mov	r0, r3
 801a77e:	f001 fa63 	bl	801bc48 <SUBGRF_SetRx>
}
 801a782:	bf00      	nop
 801a784:	3708      	adds	r7, #8
 801a786:	46bd      	mov	sp, r7
 801a788:	bd80      	pop	{r7, pc}
 801a78a:	bf00      	nop
 801a78c:	20001f68 	.word	0x20001f68
 801a790:	20001ef4 	.word	0x20001ef4

0801a794 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b082      	sub	sp, #8
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801a79c:	f002 fa75 	bl	801cc8a <RFW_Is_Init>
 801a7a0:	4603      	mov	r3, r0
 801a7a2:	2b01      	cmp	r3, #1
 801a7a4:	d102      	bne.n	801a7ac <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801a7a6:	f002 fa98 	bl	801ccda <RFW_ReceiveInit>
 801a7aa:	e007      	b.n	801a7bc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a7ac:	2300      	movs	r3, #0
 801a7ae:	2200      	movs	r2, #0
 801a7b0:	f240 2162 	movw	r1, #610	; 0x262
 801a7b4:	f240 2062 	movw	r0, #610	; 0x262
 801a7b8:	f001 fbda 	bl	801bf70 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d006      	beq.n	801a7d0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a7c2:	6879      	ldr	r1, [r7, #4]
 801a7c4:	4811      	ldr	r0, [pc, #68]	; (801a80c <RadioRxBoosted+0x78>)
 801a7c6:	f003 f9ff 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a7ca:	4810      	ldr	r0, [pc, #64]	; (801a80c <RadioRxBoosted+0x78>)
 801a7cc:	f003 f91e 	bl	801da0c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a7d0:	4b0f      	ldr	r3, [pc, #60]	; (801a810 <RadioRxBoosted+0x7c>)
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a7d6:	4b0e      	ldr	r3, [pc, #56]	; (801a810 <RadioRxBoosted+0x7c>)
 801a7d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a7dc:	2100      	movs	r1, #0
 801a7de:	4618      	mov	r0, r3
 801a7e0:	f002 f86a 	bl	801c8b8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801a7e4:	4b0a      	ldr	r3, [pc, #40]	; (801a810 <RadioRxBoosted+0x7c>)
 801a7e6:	785b      	ldrb	r3, [r3, #1]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d004      	beq.n	801a7f6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801a7ec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a7f0:	f001 fa4a 	bl	801bc88 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801a7f4:	e005      	b.n	801a802 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801a7f6:	4b06      	ldr	r3, [pc, #24]	; (801a810 <RadioRxBoosted+0x7c>)
 801a7f8:	689b      	ldr	r3, [r3, #8]
 801a7fa:	019b      	lsls	r3, r3, #6
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	f001 fa43 	bl	801bc88 <SUBGRF_SetRxBoosted>
}
 801a802:	bf00      	nop
 801a804:	3708      	adds	r7, #8
 801a806:	46bd      	mov	sp, r7
 801a808:	bd80      	pop	{r7, pc}
 801a80a:	bf00      	nop
 801a80c:	20001f68 	.word	0x20001f68
 801a810:	20001ef4 	.word	0x20001ef4

0801a814 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b082      	sub	sp, #8
 801a818:	af00      	add	r7, sp, #0
 801a81a:	6078      	str	r0, [r7, #4]
 801a81c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	005a      	lsls	r2, r3, #1
 801a822:	683b      	ldr	r3, [r7, #0]
 801a824:	4413      	add	r3, r2
 801a826:	4a0c      	ldr	r2, [pc, #48]	; (801a858 <RadioSetRxDutyCycle+0x44>)
 801a828:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a82a:	2300      	movs	r3, #0
 801a82c:	2200      	movs	r2, #0
 801a82e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a832:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a836:	f001 fb9b 	bl	801bf70 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a83a:	4b07      	ldr	r3, [pc, #28]	; (801a858 <RadioSetRxDutyCycle+0x44>)
 801a83c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a840:	2100      	movs	r1, #0
 801a842:	4618      	mov	r0, r3
 801a844:	f002 f838 	bl	801c8b8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801a848:	6839      	ldr	r1, [r7, #0]
 801a84a:	6878      	ldr	r0, [r7, #4]
 801a84c:	f001 fa40 	bl	801bcd0 <SUBGRF_SetRxDutyCycle>
}
 801a850:	bf00      	nop
 801a852:	3708      	adds	r7, #8
 801a854:	46bd      	mov	sp, r7
 801a856:	bd80      	pop	{r7, pc}
 801a858:	20001ef4 	.word	0x20001ef4

0801a85c <RadioStartCad>:

static void RadioStartCad( void )
{
 801a85c:	b580      	push	{r7, lr}
 801a85e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a860:	4b09      	ldr	r3, [pc, #36]	; (801a888 <RadioStartCad+0x2c>)
 801a862:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a866:	2100      	movs	r1, #0
 801a868:	4618      	mov	r0, r3
 801a86a:	f002 f825 	bl	801c8b8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801a86e:	2300      	movs	r3, #0
 801a870:	2200      	movs	r2, #0
 801a872:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801a876:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801a87a:	f001 fb79 	bl	801bf70 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801a87e:	f001 fa53 	bl	801bd28 <SUBGRF_SetCad>
}
 801a882:	bf00      	nop
 801a884:	bd80      	pop	{r7, pc}
 801a886:	bf00      	nop
 801a888:	20001ef4 	.word	0x20001ef4

0801a88c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b084      	sub	sp, #16
 801a890:	af00      	add	r7, sp, #0
 801a892:	6078      	str	r0, [r7, #4]
 801a894:	460b      	mov	r3, r1
 801a896:	70fb      	strb	r3, [r7, #3]
 801a898:	4613      	mov	r3, r2
 801a89a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801a89c:	883b      	ldrh	r3, [r7, #0]
 801a89e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a8a2:	fb02 f303 	mul.w	r3, r2, r3
 801a8a6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801a8a8:	6878      	ldr	r0, [r7, #4]
 801a8aa:	f001 fbbd 	bl	801c028 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801a8ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	f002 f828 	bl	801c908 <SUBGRF_SetRfTxPower>
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801a8bc:	7afb      	ldrb	r3, [r7, #11]
 801a8be:	2101      	movs	r1, #1
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	f001 fff9 	bl	801c8b8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801a8c6:	f001 fa3d 	bl	801bd44 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a8ca:	68f9      	ldr	r1, [r7, #12]
 801a8cc:	4804      	ldr	r0, [pc, #16]	; (801a8e0 <RadioSetTxContinuousWave+0x54>)
 801a8ce:	f003 f97b 	bl	801dbc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a8d2:	4803      	ldr	r0, [pc, #12]	; (801a8e0 <RadioSetTxContinuousWave+0x54>)
 801a8d4:	f003 f89a 	bl	801da0c <UTIL_TIMER_Start>
}
 801a8d8:	bf00      	nop
 801a8da:	3710      	adds	r7, #16
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bd80      	pop	{r7, pc}
 801a8e0:	20001f50 	.word	0x20001f50

0801a8e4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801a8e4:	b580      	push	{r7, lr}
 801a8e6:	b082      	sub	sp, #8
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	4603      	mov	r3, r0
 801a8ec:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801a8ee:	f001 fe5c 	bl	801c5aa <SUBGRF_GetRssiInst>
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	b21b      	sxth	r3, r3
}
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	3708      	adds	r7, #8
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	bd80      	pop	{r7, pc}

0801a8fe <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801a8fe:	b580      	push	{r7, lr}
 801a900:	b082      	sub	sp, #8
 801a902:	af00      	add	r7, sp, #0
 801a904:	4603      	mov	r3, r0
 801a906:	460a      	mov	r2, r1
 801a908:	80fb      	strh	r3, [r7, #6]
 801a90a:	4613      	mov	r3, r2
 801a90c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801a90e:	797a      	ldrb	r2, [r7, #5]
 801a910:	88fb      	ldrh	r3, [r7, #6]
 801a912:	4611      	mov	r1, r2
 801a914:	4618      	mov	r0, r3
 801a916:	f001 fedb 	bl	801c6d0 <SUBGRF_WriteRegister>
}
 801a91a:	bf00      	nop
 801a91c:	3708      	adds	r7, #8
 801a91e:	46bd      	mov	sp, r7
 801a920:	bd80      	pop	{r7, pc}

0801a922 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801a922:	b580      	push	{r7, lr}
 801a924:	b082      	sub	sp, #8
 801a926:	af00      	add	r7, sp, #0
 801a928:	4603      	mov	r3, r0
 801a92a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801a92c:	88fb      	ldrh	r3, [r7, #6]
 801a92e:	4618      	mov	r0, r3
 801a930:	f001 fee2 	bl	801c6f8 <SUBGRF_ReadRegister>
 801a934:	4603      	mov	r3, r0
}
 801a936:	4618      	mov	r0, r3
 801a938:	3708      	adds	r7, #8
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bd80      	pop	{r7, pc}

0801a93e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a93e:	b580      	push	{r7, lr}
 801a940:	b082      	sub	sp, #8
 801a942:	af00      	add	r7, sp, #0
 801a944:	4603      	mov	r3, r0
 801a946:	6039      	str	r1, [r7, #0]
 801a948:	80fb      	strh	r3, [r7, #6]
 801a94a:	4613      	mov	r3, r2
 801a94c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801a94e:	797b      	ldrb	r3, [r7, #5]
 801a950:	b29a      	uxth	r2, r3
 801a952:	88fb      	ldrh	r3, [r7, #6]
 801a954:	6839      	ldr	r1, [r7, #0]
 801a956:	4618      	mov	r0, r3
 801a958:	f001 fee2 	bl	801c720 <SUBGRF_WriteRegisters>
}
 801a95c:	bf00      	nop
 801a95e:	3708      	adds	r7, #8
 801a960:	46bd      	mov	sp, r7
 801a962:	bd80      	pop	{r7, pc}

0801a964 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b082      	sub	sp, #8
 801a968:	af00      	add	r7, sp, #0
 801a96a:	4603      	mov	r3, r0
 801a96c:	6039      	str	r1, [r7, #0]
 801a96e:	80fb      	strh	r3, [r7, #6]
 801a970:	4613      	mov	r3, r2
 801a972:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a974:	797b      	ldrb	r3, [r7, #5]
 801a976:	b29a      	uxth	r2, r3
 801a978:	88fb      	ldrh	r3, [r7, #6]
 801a97a:	6839      	ldr	r1, [r7, #0]
 801a97c:	4618      	mov	r0, r3
 801a97e:	f001 fef1 	bl	801c764 <SUBGRF_ReadRegisters>
}
 801a982:	bf00      	nop
 801a984:	3708      	adds	r7, #8
 801a986:	46bd      	mov	sp, r7
 801a988:	bd80      	pop	{r7, pc}
	...

0801a98c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a98c:	b580      	push	{r7, lr}
 801a98e:	b082      	sub	sp, #8
 801a990:	af00      	add	r7, sp, #0
 801a992:	4603      	mov	r3, r0
 801a994:	460a      	mov	r2, r1
 801a996:	71fb      	strb	r3, [r7, #7]
 801a998:	4613      	mov	r3, r2
 801a99a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a99c:	79fb      	ldrb	r3, [r7, #7]
 801a99e:	2b01      	cmp	r3, #1
 801a9a0:	d10a      	bne.n	801a9b8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a9a2:	4a0e      	ldr	r2, [pc, #56]	; (801a9dc <RadioSetMaxPayloadLength+0x50>)
 801a9a4:	79bb      	ldrb	r3, [r7, #6]
 801a9a6:	7013      	strb	r3, [r2, #0]
 801a9a8:	4b0c      	ldr	r3, [pc, #48]	; (801a9dc <RadioSetMaxPayloadLength+0x50>)
 801a9aa:	781a      	ldrb	r2, [r3, #0]
 801a9ac:	4b0c      	ldr	r3, [pc, #48]	; (801a9e0 <RadioSetMaxPayloadLength+0x54>)
 801a9ae:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a9b0:	480c      	ldr	r0, [pc, #48]	; (801a9e4 <RadioSetMaxPayloadLength+0x58>)
 801a9b2:	f001 fd45 	bl	801c440 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a9b6:	e00d      	b.n	801a9d4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a9b8:	4b09      	ldr	r3, [pc, #36]	; (801a9e0 <RadioSetMaxPayloadLength+0x54>)
 801a9ba:	7d5b      	ldrb	r3, [r3, #21]
 801a9bc:	2b01      	cmp	r3, #1
 801a9be:	d109      	bne.n	801a9d4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a9c0:	4a06      	ldr	r2, [pc, #24]	; (801a9dc <RadioSetMaxPayloadLength+0x50>)
 801a9c2:	79bb      	ldrb	r3, [r7, #6]
 801a9c4:	7013      	strb	r3, [r2, #0]
 801a9c6:	4b05      	ldr	r3, [pc, #20]	; (801a9dc <RadioSetMaxPayloadLength+0x50>)
 801a9c8:	781a      	ldrb	r2, [r3, #0]
 801a9ca:	4b05      	ldr	r3, [pc, #20]	; (801a9e0 <RadioSetMaxPayloadLength+0x54>)
 801a9cc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a9ce:	4805      	ldr	r0, [pc, #20]	; (801a9e4 <RadioSetMaxPayloadLength+0x58>)
 801a9d0:	f001 fd36 	bl	801c440 <SUBGRF_SetPacketParams>
}
 801a9d4:	bf00      	nop
 801a9d6:	3708      	adds	r7, #8
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}
 801a9dc:	20000160 	.word	0x20000160
 801a9e0:	20001ef4 	.word	0x20001ef4
 801a9e4:	20001f02 	.word	0x20001f02

0801a9e8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b082      	sub	sp, #8
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	4603      	mov	r3, r0
 801a9f0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a9f2:	4a13      	ldr	r2, [pc, #76]	; (801aa40 <RadioSetPublicNetwork+0x58>)
 801a9f4:	79fb      	ldrb	r3, [r7, #7]
 801a9f6:	7313      	strb	r3, [r2, #12]
 801a9f8:	4b11      	ldr	r3, [pc, #68]	; (801aa40 <RadioSetPublicNetwork+0x58>)
 801a9fa:	7b1a      	ldrb	r2, [r3, #12]
 801a9fc:	4b10      	ldr	r3, [pc, #64]	; (801aa40 <RadioSetPublicNetwork+0x58>)
 801a9fe:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801aa00:	2001      	movs	r0, #1
 801aa02:	f7ff f82d 	bl	8019a60 <RadioSetModem>
    if( enable == true )
 801aa06:	79fb      	ldrb	r3, [r7, #7]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d00a      	beq.n	801aa22 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801aa0c:	2134      	movs	r1, #52	; 0x34
 801aa0e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801aa12:	f001 fe5d 	bl	801c6d0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801aa16:	2144      	movs	r1, #68	; 0x44
 801aa18:	f240 7041 	movw	r0, #1857	; 0x741
 801aa1c:	f001 fe58 	bl	801c6d0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801aa20:	e009      	b.n	801aa36 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801aa22:	2114      	movs	r1, #20
 801aa24:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801aa28:	f001 fe52 	bl	801c6d0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801aa2c:	2124      	movs	r1, #36	; 0x24
 801aa2e:	f240 7041 	movw	r0, #1857	; 0x741
 801aa32:	f001 fe4d 	bl	801c6d0 <SUBGRF_WriteRegister>
}
 801aa36:	bf00      	nop
 801aa38:	3708      	adds	r7, #8
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	bd80      	pop	{r7, pc}
 801aa3e:	bf00      	nop
 801aa40:	20001ef4 	.word	0x20001ef4

0801aa44 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801aa48:	f001 ff92 	bl	801c970 <SUBGRF_GetRadioWakeUpTime>
 801aa4c:	4603      	mov	r3, r0
 801aa4e:	3303      	adds	r3, #3
}
 801aa50:	4618      	mov	r0, r3
 801aa52:	bd80      	pop	{r7, pc}

0801aa54 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b082      	sub	sp, #8
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801aa5c:	f000 f80e 	bl	801aa7c <RadioOnTxTimeoutProcess>
}
 801aa60:	bf00      	nop
 801aa62:	3708      	adds	r7, #8
 801aa64:	46bd      	mov	sp, r7
 801aa66:	bd80      	pop	{r7, pc}

0801aa68 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	b082      	sub	sp, #8
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801aa70:	f000 f818 	bl	801aaa4 <RadioOnRxTimeoutProcess>
}
 801aa74:	bf00      	nop
 801aa76:	3708      	adds	r7, #8
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	bd80      	pop	{r7, pc}

0801aa7c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801aa80:	4b07      	ldr	r3, [pc, #28]	; (801aaa0 <RadioOnTxTimeoutProcess+0x24>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d008      	beq.n	801aa9a <RadioOnTxTimeoutProcess+0x1e>
 801aa88:	4b05      	ldr	r3, [pc, #20]	; (801aaa0 <RadioOnTxTimeoutProcess+0x24>)
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	685b      	ldr	r3, [r3, #4]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d003      	beq.n	801aa9a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801aa92:	4b03      	ldr	r3, [pc, #12]	; (801aaa0 <RadioOnTxTimeoutProcess+0x24>)
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	685b      	ldr	r3, [r3, #4]
 801aa98:	4798      	blx	r3
    }
}
 801aa9a:	bf00      	nop
 801aa9c:	bd80      	pop	{r7, pc}
 801aa9e:	bf00      	nop
 801aaa0:	20001ef0 	.word	0x20001ef0

0801aaa4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801aaa8:	4b07      	ldr	r3, [pc, #28]	; (801aac8 <RadioOnRxTimeoutProcess+0x24>)
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d008      	beq.n	801aac2 <RadioOnRxTimeoutProcess+0x1e>
 801aab0:	4b05      	ldr	r3, [pc, #20]	; (801aac8 <RadioOnRxTimeoutProcess+0x24>)
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	68db      	ldr	r3, [r3, #12]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d003      	beq.n	801aac2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801aaba:	4b03      	ldr	r3, [pc, #12]	; (801aac8 <RadioOnRxTimeoutProcess+0x24>)
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	68db      	ldr	r3, [r3, #12]
 801aac0:	4798      	blx	r3
    }
}
 801aac2:	bf00      	nop
 801aac4:	bd80      	pop	{r7, pc}
 801aac6:	bf00      	nop
 801aac8:	20001ef0 	.word	0x20001ef0

0801aacc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b082      	sub	sp, #8
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	4603      	mov	r3, r0
 801aad4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801aad6:	4a05      	ldr	r2, [pc, #20]	; (801aaec <RadioOnDioIrq+0x20>)
 801aad8:	88fb      	ldrh	r3, [r7, #6]
 801aada:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801aade:	f000 f807 	bl	801aaf0 <RadioIrqProcess>
}
 801aae2:	bf00      	nop
 801aae4:	3708      	adds	r7, #8
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bd80      	pop	{r7, pc}
 801aaea:	bf00      	nop
 801aaec:	20001ef4 	.word	0x20001ef4

0801aaf0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801aaf0:	b5b0      	push	{r4, r5, r7, lr}
 801aaf2:	b082      	sub	sp, #8
 801aaf4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801aafa:	2300      	movs	r3, #0
 801aafc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801aafe:	4ba8      	ldr	r3, [pc, #672]	; (801ada0 <RadioIrqProcess+0x2b0>)
 801ab00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801ab04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab08:	f000 810d 	beq.w	801ad26 <RadioIrqProcess+0x236>
 801ab0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab10:	f300 81e8 	bgt.w	801aee4 <RadioIrqProcess+0x3f4>
 801ab14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab18:	f000 80f1 	beq.w	801acfe <RadioIrqProcess+0x20e>
 801ab1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab20:	f300 81e0 	bgt.w	801aee4 <RadioIrqProcess+0x3f4>
 801ab24:	2b80      	cmp	r3, #128	; 0x80
 801ab26:	f000 80d6 	beq.w	801acd6 <RadioIrqProcess+0x1e6>
 801ab2a:	2b80      	cmp	r3, #128	; 0x80
 801ab2c:	f300 81da 	bgt.w	801aee4 <RadioIrqProcess+0x3f4>
 801ab30:	2b20      	cmp	r3, #32
 801ab32:	dc49      	bgt.n	801abc8 <RadioIrqProcess+0xd8>
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	f340 81d5 	ble.w	801aee4 <RadioIrqProcess+0x3f4>
 801ab3a:	3b01      	subs	r3, #1
 801ab3c:	2b1f      	cmp	r3, #31
 801ab3e:	f200 81d1 	bhi.w	801aee4 <RadioIrqProcess+0x3f4>
 801ab42:	a201      	add	r2, pc, #4	; (adr r2, 801ab48 <RadioIrqProcess+0x58>)
 801ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab48:	0801abd1 	.word	0x0801abd1
 801ab4c:	0801ac0b 	.word	0x0801ac0b
 801ab50:	0801aee5 	.word	0x0801aee5
 801ab54:	0801adc1 	.word	0x0801adc1
 801ab58:	0801aee5 	.word	0x0801aee5
 801ab5c:	0801aee5 	.word	0x0801aee5
 801ab60:	0801aee5 	.word	0x0801aee5
 801ab64:	0801ae3d 	.word	0x0801ae3d
 801ab68:	0801aee5 	.word	0x0801aee5
 801ab6c:	0801aee5 	.word	0x0801aee5
 801ab70:	0801aee5 	.word	0x0801aee5
 801ab74:	0801aee5 	.word	0x0801aee5
 801ab78:	0801aee5 	.word	0x0801aee5
 801ab7c:	0801aee5 	.word	0x0801aee5
 801ab80:	0801aee5 	.word	0x0801aee5
 801ab84:	0801ae59 	.word	0x0801ae59
 801ab88:	0801aee5 	.word	0x0801aee5
 801ab8c:	0801aee5 	.word	0x0801aee5
 801ab90:	0801aee5 	.word	0x0801aee5
 801ab94:	0801aee5 	.word	0x0801aee5
 801ab98:	0801aee5 	.word	0x0801aee5
 801ab9c:	0801aee5 	.word	0x0801aee5
 801aba0:	0801aee5 	.word	0x0801aee5
 801aba4:	0801aee5 	.word	0x0801aee5
 801aba8:	0801aee5 	.word	0x0801aee5
 801abac:	0801aee5 	.word	0x0801aee5
 801abb0:	0801aee5 	.word	0x0801aee5
 801abb4:	0801aee5 	.word	0x0801aee5
 801abb8:	0801aee5 	.word	0x0801aee5
 801abbc:	0801aee5 	.word	0x0801aee5
 801abc0:	0801aee5 	.word	0x0801aee5
 801abc4:	0801ae67 	.word	0x0801ae67
 801abc8:	2b40      	cmp	r3, #64	; 0x40
 801abca:	f000 816d 	beq.w	801aea8 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801abce:	e189      	b.n	801aee4 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801abd0:	4874      	ldr	r0, [pc, #464]	; (801ada4 <RadioIrqProcess+0x2b4>)
 801abd2:	f002 ff89 	bl	801dae8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801abd6:	2000      	movs	r0, #0
 801abd8:	f000 fffa 	bl	801bbd0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801abdc:	f002 f85c 	bl	801cc98 <RFW_Is_LongPacketModeEnabled>
 801abe0:	4603      	mov	r3, r0
 801abe2:	2b01      	cmp	r3, #1
 801abe4:	d101      	bne.n	801abea <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801abe6:	f002 f880 	bl	801ccea <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801abea:	4b6f      	ldr	r3, [pc, #444]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	f000 817a 	beq.w	801aee8 <RadioIrqProcess+0x3f8>
 801abf4:	4b6c      	ldr	r3, [pc, #432]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	f000 8174 	beq.w	801aee8 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801ac00:	4b69      	ldr	r3, [pc, #420]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	4798      	blx	r3
        break;
 801ac08:	e16e      	b.n	801aee8 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801ac0a:	4868      	ldr	r0, [pc, #416]	; (801adac <RadioIrqProcess+0x2bc>)
 801ac0c:	f002 ff6c 	bl	801dae8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ac10:	4b63      	ldr	r3, [pc, #396]	; (801ada0 <RadioIrqProcess+0x2b0>)
 801ac12:	785b      	ldrb	r3, [r3, #1]
 801ac14:	f083 0301 	eor.w	r3, r3, #1
 801ac18:	b2db      	uxtb	r3, r3
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d014      	beq.n	801ac48 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801ac1e:	2000      	movs	r0, #0
 801ac20:	f000 ffd6 	bl	801bbd0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801ac24:	2100      	movs	r1, #0
 801ac26:	f640 1002 	movw	r0, #2306	; 0x902
 801ac2a:	f001 fd51 	bl	801c6d0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801ac2e:	f640 1044 	movw	r0, #2372	; 0x944
 801ac32:	f001 fd61 	bl	801c6f8 <SUBGRF_ReadRegister>
 801ac36:	4603      	mov	r3, r0
 801ac38:	f043 0302 	orr.w	r3, r3, #2
 801ac3c:	b2db      	uxtb	r3, r3
 801ac3e:	4619      	mov	r1, r3
 801ac40:	f640 1044 	movw	r0, #2372	; 0x944
 801ac44:	f001 fd44 	bl	801c6d0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801ac48:	1dfb      	adds	r3, r7, #7
 801ac4a:	22ff      	movs	r2, #255	; 0xff
 801ac4c:	4619      	mov	r1, r3
 801ac4e:	4858      	ldr	r0, [pc, #352]	; (801adb0 <RadioIrqProcess+0x2c0>)
 801ac50:	f000 fe8e 	bl	801b970 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801ac54:	4857      	ldr	r0, [pc, #348]	; (801adb4 <RadioIrqProcess+0x2c4>)
 801ac56:	f001 fce9 	bl	801c62c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801ac5a:	4b53      	ldr	r3, [pc, #332]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	f000 8144 	beq.w	801aeec <RadioIrqProcess+0x3fc>
 801ac64:	4b50      	ldr	r3, [pc, #320]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	689b      	ldr	r3, [r3, #8]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	f000 813e 	beq.w	801aeec <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801ac70:	4b4b      	ldr	r3, [pc, #300]	; (801ada0 <RadioIrqProcess+0x2b0>)
 801ac72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ac76:	2b01      	cmp	r3, #1
 801ac78:	d10e      	bne.n	801ac98 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801ac7a:	4b4b      	ldr	r3, [pc, #300]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	689c      	ldr	r4, [r3, #8]
 801ac80:	79fb      	ldrb	r3, [r7, #7]
 801ac82:	b299      	uxth	r1, r3
 801ac84:	4b46      	ldr	r3, [pc, #280]	; (801ada0 <RadioIrqProcess+0x2b0>)
 801ac86:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801ac8a:	b21a      	sxth	r2, r3
 801ac8c:	4b44      	ldr	r3, [pc, #272]	; (801ada0 <RadioIrqProcess+0x2b0>)
 801ac8e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801ac92:	4847      	ldr	r0, [pc, #284]	; (801adb0 <RadioIrqProcess+0x2c0>)
 801ac94:	47a0      	blx	r4
                break;
 801ac96:	e01d      	b.n	801acd4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801ac98:	4b41      	ldr	r3, [pc, #260]	; (801ada0 <RadioIrqProcess+0x2b0>)
 801ac9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac9c:	463a      	mov	r2, r7
 801ac9e:	4611      	mov	r1, r2
 801aca0:	4618      	mov	r0, r3
 801aca2:	f001 ff47 	bl	801cb34 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801aca6:	4b40      	ldr	r3, [pc, #256]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	689c      	ldr	r4, [r3, #8]
 801acac:	79fb      	ldrb	r3, [r7, #7]
 801acae:	b299      	uxth	r1, r3
 801acb0:	4b3b      	ldr	r3, [pc, #236]	; (801ada0 <RadioIrqProcess+0x2b0>)
 801acb2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801acb6:	b218      	sxth	r0, r3
 801acb8:	683b      	ldr	r3, [r7, #0]
 801acba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801acbe:	4a3e      	ldr	r2, [pc, #248]	; (801adb8 <RadioIrqProcess+0x2c8>)
 801acc0:	fb82 5203 	smull	r5, r2, r2, r3
 801acc4:	1192      	asrs	r2, r2, #6
 801acc6:	17db      	asrs	r3, r3, #31
 801acc8:	1ad3      	subs	r3, r2, r3
 801acca:	b25b      	sxtb	r3, r3
 801accc:	4602      	mov	r2, r0
 801acce:	4838      	ldr	r0, [pc, #224]	; (801adb0 <RadioIrqProcess+0x2c0>)
 801acd0:	47a0      	blx	r4
                break;
 801acd2:	bf00      	nop
        break;
 801acd4:	e10a      	b.n	801aeec <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801acd6:	2000      	movs	r0, #0
 801acd8:	f000 ff7a 	bl	801bbd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801acdc:	4b32      	ldr	r3, [pc, #200]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	f000 8105 	beq.w	801aef0 <RadioIrqProcess+0x400>
 801ace6:	4b30      	ldr	r3, [pc, #192]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	699b      	ldr	r3, [r3, #24]
 801acec:	2b00      	cmp	r3, #0
 801acee:	f000 80ff 	beq.w	801aef0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801acf2:	4b2d      	ldr	r3, [pc, #180]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	699b      	ldr	r3, [r3, #24]
 801acf8:	2000      	movs	r0, #0
 801acfa:	4798      	blx	r3
        break;
 801acfc:	e0f8      	b.n	801aef0 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801acfe:	2000      	movs	r0, #0
 801ad00:	f000 ff66 	bl	801bbd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ad04:	4b28      	ldr	r3, [pc, #160]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	f000 80f3 	beq.w	801aef4 <RadioIrqProcess+0x404>
 801ad0e:	4b26      	ldr	r3, [pc, #152]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	699b      	ldr	r3, [r3, #24]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	f000 80ed 	beq.w	801aef4 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801ad1a:	4b23      	ldr	r3, [pc, #140]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	699b      	ldr	r3, [r3, #24]
 801ad20:	2001      	movs	r0, #1
 801ad22:	4798      	blx	r3
        break;
 801ad24:	e0e6      	b.n	801aef4 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801ad26:	4b25      	ldr	r3, [pc, #148]	; (801adbc <RadioIrqProcess+0x2cc>)
 801ad28:	2201      	movs	r2, #1
 801ad2a:	2100      	movs	r1, #0
 801ad2c:	2002      	movs	r0, #2
 801ad2e:	f003 f8e5 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801ad32:	f000 fe03 	bl	801b93c <SUBGRF_GetOperatingMode>
 801ad36:	4603      	mov	r3, r0
 801ad38:	2b04      	cmp	r3, #4
 801ad3a:	d115      	bne.n	801ad68 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801ad3c:	4819      	ldr	r0, [pc, #100]	; (801ada4 <RadioIrqProcess+0x2b4>)
 801ad3e:	f002 fed3 	bl	801dae8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ad42:	2000      	movs	r0, #0
 801ad44:	f000 ff44 	bl	801bbd0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ad48:	4b17      	ldr	r3, [pc, #92]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	f000 80d3 	beq.w	801aef8 <RadioIrqProcess+0x408>
 801ad52:	4b15      	ldr	r3, [pc, #84]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	685b      	ldr	r3, [r3, #4]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	f000 80cd 	beq.w	801aef8 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801ad5e:	4b12      	ldr	r3, [pc, #72]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	685b      	ldr	r3, [r3, #4]
 801ad64:	4798      	blx	r3
        break;
 801ad66:	e0c7      	b.n	801aef8 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801ad68:	f000 fde8 	bl	801b93c <SUBGRF_GetOperatingMode>
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	2b05      	cmp	r3, #5
 801ad70:	f040 80c2 	bne.w	801aef8 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801ad74:	480d      	ldr	r0, [pc, #52]	; (801adac <RadioIrqProcess+0x2bc>)
 801ad76:	f002 feb7 	bl	801dae8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ad7a:	2000      	movs	r0, #0
 801ad7c:	f000 ff28 	bl	801bbd0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ad80:	4b09      	ldr	r3, [pc, #36]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	f000 80b7 	beq.w	801aef8 <RadioIrqProcess+0x408>
 801ad8a:	4b07      	ldr	r3, [pc, #28]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	68db      	ldr	r3, [r3, #12]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	f000 80b1 	beq.w	801aef8 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801ad96:	4b04      	ldr	r3, [pc, #16]	; (801ada8 <RadioIrqProcess+0x2b8>)
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	68db      	ldr	r3, [r3, #12]
 801ad9c:	4798      	blx	r3
        break;
 801ad9e:	e0ab      	b.n	801aef8 <RadioIrqProcess+0x408>
 801ada0:	20001ef4 	.word	0x20001ef4
 801ada4:	20001f50 	.word	0x20001f50
 801ada8:	20001ef0 	.word	0x20001ef0
 801adac:	20001f68 	.word	0x20001f68
 801adb0:	20001df0 	.word	0x20001df0
 801adb4:	20001f18 	.word	0x20001f18
 801adb8:	10624dd3 	.word	0x10624dd3
 801adbc:	0801ee6c 	.word	0x0801ee6c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801adc0:	4b54      	ldr	r3, [pc, #336]	; (801af14 <RadioIrqProcess+0x424>)
 801adc2:	2201      	movs	r2, #1
 801adc4:	2100      	movs	r1, #0
 801adc6:	2002      	movs	r0, #2
 801adc8:	f003 f898 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801adcc:	4b52      	ldr	r3, [pc, #328]	; (801af18 <RadioIrqProcess+0x428>)
 801adce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801add0:	2b00      	cmp	r3, #0
 801add2:	f000 8093 	beq.w	801aefc <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801add6:	4a51      	ldr	r2, [pc, #324]	; (801af1c <RadioIrqProcess+0x42c>)
 801add8:	4b4f      	ldr	r3, [pc, #316]	; (801af18 <RadioIrqProcess+0x428>)
 801adda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801addc:	0c1b      	lsrs	r3, r3, #16
 801adde:	b2db      	uxtb	r3, r3
 801ade0:	4619      	mov	r1, r3
 801ade2:	f640 1003 	movw	r0, #2307	; 0x903
 801ade6:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801ade8:	4a4c      	ldr	r2, [pc, #304]	; (801af1c <RadioIrqProcess+0x42c>)
 801adea:	4b4b      	ldr	r3, [pc, #300]	; (801af18 <RadioIrqProcess+0x428>)
 801adec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801adee:	0a1b      	lsrs	r3, r3, #8
 801adf0:	b2db      	uxtb	r3, r3
 801adf2:	4619      	mov	r1, r3
 801adf4:	f640 1004 	movw	r0, #2308	; 0x904
 801adf8:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801adfa:	4a48      	ldr	r2, [pc, #288]	; (801af1c <RadioIrqProcess+0x42c>)
 801adfc:	4b46      	ldr	r3, [pc, #280]	; (801af18 <RadioIrqProcess+0x428>)
 801adfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae00:	b2db      	uxtb	r3, r3
 801ae02:	4619      	mov	r1, r3
 801ae04:	f640 1005 	movw	r0, #2309	; 0x905
 801ae08:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801ae0a:	4c44      	ldr	r4, [pc, #272]	; (801af1c <RadioIrqProcess+0x42c>)
 801ae0c:	4b44      	ldr	r3, [pc, #272]	; (801af20 <RadioIrqProcess+0x430>)
 801ae0e:	f640 1002 	movw	r0, #2306	; 0x902
 801ae12:	4798      	blx	r3
 801ae14:	4603      	mov	r3, r0
 801ae16:	f043 0301 	orr.w	r3, r3, #1
 801ae1a:	b2db      	uxtb	r3, r3
 801ae1c:	4619      	mov	r1, r3
 801ae1e:	f640 1002 	movw	r0, #2306	; 0x902
 801ae22:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801ae24:	4b3c      	ldr	r3, [pc, #240]	; (801af18 <RadioIrqProcess+0x428>)
 801ae26:	2200      	movs	r2, #0
 801ae28:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	2200      	movs	r2, #0
 801ae2e:	f240 2162 	movw	r1, #610	; 0x262
 801ae32:	f240 2062 	movw	r0, #610	; 0x262
 801ae36:	f001 f89b 	bl	801bf70 <SUBGRF_SetDioIrqParams>
        break;
 801ae3a:	e05f      	b.n	801aefc <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801ae3c:	4b39      	ldr	r3, [pc, #228]	; (801af24 <RadioIrqProcess+0x434>)
 801ae3e:	2201      	movs	r2, #1
 801ae40:	2100      	movs	r1, #0
 801ae42:	2002      	movs	r0, #2
 801ae44:	f003 f85a 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801ae48:	f001 ff1f 	bl	801cc8a <RFW_Is_Init>
 801ae4c:	4603      	mov	r3, r0
 801ae4e:	2b01      	cmp	r3, #1
 801ae50:	d156      	bne.n	801af00 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801ae52:	f001 ff50 	bl	801ccf6 <RFW_ReceivePayload>
        break;
 801ae56:	e053      	b.n	801af00 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801ae58:	4b33      	ldr	r3, [pc, #204]	; (801af28 <RadioIrqProcess+0x438>)
 801ae5a:	2201      	movs	r2, #1
 801ae5c:	2100      	movs	r1, #0
 801ae5e:	2002      	movs	r0, #2
 801ae60:	f003 f84c 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ae64:	e051      	b.n	801af0a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801ae66:	4831      	ldr	r0, [pc, #196]	; (801af2c <RadioIrqProcess+0x43c>)
 801ae68:	f002 fe3e 	bl	801dae8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ae6c:	4b2a      	ldr	r3, [pc, #168]	; (801af18 <RadioIrqProcess+0x428>)
 801ae6e:	785b      	ldrb	r3, [r3, #1]
 801ae70:	f083 0301 	eor.w	r3, r3, #1
 801ae74:	b2db      	uxtb	r3, r3
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d002      	beq.n	801ae80 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801ae7a:	2000      	movs	r0, #0
 801ae7c:	f000 fea8 	bl	801bbd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ae80:	4b2b      	ldr	r3, [pc, #172]	; (801af30 <RadioIrqProcess+0x440>)
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d03d      	beq.n	801af04 <RadioIrqProcess+0x414>
 801ae88:	4b29      	ldr	r3, [pc, #164]	; (801af30 <RadioIrqProcess+0x440>)
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	68db      	ldr	r3, [r3, #12]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d038      	beq.n	801af04 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801ae92:	4b27      	ldr	r3, [pc, #156]	; (801af30 <RadioIrqProcess+0x440>)
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	68db      	ldr	r3, [r3, #12]
 801ae98:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801ae9a:	4b26      	ldr	r3, [pc, #152]	; (801af34 <RadioIrqProcess+0x444>)
 801ae9c:	2201      	movs	r2, #1
 801ae9e:	2100      	movs	r1, #0
 801aea0:	2002      	movs	r0, #2
 801aea2:	f003 f82b 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801aea6:	e02d      	b.n	801af04 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801aea8:	4b23      	ldr	r3, [pc, #140]	; (801af38 <RadioIrqProcess+0x448>)
 801aeaa:	2201      	movs	r2, #1
 801aeac:	2100      	movs	r1, #0
 801aeae:	2002      	movs	r0, #2
 801aeb0:	f003 f824 	bl	801defc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801aeb4:	4b18      	ldr	r3, [pc, #96]	; (801af18 <RadioIrqProcess+0x428>)
 801aeb6:	785b      	ldrb	r3, [r3, #1]
 801aeb8:	f083 0301 	eor.w	r3, r3, #1
 801aebc:	b2db      	uxtb	r3, r3
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d002      	beq.n	801aec8 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801aec2:	2000      	movs	r0, #0
 801aec4:	f000 fe84 	bl	801bbd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801aec8:	4b19      	ldr	r3, [pc, #100]	; (801af30 <RadioIrqProcess+0x440>)
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d01b      	beq.n	801af08 <RadioIrqProcess+0x418>
 801aed0:	4b17      	ldr	r3, [pc, #92]	; (801af30 <RadioIrqProcess+0x440>)
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	691b      	ldr	r3, [r3, #16]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d016      	beq.n	801af08 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801aeda:	4b15      	ldr	r3, [pc, #84]	; (801af30 <RadioIrqProcess+0x440>)
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	691b      	ldr	r3, [r3, #16]
 801aee0:	4798      	blx	r3
        break;
 801aee2:	e011      	b.n	801af08 <RadioIrqProcess+0x418>
        break;
 801aee4:	bf00      	nop
 801aee6:	e010      	b.n	801af0a <RadioIrqProcess+0x41a>
        break;
 801aee8:	bf00      	nop
 801aeea:	e00e      	b.n	801af0a <RadioIrqProcess+0x41a>
        break;
 801aeec:	bf00      	nop
 801aeee:	e00c      	b.n	801af0a <RadioIrqProcess+0x41a>
        break;
 801aef0:	bf00      	nop
 801aef2:	e00a      	b.n	801af0a <RadioIrqProcess+0x41a>
        break;
 801aef4:	bf00      	nop
 801aef6:	e008      	b.n	801af0a <RadioIrqProcess+0x41a>
        break;
 801aef8:	bf00      	nop
 801aefa:	e006      	b.n	801af0a <RadioIrqProcess+0x41a>
        break;
 801aefc:	bf00      	nop
 801aefe:	e004      	b.n	801af0a <RadioIrqProcess+0x41a>
        break;
 801af00:	bf00      	nop
 801af02:	e002      	b.n	801af0a <RadioIrqProcess+0x41a>
        break;
 801af04:	bf00      	nop
 801af06:	e000      	b.n	801af0a <RadioIrqProcess+0x41a>
        break;
 801af08:	bf00      	nop
    }
}
 801af0a:	bf00      	nop
 801af0c:	3708      	adds	r7, #8
 801af0e:	46bd      	mov	sp, r7
 801af10:	bdb0      	pop	{r4, r5, r7, pc}
 801af12:	bf00      	nop
 801af14:	0801ee80 	.word	0x0801ee80
 801af18:	20001ef4 	.word	0x20001ef4
 801af1c:	0801a8ff 	.word	0x0801a8ff
 801af20:	0801a923 	.word	0x0801a923
 801af24:	0801ee8c 	.word	0x0801ee8c
 801af28:	0801ee98 	.word	0x0801ee98
 801af2c:	20001f68 	.word	0x20001f68
 801af30:	20001ef0 	.word	0x20001ef0
 801af34:	0801eea4 	.word	0x0801eea4
 801af38:	0801eeb0 	.word	0x0801eeb0

0801af3c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801af40:	4b09      	ldr	r3, [pc, #36]	; (801af68 <RadioTxPrbs+0x2c>)
 801af42:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801af46:	2101      	movs	r1, #1
 801af48:	4618      	mov	r0, r3
 801af4a:	f001 fcb5 	bl	801c8b8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801af4e:	4b07      	ldr	r3, [pc, #28]	; (801af6c <RadioTxPrbs+0x30>)
 801af50:	212d      	movs	r1, #45	; 0x2d
 801af52:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801af56:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801af58:	f000 fefd 	bl	801bd56 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801af5c:	4804      	ldr	r0, [pc, #16]	; (801af70 <RadioTxPrbs+0x34>)
 801af5e:	f000 fe53 	bl	801bc08 <SUBGRF_SetTx>
}
 801af62:	bf00      	nop
 801af64:	bd80      	pop	{r7, pc}
 801af66:	bf00      	nop
 801af68:	20001ef4 	.word	0x20001ef4
 801af6c:	0801a8ff 	.word	0x0801a8ff
 801af70:	000fffff 	.word	0x000fffff

0801af74 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b084      	sub	sp, #16
 801af78:	af00      	add	r7, sp, #0
 801af7a:	4603      	mov	r3, r0
 801af7c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801af7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af82:	4618      	mov	r0, r3
 801af84:	f001 fcc0 	bl	801c908 <SUBGRF_SetRfTxPower>
 801af88:	4603      	mov	r3, r0
 801af8a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801af8c:	7bfb      	ldrb	r3, [r7, #15]
 801af8e:	2101      	movs	r1, #1
 801af90:	4618      	mov	r0, r3
 801af92:	f001 fc91 	bl	801c8b8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801af96:	f000 fed5 	bl	801bd44 <SUBGRF_SetTxContinuousWave>
}
 801af9a:	bf00      	nop
 801af9c:	3710      	adds	r7, #16
 801af9e:	46bd      	mov	sp, r7
 801afa0:	bd80      	pop	{r7, pc}

0801afa2 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801afa2:	b480      	push	{r7}
 801afa4:	b089      	sub	sp, #36	; 0x24
 801afa6:	af00      	add	r7, sp, #0
 801afa8:	60f8      	str	r0, [r7, #12]
 801afaa:	60b9      	str	r1, [r7, #8]
 801afac:	4613      	mov	r3, r2
 801afae:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801afb0:	2300      	movs	r3, #0
 801afb2:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801afb4:	2300      	movs	r3, #0
 801afb6:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801afb8:	2300      	movs	r3, #0
 801afba:	61bb      	str	r3, [r7, #24]
 801afbc:	e011      	b.n	801afe2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801afbe:	69bb      	ldr	r3, [r7, #24]
 801afc0:	68ba      	ldr	r2, [r7, #8]
 801afc2:	4413      	add	r3, r2
 801afc4:	781a      	ldrb	r2, [r3, #0]
 801afc6:	69bb      	ldr	r3, [r7, #24]
 801afc8:	68b9      	ldr	r1, [r7, #8]
 801afca:	440b      	add	r3, r1
 801afcc:	43d2      	mvns	r2, r2
 801afce:	b2d2      	uxtb	r2, r2
 801afd0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801afd2:	69bb      	ldr	r3, [r7, #24]
 801afd4:	68fa      	ldr	r2, [r7, #12]
 801afd6:	4413      	add	r3, r2
 801afd8:	2200      	movs	r2, #0
 801afda:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801afdc:	69bb      	ldr	r3, [r7, #24]
 801afde:	3301      	adds	r3, #1
 801afe0:	61bb      	str	r3, [r7, #24]
 801afe2:	79fb      	ldrb	r3, [r7, #7]
 801afe4:	69ba      	ldr	r2, [r7, #24]
 801afe6:	429a      	cmp	r2, r3
 801afe8:	dbe9      	blt.n	801afbe <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801afea:	2300      	movs	r3, #0
 801afec:	61bb      	str	r3, [r7, #24]
 801afee:	e049      	b.n	801b084 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801aff0:	69bb      	ldr	r3, [r7, #24]
 801aff2:	425a      	negs	r2, r3
 801aff4:	f003 0307 	and.w	r3, r3, #7
 801aff8:	f002 0207 	and.w	r2, r2, #7
 801affc:	bf58      	it	pl
 801affe:	4253      	negpl	r3, r2
 801b000:	b2db      	uxtb	r3, r3
 801b002:	f1c3 0307 	rsb	r3, r3, #7
 801b006:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b008:	69bb      	ldr	r3, [r7, #24]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	da00      	bge.n	801b010 <payload_integration+0x6e>
 801b00e:	3307      	adds	r3, #7
 801b010:	10db      	asrs	r3, r3, #3
 801b012:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b014:	69bb      	ldr	r3, [r7, #24]
 801b016:	3301      	adds	r3, #1
 801b018:	425a      	negs	r2, r3
 801b01a:	f003 0307 	and.w	r3, r3, #7
 801b01e:	f002 0207 	and.w	r2, r2, #7
 801b022:	bf58      	it	pl
 801b024:	4253      	negpl	r3, r2
 801b026:	b2db      	uxtb	r3, r3
 801b028:	f1c3 0307 	rsb	r3, r3, #7
 801b02c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b02e:	69bb      	ldr	r3, [r7, #24]
 801b030:	3301      	adds	r3, #1
 801b032:	2b00      	cmp	r3, #0
 801b034:	da00      	bge.n	801b038 <payload_integration+0x96>
 801b036:	3307      	adds	r3, #7
 801b038:	10db      	asrs	r3, r3, #3
 801b03a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b03c:	7dbb      	ldrb	r3, [r7, #22]
 801b03e:	68ba      	ldr	r2, [r7, #8]
 801b040:	4413      	add	r3, r2
 801b042:	781b      	ldrb	r3, [r3, #0]
 801b044:	461a      	mov	r2, r3
 801b046:	7dfb      	ldrb	r3, [r7, #23]
 801b048:	fa42 f303 	asr.w	r3, r2, r3
 801b04c:	b2db      	uxtb	r3, r3
 801b04e:	f003 0301 	and.w	r3, r3, #1
 801b052:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b054:	7ffa      	ldrb	r2, [r7, #31]
 801b056:	7cfb      	ldrb	r3, [r7, #19]
 801b058:	4053      	eors	r3, r2
 801b05a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b05c:	7d3b      	ldrb	r3, [r7, #20]
 801b05e:	68fa      	ldr	r2, [r7, #12]
 801b060:	4413      	add	r3, r2
 801b062:	781b      	ldrb	r3, [r3, #0]
 801b064:	b25a      	sxtb	r2, r3
 801b066:	7ff9      	ldrb	r1, [r7, #31]
 801b068:	7d7b      	ldrb	r3, [r7, #21]
 801b06a:	fa01 f303 	lsl.w	r3, r1, r3
 801b06e:	b25b      	sxtb	r3, r3
 801b070:	4313      	orrs	r3, r2
 801b072:	b259      	sxtb	r1, r3
 801b074:	7d3b      	ldrb	r3, [r7, #20]
 801b076:	68fa      	ldr	r2, [r7, #12]
 801b078:	4413      	add	r3, r2
 801b07a:	b2ca      	uxtb	r2, r1
 801b07c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b07e:	69bb      	ldr	r3, [r7, #24]
 801b080:	3301      	adds	r3, #1
 801b082:	61bb      	str	r3, [r7, #24]
 801b084:	79fb      	ldrb	r3, [r7, #7]
 801b086:	00db      	lsls	r3, r3, #3
 801b088:	69ba      	ldr	r2, [r7, #24]
 801b08a:	429a      	cmp	r2, r3
 801b08c:	dbb0      	blt.n	801aff0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b08e:	7ffb      	ldrb	r3, [r7, #31]
 801b090:	01db      	lsls	r3, r3, #7
 801b092:	b25a      	sxtb	r2, r3
 801b094:	7ffb      	ldrb	r3, [r7, #31]
 801b096:	019b      	lsls	r3, r3, #6
 801b098:	b25b      	sxtb	r3, r3
 801b09a:	4313      	orrs	r3, r2
 801b09c:	b25b      	sxtb	r3, r3
 801b09e:	7ffa      	ldrb	r2, [r7, #31]
 801b0a0:	2a00      	cmp	r2, #0
 801b0a2:	d101      	bne.n	801b0a8 <payload_integration+0x106>
 801b0a4:	2220      	movs	r2, #32
 801b0a6:	e000      	b.n	801b0aa <payload_integration+0x108>
 801b0a8:	2200      	movs	r2, #0
 801b0aa:	4313      	orrs	r3, r2
 801b0ac:	b259      	sxtb	r1, r3
 801b0ae:	79fb      	ldrb	r3, [r7, #7]
 801b0b0:	68fa      	ldr	r2, [r7, #12]
 801b0b2:	4413      	add	r3, r2
 801b0b4:	b2ca      	uxtb	r2, r1
 801b0b6:	701a      	strb	r2, [r3, #0]
}
 801b0b8:	bf00      	nop
 801b0ba:	3724      	adds	r7, #36	; 0x24
 801b0bc:	46bd      	mov	sp, r7
 801b0be:	bc80      	pop	{r7}
 801b0c0:	4770      	bx	lr
	...

0801b0c4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b08c      	sub	sp, #48	; 0x30
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	60b9      	str	r1, [r7, #8]
 801b0cc:	607a      	str	r2, [r7, #4]
 801b0ce:	603b      	str	r3, [r7, #0]
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b0d8:	2300      	movs	r3, #0
 801b0da:	623b      	str	r3, [r7, #32]
 801b0dc:	2300      	movs	r3, #0
 801b0de:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b0e0:	f001 fdcd 	bl	801cc7e <RFW_DeInit>

    if( rxContinuous != 0 )
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d001      	beq.n	801b0ee <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	bf14      	ite	ne
 801b0f4:	2301      	movne	r3, #1
 801b0f6:	2300      	moveq	r3, #0
 801b0f8:	b2da      	uxtb	r2, r3
 801b0fa:	4ba3      	ldr	r3, [pc, #652]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b0fc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b0fe:	7bfb      	ldrb	r3, [r7, #15]
 801b100:	2b00      	cmp	r3, #0
 801b102:	d003      	beq.n	801b10c <RadioSetRxGenericConfig+0x48>
 801b104:	2b01      	cmp	r3, #1
 801b106:	f000 80dc 	beq.w	801b2c2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b10a:	e194      	b.n	801b436 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b10c:	68bb      	ldr	r3, [r7, #8]
 801b10e:	689b      	ldr	r3, [r3, #8]
 801b110:	2b00      	cmp	r3, #0
 801b112:	d003      	beq.n	801b11c <RadioSetRxGenericConfig+0x58>
 801b114:	68bb      	ldr	r3, [r7, #8]
 801b116:	68db      	ldr	r3, [r3, #12]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d102      	bne.n	801b122 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b11c:	f04f 33ff 	mov.w	r3, #4294967295
 801b120:	e18a      	b.n	801b438 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b122:	68bb      	ldr	r3, [r7, #8]
 801b124:	7f9b      	ldrb	r3, [r3, #30]
 801b126:	2b08      	cmp	r3, #8
 801b128:	d902      	bls.n	801b130 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b12a:	f04f 33ff 	mov.w	r3, #4294967295
 801b12e:	e183      	b.n	801b438 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b130:	68bb      	ldr	r3, [r7, #8]
 801b132:	6919      	ldr	r1, [r3, #16]
 801b134:	68bb      	ldr	r3, [r7, #8]
 801b136:	7f9b      	ldrb	r3, [r3, #30]
 801b138:	b29a      	uxth	r2, r3
 801b13a:	f107 0320 	add.w	r3, r7, #32
 801b13e:	4618      	mov	r0, r3
 801b140:	f001 fe90 	bl	801ce64 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	bf14      	ite	ne
 801b14c:	2301      	movne	r3, #1
 801b14e:	2300      	moveq	r3, #0
 801b150:	b2db      	uxtb	r3, r3
 801b152:	4618      	mov	r0, r3
 801b154:	f000 fe08 	bl	801bd68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b158:	4b8b      	ldr	r3, [pc, #556]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b15a:	2200      	movs	r2, #0
 801b15c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	689b      	ldr	r3, [r3, #8]
 801b164:	4a88      	ldr	r2, [pc, #544]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b166:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801b168:	68bb      	ldr	r3, [r7, #8]
 801b16a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b16e:	4b86      	ldr	r3, [pc, #536]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b174:	68bb      	ldr	r3, [r7, #8]
 801b176:	685b      	ldr	r3, [r3, #4]
 801b178:	4618      	mov	r0, r3
 801b17a:	f001 fcb3 	bl	801cae4 <SUBGRF_GetFskBandwidthRegValue>
 801b17e:	4603      	mov	r3, r0
 801b180:	461a      	mov	r2, r3
 801b182:	4b81      	ldr	r3, [pc, #516]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b188:	4b7f      	ldr	r3, [pc, #508]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b18a:	2200      	movs	r2, #0
 801b18c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b18e:	68bb      	ldr	r3, [r7, #8]
 801b190:	68db      	ldr	r3, [r3, #12]
 801b192:	b29b      	uxth	r3, r3
 801b194:	00db      	lsls	r3, r3, #3
 801b196:	b29a      	uxth	r2, r3
 801b198:	4b7b      	ldr	r3, [pc, #492]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b19a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b19c:	68bb      	ldr	r3, [r7, #8]
 801b19e:	7fda      	ldrb	r2, [r3, #31]
 801b1a0:	4b79      	ldr	r3, [pc, #484]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b1a2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	7f9b      	ldrb	r3, [r3, #30]
 801b1a8:	00db      	lsls	r3, r3, #3
 801b1aa:	b2da      	uxtb	r2, r3
 801b1ac:	4b76      	ldr	r3, [pc, #472]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b1ae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b1b0:	68bb      	ldr	r3, [r7, #8]
 801b1b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b1b6:	4b74      	ldr	r3, [pc, #464]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b1b8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b1ba:	68bb      	ldr	r3, [r7, #8]
 801b1bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d105      	bne.n	801b1d0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b1c4:	68bb      	ldr	r3, [r7, #8]
 801b1c6:	695b      	ldr	r3, [r3, #20]
 801b1c8:	b2da      	uxtb	r2, r3
 801b1ca:	4b6f      	ldr	r3, [pc, #444]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b1cc:	759a      	strb	r2, [r3, #22]
 801b1ce:	e00b      	b.n	801b1e8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b1d0:	68bb      	ldr	r3, [r7, #8]
 801b1d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b1d6:	2b02      	cmp	r3, #2
 801b1d8:	d103      	bne.n	801b1e2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b1da:	4b6b      	ldr	r3, [pc, #428]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b1dc:	22ff      	movs	r2, #255	; 0xff
 801b1de:	759a      	strb	r2, [r3, #22]
 801b1e0:	e002      	b.n	801b1e8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b1e2:	4b69      	ldr	r3, [pc, #420]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b1e4:	22ff      	movs	r2, #255	; 0xff
 801b1e6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b1e8:	68bb      	ldr	r3, [r7, #8]
 801b1ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b1ee:	2b02      	cmp	r3, #2
 801b1f0:	d004      	beq.n	801b1fc <RadioSetRxGenericConfig+0x138>
 801b1f2:	68bb      	ldr	r3, [r7, #8]
 801b1f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b1f8:	2b02      	cmp	r3, #2
 801b1fa:	d12d      	bne.n	801b258 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b1fc:	68bb      	ldr	r3, [r7, #8]
 801b1fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b202:	2bf1      	cmp	r3, #241	; 0xf1
 801b204:	d00c      	beq.n	801b220 <RadioSetRxGenericConfig+0x15c>
 801b206:	68bb      	ldr	r3, [r7, #8]
 801b208:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b20c:	2bf2      	cmp	r3, #242	; 0xf2
 801b20e:	d007      	beq.n	801b220 <RadioSetRxGenericConfig+0x15c>
 801b210:	68bb      	ldr	r3, [r7, #8]
 801b212:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b216:	2b01      	cmp	r3, #1
 801b218:	d002      	beq.n	801b220 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801b21a:	f04f 33ff 	mov.w	r3, #4294967295
 801b21e:	e10b      	b.n	801b438 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 801b220:	2300      	movs	r3, #0
 801b222:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 801b224:	68bb      	ldr	r3, [r7, #8]
 801b226:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b228:	4b58      	ldr	r3, [pc, #352]	; (801b38c <RadioSetRxGenericConfig+0x2c8>)
 801b22a:	6819      	ldr	r1, [r3, #0]
 801b22c:	f107 0314 	add.w	r3, r7, #20
 801b230:	4a57      	ldr	r2, [pc, #348]	; (801b390 <RadioSetRxGenericConfig+0x2cc>)
 801b232:	4618      	mov	r0, r3
 801b234:	f001 fd16 	bl	801cc64 <RFW_Init>
 801b238:	4603      	mov	r3, r0
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d002      	beq.n	801b244 <RadioSetRxGenericConfig+0x180>
            return -1;
 801b23e:	f04f 33ff 	mov.w	r3, #4294967295
 801b242:	e0f9      	b.n	801b438 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b244:	4b50      	ldr	r3, [pc, #320]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b246:	2200      	movs	r2, #0
 801b248:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b24a:	4b4f      	ldr	r3, [pc, #316]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b24c:	2201      	movs	r2, #1
 801b24e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b250:	4b4d      	ldr	r3, [pc, #308]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b252:	2200      	movs	r2, #0
 801b254:	755a      	strb	r2, [r3, #21]
        {
 801b256:	e00e      	b.n	801b276 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b258:	68bb      	ldr	r3, [r7, #8]
 801b25a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b25e:	4b4a      	ldr	r3, [pc, #296]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b260:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b262:	68bb      	ldr	r3, [r7, #8]
 801b264:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b268:	4b47      	ldr	r3, [pc, #284]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b26a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b26c:	68bb      	ldr	r3, [r7, #8]
 801b26e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b272:	4b45      	ldr	r3, [pc, #276]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b274:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b276:	f7ff fa46 	bl	801a706 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b27a:	2000      	movs	r0, #0
 801b27c:	f7fe fbf0 	bl	8019a60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b280:	4844      	ldr	r0, [pc, #272]	; (801b394 <RadioSetRxGenericConfig+0x2d0>)
 801b282:	f001 f80b 	bl	801c29c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b286:	4844      	ldr	r0, [pc, #272]	; (801b398 <RadioSetRxGenericConfig+0x2d4>)
 801b288:	f001 f8da 	bl	801c440 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b28c:	f107 0320 	add.w	r3, r7, #32
 801b290:	4618      	mov	r0, r3
 801b292:	f000 fba2 	bl	801b9da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b296:	68bb      	ldr	r3, [r7, #8]
 801b298:	8b9b      	ldrh	r3, [r3, #28]
 801b29a:	4618      	mov	r0, r3
 801b29c:	f000 fbec 	bl	801ba78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b2a0:	68bb      	ldr	r3, [r7, #8]
 801b2a2:	8b1b      	ldrh	r3, [r3, #24]
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	f000 fbc7 	bl	801ba38 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b2aa:	683b      	ldr	r3, [r7, #0]
 801b2ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b2b0:	fb03 f202 	mul.w	r2, r3, r2
 801b2b4:	68bb      	ldr	r3, [r7, #8]
 801b2b6:	689b      	ldr	r3, [r3, #8]
 801b2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b2bc:	4a32      	ldr	r2, [pc, #200]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b2be:	6093      	str	r3, [r2, #8]
        break;
 801b2c0:	e0b9      	b.n	801b436 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b2c2:	68bb      	ldr	r3, [r7, #8]
 801b2c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d102      	bne.n	801b2d0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b2ca:	f04f 33ff 	mov.w	r3, #4294967295
 801b2ce:	e0b3      	b.n	801b438 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b2d0:	68bb      	ldr	r3, [r7, #8]
 801b2d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b2d6:	2b01      	cmp	r3, #1
 801b2d8:	d104      	bne.n	801b2e4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b2da:	68bb      	ldr	r3, [r7, #8]
 801b2dc:	695b      	ldr	r3, [r3, #20]
 801b2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b2e2:	e002      	b.n	801b2ea <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b2e4:	23ff      	movs	r3, #255	; 0xff
 801b2e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b2ea:	68bb      	ldr	r3, [r7, #8]
 801b2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	bf14      	ite	ne
 801b2f2:	2301      	movne	r3, #1
 801b2f4:	2300      	moveq	r3, #0
 801b2f6:	b2db      	uxtb	r3, r3
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	f000 fd35 	bl	801bd68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b2fe:	683b      	ldr	r3, [r7, #0]
 801b300:	b2db      	uxtb	r3, r3
 801b302:	4618      	mov	r0, r3
 801b304:	f000 fd3f 	bl	801bd86 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b308:	4b1f      	ldr	r3, [pc, #124]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b30a:	2201      	movs	r2, #1
 801b30c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b310:	68bb      	ldr	r3, [r7, #8]
 801b312:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b316:	4b1c      	ldr	r3, [pc, #112]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b31c:	68bb      	ldr	r3, [r7, #8]
 801b31e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b322:	4b19      	ldr	r3, [pc, #100]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b328:	68bb      	ldr	r3, [r7, #8]
 801b32a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b32e:	4b16      	ldr	r3, [pc, #88]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b330:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b334:	68bb      	ldr	r3, [r7, #8]
 801b336:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b33a:	2b02      	cmp	r3, #2
 801b33c:	d010      	beq.n	801b360 <RadioSetRxGenericConfig+0x29c>
 801b33e:	2b02      	cmp	r3, #2
 801b340:	dc2c      	bgt.n	801b39c <RadioSetRxGenericConfig+0x2d8>
 801b342:	2b00      	cmp	r3, #0
 801b344:	d002      	beq.n	801b34c <RadioSetRxGenericConfig+0x288>
 801b346:	2b01      	cmp	r3, #1
 801b348:	d005      	beq.n	801b356 <RadioSetRxGenericConfig+0x292>
            break;
 801b34a:	e027      	b.n	801b39c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b34c:	4b0e      	ldr	r3, [pc, #56]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b34e:	2200      	movs	r2, #0
 801b350:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b354:	e023      	b.n	801b39e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b356:	4b0c      	ldr	r3, [pc, #48]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b358:	2201      	movs	r2, #1
 801b35a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b35e:	e01e      	b.n	801b39e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b360:	68bb      	ldr	r3, [r7, #8]
 801b362:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b366:	2b0b      	cmp	r3, #11
 801b368:	d004      	beq.n	801b374 <RadioSetRxGenericConfig+0x2b0>
 801b36a:	68bb      	ldr	r3, [r7, #8]
 801b36c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b370:	2b0c      	cmp	r3, #12
 801b372:	d104      	bne.n	801b37e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b374:	4b04      	ldr	r3, [pc, #16]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b376:	2201      	movs	r2, #1
 801b378:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b37c:	e00f      	b.n	801b39e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b37e:	4b02      	ldr	r3, [pc, #8]	; (801b388 <RadioSetRxGenericConfig+0x2c4>)
 801b380:	2200      	movs	r2, #0
 801b382:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b386:	e00a      	b.n	801b39e <RadioSetRxGenericConfig+0x2da>
 801b388:	20001ef4 	.word	0x20001ef4
 801b38c:	20001ef0 	.word	0x20001ef0
 801b390:	20001f68 	.word	0x20001f68
 801b394:	20001f2c 	.word	0x20001f2c
 801b398:	20001f02 	.word	0x20001f02
            break;
 801b39c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b39e:	4b28      	ldr	r3, [pc, #160]	; (801b440 <RadioSetRxGenericConfig+0x37c>)
 801b3a0:	2201      	movs	r2, #1
 801b3a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b3a4:	68bb      	ldr	r3, [r7, #8]
 801b3a6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b3a8:	4b25      	ldr	r3, [pc, #148]	; (801b440 <RadioSetRxGenericConfig+0x37c>)
 801b3aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b3ac:	68bb      	ldr	r3, [r7, #8]
 801b3ae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b3b2:	4b23      	ldr	r3, [pc, #140]	; (801b440 <RadioSetRxGenericConfig+0x37c>)
 801b3b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b3b6:	4a22      	ldr	r2, [pc, #136]	; (801b440 <RadioSetRxGenericConfig+0x37c>)
 801b3b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b3bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b3be:	68bb      	ldr	r3, [r7, #8]
 801b3c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b3c4:	4b1e      	ldr	r3, [pc, #120]	; (801b440 <RadioSetRxGenericConfig+0x37c>)
 801b3c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b3ca:	68bb      	ldr	r3, [r7, #8]
 801b3cc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b3d0:	4b1b      	ldr	r3, [pc, #108]	; (801b440 <RadioSetRxGenericConfig+0x37c>)
 801b3d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b3d6:	f7ff f996 	bl	801a706 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b3da:	2001      	movs	r0, #1
 801b3dc:	f7fe fb40 	bl	8019a60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b3e0:	4818      	ldr	r0, [pc, #96]	; (801b444 <RadioSetRxGenericConfig+0x380>)
 801b3e2:	f000 ff5b 	bl	801c29c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b3e6:	4818      	ldr	r0, [pc, #96]	; (801b448 <RadioSetRxGenericConfig+0x384>)
 801b3e8:	f001 f82a 	bl	801c440 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b3ec:	4b14      	ldr	r3, [pc, #80]	; (801b440 <RadioSetRxGenericConfig+0x37c>)
 801b3ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b3f2:	2b01      	cmp	r3, #1
 801b3f4:	d10d      	bne.n	801b412 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b3f6:	f240 7036 	movw	r0, #1846	; 0x736
 801b3fa:	f001 f97d 	bl	801c6f8 <SUBGRF_ReadRegister>
 801b3fe:	4603      	mov	r3, r0
 801b400:	f023 0304 	bic.w	r3, r3, #4
 801b404:	b2db      	uxtb	r3, r3
 801b406:	4619      	mov	r1, r3
 801b408:	f240 7036 	movw	r0, #1846	; 0x736
 801b40c:	f001 f960 	bl	801c6d0 <SUBGRF_WriteRegister>
 801b410:	e00c      	b.n	801b42c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801b412:	f240 7036 	movw	r0, #1846	; 0x736
 801b416:	f001 f96f 	bl	801c6f8 <SUBGRF_ReadRegister>
 801b41a:	4603      	mov	r3, r0
 801b41c:	f043 0304 	orr.w	r3, r3, #4
 801b420:	b2db      	uxtb	r3, r3
 801b422:	4619      	mov	r1, r3
 801b424:	f240 7036 	movw	r0, #1846	; 0x736
 801b428:	f001 f952 	bl	801c6d0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801b42c:	4b04      	ldr	r3, [pc, #16]	; (801b440 <RadioSetRxGenericConfig+0x37c>)
 801b42e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b432:	609a      	str	r2, [r3, #8]
        break;
 801b434:	bf00      	nop
    }
    return status;
 801b436:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b438:	4618      	mov	r0, r3
 801b43a:	3730      	adds	r7, #48	; 0x30
 801b43c:	46bd      	mov	sp, r7
 801b43e:	bd80      	pop	{r7, pc}
 801b440:	20001ef4 	.word	0x20001ef4
 801b444:	20001f2c 	.word	0x20001f2c
 801b448:	20001f02 	.word	0x20001f02

0801b44c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b08e      	sub	sp, #56	; 0x38
 801b450:	af00      	add	r7, sp, #0
 801b452:	60b9      	str	r1, [r7, #8]
 801b454:	607b      	str	r3, [r7, #4]
 801b456:	4603      	mov	r3, r0
 801b458:	73fb      	strb	r3, [r7, #15]
 801b45a:	4613      	mov	r3, r2
 801b45c:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801b45e:	2300      	movs	r3, #0
 801b460:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b462:	2300      	movs	r3, #0
 801b464:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b466:	f001 fc0a 	bl	801cc7e <RFW_DeInit>
    switch( modem )
 801b46a:	7bfb      	ldrb	r3, [r7, #15]
 801b46c:	2b03      	cmp	r3, #3
 801b46e:	f200 8204 	bhi.w	801b87a <RadioSetTxGenericConfig+0x42e>
 801b472:	a201      	add	r2, pc, #4	; (adr r2, 801b478 <RadioSetTxGenericConfig+0x2c>)
 801b474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b478:	0801b5fd 	.word	0x0801b5fd
 801b47c:	0801b745 	.word	0x0801b745
 801b480:	0801b83d 	.word	0x0801b83d
 801b484:	0801b489 	.word	0x0801b489
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801b488:	68bb      	ldr	r3, [r7, #8]
 801b48a:	7c9b      	ldrb	r3, [r3, #18]
 801b48c:	2b08      	cmp	r3, #8
 801b48e:	d902      	bls.n	801b496 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801b490:	f04f 33ff 	mov.w	r3, #4294967295
 801b494:	e206      	b.n	801b8a4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801b496:	68bb      	ldr	r3, [r7, #8]
 801b498:	6899      	ldr	r1, [r3, #8]
 801b49a:	68bb      	ldr	r3, [r7, #8]
 801b49c:	7c9b      	ldrb	r3, [r3, #18]
 801b49e:	b29a      	uxth	r2, r3
 801b4a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f001 fcdd 	bl	801ce64 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801b4aa:	68bb      	ldr	r3, [r7, #8]
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d102      	bne.n	801b4b8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801b4b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b4b6:	e1f5      	b.n	801b8a4 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801b4b8:	68bb      	ldr	r3, [r7, #8]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	f242 7210 	movw	r2, #10000	; 0x2710
 801b4c0:	4293      	cmp	r3, r2
 801b4c2:	d813      	bhi.n	801b4ec <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801b4c4:	2302      	movs	r3, #2
 801b4c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801b4ca:	4b99      	ldr	r3, [pc, #612]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b4cc:	2203      	movs	r2, #3
 801b4ce:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801b4d0:	4b97      	ldr	r3, [pc, #604]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b4d2:	2203      	movs	r2, #3
 801b4d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b4d8:	68bb      	ldr	r3, [r7, #8]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	4a94      	ldr	r2, [pc, #592]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b4de:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b4e0:	68bb      	ldr	r3, [r7, #8]
 801b4e2:	7cda      	ldrb	r2, [r3, #19]
 801b4e4:	4b92      	ldr	r3, [pc, #584]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b4e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b4ea:	e017      	b.n	801b51c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b4f2:	4b8f      	ldr	r3, [pc, #572]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b4f4:	2200      	movs	r2, #0
 801b4f6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b4f8:	4b8d      	ldr	r3, [pc, #564]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b4fa:	2200      	movs	r2, #0
 801b4fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b500:	68bb      	ldr	r3, [r7, #8]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	4a8a      	ldr	r2, [pc, #552]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b506:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b508:	68bb      	ldr	r3, [r7, #8]
 801b50a:	7cda      	ldrb	r2, [r3, #19]
 801b50c:	4b88      	ldr	r3, [pc, #544]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801b512:	68bb      	ldr	r3, [r7, #8]
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	089b      	lsrs	r3, r3, #2
 801b518:	4a85      	ldr	r2, [pc, #532]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b51a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801b51c:	68bb      	ldr	r3, [r7, #8]
 801b51e:	685b      	ldr	r3, [r3, #4]
 801b520:	b29b      	uxth	r3, r3
 801b522:	00db      	lsls	r3, r3, #3
 801b524:	b29a      	uxth	r2, r3
 801b526:	4b82      	ldr	r3, [pc, #520]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b528:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b52a:	4b81      	ldr	r3, [pc, #516]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b52c:	2204      	movs	r2, #4
 801b52e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801b530:	68bb      	ldr	r3, [r7, #8]
 801b532:	7c9b      	ldrb	r3, [r3, #18]
 801b534:	00db      	lsls	r3, r3, #3
 801b536:	b2da      	uxtb	r2, r3
 801b538:	4b7d      	ldr	r3, [pc, #500]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b53a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b53c:	4b7c      	ldr	r3, [pc, #496]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b53e:	2200      	movs	r2, #0
 801b540:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	7d9b      	ldrb	r3, [r3, #22]
 801b546:	2b02      	cmp	r3, #2
 801b548:	d003      	beq.n	801b552 <RadioSetTxGenericConfig+0x106>
 801b54a:	68bb      	ldr	r3, [r7, #8]
 801b54c:	7d1b      	ldrb	r3, [r3, #20]
 801b54e:	2b02      	cmp	r3, #2
 801b550:	d12b      	bne.n	801b5aa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	7d5b      	ldrb	r3, [r3, #21]
 801b556:	2bf1      	cmp	r3, #241	; 0xf1
 801b558:	d00a      	beq.n	801b570 <RadioSetTxGenericConfig+0x124>
 801b55a:	68bb      	ldr	r3, [r7, #8]
 801b55c:	7d5b      	ldrb	r3, [r3, #21]
 801b55e:	2bf2      	cmp	r3, #242	; 0xf2
 801b560:	d006      	beq.n	801b570 <RadioSetTxGenericConfig+0x124>
 801b562:	68bb      	ldr	r3, [r7, #8]
 801b564:	7d5b      	ldrb	r3, [r3, #21]
 801b566:	2b01      	cmp	r3, #1
 801b568:	d002      	beq.n	801b570 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801b56a:	f04f 33ff 	mov.w	r3, #4294967295
 801b56e:	e199      	b.n	801b8a4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801b570:	68bb      	ldr	r3, [r7, #8]
 801b572:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801b574:	2301      	movs	r3, #1
 801b576:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b57a:	4b6e      	ldr	r3, [pc, #440]	; (801b734 <RadioSetTxGenericConfig+0x2e8>)
 801b57c:	6819      	ldr	r1, [r3, #0]
 801b57e:	f107 0320 	add.w	r3, r7, #32
 801b582:	4a6d      	ldr	r2, [pc, #436]	; (801b738 <RadioSetTxGenericConfig+0x2ec>)
 801b584:	4618      	mov	r0, r3
 801b586:	f001 fb6d 	bl	801cc64 <RFW_Init>
 801b58a:	4603      	mov	r3, r0
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d002      	beq.n	801b596 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801b590:	f04f 33ff 	mov.w	r3, #4294967295
 801b594:	e186      	b.n	801b8a4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b596:	4b66      	ldr	r3, [pc, #408]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b598:	2200      	movs	r2, #0
 801b59a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801b59c:	4b64      	ldr	r3, [pc, #400]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b59e:	2201      	movs	r2, #1
 801b5a0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b5a2:	4b63      	ldr	r3, [pc, #396]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	755a      	strb	r2, [r3, #21]
        {
 801b5a8:	e00b      	b.n	801b5c2 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801b5aa:	68bb      	ldr	r3, [r7, #8]
 801b5ac:	7d5a      	ldrb	r2, [r3, #21]
 801b5ae:	4b60      	ldr	r3, [pc, #384]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b5b0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801b5b2:	68bb      	ldr	r3, [r7, #8]
 801b5b4:	7d9a      	ldrb	r2, [r3, #22]
 801b5b6:	4b5e      	ldr	r3, [pc, #376]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b5b8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801b5ba:	68bb      	ldr	r3, [r7, #8]
 801b5bc:	7d1a      	ldrb	r2, [r3, #20]
 801b5be:	4b5c      	ldr	r3, [pc, #368]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b5c0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b5c2:	f7ff f8a0 	bl	801a706 <RadioStandby>
        RadioSetModem( radio_modem );
 801b5c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b5ca:	4618      	mov	r0, r3
 801b5cc:	f7fe fa48 	bl	8019a60 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b5d0:	485a      	ldr	r0, [pc, #360]	; (801b73c <RadioSetTxGenericConfig+0x2f0>)
 801b5d2:	f000 fe63 	bl	801c29c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b5d6:	485a      	ldr	r0, [pc, #360]	; (801b740 <RadioSetTxGenericConfig+0x2f4>)
 801b5d8:	f000 ff32 	bl	801c440 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b5dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	f000 f9fa 	bl	801b9da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801b5e6:	68bb      	ldr	r3, [r7, #8]
 801b5e8:	8a1b      	ldrh	r3, [r3, #16]
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f000 fa44 	bl	801ba78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801b5f0:	68bb      	ldr	r3, [r7, #8]
 801b5f2:	899b      	ldrh	r3, [r3, #12]
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	f000 fa1f 	bl	801ba38 <SUBGRF_SetCrcPolynomial>
        break;
 801b5fa:	e13f      	b.n	801b87c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801b5fc:	68bb      	ldr	r3, [r7, #8]
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	2b00      	cmp	r3, #0
 801b602:	d102      	bne.n	801b60a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801b604:	f04f 33ff 	mov.w	r3, #4294967295
 801b608:	e14c      	b.n	801b8a4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801b60a:	68bb      	ldr	r3, [r7, #8]
 801b60c:	7c9b      	ldrb	r3, [r3, #18]
 801b60e:	2b08      	cmp	r3, #8
 801b610:	d902      	bls.n	801b618 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801b612:	f04f 33ff 	mov.w	r3, #4294967295
 801b616:	e145      	b.n	801b8a4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801b618:	68bb      	ldr	r3, [r7, #8]
 801b61a:	6899      	ldr	r1, [r3, #8]
 801b61c:	68bb      	ldr	r3, [r7, #8]
 801b61e:	7c9b      	ldrb	r3, [r3, #18]
 801b620:	b29a      	uxth	r2, r3
 801b622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b626:	4618      	mov	r0, r3
 801b628:	f001 fc1c 	bl	801ce64 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b62c:	4b40      	ldr	r3, [pc, #256]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b62e:	2200      	movs	r2, #0
 801b630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b634:	68bb      	ldr	r3, [r7, #8]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	4a3d      	ldr	r2, [pc, #244]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b63a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b63c:	68bb      	ldr	r3, [r7, #8]
 801b63e:	7cda      	ldrb	r2, [r3, #19]
 801b640:	4b3b      	ldr	r3, [pc, #236]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801b646:	68bb      	ldr	r3, [r7, #8]
 801b648:	699b      	ldr	r3, [r3, #24]
 801b64a:	4a39      	ldr	r2, [pc, #228]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b64c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b64e:	4b38      	ldr	r3, [pc, #224]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b650:	2200      	movs	r2, #0
 801b652:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	685b      	ldr	r3, [r3, #4]
 801b658:	b29b      	uxth	r3, r3
 801b65a:	00db      	lsls	r3, r3, #3
 801b65c:	b29a      	uxth	r2, r3
 801b65e:	4b34      	ldr	r3, [pc, #208]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b660:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b662:	4b33      	ldr	r3, [pc, #204]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b664:	2204      	movs	r2, #4
 801b666:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	7c9b      	ldrb	r3, [r3, #18]
 801b66c:	00db      	lsls	r3, r3, #3
 801b66e:	b2da      	uxtb	r2, r3
 801b670:	4b2f      	ldr	r3, [pc, #188]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b672:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b674:	4b2e      	ldr	r3, [pc, #184]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b676:	2200      	movs	r2, #0
 801b678:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b67a:	68bb      	ldr	r3, [r7, #8]
 801b67c:	7d9b      	ldrb	r3, [r3, #22]
 801b67e:	2b02      	cmp	r3, #2
 801b680:	d003      	beq.n	801b68a <RadioSetTxGenericConfig+0x23e>
 801b682:	68bb      	ldr	r3, [r7, #8]
 801b684:	7d1b      	ldrb	r3, [r3, #20]
 801b686:	2b02      	cmp	r3, #2
 801b688:	d12a      	bne.n	801b6e0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b68a:	68bb      	ldr	r3, [r7, #8]
 801b68c:	7d5b      	ldrb	r3, [r3, #21]
 801b68e:	2bf1      	cmp	r3, #241	; 0xf1
 801b690:	d00a      	beq.n	801b6a8 <RadioSetTxGenericConfig+0x25c>
 801b692:	68bb      	ldr	r3, [r7, #8]
 801b694:	7d5b      	ldrb	r3, [r3, #21]
 801b696:	2bf2      	cmp	r3, #242	; 0xf2
 801b698:	d006      	beq.n	801b6a8 <RadioSetTxGenericConfig+0x25c>
 801b69a:	68bb      	ldr	r3, [r7, #8]
 801b69c:	7d5b      	ldrb	r3, [r3, #21]
 801b69e:	2b01      	cmp	r3, #1
 801b6a0:	d002      	beq.n	801b6a8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801b6a2:	f04f 33ff 	mov.w	r3, #4294967295
 801b6a6:	e0fd      	b.n	801b8a4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801b6a8:	2301      	movs	r3, #1
 801b6aa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801b6ac:	68bb      	ldr	r3, [r7, #8]
 801b6ae:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b6b0:	4b20      	ldr	r3, [pc, #128]	; (801b734 <RadioSetTxGenericConfig+0x2e8>)
 801b6b2:	6819      	ldr	r1, [r3, #0]
 801b6b4:	f107 0314 	add.w	r3, r7, #20
 801b6b8:	4a1f      	ldr	r2, [pc, #124]	; (801b738 <RadioSetTxGenericConfig+0x2ec>)
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	f001 fad2 	bl	801cc64 <RFW_Init>
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d002      	beq.n	801b6cc <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801b6c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b6ca:	e0eb      	b.n	801b8a4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b6cc:	4b18      	ldr	r3, [pc, #96]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b6ce:	2200      	movs	r2, #0
 801b6d0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801b6d2:	4b17      	ldr	r3, [pc, #92]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b6d4:	2201      	movs	r2, #1
 801b6d6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b6d8:	4b15      	ldr	r3, [pc, #84]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b6da:	2200      	movs	r2, #0
 801b6dc:	755a      	strb	r2, [r3, #21]
        {
 801b6de:	e00b      	b.n	801b6f8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b6e0:	68bb      	ldr	r3, [r7, #8]
 801b6e2:	7d5a      	ldrb	r2, [r3, #21]
 801b6e4:	4b12      	ldr	r3, [pc, #72]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b6e6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b6e8:	68bb      	ldr	r3, [r7, #8]
 801b6ea:	7d9a      	ldrb	r2, [r3, #22]
 801b6ec:	4b10      	ldr	r3, [pc, #64]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b6ee:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801b6f0:	68bb      	ldr	r3, [r7, #8]
 801b6f2:	7d1a      	ldrb	r2, [r3, #20]
 801b6f4:	4b0e      	ldr	r3, [pc, #56]	; (801b730 <RadioSetTxGenericConfig+0x2e4>)
 801b6f6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b6f8:	f7ff f805 	bl	801a706 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b6fc:	2000      	movs	r0, #0
 801b6fe:	f7fe f9af 	bl	8019a60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b702:	480e      	ldr	r0, [pc, #56]	; (801b73c <RadioSetTxGenericConfig+0x2f0>)
 801b704:	f000 fdca 	bl	801c29c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b708:	480d      	ldr	r0, [pc, #52]	; (801b740 <RadioSetTxGenericConfig+0x2f4>)
 801b70a:	f000 fe99 	bl	801c440 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b70e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b712:	4618      	mov	r0, r3
 801b714:	f000 f961 	bl	801b9da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b718:	68bb      	ldr	r3, [r7, #8]
 801b71a:	8a1b      	ldrh	r3, [r3, #16]
 801b71c:	4618      	mov	r0, r3
 801b71e:	f000 f9ab 	bl	801ba78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	899b      	ldrh	r3, [r3, #12]
 801b726:	4618      	mov	r0, r3
 801b728:	f000 f986 	bl	801ba38 <SUBGRF_SetCrcPolynomial>
        break;
 801b72c:	e0a6      	b.n	801b87c <RadioSetTxGenericConfig+0x430>
 801b72e:	bf00      	nop
 801b730:	20001ef4 	.word	0x20001ef4
 801b734:	20001ef0 	.word	0x20001ef0
 801b738:	20001f50 	.word	0x20001f50
 801b73c:	20001f2c 	.word	0x20001f2c
 801b740:	20001f02 	.word	0x20001f02
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b744:	4b59      	ldr	r3, [pc, #356]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b746:	2201      	movs	r2, #1
 801b748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b74c:	68bb      	ldr	r3, [r7, #8]
 801b74e:	781a      	ldrb	r2, [r3, #0]
 801b750:	4b56      	ldr	r3, [pc, #344]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b756:	68bb      	ldr	r3, [r7, #8]
 801b758:	785a      	ldrb	r2, [r3, #1]
 801b75a:	4b54      	ldr	r3, [pc, #336]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b75c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b760:	68bb      	ldr	r3, [r7, #8]
 801b762:	789a      	ldrb	r2, [r3, #2]
 801b764:	4b51      	ldr	r3, [pc, #324]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b766:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b76a:	68bb      	ldr	r3, [r7, #8]
 801b76c:	78db      	ldrb	r3, [r3, #3]
 801b76e:	2b02      	cmp	r3, #2
 801b770:	d010      	beq.n	801b794 <RadioSetTxGenericConfig+0x348>
 801b772:	2b02      	cmp	r3, #2
 801b774:	dc20      	bgt.n	801b7b8 <RadioSetTxGenericConfig+0x36c>
 801b776:	2b00      	cmp	r3, #0
 801b778:	d002      	beq.n	801b780 <RadioSetTxGenericConfig+0x334>
 801b77a:	2b01      	cmp	r3, #1
 801b77c:	d005      	beq.n	801b78a <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801b77e:	e01b      	b.n	801b7b8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b780:	4b4a      	ldr	r3, [pc, #296]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b782:	2200      	movs	r2, #0
 801b784:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b788:	e017      	b.n	801b7ba <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b78a:	4b48      	ldr	r3, [pc, #288]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b78c:	2201      	movs	r2, #1
 801b78e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b792:	e012      	b.n	801b7ba <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b794:	68bb      	ldr	r3, [r7, #8]
 801b796:	781b      	ldrb	r3, [r3, #0]
 801b798:	2b0b      	cmp	r3, #11
 801b79a:	d003      	beq.n	801b7a4 <RadioSetTxGenericConfig+0x358>
 801b79c:	68bb      	ldr	r3, [r7, #8]
 801b79e:	781b      	ldrb	r3, [r3, #0]
 801b7a0:	2b0c      	cmp	r3, #12
 801b7a2:	d104      	bne.n	801b7ae <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b7a4:	4b41      	ldr	r3, [pc, #260]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b7a6:	2201      	movs	r2, #1
 801b7a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b7ac:	e005      	b.n	801b7ba <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b7ae:	4b3f      	ldr	r3, [pc, #252]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b7b0:	2200      	movs	r2, #0
 801b7b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b7b6:	e000      	b.n	801b7ba <RadioSetTxGenericConfig+0x36e>
            break;
 801b7b8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b7ba:	4b3c      	ldr	r3, [pc, #240]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b7bc:	2201      	movs	r2, #1
 801b7be:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b7c0:	68bb      	ldr	r3, [r7, #8]
 801b7c2:	889a      	ldrh	r2, [r3, #4]
 801b7c4:	4b39      	ldr	r3, [pc, #228]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b7c6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b7c8:	68bb      	ldr	r3, [r7, #8]
 801b7ca:	799a      	ldrb	r2, [r3, #6]
 801b7cc:	4b37      	ldr	r3, [pc, #220]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b7ce:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b7d0:	68bb      	ldr	r3, [r7, #8]
 801b7d2:	79da      	ldrb	r2, [r3, #7]
 801b7d4:	4b35      	ldr	r3, [pc, #212]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b7d6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b7da:	68bb      	ldr	r3, [r7, #8]
 801b7dc:	7a1a      	ldrb	r2, [r3, #8]
 801b7de:	4b33      	ldr	r3, [pc, #204]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b7e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801b7e4:	f7fe ff8f 	bl	801a706 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b7e8:	2001      	movs	r0, #1
 801b7ea:	f7fe f939 	bl	8019a60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b7ee:	4830      	ldr	r0, [pc, #192]	; (801b8b0 <RadioSetTxGenericConfig+0x464>)
 801b7f0:	f000 fd54 	bl	801c29c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b7f4:	482f      	ldr	r0, [pc, #188]	; (801b8b4 <RadioSetTxGenericConfig+0x468>)
 801b7f6:	f000 fe23 	bl	801c440 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801b7fa:	4b2c      	ldr	r3, [pc, #176]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b7fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b800:	2b06      	cmp	r3, #6
 801b802:	d10d      	bne.n	801b820 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801b804:	f640 0089 	movw	r0, #2185	; 0x889
 801b808:	f000 ff76 	bl	801c6f8 <SUBGRF_ReadRegister>
 801b80c:	4603      	mov	r3, r0
 801b80e:	f023 0304 	bic.w	r3, r3, #4
 801b812:	b2db      	uxtb	r3, r3
 801b814:	4619      	mov	r1, r3
 801b816:	f640 0089 	movw	r0, #2185	; 0x889
 801b81a:	f000 ff59 	bl	801c6d0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801b81e:	e02d      	b.n	801b87c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801b820:	f640 0089 	movw	r0, #2185	; 0x889
 801b824:	f000 ff68 	bl	801c6f8 <SUBGRF_ReadRegister>
 801b828:	4603      	mov	r3, r0
 801b82a:	f043 0304 	orr.w	r3, r3, #4
 801b82e:	b2db      	uxtb	r3, r3
 801b830:	4619      	mov	r1, r3
 801b832:	f640 0089 	movw	r0, #2185	; 0x889
 801b836:	f000 ff4b 	bl	801c6d0 <SUBGRF_WriteRegister>
        break;
 801b83a:	e01f      	b.n	801b87c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801b83c:	68bb      	ldr	r3, [r7, #8]
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d004      	beq.n	801b84e <RadioSetTxGenericConfig+0x402>
 801b844:	68bb      	ldr	r3, [r7, #8]
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b84c:	d902      	bls.n	801b854 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801b84e:	f04f 33ff 	mov.w	r3, #4294967295
 801b852:	e027      	b.n	801b8a4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801b854:	2003      	movs	r0, #3
 801b856:	f7fe f903 	bl	8019a60 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801b85a:	4b14      	ldr	r3, [pc, #80]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b85c:	2202      	movs	r2, #2
 801b85e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801b862:	68bb      	ldr	r3, [r7, #8]
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	4a11      	ldr	r2, [pc, #68]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b868:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801b86a:	4b10      	ldr	r3, [pc, #64]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b86c:	2216      	movs	r2, #22
 801b86e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b872:	480f      	ldr	r0, [pc, #60]	; (801b8b0 <RadioSetTxGenericConfig+0x464>)
 801b874:	f000 fd12 	bl	801c29c <SUBGRF_SetModulationParams>
        break;
 801b878:	e000      	b.n	801b87c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801b87a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801b87c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b880:	4618      	mov	r0, r3
 801b882:	f001 f841 	bl	801c908 <SUBGRF_SetRfTxPower>
 801b886:	4603      	mov	r3, r0
 801b888:	461a      	mov	r2, r3
 801b88a:	4b08      	ldr	r3, [pc, #32]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b88c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801b890:	4b06      	ldr	r3, [pc, #24]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b892:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b896:	4618      	mov	r0, r3
 801b898:	f001 fa05 	bl	801cca6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801b89c:	4a03      	ldr	r2, [pc, #12]	; (801b8ac <RadioSetTxGenericConfig+0x460>)
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	6053      	str	r3, [r2, #4]
    return 0;
 801b8a2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	3738      	adds	r7, #56	; 0x38
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	bd80      	pop	{r7, pc}
 801b8ac:	20001ef4 	.word	0x20001ef4
 801b8b0:	20001f2c 	.word	0x20001f2c
 801b8b4:	20001f02 	.word	0x20001f02

0801b8b8 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	b084      	sub	sp, #16
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d002      	beq.n	801b8cc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801b8c6:	4a1a      	ldr	r2, [pc, #104]	; (801b930 <SUBGRF_Init+0x78>)
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801b8cc:	f7e6 ff36 	bl	800273c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b8d0:	2002      	movs	r0, #2
 801b8d2:	f001 f8e5 	bl	801caa0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801b8d6:	4b17      	ldr	r3, [pc, #92]	; (801b934 <SUBGRF_Init+0x7c>)
 801b8d8:	2200      	movs	r2, #0
 801b8da:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801b8dc:	2000      	movs	r0, #0
 801b8de:	f000 f977 	bl	801bbd0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801b8e2:	f7f2 f849 	bl	800d978 <RBI_IsTCXO>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	2b01      	cmp	r3, #1
 801b8ea:	d10e      	bne.n	801b90a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801b8ec:	2140      	movs	r1, #64	; 0x40
 801b8ee:	2001      	movs	r0, #1
 801b8f0:	f000 fb78 	bl	801bfe4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801b8f4:	2100      	movs	r1, #0
 801b8f6:	f640 1011 	movw	r0, #2321	; 0x911
 801b8fa:	f000 fee9 	bl	801c6d0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801b8fe:	237f      	movs	r3, #127	; 0x7f
 801b900:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801b902:	7b38      	ldrb	r0, [r7, #12]
 801b904:	f000 fa85 	bl	801be12 <SUBGRF_Calibrate>
 801b908:	e009      	b.n	801b91e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b90a:	2120      	movs	r1, #32
 801b90c:	f640 1011 	movw	r0, #2321	; 0x911
 801b910:	f000 fede 	bl	801c6d0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b914:	2120      	movs	r1, #32
 801b916:	f640 1012 	movw	r0, #2322	; 0x912
 801b91a:	f000 fed9 	bl	801c6d0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801b91e:	f7f2 f80f 	bl	800d940 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801b922:	4b05      	ldr	r3, [pc, #20]	; (801b938 <SUBGRF_Init+0x80>)
 801b924:	2201      	movs	r2, #1
 801b926:	701a      	strb	r2, [r3, #0]
}
 801b928:	bf00      	nop
 801b92a:	3710      	adds	r7, #16
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bd80      	pop	{r7, pc}
 801b930:	20001f8c 	.word	0x20001f8c
 801b934:	20001f88 	.word	0x20001f88
 801b938:	20001f80 	.word	0x20001f80

0801b93c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801b93c:	b480      	push	{r7}
 801b93e:	af00      	add	r7, sp, #0
    return OperatingMode;
 801b940:	4b02      	ldr	r3, [pc, #8]	; (801b94c <SUBGRF_GetOperatingMode+0x10>)
 801b942:	781b      	ldrb	r3, [r3, #0]
}
 801b944:	4618      	mov	r0, r3
 801b946:	46bd      	mov	sp, r7
 801b948:	bc80      	pop	{r7}
 801b94a:	4770      	bx	lr
 801b94c:	20001f80 	.word	0x20001f80

0801b950 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b950:	b580      	push	{r7, lr}
 801b952:	b082      	sub	sp, #8
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
 801b958:	460b      	mov	r3, r1
 801b95a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b95c:	78fb      	ldrb	r3, [r7, #3]
 801b95e:	461a      	mov	r2, r3
 801b960:	6879      	ldr	r1, [r7, #4]
 801b962:	2000      	movs	r0, #0
 801b964:	f000 ff20 	bl	801c7a8 <SUBGRF_WriteBuffer>
}
 801b968:	bf00      	nop
 801b96a:	3708      	adds	r7, #8
 801b96c:	46bd      	mov	sp, r7
 801b96e:	bd80      	pop	{r7, pc}

0801b970 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b086      	sub	sp, #24
 801b974:	af00      	add	r7, sp, #0
 801b976:	60f8      	str	r0, [r7, #12]
 801b978:	60b9      	str	r1, [r7, #8]
 801b97a:	4613      	mov	r3, r2
 801b97c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801b97e:	2300      	movs	r3, #0
 801b980:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801b982:	f107 0317 	add.w	r3, r7, #23
 801b986:	4619      	mov	r1, r3
 801b988:	68b8      	ldr	r0, [r7, #8]
 801b98a:	f000 fe23 	bl	801c5d4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b98e:	68bb      	ldr	r3, [r7, #8]
 801b990:	781b      	ldrb	r3, [r3, #0]
 801b992:	79fa      	ldrb	r2, [r7, #7]
 801b994:	429a      	cmp	r2, r3
 801b996:	d201      	bcs.n	801b99c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b998:	2301      	movs	r3, #1
 801b99a:	e007      	b.n	801b9ac <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b99c:	7df8      	ldrb	r0, [r7, #23]
 801b99e:	68bb      	ldr	r3, [r7, #8]
 801b9a0:	781b      	ldrb	r3, [r3, #0]
 801b9a2:	461a      	mov	r2, r3
 801b9a4:	68f9      	ldr	r1, [r7, #12]
 801b9a6:	f000 ff21 	bl	801c7ec <SUBGRF_ReadBuffer>

    return 0;
 801b9aa:	2300      	movs	r3, #0
}
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	3718      	adds	r7, #24
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	bd80      	pop	{r7, pc}

0801b9b4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b084      	sub	sp, #16
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	60f8      	str	r0, [r7, #12]
 801b9bc:	460b      	mov	r3, r1
 801b9be:	607a      	str	r2, [r7, #4]
 801b9c0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b9c2:	7afb      	ldrb	r3, [r7, #11]
 801b9c4:	4619      	mov	r1, r3
 801b9c6:	68f8      	ldr	r0, [r7, #12]
 801b9c8:	f7ff ffc2 	bl	801b950 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b9cc:	6878      	ldr	r0, [r7, #4]
 801b9ce:	f000 f91b 	bl	801bc08 <SUBGRF_SetTx>
}
 801b9d2:	bf00      	nop
 801b9d4:	3710      	adds	r7, #16
 801b9d6:	46bd      	mov	sp, r7
 801b9d8:	bd80      	pop	{r7, pc}

0801b9da <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b9da:	b580      	push	{r7, lr}
 801b9dc:	b082      	sub	sp, #8
 801b9de:	af00      	add	r7, sp, #0
 801b9e0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b9e2:	2208      	movs	r2, #8
 801b9e4:	6879      	ldr	r1, [r7, #4]
 801b9e6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801b9ea:	f000 fe99 	bl	801c720 <SUBGRF_WriteRegisters>
    return 0;
 801b9ee:	2300      	movs	r3, #0
}
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	3708      	adds	r7, #8
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	bd80      	pop	{r7, pc}

0801b9f8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b9f8:	b580      	push	{r7, lr}
 801b9fa:	b084      	sub	sp, #16
 801b9fc:	af00      	add	r7, sp, #0
 801b9fe:	4603      	mov	r3, r0
 801ba00:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801ba02:	88fb      	ldrh	r3, [r7, #6]
 801ba04:	0a1b      	lsrs	r3, r3, #8
 801ba06:	b29b      	uxth	r3, r3
 801ba08:	b2db      	uxtb	r3, r3
 801ba0a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801ba0c:	88fb      	ldrh	r3, [r7, #6]
 801ba0e:	b2db      	uxtb	r3, r3
 801ba10:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ba12:	f000 fb6b 	bl	801c0ec <SUBGRF_GetPacketType>
 801ba16:	4603      	mov	r3, r0
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d108      	bne.n	801ba2e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801ba1c:	f107 030c 	add.w	r3, r7, #12
 801ba20:	2202      	movs	r2, #2
 801ba22:	4619      	mov	r1, r3
 801ba24:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801ba28:	f000 fe7a 	bl	801c720 <SUBGRF_WriteRegisters>
            break;
 801ba2c:	e000      	b.n	801ba30 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801ba2e:	bf00      	nop
    }
}
 801ba30:	bf00      	nop
 801ba32:	3710      	adds	r7, #16
 801ba34:	46bd      	mov	sp, r7
 801ba36:	bd80      	pop	{r7, pc}

0801ba38 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b084      	sub	sp, #16
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	4603      	mov	r3, r0
 801ba40:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801ba42:	88fb      	ldrh	r3, [r7, #6]
 801ba44:	0a1b      	lsrs	r3, r3, #8
 801ba46:	b29b      	uxth	r3, r3
 801ba48:	b2db      	uxtb	r3, r3
 801ba4a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801ba4c:	88fb      	ldrh	r3, [r7, #6]
 801ba4e:	b2db      	uxtb	r3, r3
 801ba50:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ba52:	f000 fb4b 	bl	801c0ec <SUBGRF_GetPacketType>
 801ba56:	4603      	mov	r3, r0
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d108      	bne.n	801ba6e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801ba5c:	f107 030c 	add.w	r3, r7, #12
 801ba60:	2202      	movs	r2, #2
 801ba62:	4619      	mov	r1, r3
 801ba64:	f240 60be 	movw	r0, #1726	; 0x6be
 801ba68:	f000 fe5a 	bl	801c720 <SUBGRF_WriteRegisters>
            break;
 801ba6c:	e000      	b.n	801ba70 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801ba6e:	bf00      	nop
    }
}
 801ba70:	bf00      	nop
 801ba72:	3710      	adds	r7, #16
 801ba74:	46bd      	mov	sp, r7
 801ba76:	bd80      	pop	{r7, pc}

0801ba78 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	b084      	sub	sp, #16
 801ba7c:	af00      	add	r7, sp, #0
 801ba7e:	4603      	mov	r3, r0
 801ba80:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801ba82:	2300      	movs	r3, #0
 801ba84:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801ba86:	f000 fb31 	bl	801c0ec <SUBGRF_GetPacketType>
 801ba8a:	4603      	mov	r3, r0
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d121      	bne.n	801bad4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801ba90:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801ba94:	f000 fe30 	bl	801c6f8 <SUBGRF_ReadRegister>
 801ba98:	4603      	mov	r3, r0
 801ba9a:	f023 0301 	bic.w	r3, r3, #1
 801ba9e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801baa0:	88fb      	ldrh	r3, [r7, #6]
 801baa2:	0a1b      	lsrs	r3, r3, #8
 801baa4:	b29b      	uxth	r3, r3
 801baa6:	b25b      	sxtb	r3, r3
 801baa8:	f003 0301 	and.w	r3, r3, #1
 801baac:	b25a      	sxtb	r2, r3
 801baae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bab2:	4313      	orrs	r3, r2
 801bab4:	b25b      	sxtb	r3, r3
 801bab6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801bab8:	7bfb      	ldrb	r3, [r7, #15]
 801baba:	4619      	mov	r1, r3
 801babc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801bac0:	f000 fe06 	bl	801c6d0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801bac4:	88fb      	ldrh	r3, [r7, #6]
 801bac6:	b2db      	uxtb	r3, r3
 801bac8:	4619      	mov	r1, r3
 801baca:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801bace:	f000 fdff 	bl	801c6d0 <SUBGRF_WriteRegister>
            break;
 801bad2:	e000      	b.n	801bad6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801bad4:	bf00      	nop
    }
}
 801bad6:	bf00      	nop
 801bad8:	3710      	adds	r7, #16
 801bada:	46bd      	mov	sp, r7
 801badc:	bd80      	pop	{r7, pc}

0801bade <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801bade:	b580      	push	{r7, lr}
 801bae0:	b082      	sub	sp, #8
 801bae2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801bae4:	2300      	movs	r3, #0
 801bae6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801bae8:	2300      	movs	r3, #0
 801baea:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801baec:	2300      	movs	r3, #0
 801baee:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801baf0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801baf4:	f000 fe00 	bl	801c6f8 <SUBGRF_ReadRegister>
 801baf8:	4603      	mov	r3, r0
 801bafa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801bafc:	79fb      	ldrb	r3, [r7, #7]
 801bafe:	f023 0301 	bic.w	r3, r3, #1
 801bb02:	b2db      	uxtb	r3, r3
 801bb04:	4619      	mov	r1, r3
 801bb06:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bb0a:	f000 fde1 	bl	801c6d0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801bb0e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bb12:	f000 fdf1 	bl	801c6f8 <SUBGRF_ReadRegister>
 801bb16:	4603      	mov	r3, r0
 801bb18:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801bb1a:	79bb      	ldrb	r3, [r7, #6]
 801bb1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bb20:	b2db      	uxtb	r3, r3
 801bb22:	4619      	mov	r1, r3
 801bb24:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bb28:	f000 fdd2 	bl	801c6d0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801bb2c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801bb30:	f000 f88a 	bl	801bc48 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801bb34:	463b      	mov	r3, r7
 801bb36:	2204      	movs	r2, #4
 801bb38:	4619      	mov	r1, r3
 801bb3a:	f640 0019 	movw	r0, #2073	; 0x819
 801bb3e:	f000 fe11 	bl	801c764 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801bb42:	2000      	movs	r0, #0
 801bb44:	f000 f844 	bl	801bbd0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801bb48:	79fb      	ldrb	r3, [r7, #7]
 801bb4a:	4619      	mov	r1, r3
 801bb4c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bb50:	f000 fdbe 	bl	801c6d0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801bb54:	79bb      	ldrb	r3, [r7, #6]
 801bb56:	4619      	mov	r1, r3
 801bb58:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bb5c:	f000 fdb8 	bl	801c6d0 <SUBGRF_WriteRegister>

    return number;
 801bb60:	683b      	ldr	r3, [r7, #0]
}
 801bb62:	4618      	mov	r0, r3
 801bb64:	3708      	adds	r7, #8
 801bb66:	46bd      	mov	sp, r7
 801bb68:	bd80      	pop	{r7, pc}
	...

0801bb6c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b084      	sub	sp, #16
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801bb74:	2000      	movs	r0, #0
 801bb76:	f7f1 feea 	bl	800d94e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bb7a:	2002      	movs	r0, #2
 801bb7c:	f000 ff90 	bl	801caa0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bb80:	793b      	ldrb	r3, [r7, #4]
 801bb82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801bb86:	b2db      	uxtb	r3, r3
 801bb88:	009b      	lsls	r3, r3, #2
 801bb8a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bb8c:	793b      	ldrb	r3, [r7, #4]
 801bb8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801bb92:	b2db      	uxtb	r3, r3
 801bb94:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bb96:	b25b      	sxtb	r3, r3
 801bb98:	4313      	orrs	r3, r2
 801bb9a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801bb9c:	793b      	ldrb	r3, [r7, #4]
 801bb9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801bba2:	b2db      	uxtb	r3, r3
 801bba4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bba6:	4313      	orrs	r3, r2
 801bba8:	b25b      	sxtb	r3, r3
 801bbaa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bbac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801bbae:	f107 030f 	add.w	r3, r7, #15
 801bbb2:	2201      	movs	r2, #1
 801bbb4:	4619      	mov	r1, r3
 801bbb6:	2084      	movs	r0, #132	; 0x84
 801bbb8:	f000 fe3a 	bl	801c830 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801bbbc:	4b03      	ldr	r3, [pc, #12]	; (801bbcc <SUBGRF_SetSleep+0x60>)
 801bbbe:	2200      	movs	r2, #0
 801bbc0:	701a      	strb	r2, [r3, #0]
}
 801bbc2:	bf00      	nop
 801bbc4:	3710      	adds	r7, #16
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	bd80      	pop	{r7, pc}
 801bbca:	bf00      	nop
 801bbcc:	20001f80 	.word	0x20001f80

0801bbd0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801bbd0:	b580      	push	{r7, lr}
 801bbd2:	b082      	sub	sp, #8
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801bbda:	1dfb      	adds	r3, r7, #7
 801bbdc:	2201      	movs	r2, #1
 801bbde:	4619      	mov	r1, r3
 801bbe0:	2080      	movs	r0, #128	; 0x80
 801bbe2:	f000 fe25 	bl	801c830 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801bbe6:	79fb      	ldrb	r3, [r7, #7]
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d103      	bne.n	801bbf4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801bbec:	4b05      	ldr	r3, [pc, #20]	; (801bc04 <SUBGRF_SetStandby+0x34>)
 801bbee:	2201      	movs	r2, #1
 801bbf0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801bbf2:	e002      	b.n	801bbfa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801bbf4:	4b03      	ldr	r3, [pc, #12]	; (801bc04 <SUBGRF_SetStandby+0x34>)
 801bbf6:	2202      	movs	r2, #2
 801bbf8:	701a      	strb	r2, [r3, #0]
}
 801bbfa:	bf00      	nop
 801bbfc:	3708      	adds	r7, #8
 801bbfe:	46bd      	mov	sp, r7
 801bc00:	bd80      	pop	{r7, pc}
 801bc02:	bf00      	nop
 801bc04:	20001f80 	.word	0x20001f80

0801bc08 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b084      	sub	sp, #16
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801bc10:	4b0c      	ldr	r3, [pc, #48]	; (801bc44 <SUBGRF_SetTx+0x3c>)
 801bc12:	2204      	movs	r2, #4
 801bc14:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	0c1b      	lsrs	r3, r3, #16
 801bc1a:	b2db      	uxtb	r3, r3
 801bc1c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	0a1b      	lsrs	r3, r3, #8
 801bc22:	b2db      	uxtb	r3, r3
 801bc24:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	b2db      	uxtb	r3, r3
 801bc2a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801bc2c:	f107 030c 	add.w	r3, r7, #12
 801bc30:	2203      	movs	r2, #3
 801bc32:	4619      	mov	r1, r3
 801bc34:	2083      	movs	r0, #131	; 0x83
 801bc36:	f000 fdfb 	bl	801c830 <SUBGRF_WriteCommand>
}
 801bc3a:	bf00      	nop
 801bc3c:	3710      	adds	r7, #16
 801bc3e:	46bd      	mov	sp, r7
 801bc40:	bd80      	pop	{r7, pc}
 801bc42:	bf00      	nop
 801bc44:	20001f80 	.word	0x20001f80

0801bc48 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801bc48:	b580      	push	{r7, lr}
 801bc4a:	b084      	sub	sp, #16
 801bc4c:	af00      	add	r7, sp, #0
 801bc4e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801bc50:	4b0c      	ldr	r3, [pc, #48]	; (801bc84 <SUBGRF_SetRx+0x3c>)
 801bc52:	2205      	movs	r2, #5
 801bc54:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	0c1b      	lsrs	r3, r3, #16
 801bc5a:	b2db      	uxtb	r3, r3
 801bc5c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	0a1b      	lsrs	r3, r3, #8
 801bc62:	b2db      	uxtb	r3, r3
 801bc64:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	b2db      	uxtb	r3, r3
 801bc6a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801bc6c:	f107 030c 	add.w	r3, r7, #12
 801bc70:	2203      	movs	r2, #3
 801bc72:	4619      	mov	r1, r3
 801bc74:	2082      	movs	r0, #130	; 0x82
 801bc76:	f000 fddb 	bl	801c830 <SUBGRF_WriteCommand>
}
 801bc7a:	bf00      	nop
 801bc7c:	3710      	adds	r7, #16
 801bc7e:	46bd      	mov	sp, r7
 801bc80:	bd80      	pop	{r7, pc}
 801bc82:	bf00      	nop
 801bc84:	20001f80 	.word	0x20001f80

0801bc88 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801bc88:	b580      	push	{r7, lr}
 801bc8a:	b084      	sub	sp, #16
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801bc90:	4b0e      	ldr	r3, [pc, #56]	; (801bccc <SUBGRF_SetRxBoosted+0x44>)
 801bc92:	2205      	movs	r2, #5
 801bc94:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801bc96:	2197      	movs	r1, #151	; 0x97
 801bc98:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801bc9c:	f000 fd18 	bl	801c6d0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	0c1b      	lsrs	r3, r3, #16
 801bca4:	b2db      	uxtb	r3, r3
 801bca6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	0a1b      	lsrs	r3, r3, #8
 801bcac:	b2db      	uxtb	r3, r3
 801bcae:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	b2db      	uxtb	r3, r3
 801bcb4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801bcb6:	f107 030c 	add.w	r3, r7, #12
 801bcba:	2203      	movs	r2, #3
 801bcbc:	4619      	mov	r1, r3
 801bcbe:	2082      	movs	r0, #130	; 0x82
 801bcc0:	f000 fdb6 	bl	801c830 <SUBGRF_WriteCommand>
}
 801bcc4:	bf00      	nop
 801bcc6:	3710      	adds	r7, #16
 801bcc8:	46bd      	mov	sp, r7
 801bcca:	bd80      	pop	{r7, pc}
 801bccc:	20001f80 	.word	0x20001f80

0801bcd0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b084      	sub	sp, #16
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]
 801bcd8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	0c1b      	lsrs	r3, r3, #16
 801bcde:	b2db      	uxtb	r3, r3
 801bce0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	0a1b      	lsrs	r3, r3, #8
 801bce6:	b2db      	uxtb	r3, r3
 801bce8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	b2db      	uxtb	r3, r3
 801bcee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801bcf0:	683b      	ldr	r3, [r7, #0]
 801bcf2:	0c1b      	lsrs	r3, r3, #16
 801bcf4:	b2db      	uxtb	r3, r3
 801bcf6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801bcf8:	683b      	ldr	r3, [r7, #0]
 801bcfa:	0a1b      	lsrs	r3, r3, #8
 801bcfc:	b2db      	uxtb	r3, r3
 801bcfe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801bd00:	683b      	ldr	r3, [r7, #0]
 801bd02:	b2db      	uxtb	r3, r3
 801bd04:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801bd06:	f107 0308 	add.w	r3, r7, #8
 801bd0a:	2206      	movs	r2, #6
 801bd0c:	4619      	mov	r1, r3
 801bd0e:	2094      	movs	r0, #148	; 0x94
 801bd10:	f000 fd8e 	bl	801c830 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801bd14:	4b03      	ldr	r3, [pc, #12]	; (801bd24 <SUBGRF_SetRxDutyCycle+0x54>)
 801bd16:	2206      	movs	r2, #6
 801bd18:	701a      	strb	r2, [r3, #0]
}
 801bd1a:	bf00      	nop
 801bd1c:	3710      	adds	r7, #16
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	bd80      	pop	{r7, pc}
 801bd22:	bf00      	nop
 801bd24:	20001f80 	.word	0x20001f80

0801bd28 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	2100      	movs	r1, #0
 801bd30:	20c5      	movs	r0, #197	; 0xc5
 801bd32:	f000 fd7d 	bl	801c830 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801bd36:	4b02      	ldr	r3, [pc, #8]	; (801bd40 <SUBGRF_SetCad+0x18>)
 801bd38:	2207      	movs	r2, #7
 801bd3a:	701a      	strb	r2, [r3, #0]
}
 801bd3c:	bf00      	nop
 801bd3e:	bd80      	pop	{r7, pc}
 801bd40:	20001f80 	.word	0x20001f80

0801bd44 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801bd48:	2200      	movs	r2, #0
 801bd4a:	2100      	movs	r1, #0
 801bd4c:	20d1      	movs	r0, #209	; 0xd1
 801bd4e:	f000 fd6f 	bl	801c830 <SUBGRF_WriteCommand>
}
 801bd52:	bf00      	nop
 801bd54:	bd80      	pop	{r7, pc}

0801bd56 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801bd56:	b580      	push	{r7, lr}
 801bd58:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	2100      	movs	r1, #0
 801bd5e:	20d2      	movs	r0, #210	; 0xd2
 801bd60:	f000 fd66 	bl	801c830 <SUBGRF_WriteCommand>
}
 801bd64:	bf00      	nop
 801bd66:	bd80      	pop	{r7, pc}

0801bd68 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	b082      	sub	sp, #8
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	4603      	mov	r3, r0
 801bd70:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801bd72:	1dfb      	adds	r3, r7, #7
 801bd74:	2201      	movs	r2, #1
 801bd76:	4619      	mov	r1, r3
 801bd78:	209f      	movs	r0, #159	; 0x9f
 801bd7a:	f000 fd59 	bl	801c830 <SUBGRF_WriteCommand>
}
 801bd7e:	bf00      	nop
 801bd80:	3708      	adds	r7, #8
 801bd82:	46bd      	mov	sp, r7
 801bd84:	bd80      	pop	{r7, pc}

0801bd86 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801bd86:	b580      	push	{r7, lr}
 801bd88:	b084      	sub	sp, #16
 801bd8a:	af00      	add	r7, sp, #0
 801bd8c:	4603      	mov	r3, r0
 801bd8e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801bd90:	1dfb      	adds	r3, r7, #7
 801bd92:	2201      	movs	r2, #1
 801bd94:	4619      	mov	r1, r3
 801bd96:	20a0      	movs	r0, #160	; 0xa0
 801bd98:	f000 fd4a 	bl	801c830 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801bd9c:	79fb      	ldrb	r3, [r7, #7]
 801bd9e:	2b3f      	cmp	r3, #63	; 0x3f
 801bda0:	d91c      	bls.n	801bddc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801bda2:	79fb      	ldrb	r3, [r7, #7]
 801bda4:	085b      	lsrs	r3, r3, #1
 801bda6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801bda8:	2300      	movs	r3, #0
 801bdaa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801bdac:	2300      	movs	r3, #0
 801bdae:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801bdb0:	e005      	b.n	801bdbe <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801bdb2:	7bfb      	ldrb	r3, [r7, #15]
 801bdb4:	089b      	lsrs	r3, r3, #2
 801bdb6:	73fb      	strb	r3, [r7, #15]
            exp++;
 801bdb8:	7bbb      	ldrb	r3, [r7, #14]
 801bdba:	3301      	adds	r3, #1
 801bdbc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801bdbe:	7bfb      	ldrb	r3, [r7, #15]
 801bdc0:	2b1f      	cmp	r3, #31
 801bdc2:	d8f6      	bhi.n	801bdb2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801bdc4:	7bfb      	ldrb	r3, [r7, #15]
 801bdc6:	00db      	lsls	r3, r3, #3
 801bdc8:	b2da      	uxtb	r2, r3
 801bdca:	7bbb      	ldrb	r3, [r7, #14]
 801bdcc:	4413      	add	r3, r2
 801bdce:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801bdd0:	7b7b      	ldrb	r3, [r7, #13]
 801bdd2:	4619      	mov	r1, r3
 801bdd4:	f240 7006 	movw	r0, #1798	; 0x706
 801bdd8:	f000 fc7a 	bl	801c6d0 <SUBGRF_WriteRegister>
    }
}
 801bddc:	bf00      	nop
 801bdde:	3710      	adds	r7, #16
 801bde0:	46bd      	mov	sp, r7
 801bde2:	bd80      	pop	{r7, pc}

0801bde4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b082      	sub	sp, #8
 801bde8:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801bdea:	f7f1 fdcc 	bl	800d986 <RBI_IsDCDC>
 801bdee:	4603      	mov	r3, r0
 801bdf0:	2b01      	cmp	r3, #1
 801bdf2:	d102      	bne.n	801bdfa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801bdf4:	2301      	movs	r3, #1
 801bdf6:	71fb      	strb	r3, [r7, #7]
 801bdf8:	e001      	b.n	801bdfe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801bdfe:	1dfb      	adds	r3, r7, #7
 801be00:	2201      	movs	r2, #1
 801be02:	4619      	mov	r1, r3
 801be04:	2096      	movs	r0, #150	; 0x96
 801be06:	f000 fd13 	bl	801c830 <SUBGRF_WriteCommand>
}
 801be0a:	bf00      	nop
 801be0c:	3708      	adds	r7, #8
 801be0e:	46bd      	mov	sp, r7
 801be10:	bd80      	pop	{r7, pc}

0801be12 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801be12:	b580      	push	{r7, lr}
 801be14:	b084      	sub	sp, #16
 801be16:	af00      	add	r7, sp, #0
 801be18:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801be1a:	793b      	ldrb	r3, [r7, #4]
 801be1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801be20:	b2db      	uxtb	r3, r3
 801be22:	019b      	lsls	r3, r3, #6
 801be24:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801be26:	793b      	ldrb	r3, [r7, #4]
 801be28:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801be2c:	b2db      	uxtb	r3, r3
 801be2e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801be30:	b25b      	sxtb	r3, r3
 801be32:	4313      	orrs	r3, r2
 801be34:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801be36:	793b      	ldrb	r3, [r7, #4]
 801be38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801be3c:	b2db      	uxtb	r3, r3
 801be3e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801be40:	b25b      	sxtb	r3, r3
 801be42:	4313      	orrs	r3, r2
 801be44:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801be46:	793b      	ldrb	r3, [r7, #4]
 801be48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801be4c:	b2db      	uxtb	r3, r3
 801be4e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801be50:	b25b      	sxtb	r3, r3
 801be52:	4313      	orrs	r3, r2
 801be54:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801be56:	793b      	ldrb	r3, [r7, #4]
 801be58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801be5c:	b2db      	uxtb	r3, r3
 801be5e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801be60:	b25b      	sxtb	r3, r3
 801be62:	4313      	orrs	r3, r2
 801be64:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801be66:	793b      	ldrb	r3, [r7, #4]
 801be68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801be6c:	b2db      	uxtb	r3, r3
 801be6e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801be70:	b25b      	sxtb	r3, r3
 801be72:	4313      	orrs	r3, r2
 801be74:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801be76:	793b      	ldrb	r3, [r7, #4]
 801be78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801be7c:	b2db      	uxtb	r3, r3
 801be7e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801be80:	4313      	orrs	r3, r2
 801be82:	b25b      	sxtb	r3, r3
 801be84:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801be86:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801be88:	f107 030f 	add.w	r3, r7, #15
 801be8c:	2201      	movs	r2, #1
 801be8e:	4619      	mov	r1, r3
 801be90:	2089      	movs	r0, #137	; 0x89
 801be92:	f000 fccd 	bl	801c830 <SUBGRF_WriteCommand>
}
 801be96:	bf00      	nop
 801be98:	3710      	adds	r7, #16
 801be9a:	46bd      	mov	sp, r7
 801be9c:	bd80      	pop	{r7, pc}
	...

0801bea0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801bea0:	b580      	push	{r7, lr}
 801bea2:	b084      	sub	sp, #16
 801bea4:	af00      	add	r7, sp, #0
 801bea6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	4a1b      	ldr	r2, [pc, #108]	; (801bf18 <SUBGRF_CalibrateImage+0x78>)
 801beac:	4293      	cmp	r3, r2
 801beae:	d904      	bls.n	801beba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801beb0:	23e1      	movs	r3, #225	; 0xe1
 801beb2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801beb4:	23e9      	movs	r3, #233	; 0xe9
 801beb6:	737b      	strb	r3, [r7, #13]
 801beb8:	e022      	b.n	801bf00 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	4a17      	ldr	r2, [pc, #92]	; (801bf1c <SUBGRF_CalibrateImage+0x7c>)
 801bebe:	4293      	cmp	r3, r2
 801bec0:	d904      	bls.n	801becc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801bec2:	23d7      	movs	r3, #215	; 0xd7
 801bec4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801bec6:	23db      	movs	r3, #219	; 0xdb
 801bec8:	737b      	strb	r3, [r7, #13]
 801beca:	e019      	b.n	801bf00 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	4a14      	ldr	r2, [pc, #80]	; (801bf20 <SUBGRF_CalibrateImage+0x80>)
 801bed0:	4293      	cmp	r3, r2
 801bed2:	d904      	bls.n	801bede <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801bed4:	23c1      	movs	r3, #193	; 0xc1
 801bed6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801bed8:	23c5      	movs	r3, #197	; 0xc5
 801beda:	737b      	strb	r3, [r7, #13]
 801bedc:	e010      	b.n	801bf00 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	4a10      	ldr	r2, [pc, #64]	; (801bf24 <SUBGRF_CalibrateImage+0x84>)
 801bee2:	4293      	cmp	r3, r2
 801bee4:	d904      	bls.n	801bef0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801bee6:	2375      	movs	r3, #117	; 0x75
 801bee8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801beea:	2381      	movs	r3, #129	; 0x81
 801beec:	737b      	strb	r3, [r7, #13]
 801beee:	e007      	b.n	801bf00 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	4a0d      	ldr	r2, [pc, #52]	; (801bf28 <SUBGRF_CalibrateImage+0x88>)
 801bef4:	4293      	cmp	r3, r2
 801bef6:	d903      	bls.n	801bf00 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801bef8:	236b      	movs	r3, #107	; 0x6b
 801befa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801befc:	236f      	movs	r3, #111	; 0x6f
 801befe:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801bf00:	f107 030c 	add.w	r3, r7, #12
 801bf04:	2202      	movs	r2, #2
 801bf06:	4619      	mov	r1, r3
 801bf08:	2098      	movs	r0, #152	; 0x98
 801bf0a:	f000 fc91 	bl	801c830 <SUBGRF_WriteCommand>
}
 801bf0e:	bf00      	nop
 801bf10:	3710      	adds	r7, #16
 801bf12:	46bd      	mov	sp, r7
 801bf14:	bd80      	pop	{r7, pc}
 801bf16:	bf00      	nop
 801bf18:	35a4e900 	.word	0x35a4e900
 801bf1c:	32a9f880 	.word	0x32a9f880
 801bf20:	2de54480 	.word	0x2de54480
 801bf24:	1b6b0b00 	.word	0x1b6b0b00
 801bf28:	1954fc40 	.word	0x1954fc40

0801bf2c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801bf2c:	b590      	push	{r4, r7, lr}
 801bf2e:	b085      	sub	sp, #20
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	4604      	mov	r4, r0
 801bf34:	4608      	mov	r0, r1
 801bf36:	4611      	mov	r1, r2
 801bf38:	461a      	mov	r2, r3
 801bf3a:	4623      	mov	r3, r4
 801bf3c:	71fb      	strb	r3, [r7, #7]
 801bf3e:	4603      	mov	r3, r0
 801bf40:	71bb      	strb	r3, [r7, #6]
 801bf42:	460b      	mov	r3, r1
 801bf44:	717b      	strb	r3, [r7, #5]
 801bf46:	4613      	mov	r3, r2
 801bf48:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801bf4a:	79fb      	ldrb	r3, [r7, #7]
 801bf4c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801bf4e:	79bb      	ldrb	r3, [r7, #6]
 801bf50:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801bf52:	797b      	ldrb	r3, [r7, #5]
 801bf54:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801bf56:	793b      	ldrb	r3, [r7, #4]
 801bf58:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801bf5a:	f107 030c 	add.w	r3, r7, #12
 801bf5e:	2204      	movs	r2, #4
 801bf60:	4619      	mov	r1, r3
 801bf62:	2095      	movs	r0, #149	; 0x95
 801bf64:	f000 fc64 	bl	801c830 <SUBGRF_WriteCommand>
}
 801bf68:	bf00      	nop
 801bf6a:	3714      	adds	r7, #20
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	bd90      	pop	{r4, r7, pc}

0801bf70 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801bf70:	b590      	push	{r4, r7, lr}
 801bf72:	b085      	sub	sp, #20
 801bf74:	af00      	add	r7, sp, #0
 801bf76:	4604      	mov	r4, r0
 801bf78:	4608      	mov	r0, r1
 801bf7a:	4611      	mov	r1, r2
 801bf7c:	461a      	mov	r2, r3
 801bf7e:	4623      	mov	r3, r4
 801bf80:	80fb      	strh	r3, [r7, #6]
 801bf82:	4603      	mov	r3, r0
 801bf84:	80bb      	strh	r3, [r7, #4]
 801bf86:	460b      	mov	r3, r1
 801bf88:	807b      	strh	r3, [r7, #2]
 801bf8a:	4613      	mov	r3, r2
 801bf8c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801bf8e:	88fb      	ldrh	r3, [r7, #6]
 801bf90:	0a1b      	lsrs	r3, r3, #8
 801bf92:	b29b      	uxth	r3, r3
 801bf94:	b2db      	uxtb	r3, r3
 801bf96:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801bf98:	88fb      	ldrh	r3, [r7, #6]
 801bf9a:	b2db      	uxtb	r3, r3
 801bf9c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801bf9e:	88bb      	ldrh	r3, [r7, #4]
 801bfa0:	0a1b      	lsrs	r3, r3, #8
 801bfa2:	b29b      	uxth	r3, r3
 801bfa4:	b2db      	uxtb	r3, r3
 801bfa6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801bfa8:	88bb      	ldrh	r3, [r7, #4]
 801bfaa:	b2db      	uxtb	r3, r3
 801bfac:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801bfae:	887b      	ldrh	r3, [r7, #2]
 801bfb0:	0a1b      	lsrs	r3, r3, #8
 801bfb2:	b29b      	uxth	r3, r3
 801bfb4:	b2db      	uxtb	r3, r3
 801bfb6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801bfb8:	887b      	ldrh	r3, [r7, #2]
 801bfba:	b2db      	uxtb	r3, r3
 801bfbc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801bfbe:	883b      	ldrh	r3, [r7, #0]
 801bfc0:	0a1b      	lsrs	r3, r3, #8
 801bfc2:	b29b      	uxth	r3, r3
 801bfc4:	b2db      	uxtb	r3, r3
 801bfc6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801bfc8:	883b      	ldrh	r3, [r7, #0]
 801bfca:	b2db      	uxtb	r3, r3
 801bfcc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801bfce:	f107 0308 	add.w	r3, r7, #8
 801bfd2:	2208      	movs	r2, #8
 801bfd4:	4619      	mov	r1, r3
 801bfd6:	2008      	movs	r0, #8
 801bfd8:	f000 fc2a 	bl	801c830 <SUBGRF_WriteCommand>
}
 801bfdc:	bf00      	nop
 801bfde:	3714      	adds	r7, #20
 801bfe0:	46bd      	mov	sp, r7
 801bfe2:	bd90      	pop	{r4, r7, pc}

0801bfe4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801bfe4:	b580      	push	{r7, lr}
 801bfe6:	b084      	sub	sp, #16
 801bfe8:	af00      	add	r7, sp, #0
 801bfea:	4603      	mov	r3, r0
 801bfec:	6039      	str	r1, [r7, #0]
 801bfee:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801bff0:	79fb      	ldrb	r3, [r7, #7]
 801bff2:	f003 0307 	and.w	r3, r3, #7
 801bff6:	b2db      	uxtb	r3, r3
 801bff8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bffa:	683b      	ldr	r3, [r7, #0]
 801bffc:	0c1b      	lsrs	r3, r3, #16
 801bffe:	b2db      	uxtb	r3, r3
 801c000:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c002:	683b      	ldr	r3, [r7, #0]
 801c004:	0a1b      	lsrs	r3, r3, #8
 801c006:	b2db      	uxtb	r3, r3
 801c008:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c00a:	683b      	ldr	r3, [r7, #0]
 801c00c:	b2db      	uxtb	r3, r3
 801c00e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c010:	f107 030c 	add.w	r3, r7, #12
 801c014:	2204      	movs	r2, #4
 801c016:	4619      	mov	r1, r3
 801c018:	2097      	movs	r0, #151	; 0x97
 801c01a:	f000 fc09 	bl	801c830 <SUBGRF_WriteCommand>
}
 801c01e:	bf00      	nop
 801c020:	3710      	adds	r7, #16
 801c022:	46bd      	mov	sp, r7
 801c024:	bd80      	pop	{r7, pc}
	...

0801c028 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c02c:	b084      	sub	sp, #16
 801c02e:	af00      	add	r7, sp, #0
 801c030:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c032:	2300      	movs	r3, #0
 801c034:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c036:	4b1d      	ldr	r3, [pc, #116]	; (801c0ac <SUBGRF_SetRfFrequency+0x84>)
 801c038:	781b      	ldrb	r3, [r3, #0]
 801c03a:	f083 0301 	eor.w	r3, r3, #1
 801c03e:	b2db      	uxtb	r3, r3
 801c040:	2b00      	cmp	r3, #0
 801c042:	d005      	beq.n	801c050 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c044:	6878      	ldr	r0, [r7, #4]
 801c046:	f7ff ff2b 	bl	801bea0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c04a:	4b18      	ldr	r3, [pc, #96]	; (801c0ac <SUBGRF_SetRfFrequency+0x84>)
 801c04c:	2201      	movs	r2, #1
 801c04e:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	2200      	movs	r2, #0
 801c054:	461c      	mov	r4, r3
 801c056:	4615      	mov	r5, r2
 801c058:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c05c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c060:	4a13      	ldr	r2, [pc, #76]	; (801c0b0 <SUBGRF_SetRfFrequency+0x88>)
 801c062:	f04f 0300 	mov.w	r3, #0
 801c066:	4640      	mov	r0, r8
 801c068:	4649      	mov	r1, r9
 801c06a:	f7e4 fe8f 	bl	8000d8c <__aeabi_uldivmod>
 801c06e:	4602      	mov	r2, r0
 801c070:	460b      	mov	r3, r1
 801c072:	4613      	mov	r3, r2
 801c074:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	0e1b      	lsrs	r3, r3, #24
 801c07a:	b2db      	uxtb	r3, r3
 801c07c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	0c1b      	lsrs	r3, r3, #16
 801c082:	b2db      	uxtb	r3, r3
 801c084:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	0a1b      	lsrs	r3, r3, #8
 801c08a:	b2db      	uxtb	r3, r3
 801c08c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	b2db      	uxtb	r3, r3
 801c092:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c094:	f107 0308 	add.w	r3, r7, #8
 801c098:	2204      	movs	r2, #4
 801c09a:	4619      	mov	r1, r3
 801c09c:	2086      	movs	r0, #134	; 0x86
 801c09e:	f000 fbc7 	bl	801c830 <SUBGRF_WriteCommand>
}
 801c0a2:	bf00      	nop
 801c0a4:	3710      	adds	r7, #16
 801c0a6:	46bd      	mov	sp, r7
 801c0a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c0ac:	20001f88 	.word	0x20001f88
 801c0b0:	01e84800 	.word	0x01e84800

0801c0b4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c0b4:	b580      	push	{r7, lr}
 801c0b6:	b082      	sub	sp, #8
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	4603      	mov	r3, r0
 801c0bc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c0be:	79fa      	ldrb	r2, [r7, #7]
 801c0c0:	4b09      	ldr	r3, [pc, #36]	; (801c0e8 <SUBGRF_SetPacketType+0x34>)
 801c0c2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c0c4:	79fb      	ldrb	r3, [r7, #7]
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d104      	bne.n	801c0d4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c0ca:	2100      	movs	r1, #0
 801c0cc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c0d0:	f000 fafe 	bl	801c6d0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c0d4:	1dfb      	adds	r3, r7, #7
 801c0d6:	2201      	movs	r2, #1
 801c0d8:	4619      	mov	r1, r3
 801c0da:	208a      	movs	r0, #138	; 0x8a
 801c0dc:	f000 fba8 	bl	801c830 <SUBGRF_WriteCommand>
}
 801c0e0:	bf00      	nop
 801c0e2:	3708      	adds	r7, #8
 801c0e4:	46bd      	mov	sp, r7
 801c0e6:	bd80      	pop	{r7, pc}
 801c0e8:	20001f81 	.word	0x20001f81

0801c0ec <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c0ec:	b480      	push	{r7}
 801c0ee:	af00      	add	r7, sp, #0
    return PacketType;
 801c0f0:	4b02      	ldr	r3, [pc, #8]	; (801c0fc <SUBGRF_GetPacketType+0x10>)
 801c0f2:	781b      	ldrb	r3, [r3, #0]
}
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bc80      	pop	{r7}
 801c0fa:	4770      	bx	lr
 801c0fc:	20001f81 	.word	0x20001f81

0801c100 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c100:	b580      	push	{r7, lr}
 801c102:	b084      	sub	sp, #16
 801c104:	af00      	add	r7, sp, #0
 801c106:	4603      	mov	r3, r0
 801c108:	71fb      	strb	r3, [r7, #7]
 801c10a:	460b      	mov	r3, r1
 801c10c:	71bb      	strb	r3, [r7, #6]
 801c10e:	4613      	mov	r3, r2
 801c110:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c112:	79fb      	ldrb	r3, [r7, #7]
 801c114:	2b01      	cmp	r3, #1
 801c116:	d149      	bne.n	801c1ac <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c118:	2000      	movs	r0, #0
 801c11a:	f7f1 fc3b 	bl	800d994 <RBI_GetRFOMaxPowerConfig>
 801c11e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c120:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c124:	68fa      	ldr	r2, [r7, #12]
 801c126:	429a      	cmp	r2, r3
 801c128:	da01      	bge.n	801c12e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	2b0e      	cmp	r3, #14
 801c132:	d10e      	bne.n	801c152 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c134:	2301      	movs	r3, #1
 801c136:	2201      	movs	r2, #1
 801c138:	2100      	movs	r1, #0
 801c13a:	2004      	movs	r0, #4
 801c13c:	f7ff fef6 	bl	801bf2c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c140:	79ba      	ldrb	r2, [r7, #6]
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	b2db      	uxtb	r3, r3
 801c146:	1ad3      	subs	r3, r2, r3
 801c148:	b2db      	uxtb	r3, r3
 801c14a:	330e      	adds	r3, #14
 801c14c:	b2db      	uxtb	r3, r3
 801c14e:	71bb      	strb	r3, [r7, #6]
 801c150:	e01f      	b.n	801c192 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	2b0a      	cmp	r3, #10
 801c156:	d10e      	bne.n	801c176 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c158:	2301      	movs	r3, #1
 801c15a:	2201      	movs	r2, #1
 801c15c:	2100      	movs	r1, #0
 801c15e:	2001      	movs	r0, #1
 801c160:	f7ff fee4 	bl	801bf2c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c164:	79ba      	ldrb	r2, [r7, #6]
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	b2db      	uxtb	r3, r3
 801c16a:	1ad3      	subs	r3, r2, r3
 801c16c:	b2db      	uxtb	r3, r3
 801c16e:	330d      	adds	r3, #13
 801c170:	b2db      	uxtb	r3, r3
 801c172:	71bb      	strb	r3, [r7, #6]
 801c174:	e00d      	b.n	801c192 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801c176:	2301      	movs	r3, #1
 801c178:	2201      	movs	r2, #1
 801c17a:	2100      	movs	r1, #0
 801c17c:	2006      	movs	r0, #6
 801c17e:	f7ff fed5 	bl	801bf2c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c182:	79ba      	ldrb	r2, [r7, #6]
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	b2db      	uxtb	r3, r3
 801c188:	1ad3      	subs	r3, r2, r3
 801c18a:	b2db      	uxtb	r3, r3
 801c18c:	330e      	adds	r3, #14
 801c18e:	b2db      	uxtb	r3, r3
 801c190:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c192:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c196:	f113 0f11 	cmn.w	r3, #17
 801c19a:	da01      	bge.n	801c1a0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c19c:	23ef      	movs	r3, #239	; 0xef
 801c19e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c1a0:	2118      	movs	r1, #24
 801c1a2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c1a6:	f000 fa93 	bl	801c6d0 <SUBGRF_WriteRegister>
 801c1aa:	e067      	b.n	801c27c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c1ac:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c1b0:	f000 faa2 	bl	801c6f8 <SUBGRF_ReadRegister>
 801c1b4:	4603      	mov	r3, r0
 801c1b6:	f043 031e 	orr.w	r3, r3, #30
 801c1ba:	b2db      	uxtb	r3, r3
 801c1bc:	4619      	mov	r1, r3
 801c1be:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c1c2:	f000 fa85 	bl	801c6d0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c1c6:	2001      	movs	r0, #1
 801c1c8:	f7f1 fbe4 	bl	800d994 <RBI_GetRFOMaxPowerConfig>
 801c1cc:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c1ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c1d2:	68fa      	ldr	r2, [r7, #12]
 801c1d4:	429a      	cmp	r2, r3
 801c1d6:	da01      	bge.n	801c1dc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	2b14      	cmp	r3, #20
 801c1e0:	d10e      	bne.n	801c200 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c1e2:	2301      	movs	r3, #1
 801c1e4:	2200      	movs	r2, #0
 801c1e6:	2105      	movs	r1, #5
 801c1e8:	2003      	movs	r0, #3
 801c1ea:	f7ff fe9f 	bl	801bf2c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c1ee:	79ba      	ldrb	r2, [r7, #6]
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	b2db      	uxtb	r3, r3
 801c1f4:	1ad3      	subs	r3, r2, r3
 801c1f6:	b2db      	uxtb	r3, r3
 801c1f8:	3316      	adds	r3, #22
 801c1fa:	b2db      	uxtb	r3, r3
 801c1fc:	71bb      	strb	r3, [r7, #6]
 801c1fe:	e031      	b.n	801c264 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	2b11      	cmp	r3, #17
 801c204:	d10e      	bne.n	801c224 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c206:	2301      	movs	r3, #1
 801c208:	2200      	movs	r2, #0
 801c20a:	2103      	movs	r1, #3
 801c20c:	2002      	movs	r0, #2
 801c20e:	f7ff fe8d 	bl	801bf2c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c212:	79ba      	ldrb	r2, [r7, #6]
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	b2db      	uxtb	r3, r3
 801c218:	1ad3      	subs	r3, r2, r3
 801c21a:	b2db      	uxtb	r3, r3
 801c21c:	3316      	adds	r3, #22
 801c21e:	b2db      	uxtb	r3, r3
 801c220:	71bb      	strb	r3, [r7, #6]
 801c222:	e01f      	b.n	801c264 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	2b0e      	cmp	r3, #14
 801c228:	d10e      	bne.n	801c248 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c22a:	2301      	movs	r3, #1
 801c22c:	2200      	movs	r2, #0
 801c22e:	2102      	movs	r1, #2
 801c230:	2002      	movs	r0, #2
 801c232:	f7ff fe7b 	bl	801bf2c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c236:	79ba      	ldrb	r2, [r7, #6]
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	b2db      	uxtb	r3, r3
 801c23c:	1ad3      	subs	r3, r2, r3
 801c23e:	b2db      	uxtb	r3, r3
 801c240:	330e      	adds	r3, #14
 801c242:	b2db      	uxtb	r3, r3
 801c244:	71bb      	strb	r3, [r7, #6]
 801c246:	e00d      	b.n	801c264 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c248:	2301      	movs	r3, #1
 801c24a:	2200      	movs	r2, #0
 801c24c:	2107      	movs	r1, #7
 801c24e:	2004      	movs	r0, #4
 801c250:	f7ff fe6c 	bl	801bf2c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c254:	79ba      	ldrb	r2, [r7, #6]
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	b2db      	uxtb	r3, r3
 801c25a:	1ad3      	subs	r3, r2, r3
 801c25c:	b2db      	uxtb	r3, r3
 801c25e:	3316      	adds	r3, #22
 801c260:	b2db      	uxtb	r3, r3
 801c262:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c264:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c268:	f113 0f09 	cmn.w	r3, #9
 801c26c:	da01      	bge.n	801c272 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c26e:	23f7      	movs	r3, #247	; 0xf7
 801c270:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c272:	2138      	movs	r1, #56	; 0x38
 801c274:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c278:	f000 fa2a 	bl	801c6d0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c27c:	79bb      	ldrb	r3, [r7, #6]
 801c27e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c280:	797b      	ldrb	r3, [r7, #5]
 801c282:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c284:	f107 0308 	add.w	r3, r7, #8
 801c288:	2202      	movs	r2, #2
 801c28a:	4619      	mov	r1, r3
 801c28c:	208e      	movs	r0, #142	; 0x8e
 801c28e:	f000 facf 	bl	801c830 <SUBGRF_WriteCommand>
}
 801c292:	bf00      	nop
 801c294:	3710      	adds	r7, #16
 801c296:	46bd      	mov	sp, r7
 801c298:	bd80      	pop	{r7, pc}
	...

0801c29c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c29c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c2a0:	b086      	sub	sp, #24
 801c2a2:	af00      	add	r7, sp, #0
 801c2a4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c2aa:	4a61      	ldr	r2, [pc, #388]	; (801c430 <SUBGRF_SetModulationParams+0x194>)
 801c2ac:	f107 0308 	add.w	r3, r7, #8
 801c2b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c2b4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	781a      	ldrb	r2, [r3, #0]
 801c2bc:	4b5d      	ldr	r3, [pc, #372]	; (801c434 <SUBGRF_SetModulationParams+0x198>)
 801c2be:	781b      	ldrb	r3, [r3, #0]
 801c2c0:	429a      	cmp	r2, r3
 801c2c2:	d004      	beq.n	801c2ce <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	781b      	ldrb	r3, [r3, #0]
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	f7ff fef3 	bl	801c0b4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	781b      	ldrb	r3, [r3, #0]
 801c2d2:	2b03      	cmp	r3, #3
 801c2d4:	f200 80a5 	bhi.w	801c422 <SUBGRF_SetModulationParams+0x186>
 801c2d8:	a201      	add	r2, pc, #4	; (adr r2, 801c2e0 <SUBGRF_SetModulationParams+0x44>)
 801c2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2de:	bf00      	nop
 801c2e0:	0801c2f1 	.word	0x0801c2f1
 801c2e4:	0801c3b1 	.word	0x0801c3b1
 801c2e8:	0801c373 	.word	0x0801c373
 801c2ec:	0801c3df 	.word	0x0801c3df
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c2f0:	2308      	movs	r3, #8
 801c2f2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	685b      	ldr	r3, [r3, #4]
 801c2f8:	4a4f      	ldr	r2, [pc, #316]	; (801c438 <SUBGRF_SetModulationParams+0x19c>)
 801c2fa:	fbb2 f3f3 	udiv	r3, r2, r3
 801c2fe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c300:	697b      	ldr	r3, [r7, #20]
 801c302:	0c1b      	lsrs	r3, r3, #16
 801c304:	b2db      	uxtb	r3, r3
 801c306:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c308:	697b      	ldr	r3, [r7, #20]
 801c30a:	0a1b      	lsrs	r3, r3, #8
 801c30c:	b2db      	uxtb	r3, r3
 801c30e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c310:	697b      	ldr	r3, [r7, #20]
 801c312:	b2db      	uxtb	r3, r3
 801c314:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	7b1b      	ldrb	r3, [r3, #12]
 801c31a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	7b5b      	ldrb	r3, [r3, #13]
 801c320:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	689b      	ldr	r3, [r3, #8]
 801c326:	2200      	movs	r2, #0
 801c328:	461c      	mov	r4, r3
 801c32a:	4615      	mov	r5, r2
 801c32c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c330:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c334:	4a41      	ldr	r2, [pc, #260]	; (801c43c <SUBGRF_SetModulationParams+0x1a0>)
 801c336:	f04f 0300 	mov.w	r3, #0
 801c33a:	4640      	mov	r0, r8
 801c33c:	4649      	mov	r1, r9
 801c33e:	f7e4 fd25 	bl	8000d8c <__aeabi_uldivmod>
 801c342:	4602      	mov	r2, r0
 801c344:	460b      	mov	r3, r1
 801c346:	4613      	mov	r3, r2
 801c348:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c34a:	697b      	ldr	r3, [r7, #20]
 801c34c:	0c1b      	lsrs	r3, r3, #16
 801c34e:	b2db      	uxtb	r3, r3
 801c350:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c352:	697b      	ldr	r3, [r7, #20]
 801c354:	0a1b      	lsrs	r3, r3, #8
 801c356:	b2db      	uxtb	r3, r3
 801c358:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c35a:	697b      	ldr	r3, [r7, #20]
 801c35c:	b2db      	uxtb	r3, r3
 801c35e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c360:	7cfb      	ldrb	r3, [r7, #19]
 801c362:	b29a      	uxth	r2, r3
 801c364:	f107 0308 	add.w	r3, r7, #8
 801c368:	4619      	mov	r1, r3
 801c36a:	208b      	movs	r0, #139	; 0x8b
 801c36c:	f000 fa60 	bl	801c830 <SUBGRF_WriteCommand>
        break;
 801c370:	e058      	b.n	801c424 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c372:	2304      	movs	r3, #4
 801c374:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	691b      	ldr	r3, [r3, #16]
 801c37a:	4a2f      	ldr	r2, [pc, #188]	; (801c438 <SUBGRF_SetModulationParams+0x19c>)
 801c37c:	fbb2 f3f3 	udiv	r3, r2, r3
 801c380:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c382:	697b      	ldr	r3, [r7, #20]
 801c384:	0c1b      	lsrs	r3, r3, #16
 801c386:	b2db      	uxtb	r3, r3
 801c388:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c38a:	697b      	ldr	r3, [r7, #20]
 801c38c:	0a1b      	lsrs	r3, r3, #8
 801c38e:	b2db      	uxtb	r3, r3
 801c390:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c392:	697b      	ldr	r3, [r7, #20]
 801c394:	b2db      	uxtb	r3, r3
 801c396:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	7d1b      	ldrb	r3, [r3, #20]
 801c39c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c39e:	7cfb      	ldrb	r3, [r7, #19]
 801c3a0:	b29a      	uxth	r2, r3
 801c3a2:	f107 0308 	add.w	r3, r7, #8
 801c3a6:	4619      	mov	r1, r3
 801c3a8:	208b      	movs	r0, #139	; 0x8b
 801c3aa:	f000 fa41 	bl	801c830 <SUBGRF_WriteCommand>
        break;
 801c3ae:	e039      	b.n	801c424 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c3b0:	2304      	movs	r3, #4
 801c3b2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	7e1b      	ldrb	r3, [r3, #24]
 801c3b8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	7e5b      	ldrb	r3, [r3, #25]
 801c3be:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	7e9b      	ldrb	r3, [r3, #26]
 801c3c4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	7edb      	ldrb	r3, [r3, #27]
 801c3ca:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c3cc:	7cfb      	ldrb	r3, [r7, #19]
 801c3ce:	b29a      	uxth	r2, r3
 801c3d0:	f107 0308 	add.w	r3, r7, #8
 801c3d4:	4619      	mov	r1, r3
 801c3d6:	208b      	movs	r0, #139	; 0x8b
 801c3d8:	f000 fa2a 	bl	801c830 <SUBGRF_WriteCommand>

        break;
 801c3dc:	e022      	b.n	801c424 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801c3de:	2305      	movs	r3, #5
 801c3e0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	685b      	ldr	r3, [r3, #4]
 801c3e6:	4a14      	ldr	r2, [pc, #80]	; (801c438 <SUBGRF_SetModulationParams+0x19c>)
 801c3e8:	fbb2 f3f3 	udiv	r3, r2, r3
 801c3ec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c3ee:	697b      	ldr	r3, [r7, #20]
 801c3f0:	0c1b      	lsrs	r3, r3, #16
 801c3f2:	b2db      	uxtb	r3, r3
 801c3f4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c3f6:	697b      	ldr	r3, [r7, #20]
 801c3f8:	0a1b      	lsrs	r3, r3, #8
 801c3fa:	b2db      	uxtb	r3, r3
 801c3fc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c3fe:	697b      	ldr	r3, [r7, #20]
 801c400:	b2db      	uxtb	r3, r3
 801c402:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	7b1b      	ldrb	r3, [r3, #12]
 801c408:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	7b5b      	ldrb	r3, [r3, #13]
 801c40e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c410:	7cfb      	ldrb	r3, [r7, #19]
 801c412:	b29a      	uxth	r2, r3
 801c414:	f107 0308 	add.w	r3, r7, #8
 801c418:	4619      	mov	r1, r3
 801c41a:	208b      	movs	r0, #139	; 0x8b
 801c41c:	f000 fa08 	bl	801c830 <SUBGRF_WriteCommand>
        break;
 801c420:	e000      	b.n	801c424 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801c422:	bf00      	nop
    }
}
 801c424:	bf00      	nop
 801c426:	3718      	adds	r7, #24
 801c428:	46bd      	mov	sp, r7
 801c42a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c42e:	bf00      	nop
 801c430:	0801eec0 	.word	0x0801eec0
 801c434:	20001f81 	.word	0x20001f81
 801c438:	3d090000 	.word	0x3d090000
 801c43c:	01e84800 	.word	0x01e84800

0801c440 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801c440:	b580      	push	{r7, lr}
 801c442:	b086      	sub	sp, #24
 801c444:	af00      	add	r7, sp, #0
 801c446:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801c448:	2300      	movs	r3, #0
 801c44a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c44c:	4a48      	ldr	r2, [pc, #288]	; (801c570 <SUBGRF_SetPacketParams+0x130>)
 801c44e:	f107 030c 	add.w	r3, r7, #12
 801c452:	ca07      	ldmia	r2, {r0, r1, r2}
 801c454:	c303      	stmia	r3!, {r0, r1}
 801c456:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	781a      	ldrb	r2, [r3, #0]
 801c45c:	4b45      	ldr	r3, [pc, #276]	; (801c574 <SUBGRF_SetPacketParams+0x134>)
 801c45e:	781b      	ldrb	r3, [r3, #0]
 801c460:	429a      	cmp	r2, r3
 801c462:	d004      	beq.n	801c46e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	781b      	ldrb	r3, [r3, #0]
 801c468:	4618      	mov	r0, r3
 801c46a:	f7ff fe23 	bl	801c0b4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	781b      	ldrb	r3, [r3, #0]
 801c472:	2b03      	cmp	r3, #3
 801c474:	d878      	bhi.n	801c568 <SUBGRF_SetPacketParams+0x128>
 801c476:	a201      	add	r2, pc, #4	; (adr r2, 801c47c <SUBGRF_SetPacketParams+0x3c>)
 801c478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c47c:	0801c48d 	.word	0x0801c48d
 801c480:	0801c51d 	.word	0x0801c51d
 801c484:	0801c511 	.word	0x0801c511
 801c488:	0801c48d 	.word	0x0801c48d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	7a5b      	ldrb	r3, [r3, #9]
 801c490:	2bf1      	cmp	r3, #241	; 0xf1
 801c492:	d10a      	bne.n	801c4aa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801c494:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c498:	f7ff faae 	bl	801b9f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801c49c:	f248 0005 	movw	r0, #32773	; 0x8005
 801c4a0:	f7ff faca 	bl	801ba38 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801c4a4:	2302      	movs	r3, #2
 801c4a6:	75bb      	strb	r3, [r7, #22]
 801c4a8:	e011      	b.n	801c4ce <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	7a5b      	ldrb	r3, [r3, #9]
 801c4ae:	2bf2      	cmp	r3, #242	; 0xf2
 801c4b0:	d10a      	bne.n	801c4c8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801c4b2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801c4b6:	f7ff fa9f 	bl	801b9f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801c4ba:	f241 0021 	movw	r0, #4129	; 0x1021
 801c4be:	f7ff fabb 	bl	801ba38 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801c4c2:	2306      	movs	r3, #6
 801c4c4:	75bb      	strb	r3, [r7, #22]
 801c4c6:	e002      	b.n	801c4ce <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	7a5b      	ldrb	r3, [r3, #9]
 801c4cc:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801c4ce:	2309      	movs	r3, #9
 801c4d0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	885b      	ldrh	r3, [r3, #2]
 801c4d6:	0a1b      	lsrs	r3, r3, #8
 801c4d8:	b29b      	uxth	r3, r3
 801c4da:	b2db      	uxtb	r3, r3
 801c4dc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	885b      	ldrh	r3, [r3, #2]
 801c4e2:	b2db      	uxtb	r3, r3
 801c4e4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	791b      	ldrb	r3, [r3, #4]
 801c4ea:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	795b      	ldrb	r3, [r3, #5]
 801c4f0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	799b      	ldrb	r3, [r3, #6]
 801c4f6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	79db      	ldrb	r3, [r3, #7]
 801c4fc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	7a1b      	ldrb	r3, [r3, #8]
 801c502:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801c504:	7dbb      	ldrb	r3, [r7, #22]
 801c506:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	7a9b      	ldrb	r3, [r3, #10]
 801c50c:	753b      	strb	r3, [r7, #20]
        break;
 801c50e:	e022      	b.n	801c556 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801c510:	2301      	movs	r3, #1
 801c512:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	7b1b      	ldrb	r3, [r3, #12]
 801c518:	733b      	strb	r3, [r7, #12]
        break;
 801c51a:	e01c      	b.n	801c556 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801c51c:	2306      	movs	r3, #6
 801c51e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	89db      	ldrh	r3, [r3, #14]
 801c524:	0a1b      	lsrs	r3, r3, #8
 801c526:	b29b      	uxth	r3, r3
 801c528:	b2db      	uxtb	r3, r3
 801c52a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	89db      	ldrh	r3, [r3, #14]
 801c530:	b2db      	uxtb	r3, r3
 801c532:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	7c1a      	ldrb	r2, [r3, #16]
 801c538:	4b0f      	ldr	r3, [pc, #60]	; (801c578 <SUBGRF_SetPacketParams+0x138>)
 801c53a:	4611      	mov	r1, r2
 801c53c:	7019      	strb	r1, [r3, #0]
 801c53e:	4613      	mov	r3, r2
 801c540:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	7c5b      	ldrb	r3, [r3, #17]
 801c546:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	7c9b      	ldrb	r3, [r3, #18]
 801c54c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	7cdb      	ldrb	r3, [r3, #19]
 801c552:	747b      	strb	r3, [r7, #17]
        break;
 801c554:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801c556:	7dfb      	ldrb	r3, [r7, #23]
 801c558:	b29a      	uxth	r2, r3
 801c55a:	f107 030c 	add.w	r3, r7, #12
 801c55e:	4619      	mov	r1, r3
 801c560:	208c      	movs	r0, #140	; 0x8c
 801c562:	f000 f965 	bl	801c830 <SUBGRF_WriteCommand>
 801c566:	e000      	b.n	801c56a <SUBGRF_SetPacketParams+0x12a>
        return;
 801c568:	bf00      	nop
}
 801c56a:	3718      	adds	r7, #24
 801c56c:	46bd      	mov	sp, r7
 801c56e:	bd80      	pop	{r7, pc}
 801c570:	0801eec8 	.word	0x0801eec8
 801c574:	20001f81 	.word	0x20001f81
 801c578:	20001f82 	.word	0x20001f82

0801c57c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801c57c:	b580      	push	{r7, lr}
 801c57e:	b084      	sub	sp, #16
 801c580:	af00      	add	r7, sp, #0
 801c582:	4603      	mov	r3, r0
 801c584:	460a      	mov	r2, r1
 801c586:	71fb      	strb	r3, [r7, #7]
 801c588:	4613      	mov	r3, r2
 801c58a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801c58c:	79fb      	ldrb	r3, [r7, #7]
 801c58e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801c590:	79bb      	ldrb	r3, [r7, #6]
 801c592:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801c594:	f107 030c 	add.w	r3, r7, #12
 801c598:	2202      	movs	r2, #2
 801c59a:	4619      	mov	r1, r3
 801c59c:	208f      	movs	r0, #143	; 0x8f
 801c59e:	f000 f947 	bl	801c830 <SUBGRF_WriteCommand>
}
 801c5a2:	bf00      	nop
 801c5a4:	3710      	adds	r7, #16
 801c5a6:	46bd      	mov	sp, r7
 801c5a8:	bd80      	pop	{r7, pc}

0801c5aa <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801c5aa:	b580      	push	{r7, lr}
 801c5ac:	b082      	sub	sp, #8
 801c5ae:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801c5b4:	1d3b      	adds	r3, r7, #4
 801c5b6:	2201      	movs	r2, #1
 801c5b8:	4619      	mov	r1, r3
 801c5ba:	2015      	movs	r0, #21
 801c5bc:	f000 f95a 	bl	801c874 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801c5c0:	793b      	ldrb	r3, [r7, #4]
 801c5c2:	425b      	negs	r3, r3
 801c5c4:	105b      	asrs	r3, r3, #1
 801c5c6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801c5c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	3708      	adds	r7, #8
 801c5d0:	46bd      	mov	sp, r7
 801c5d2:	bd80      	pop	{r7, pc}

0801c5d4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b084      	sub	sp, #16
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	6078      	str	r0, [r7, #4]
 801c5dc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801c5de:	f107 030c 	add.w	r3, r7, #12
 801c5e2:	2202      	movs	r2, #2
 801c5e4:	4619      	mov	r1, r3
 801c5e6:	2013      	movs	r0, #19
 801c5e8:	f000 f944 	bl	801c874 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801c5ec:	f7ff fd7e 	bl	801c0ec <SUBGRF_GetPacketType>
 801c5f0:	4603      	mov	r3, r0
 801c5f2:	2b01      	cmp	r3, #1
 801c5f4:	d10d      	bne.n	801c612 <SUBGRF_GetRxBufferStatus+0x3e>
 801c5f6:	4b0c      	ldr	r3, [pc, #48]	; (801c628 <SUBGRF_GetRxBufferStatus+0x54>)
 801c5f8:	781b      	ldrb	r3, [r3, #0]
 801c5fa:	b2db      	uxtb	r3, r3
 801c5fc:	2b01      	cmp	r3, #1
 801c5fe:	d108      	bne.n	801c612 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801c600:	f240 7002 	movw	r0, #1794	; 0x702
 801c604:	f000 f878 	bl	801c6f8 <SUBGRF_ReadRegister>
 801c608:	4603      	mov	r3, r0
 801c60a:	461a      	mov	r2, r3
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	701a      	strb	r2, [r3, #0]
 801c610:	e002      	b.n	801c618 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801c612:	7b3a      	ldrb	r2, [r7, #12]
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801c618:	7b7a      	ldrb	r2, [r7, #13]
 801c61a:	683b      	ldr	r3, [r7, #0]
 801c61c:	701a      	strb	r2, [r3, #0]
}
 801c61e:	bf00      	nop
 801c620:	3710      	adds	r7, #16
 801c622:	46bd      	mov	sp, r7
 801c624:	bd80      	pop	{r7, pc}
 801c626:	bf00      	nop
 801c628:	20001f82 	.word	0x20001f82

0801c62c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801c62c:	b580      	push	{r7, lr}
 801c62e:	b084      	sub	sp, #16
 801c630:	af00      	add	r7, sp, #0
 801c632:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801c634:	f107 030c 	add.w	r3, r7, #12
 801c638:	2203      	movs	r2, #3
 801c63a:	4619      	mov	r1, r3
 801c63c:	2014      	movs	r0, #20
 801c63e:	f000 f919 	bl	801c874 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801c642:	f7ff fd53 	bl	801c0ec <SUBGRF_GetPacketType>
 801c646:	4603      	mov	r3, r0
 801c648:	461a      	mov	r2, r3
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	781b      	ldrb	r3, [r3, #0]
 801c652:	2b00      	cmp	r3, #0
 801c654:	d002      	beq.n	801c65c <SUBGRF_GetPacketStatus+0x30>
 801c656:	2b01      	cmp	r3, #1
 801c658:	d013      	beq.n	801c682 <SUBGRF_GetPacketStatus+0x56>
 801c65a:	e02a      	b.n	801c6b2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801c65c:	7b3a      	ldrb	r2, [r7, #12]
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801c662:	7b7b      	ldrb	r3, [r7, #13]
 801c664:	425b      	negs	r3, r3
 801c666:	105b      	asrs	r3, r3, #1
 801c668:	b25a      	sxtb	r2, r3
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801c66e:	7bbb      	ldrb	r3, [r7, #14]
 801c670:	425b      	negs	r3, r3
 801c672:	105b      	asrs	r3, r3, #1
 801c674:	b25a      	sxtb	r2, r3
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	2200      	movs	r2, #0
 801c67e:	609a      	str	r2, [r3, #8]
            break;
 801c680:	e020      	b.n	801c6c4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801c682:	7b3b      	ldrb	r3, [r7, #12]
 801c684:	425b      	negs	r3, r3
 801c686:	105b      	asrs	r3, r3, #1
 801c688:	b25a      	sxtb	r2, r3
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801c68e:	7b7b      	ldrb	r3, [r7, #13]
 801c690:	b25b      	sxtb	r3, r3
 801c692:	3302      	adds	r3, #2
 801c694:	109b      	asrs	r3, r3, #2
 801c696:	b25a      	sxtb	r2, r3
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801c69c:	7bbb      	ldrb	r3, [r7, #14]
 801c69e:	425b      	negs	r3, r3
 801c6a0:	105b      	asrs	r3, r3, #1
 801c6a2:	b25a      	sxtb	r2, r3
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801c6a8:	4b08      	ldr	r3, [pc, #32]	; (801c6cc <SUBGRF_GetPacketStatus+0xa0>)
 801c6aa:	681a      	ldr	r2, [r3, #0]
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	611a      	str	r2, [r3, #16]
            break;
 801c6b0:	e008      	b.n	801c6c4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801c6b2:	2214      	movs	r2, #20
 801c6b4:	2100      	movs	r1, #0
 801c6b6:	6878      	ldr	r0, [r7, #4]
 801c6b8:	f000 fbf3 	bl	801cea2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	220f      	movs	r2, #15
 801c6c0:	701a      	strb	r2, [r3, #0]
            break;
 801c6c2:	bf00      	nop
    }
}
 801c6c4:	bf00      	nop
 801c6c6:	3710      	adds	r7, #16
 801c6c8:	46bd      	mov	sp, r7
 801c6ca:	bd80      	pop	{r7, pc}
 801c6cc:	20001f84 	.word	0x20001f84

0801c6d0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801c6d0:	b580      	push	{r7, lr}
 801c6d2:	b082      	sub	sp, #8
 801c6d4:	af00      	add	r7, sp, #0
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	460a      	mov	r2, r1
 801c6da:	80fb      	strh	r3, [r7, #6]
 801c6dc:	4613      	mov	r3, r2
 801c6de:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801c6e0:	1d7a      	adds	r2, r7, #5
 801c6e2:	88f9      	ldrh	r1, [r7, #6]
 801c6e4:	2301      	movs	r3, #1
 801c6e6:	4803      	ldr	r0, [pc, #12]	; (801c6f4 <SUBGRF_WriteRegister+0x24>)
 801c6e8:	f7ed fb92 	bl	8009e10 <HAL_SUBGHZ_WriteRegisters>
}
 801c6ec:	bf00      	nop
 801c6ee:	3708      	adds	r7, #8
 801c6f0:	46bd      	mov	sp, r7
 801c6f2:	bd80      	pop	{r7, pc}
 801c6f4:	200003a0 	.word	0x200003a0

0801c6f8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801c6f8:	b580      	push	{r7, lr}
 801c6fa:	b084      	sub	sp, #16
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	4603      	mov	r3, r0
 801c700:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801c702:	f107 020f 	add.w	r2, r7, #15
 801c706:	88f9      	ldrh	r1, [r7, #6]
 801c708:	2301      	movs	r3, #1
 801c70a:	4804      	ldr	r0, [pc, #16]	; (801c71c <SUBGRF_ReadRegister+0x24>)
 801c70c:	f7ed fbdf 	bl	8009ece <HAL_SUBGHZ_ReadRegisters>
    return data;
 801c710:	7bfb      	ldrb	r3, [r7, #15]
}
 801c712:	4618      	mov	r0, r3
 801c714:	3710      	adds	r7, #16
 801c716:	46bd      	mov	sp, r7
 801c718:	bd80      	pop	{r7, pc}
 801c71a:	bf00      	nop
 801c71c:	200003a0 	.word	0x200003a0

0801c720 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c720:	b580      	push	{r7, lr}
 801c722:	b086      	sub	sp, #24
 801c724:	af00      	add	r7, sp, #0
 801c726:	4603      	mov	r3, r0
 801c728:	6039      	str	r1, [r7, #0]
 801c72a:	80fb      	strh	r3, [r7, #6]
 801c72c:	4613      	mov	r3, r2
 801c72e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c730:	f3ef 8310 	mrs	r3, PRIMASK
 801c734:	60fb      	str	r3, [r7, #12]
  return(result);
 801c736:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c73a:	b672      	cpsid	i
}
 801c73c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801c73e:	88bb      	ldrh	r3, [r7, #4]
 801c740:	88f9      	ldrh	r1, [r7, #6]
 801c742:	683a      	ldr	r2, [r7, #0]
 801c744:	4806      	ldr	r0, [pc, #24]	; (801c760 <SUBGRF_WriteRegisters+0x40>)
 801c746:	f7ed fb63 	bl	8009e10 <HAL_SUBGHZ_WriteRegisters>
 801c74a:	697b      	ldr	r3, [r7, #20]
 801c74c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c74e:	693b      	ldr	r3, [r7, #16]
 801c750:	f383 8810 	msr	PRIMASK, r3
}
 801c754:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c756:	bf00      	nop
 801c758:	3718      	adds	r7, #24
 801c75a:	46bd      	mov	sp, r7
 801c75c:	bd80      	pop	{r7, pc}
 801c75e:	bf00      	nop
 801c760:	200003a0 	.word	0x200003a0

0801c764 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c764:	b580      	push	{r7, lr}
 801c766:	b086      	sub	sp, #24
 801c768:	af00      	add	r7, sp, #0
 801c76a:	4603      	mov	r3, r0
 801c76c:	6039      	str	r1, [r7, #0]
 801c76e:	80fb      	strh	r3, [r7, #6]
 801c770:	4613      	mov	r3, r2
 801c772:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c774:	f3ef 8310 	mrs	r3, PRIMASK
 801c778:	60fb      	str	r3, [r7, #12]
  return(result);
 801c77a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c77c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c77e:	b672      	cpsid	i
}
 801c780:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801c782:	88bb      	ldrh	r3, [r7, #4]
 801c784:	88f9      	ldrh	r1, [r7, #6]
 801c786:	683a      	ldr	r2, [r7, #0]
 801c788:	4806      	ldr	r0, [pc, #24]	; (801c7a4 <SUBGRF_ReadRegisters+0x40>)
 801c78a:	f7ed fba0 	bl	8009ece <HAL_SUBGHZ_ReadRegisters>
 801c78e:	697b      	ldr	r3, [r7, #20]
 801c790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c792:	693b      	ldr	r3, [r7, #16]
 801c794:	f383 8810 	msr	PRIMASK, r3
}
 801c798:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c79a:	bf00      	nop
 801c79c:	3718      	adds	r7, #24
 801c79e:	46bd      	mov	sp, r7
 801c7a0:	bd80      	pop	{r7, pc}
 801c7a2:	bf00      	nop
 801c7a4:	200003a0 	.word	0x200003a0

0801c7a8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c7a8:	b580      	push	{r7, lr}
 801c7aa:	b086      	sub	sp, #24
 801c7ac:	af00      	add	r7, sp, #0
 801c7ae:	4603      	mov	r3, r0
 801c7b0:	6039      	str	r1, [r7, #0]
 801c7b2:	71fb      	strb	r3, [r7, #7]
 801c7b4:	4613      	mov	r3, r2
 801c7b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7b8:	f3ef 8310 	mrs	r3, PRIMASK
 801c7bc:	60fb      	str	r3, [r7, #12]
  return(result);
 801c7be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c7c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7c2:	b672      	cpsid	i
}
 801c7c4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801c7c6:	79bb      	ldrb	r3, [r7, #6]
 801c7c8:	b29b      	uxth	r3, r3
 801c7ca:	79f9      	ldrb	r1, [r7, #7]
 801c7cc:	683a      	ldr	r2, [r7, #0]
 801c7ce:	4806      	ldr	r0, [pc, #24]	; (801c7e8 <SUBGRF_WriteBuffer+0x40>)
 801c7d0:	f7ed fc91 	bl	800a0f6 <HAL_SUBGHZ_WriteBuffer>
 801c7d4:	697b      	ldr	r3, [r7, #20]
 801c7d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7d8:	693b      	ldr	r3, [r7, #16]
 801c7da:	f383 8810 	msr	PRIMASK, r3
}
 801c7de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c7e0:	bf00      	nop
 801c7e2:	3718      	adds	r7, #24
 801c7e4:	46bd      	mov	sp, r7
 801c7e6:	bd80      	pop	{r7, pc}
 801c7e8:	200003a0 	.word	0x200003a0

0801c7ec <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c7ec:	b580      	push	{r7, lr}
 801c7ee:	b086      	sub	sp, #24
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	4603      	mov	r3, r0
 801c7f4:	6039      	str	r1, [r7, #0]
 801c7f6:	71fb      	strb	r3, [r7, #7]
 801c7f8:	4613      	mov	r3, r2
 801c7fa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7fc:	f3ef 8310 	mrs	r3, PRIMASK
 801c800:	60fb      	str	r3, [r7, #12]
  return(result);
 801c802:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c806:	b672      	cpsid	i
}
 801c808:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801c80a:	79bb      	ldrb	r3, [r7, #6]
 801c80c:	b29b      	uxth	r3, r3
 801c80e:	79f9      	ldrb	r1, [r7, #7]
 801c810:	683a      	ldr	r2, [r7, #0]
 801c812:	4806      	ldr	r0, [pc, #24]	; (801c82c <SUBGRF_ReadBuffer+0x40>)
 801c814:	f7ed fcc2 	bl	800a19c <HAL_SUBGHZ_ReadBuffer>
 801c818:	697b      	ldr	r3, [r7, #20]
 801c81a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c81c:	693b      	ldr	r3, [r7, #16]
 801c81e:	f383 8810 	msr	PRIMASK, r3
}
 801c822:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c824:	bf00      	nop
 801c826:	3718      	adds	r7, #24
 801c828:	46bd      	mov	sp, r7
 801c82a:	bd80      	pop	{r7, pc}
 801c82c:	200003a0 	.word	0x200003a0

0801c830 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c830:	b580      	push	{r7, lr}
 801c832:	b086      	sub	sp, #24
 801c834:	af00      	add	r7, sp, #0
 801c836:	4603      	mov	r3, r0
 801c838:	6039      	str	r1, [r7, #0]
 801c83a:	71fb      	strb	r3, [r7, #7]
 801c83c:	4613      	mov	r3, r2
 801c83e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c840:	f3ef 8310 	mrs	r3, PRIMASK
 801c844:	60fb      	str	r3, [r7, #12]
  return(result);
 801c846:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c84a:	b672      	cpsid	i
}
 801c84c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801c84e:	88bb      	ldrh	r3, [r7, #4]
 801c850:	79f9      	ldrb	r1, [r7, #7]
 801c852:	683a      	ldr	r2, [r7, #0]
 801c854:	4806      	ldr	r0, [pc, #24]	; (801c870 <SUBGRF_WriteCommand+0x40>)
 801c856:	f7ed fb9b 	bl	8009f90 <HAL_SUBGHZ_ExecSetCmd>
 801c85a:	697b      	ldr	r3, [r7, #20]
 801c85c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c85e:	693b      	ldr	r3, [r7, #16]
 801c860:	f383 8810 	msr	PRIMASK, r3
}
 801c864:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c866:	bf00      	nop
 801c868:	3718      	adds	r7, #24
 801c86a:	46bd      	mov	sp, r7
 801c86c:	bd80      	pop	{r7, pc}
 801c86e:	bf00      	nop
 801c870:	200003a0 	.word	0x200003a0

0801c874 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c874:	b580      	push	{r7, lr}
 801c876:	b086      	sub	sp, #24
 801c878:	af00      	add	r7, sp, #0
 801c87a:	4603      	mov	r3, r0
 801c87c:	6039      	str	r1, [r7, #0]
 801c87e:	71fb      	strb	r3, [r7, #7]
 801c880:	4613      	mov	r3, r2
 801c882:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c884:	f3ef 8310 	mrs	r3, PRIMASK
 801c888:	60fb      	str	r3, [r7, #12]
  return(result);
 801c88a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c88c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c88e:	b672      	cpsid	i
}
 801c890:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801c892:	88bb      	ldrh	r3, [r7, #4]
 801c894:	79f9      	ldrb	r1, [r7, #7]
 801c896:	683a      	ldr	r2, [r7, #0]
 801c898:	4806      	ldr	r0, [pc, #24]	; (801c8b4 <SUBGRF_ReadCommand+0x40>)
 801c89a:	f7ed fbd8 	bl	800a04e <HAL_SUBGHZ_ExecGetCmd>
 801c89e:	697b      	ldr	r3, [r7, #20]
 801c8a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8a2:	693b      	ldr	r3, [r7, #16]
 801c8a4:	f383 8810 	msr	PRIMASK, r3
}
 801c8a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c8aa:	bf00      	nop
 801c8ac:	3718      	adds	r7, #24
 801c8ae:	46bd      	mov	sp, r7
 801c8b0:	bd80      	pop	{r7, pc}
 801c8b2:	bf00      	nop
 801c8b4:	200003a0 	.word	0x200003a0

0801c8b8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801c8b8:	b580      	push	{r7, lr}
 801c8ba:	b084      	sub	sp, #16
 801c8bc:	af00      	add	r7, sp, #0
 801c8be:	4603      	mov	r3, r0
 801c8c0:	460a      	mov	r2, r1
 801c8c2:	71fb      	strb	r3, [r7, #7]
 801c8c4:	4613      	mov	r3, r2
 801c8c6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801c8c8:	2301      	movs	r3, #1
 801c8ca:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801c8cc:	79bb      	ldrb	r3, [r7, #6]
 801c8ce:	2b01      	cmp	r3, #1
 801c8d0:	d10d      	bne.n	801c8ee <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801c8d2:	79fb      	ldrb	r3, [r7, #7]
 801c8d4:	2b01      	cmp	r3, #1
 801c8d6:	d104      	bne.n	801c8e2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801c8d8:	2302      	movs	r3, #2
 801c8da:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801c8dc:	2004      	movs	r0, #4
 801c8de:	f000 f8df 	bl	801caa0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801c8e2:	79fb      	ldrb	r3, [r7, #7]
 801c8e4:	2b02      	cmp	r3, #2
 801c8e6:	d107      	bne.n	801c8f8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801c8e8:	2303      	movs	r3, #3
 801c8ea:	73fb      	strb	r3, [r7, #15]
 801c8ec:	e004      	b.n	801c8f8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801c8ee:	79bb      	ldrb	r3, [r7, #6]
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d101      	bne.n	801c8f8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801c8f4:	2301      	movs	r3, #1
 801c8f6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801c8f8:	7bfb      	ldrb	r3, [r7, #15]
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	f7f1 f827 	bl	800d94e <RBI_ConfigRFSwitch>
}
 801c900:	bf00      	nop
 801c902:	3710      	adds	r7, #16
 801c904:	46bd      	mov	sp, r7
 801c906:	bd80      	pop	{r7, pc}

0801c908 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801c908:	b580      	push	{r7, lr}
 801c90a:	b084      	sub	sp, #16
 801c90c:	af00      	add	r7, sp, #0
 801c90e:	4603      	mov	r3, r0
 801c910:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801c912:	2301      	movs	r3, #1
 801c914:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801c916:	f7f1 f828 	bl	800d96a <RBI_GetTxConfig>
 801c91a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801c91c:	68bb      	ldr	r3, [r7, #8]
 801c91e:	2b02      	cmp	r3, #2
 801c920:	d016      	beq.n	801c950 <SUBGRF_SetRfTxPower+0x48>
 801c922:	68bb      	ldr	r3, [r7, #8]
 801c924:	2b02      	cmp	r3, #2
 801c926:	dc16      	bgt.n	801c956 <SUBGRF_SetRfTxPower+0x4e>
 801c928:	68bb      	ldr	r3, [r7, #8]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d003      	beq.n	801c936 <SUBGRF_SetRfTxPower+0x2e>
 801c92e:	68bb      	ldr	r3, [r7, #8]
 801c930:	2b01      	cmp	r3, #1
 801c932:	d00a      	beq.n	801c94a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801c934:	e00f      	b.n	801c956 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801c936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c93a:	2b0f      	cmp	r3, #15
 801c93c:	dd02      	ble.n	801c944 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c93e:	2302      	movs	r3, #2
 801c940:	73fb      	strb	r3, [r7, #15]
            break;
 801c942:	e009      	b.n	801c958 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c944:	2301      	movs	r3, #1
 801c946:	73fb      	strb	r3, [r7, #15]
            break;
 801c948:	e006      	b.n	801c958 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c94a:	2301      	movs	r3, #1
 801c94c:	73fb      	strb	r3, [r7, #15]
            break;
 801c94e:	e003      	b.n	801c958 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c950:	2302      	movs	r3, #2
 801c952:	73fb      	strb	r3, [r7, #15]
            break;
 801c954:	e000      	b.n	801c958 <SUBGRF_SetRfTxPower+0x50>
            break;
 801c956:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801c958:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c95c:	7bfb      	ldrb	r3, [r7, #15]
 801c95e:	2202      	movs	r2, #2
 801c960:	4618      	mov	r0, r3
 801c962:	f7ff fbcd 	bl	801c100 <SUBGRF_SetTxParams>

    return paSelect;
 801c966:	7bfb      	ldrb	r3, [r7, #15]
}
 801c968:	4618      	mov	r0, r3
 801c96a:	3710      	adds	r7, #16
 801c96c:	46bd      	mov	sp, r7
 801c96e:	bd80      	pop	{r7, pc}

0801c970 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801c970:	b480      	push	{r7}
 801c972:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801c974:	2301      	movs	r3, #1
}
 801c976:	4618      	mov	r0, r3
 801c978:	46bd      	mov	sp, r7
 801c97a:	bc80      	pop	{r7}
 801c97c:	4770      	bx	lr
	...

0801c980 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c980:	b580      	push	{r7, lr}
 801c982:	b082      	sub	sp, #8
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801c988:	4b03      	ldr	r3, [pc, #12]	; (801c998 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	2001      	movs	r0, #1
 801c98e:	4798      	blx	r3
}
 801c990:	bf00      	nop
 801c992:	3708      	adds	r7, #8
 801c994:	46bd      	mov	sp, r7
 801c996:	bd80      	pop	{r7, pc}
 801c998:	20001f8c 	.word	0x20001f8c

0801c99c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c99c:	b580      	push	{r7, lr}
 801c99e:	b082      	sub	sp, #8
 801c9a0:	af00      	add	r7, sp, #0
 801c9a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801c9a4:	4b03      	ldr	r3, [pc, #12]	; (801c9b4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	2002      	movs	r0, #2
 801c9aa:	4798      	blx	r3
}
 801c9ac:	bf00      	nop
 801c9ae:	3708      	adds	r7, #8
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	bd80      	pop	{r7, pc}
 801c9b4:	20001f8c 	.word	0x20001f8c

0801c9b8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b082      	sub	sp, #8
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801c9c0:	4b03      	ldr	r3, [pc, #12]	; (801c9d0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	2040      	movs	r0, #64	; 0x40
 801c9c6:	4798      	blx	r3
}
 801c9c8:	bf00      	nop
 801c9ca:	3708      	adds	r7, #8
 801c9cc:	46bd      	mov	sp, r7
 801c9ce:	bd80      	pop	{r7, pc}
 801c9d0:	20001f8c 	.word	0x20001f8c

0801c9d4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801c9d4:	b580      	push	{r7, lr}
 801c9d6:	b082      	sub	sp, #8
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	6078      	str	r0, [r7, #4]
 801c9dc:	460b      	mov	r3, r1
 801c9de:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801c9e0:	78fb      	ldrb	r3, [r7, #3]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d002      	beq.n	801c9ec <HAL_SUBGHZ_CADStatusCallback+0x18>
 801c9e6:	2b01      	cmp	r3, #1
 801c9e8:	d005      	beq.n	801c9f6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801c9ea:	e00a      	b.n	801ca02 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801c9ec:	4b07      	ldr	r3, [pc, #28]	; (801ca0c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	2080      	movs	r0, #128	; 0x80
 801c9f2:	4798      	blx	r3
            break;
 801c9f4:	e005      	b.n	801ca02 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801c9f6:	4b05      	ldr	r3, [pc, #20]	; (801ca0c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c9fe:	4798      	blx	r3
            break;
 801ca00:	bf00      	nop
    }
}
 801ca02:	bf00      	nop
 801ca04:	3708      	adds	r7, #8
 801ca06:	46bd      	mov	sp, r7
 801ca08:	bd80      	pop	{r7, pc}
 801ca0a:	bf00      	nop
 801ca0c:	20001f8c 	.word	0x20001f8c

0801ca10 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca10:	b580      	push	{r7, lr}
 801ca12:	b082      	sub	sp, #8
 801ca14:	af00      	add	r7, sp, #0
 801ca16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801ca18:	4b04      	ldr	r3, [pc, #16]	; (801ca2c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ca20:	4798      	blx	r3
}
 801ca22:	bf00      	nop
 801ca24:	3708      	adds	r7, #8
 801ca26:	46bd      	mov	sp, r7
 801ca28:	bd80      	pop	{r7, pc}
 801ca2a:	bf00      	nop
 801ca2c:	20001f8c 	.word	0x20001f8c

0801ca30 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca30:	b580      	push	{r7, lr}
 801ca32:	b082      	sub	sp, #8
 801ca34:	af00      	add	r7, sp, #0
 801ca36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801ca38:	4b03      	ldr	r3, [pc, #12]	; (801ca48 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801ca3a:	681b      	ldr	r3, [r3, #0]
 801ca3c:	2020      	movs	r0, #32
 801ca3e:	4798      	blx	r3
}
 801ca40:	bf00      	nop
 801ca42:	3708      	adds	r7, #8
 801ca44:	46bd      	mov	sp, r7
 801ca46:	bd80      	pop	{r7, pc}
 801ca48:	20001f8c 	.word	0x20001f8c

0801ca4c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca4c:	b580      	push	{r7, lr}
 801ca4e:	b082      	sub	sp, #8
 801ca50:	af00      	add	r7, sp, #0
 801ca52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801ca54:	4b03      	ldr	r3, [pc, #12]	; (801ca64 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	2004      	movs	r0, #4
 801ca5a:	4798      	blx	r3
}
 801ca5c:	bf00      	nop
 801ca5e:	3708      	adds	r7, #8
 801ca60:	46bd      	mov	sp, r7
 801ca62:	bd80      	pop	{r7, pc}
 801ca64:	20001f8c 	.word	0x20001f8c

0801ca68 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca68:	b580      	push	{r7, lr}
 801ca6a:	b082      	sub	sp, #8
 801ca6c:	af00      	add	r7, sp, #0
 801ca6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801ca70:	4b03      	ldr	r3, [pc, #12]	; (801ca80 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	2008      	movs	r0, #8
 801ca76:	4798      	blx	r3
}
 801ca78:	bf00      	nop
 801ca7a:	3708      	adds	r7, #8
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	bd80      	pop	{r7, pc}
 801ca80:	20001f8c 	.word	0x20001f8c

0801ca84 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	b082      	sub	sp, #8
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801ca8c:	4b03      	ldr	r3, [pc, #12]	; (801ca9c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	2010      	movs	r0, #16
 801ca92:	4798      	blx	r3
}
 801ca94:	bf00      	nop
 801ca96:	3708      	adds	r7, #8
 801ca98:	46bd      	mov	sp, r7
 801ca9a:	bd80      	pop	{r7, pc}
 801ca9c:	20001f8c 	.word	0x20001f8c

0801caa0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b084      	sub	sp, #16
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	4603      	mov	r3, r0
 801caa8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801caaa:	f7f0 ff6c 	bl	800d986 <RBI_IsDCDC>
 801caae:	4603      	mov	r3, r0
 801cab0:	2b01      	cmp	r3, #1
 801cab2:	d112      	bne.n	801cada <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801cab4:	f640 1023 	movw	r0, #2339	; 0x923
 801cab8:	f7ff fe1e 	bl	801c6f8 <SUBGRF_ReadRegister>
 801cabc:	4603      	mov	r3, r0
 801cabe:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801cac0:	7bfb      	ldrb	r3, [r7, #15]
 801cac2:	f023 0306 	bic.w	r3, r3, #6
 801cac6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801cac8:	7bfa      	ldrb	r2, [r7, #15]
 801caca:	79fb      	ldrb	r3, [r7, #7]
 801cacc:	4313      	orrs	r3, r2
 801cace:	b2db      	uxtb	r3, r3
 801cad0:	4619      	mov	r1, r3
 801cad2:	f640 1023 	movw	r0, #2339	; 0x923
 801cad6:	f7ff fdfb 	bl	801c6d0 <SUBGRF_WriteRegister>
  }
}
 801cada:	bf00      	nop
 801cadc:	3710      	adds	r7, #16
 801cade:	46bd      	mov	sp, r7
 801cae0:	bd80      	pop	{r7, pc}
	...

0801cae4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801cae4:	b480      	push	{r7}
 801cae6:	b085      	sub	sp, #20
 801cae8:	af00      	add	r7, sp, #0
 801caea:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d101      	bne.n	801caf6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801caf2:	231f      	movs	r3, #31
 801caf4:	e016      	b.n	801cb24 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801caf6:	2300      	movs	r3, #0
 801caf8:	73fb      	strb	r3, [r7, #15]
 801cafa:	e00f      	b.n	801cb1c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801cafc:	7bfb      	ldrb	r3, [r7, #15]
 801cafe:	4a0c      	ldr	r2, [pc, #48]	; (801cb30 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801cb00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cb04:	687a      	ldr	r2, [r7, #4]
 801cb06:	429a      	cmp	r2, r3
 801cb08:	d205      	bcs.n	801cb16 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801cb0a:	7bfb      	ldrb	r3, [r7, #15]
 801cb0c:	4a08      	ldr	r2, [pc, #32]	; (801cb30 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801cb0e:	00db      	lsls	r3, r3, #3
 801cb10:	4413      	add	r3, r2
 801cb12:	791b      	ldrb	r3, [r3, #4]
 801cb14:	e006      	b.n	801cb24 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801cb16:	7bfb      	ldrb	r3, [r7, #15]
 801cb18:	3301      	adds	r3, #1
 801cb1a:	73fb      	strb	r3, [r7, #15]
 801cb1c:	7bfb      	ldrb	r3, [r7, #15]
 801cb1e:	2b15      	cmp	r3, #21
 801cb20:	d9ec      	bls.n	801cafc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801cb22:	e7fe      	b.n	801cb22 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801cb24:	4618      	mov	r0, r3
 801cb26:	3714      	adds	r7, #20
 801cb28:	46bd      	mov	sp, r7
 801cb2a:	bc80      	pop	{r7}
 801cb2c:	4770      	bx	lr
 801cb2e:	bf00      	nop
 801cb30:	0801f42c 	.word	0x0801f42c

0801cb34 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b08a      	sub	sp, #40	; 0x28
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
 801cb3c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801cb3e:	4b35      	ldr	r3, [pc, #212]	; (801cc14 <SUBGRF_GetCFO+0xe0>)
 801cb40:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801cb42:	f640 0007 	movw	r0, #2055	; 0x807
 801cb46:	f7ff fdd7 	bl	801c6f8 <SUBGRF_ReadRegister>
 801cb4a:	4603      	mov	r3, r0
 801cb4c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801cb4e:	7ffb      	ldrb	r3, [r7, #31]
 801cb50:	08db      	lsrs	r3, r3, #3
 801cb52:	b2db      	uxtb	r3, r3
 801cb54:	f003 0303 	and.w	r3, r3, #3
 801cb58:	3328      	adds	r3, #40	; 0x28
 801cb5a:	443b      	add	r3, r7
 801cb5c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801cb60:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801cb62:	7ffb      	ldrb	r3, [r7, #31]
 801cb64:	f003 0307 	and.w	r3, r3, #7
 801cb68:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801cb6a:	7fba      	ldrb	r2, [r7, #30]
 801cb6c:	7f7b      	ldrb	r3, [r7, #29]
 801cb6e:	3b01      	subs	r3, #1
 801cb70:	fa02 f303 	lsl.w	r3, r2, r3
 801cb74:	461a      	mov	r2, r3
 801cb76:	4b28      	ldr	r3, [pc, #160]	; (801cc18 <SUBGRF_GetCFO+0xe4>)
 801cb78:	fbb3 f3f2 	udiv	r3, r3, r2
 801cb7c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801cb7e:	69ba      	ldr	r2, [r7, #24]
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb86:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801cb88:	2301      	movs	r3, #1
 801cb8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801cb8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb92:	697a      	ldr	r2, [r7, #20]
 801cb94:	fb02 f303 	mul.w	r3, r2, r3
 801cb98:	2b07      	cmp	r3, #7
 801cb9a:	d802      	bhi.n	801cba2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801cb9c:	2302      	movs	r3, #2
 801cb9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801cba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cba6:	697a      	ldr	r2, [r7, #20]
 801cba8:	fb02 f303 	mul.w	r3, r2, r3
 801cbac:	2b03      	cmp	r3, #3
 801cbae:	d802      	bhi.n	801cbb6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801cbb0:	2304      	movs	r3, #4
 801cbb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801cbb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801cbba:	69bb      	ldr	r3, [r7, #24]
 801cbbc:	fb02 f303 	mul.w	r3, r2, r3
 801cbc0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801cbc2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801cbc6:	f7ff fd97 	bl	801c6f8 <SUBGRF_ReadRegister>
 801cbca:	4603      	mov	r3, r0
 801cbcc:	021b      	lsls	r3, r3, #8
 801cbce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801cbd2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801cbd4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801cbd8:	f7ff fd8e 	bl	801c6f8 <SUBGRF_ReadRegister>
 801cbdc:	4603      	mov	r3, r0
 801cbde:	461a      	mov	r2, r3
 801cbe0:	6a3b      	ldr	r3, [r7, #32]
 801cbe2:	4313      	orrs	r3, r2
 801cbe4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801cbe6:	6a3b      	ldr	r3, [r7, #32]
 801cbe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d005      	beq.n	801cbfc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801cbf0:	6a3b      	ldr	r3, [r7, #32]
 801cbf2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801cbf6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801cbfa:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801cbfc:	693b      	ldr	r3, [r7, #16]
 801cbfe:	095b      	lsrs	r3, r3, #5
 801cc00:	6a3a      	ldr	r2, [r7, #32]
 801cc02:	fb02 f303 	mul.w	r3, r2, r3
 801cc06:	11da      	asrs	r2, r3, #7
 801cc08:	683b      	ldr	r3, [r7, #0]
 801cc0a:	601a      	str	r2, [r3, #0]
}
 801cc0c:	bf00      	nop
 801cc0e:	3728      	adds	r7, #40	; 0x28
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}
 801cc14:	0c0a0804 	.word	0x0c0a0804
 801cc18:	01e84800 	.word	0x01e84800

0801cc1c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801cc1c:	b480      	push	{r7}
 801cc1e:	b087      	sub	sp, #28
 801cc20:	af00      	add	r7, sp, #0
 801cc22:	4603      	mov	r3, r0
 801cc24:	60b9      	str	r1, [r7, #8]
 801cc26:	607a      	str	r2, [r7, #4]
 801cc28:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801cc2a:	2300      	movs	r3, #0
 801cc2c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801cc2e:	f04f 33ff 	mov.w	r3, #4294967295
 801cc32:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801cc34:	697b      	ldr	r3, [r7, #20]
}
 801cc36:	4618      	mov	r0, r3
 801cc38:	371c      	adds	r7, #28
 801cc3a:	46bd      	mov	sp, r7
 801cc3c:	bc80      	pop	{r7}
 801cc3e:	4770      	bx	lr

0801cc40 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801cc40:	b480      	push	{r7}
 801cc42:	b087      	sub	sp, #28
 801cc44:	af00      	add	r7, sp, #0
 801cc46:	4603      	mov	r3, r0
 801cc48:	60b9      	str	r1, [r7, #8]
 801cc4a:	607a      	str	r2, [r7, #4]
 801cc4c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801cc4e:	2300      	movs	r3, #0
 801cc50:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801cc52:	f04f 33ff 	mov.w	r3, #4294967295
 801cc56:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801cc58:	697b      	ldr	r3, [r7, #20]
}
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	371c      	adds	r7, #28
 801cc5e:	46bd      	mov	sp, r7
 801cc60:	bc80      	pop	{r7}
 801cc62:	4770      	bx	lr

0801cc64 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801cc64:	b480      	push	{r7}
 801cc66:	b085      	sub	sp, #20
 801cc68:	af00      	add	r7, sp, #0
 801cc6a:	60f8      	str	r0, [r7, #12]
 801cc6c:	60b9      	str	r1, [r7, #8]
 801cc6e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801cc70:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801cc74:	4618      	mov	r0, r3
 801cc76:	3714      	adds	r7, #20
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	bc80      	pop	{r7}
 801cc7c:	4770      	bx	lr

0801cc7e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801cc7e:	b480      	push	{r7}
 801cc80:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801cc82:	bf00      	nop
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bc80      	pop	{r7}
 801cc88:	4770      	bx	lr

0801cc8a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801cc8a:	b480      	push	{r7}
 801cc8c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801cc8e:	2300      	movs	r3, #0
#endif
}
 801cc90:	4618      	mov	r0, r3
 801cc92:	46bd      	mov	sp, r7
 801cc94:	bc80      	pop	{r7}
 801cc96:	4770      	bx	lr

0801cc98 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801cc98:	b480      	push	{r7}
 801cc9a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801cc9c:	2300      	movs	r3, #0
#endif
}
 801cc9e:	4618      	mov	r0, r3
 801cca0:	46bd      	mov	sp, r7
 801cca2:	bc80      	pop	{r7}
 801cca4:	4770      	bx	lr

0801cca6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801cca6:	b480      	push	{r7}
 801cca8:	b083      	sub	sp, #12
 801ccaa:	af00      	add	r7, sp, #0
 801ccac:	4603      	mov	r3, r0
 801ccae:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801ccb0:	bf00      	nop
 801ccb2:	370c      	adds	r7, #12
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	bc80      	pop	{r7}
 801ccb8:	4770      	bx	lr

0801ccba <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801ccba:	b480      	push	{r7}
 801ccbc:	b087      	sub	sp, #28
 801ccbe:	af00      	add	r7, sp, #0
 801ccc0:	60f8      	str	r0, [r7, #12]
 801ccc2:	460b      	mov	r3, r1
 801ccc4:	607a      	str	r2, [r7, #4]
 801ccc6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801ccc8:	f04f 33ff 	mov.w	r3, #4294967295
 801cccc:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801ccce:	697b      	ldr	r3, [r7, #20]
}
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	371c      	adds	r7, #28
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bc80      	pop	{r7}
 801ccd8:	4770      	bx	lr

0801ccda <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ccda:	b480      	push	{r7}
 801ccdc:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801ccde:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801cce2:	4618      	mov	r0, r3
 801cce4:	46bd      	mov	sp, r7
 801cce6:	bc80      	pop	{r7}
 801cce8:	4770      	bx	lr

0801ccea <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801ccea:	b480      	push	{r7}
 801ccec:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801ccee:	bf00      	nop
 801ccf0:	46bd      	mov	sp, r7
 801ccf2:	bc80      	pop	{r7}
 801ccf4:	4770      	bx	lr

0801ccf6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ccf6:	b480      	push	{r7}
 801ccf8:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801ccfa:	bf00      	nop
 801ccfc:	46bd      	mov	sp, r7
 801ccfe:	bc80      	pop	{r7}
 801cd00:	4770      	bx	lr

0801cd02 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801cd02:	b480      	push	{r7}
 801cd04:	b083      	sub	sp, #12
 801cd06:	af00      	add	r7, sp, #0
 801cd08:	4603      	mov	r3, r0
 801cd0a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801cd0c:	bf00      	nop
 801cd0e:	370c      	adds	r7, #12
 801cd10:	46bd      	mov	sp, r7
 801cd12:	bc80      	pop	{r7}
 801cd14:	4770      	bx	lr
	...

0801cd18 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801cd18:	b480      	push	{r7}
 801cd1a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801cd1c:	4b04      	ldr	r3, [pc, #16]	; (801cd30 <UTIL_LPM_Init+0x18>)
 801cd1e:	2200      	movs	r2, #0
 801cd20:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801cd22:	4b04      	ldr	r3, [pc, #16]	; (801cd34 <UTIL_LPM_Init+0x1c>)
 801cd24:	2200      	movs	r2, #0
 801cd26:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801cd28:	bf00      	nop
 801cd2a:	46bd      	mov	sp, r7
 801cd2c:	bc80      	pop	{r7}
 801cd2e:	4770      	bx	lr
 801cd30:	20001f90 	.word	0x20001f90
 801cd34:	20001f94 	.word	0x20001f94

0801cd38 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801cd38:	b480      	push	{r7}
 801cd3a:	b087      	sub	sp, #28
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	6078      	str	r0, [r7, #4]
 801cd40:	460b      	mov	r3, r1
 801cd42:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd44:	f3ef 8310 	mrs	r3, PRIMASK
 801cd48:	613b      	str	r3, [r7, #16]
  return(result);
 801cd4a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801cd4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd4e:	b672      	cpsid	i
}
 801cd50:	bf00      	nop
  
  switch( state )
 801cd52:	78fb      	ldrb	r3, [r7, #3]
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d008      	beq.n	801cd6a <UTIL_LPM_SetStopMode+0x32>
 801cd58:	2b01      	cmp	r3, #1
 801cd5a:	d10e      	bne.n	801cd7a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801cd5c:	4b0d      	ldr	r3, [pc, #52]	; (801cd94 <UTIL_LPM_SetStopMode+0x5c>)
 801cd5e:	681a      	ldr	r2, [r3, #0]
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	4313      	orrs	r3, r2
 801cd64:	4a0b      	ldr	r2, [pc, #44]	; (801cd94 <UTIL_LPM_SetStopMode+0x5c>)
 801cd66:	6013      	str	r3, [r2, #0]
      break;
 801cd68:	e008      	b.n	801cd7c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	43da      	mvns	r2, r3
 801cd6e:	4b09      	ldr	r3, [pc, #36]	; (801cd94 <UTIL_LPM_SetStopMode+0x5c>)
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	4013      	ands	r3, r2
 801cd74:	4a07      	ldr	r2, [pc, #28]	; (801cd94 <UTIL_LPM_SetStopMode+0x5c>)
 801cd76:	6013      	str	r3, [r2, #0]
      break;
 801cd78:	e000      	b.n	801cd7c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801cd7a:	bf00      	nop
 801cd7c:	697b      	ldr	r3, [r7, #20]
 801cd7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	f383 8810 	msr	PRIMASK, r3
}
 801cd86:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cd88:	bf00      	nop
 801cd8a:	371c      	adds	r7, #28
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	bc80      	pop	{r7}
 801cd90:	4770      	bx	lr
 801cd92:	bf00      	nop
 801cd94:	20001f90 	.word	0x20001f90

0801cd98 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801cd98:	b480      	push	{r7}
 801cd9a:	b087      	sub	sp, #28
 801cd9c:	af00      	add	r7, sp, #0
 801cd9e:	6078      	str	r0, [r7, #4]
 801cda0:	460b      	mov	r3, r1
 801cda2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cda4:	f3ef 8310 	mrs	r3, PRIMASK
 801cda8:	613b      	str	r3, [r7, #16]
  return(result);
 801cdaa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801cdac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdae:	b672      	cpsid	i
}
 801cdb0:	bf00      	nop
  
  switch(state)
 801cdb2:	78fb      	ldrb	r3, [r7, #3]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d008      	beq.n	801cdca <UTIL_LPM_SetOffMode+0x32>
 801cdb8:	2b01      	cmp	r3, #1
 801cdba:	d10e      	bne.n	801cdda <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801cdbc:	4b0d      	ldr	r3, [pc, #52]	; (801cdf4 <UTIL_LPM_SetOffMode+0x5c>)
 801cdbe:	681a      	ldr	r2, [r3, #0]
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	4313      	orrs	r3, r2
 801cdc4:	4a0b      	ldr	r2, [pc, #44]	; (801cdf4 <UTIL_LPM_SetOffMode+0x5c>)
 801cdc6:	6013      	str	r3, [r2, #0]
      break;
 801cdc8:	e008      	b.n	801cddc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	43da      	mvns	r2, r3
 801cdce:	4b09      	ldr	r3, [pc, #36]	; (801cdf4 <UTIL_LPM_SetOffMode+0x5c>)
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	4013      	ands	r3, r2
 801cdd4:	4a07      	ldr	r2, [pc, #28]	; (801cdf4 <UTIL_LPM_SetOffMode+0x5c>)
 801cdd6:	6013      	str	r3, [r2, #0]
      break;
 801cdd8:	e000      	b.n	801cddc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801cdda:	bf00      	nop
 801cddc:	697b      	ldr	r3, [r7, #20]
 801cdde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	f383 8810 	msr	PRIMASK, r3
}
 801cde6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cde8:	bf00      	nop
 801cdea:	371c      	adds	r7, #28
 801cdec:	46bd      	mov	sp, r7
 801cdee:	bc80      	pop	{r7}
 801cdf0:	4770      	bx	lr
 801cdf2:	bf00      	nop
 801cdf4:	20001f94 	.word	0x20001f94

0801cdf8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	b084      	sub	sp, #16
 801cdfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdfe:	f3ef 8310 	mrs	r3, PRIMASK
 801ce02:	60bb      	str	r3, [r7, #8]
  return(result);
 801ce04:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801ce06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce08:	b672      	cpsid	i
}
 801ce0a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801ce0c:	4b12      	ldr	r3, [pc, #72]	; (801ce58 <UTIL_LPM_EnterLowPower+0x60>)
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d006      	beq.n	801ce22 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801ce14:	4b11      	ldr	r3, [pc, #68]	; (801ce5c <UTIL_LPM_EnterLowPower+0x64>)
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801ce1a:	4b10      	ldr	r3, [pc, #64]	; (801ce5c <UTIL_LPM_EnterLowPower+0x64>)
 801ce1c:	685b      	ldr	r3, [r3, #4]
 801ce1e:	4798      	blx	r3
 801ce20:	e010      	b.n	801ce44 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801ce22:	4b0f      	ldr	r3, [pc, #60]	; (801ce60 <UTIL_LPM_EnterLowPower+0x68>)
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d006      	beq.n	801ce38 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801ce2a:	4b0c      	ldr	r3, [pc, #48]	; (801ce5c <UTIL_LPM_EnterLowPower+0x64>)
 801ce2c:	689b      	ldr	r3, [r3, #8]
 801ce2e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801ce30:	4b0a      	ldr	r3, [pc, #40]	; (801ce5c <UTIL_LPM_EnterLowPower+0x64>)
 801ce32:	68db      	ldr	r3, [r3, #12]
 801ce34:	4798      	blx	r3
 801ce36:	e005      	b.n	801ce44 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801ce38:	4b08      	ldr	r3, [pc, #32]	; (801ce5c <UTIL_LPM_EnterLowPower+0x64>)
 801ce3a:	691b      	ldr	r3, [r3, #16]
 801ce3c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801ce3e:	4b07      	ldr	r3, [pc, #28]	; (801ce5c <UTIL_LPM_EnterLowPower+0x64>)
 801ce40:	695b      	ldr	r3, [r3, #20]
 801ce42:	4798      	blx	r3
 801ce44:	68fb      	ldr	r3, [r7, #12]
 801ce46:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	f383 8810 	msr	PRIMASK, r3
}
 801ce4e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801ce50:	bf00      	nop
 801ce52:	3710      	adds	r7, #16
 801ce54:	46bd      	mov	sp, r7
 801ce56:	bd80      	pop	{r7, pc}
 801ce58:	20001f90 	.word	0x20001f90
 801ce5c:	0801ef2c 	.word	0x0801ef2c
 801ce60:	20001f94 	.word	0x20001f94

0801ce64 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801ce64:	b480      	push	{r7}
 801ce66:	b087      	sub	sp, #28
 801ce68:	af00      	add	r7, sp, #0
 801ce6a:	60f8      	str	r0, [r7, #12]
 801ce6c:	60b9      	str	r1, [r7, #8]
 801ce6e:	4613      	mov	r3, r2
 801ce70:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801ce72:	68fb      	ldr	r3, [r7, #12]
 801ce74:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801ce76:	68bb      	ldr	r3, [r7, #8]
 801ce78:	613b      	str	r3, [r7, #16]

  while( size-- )
 801ce7a:	e007      	b.n	801ce8c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801ce7c:	693a      	ldr	r2, [r7, #16]
 801ce7e:	1c53      	adds	r3, r2, #1
 801ce80:	613b      	str	r3, [r7, #16]
 801ce82:	697b      	ldr	r3, [r7, #20]
 801ce84:	1c59      	adds	r1, r3, #1
 801ce86:	6179      	str	r1, [r7, #20]
 801ce88:	7812      	ldrb	r2, [r2, #0]
 801ce8a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ce8c:	88fb      	ldrh	r3, [r7, #6]
 801ce8e:	1e5a      	subs	r2, r3, #1
 801ce90:	80fa      	strh	r2, [r7, #6]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d1f2      	bne.n	801ce7c <UTIL_MEM_cpy_8+0x18>
    }
}
 801ce96:	bf00      	nop
 801ce98:	bf00      	nop
 801ce9a:	371c      	adds	r7, #28
 801ce9c:	46bd      	mov	sp, r7
 801ce9e:	bc80      	pop	{r7}
 801cea0:	4770      	bx	lr

0801cea2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801cea2:	b480      	push	{r7}
 801cea4:	b085      	sub	sp, #20
 801cea6:	af00      	add	r7, sp, #0
 801cea8:	6078      	str	r0, [r7, #4]
 801ceaa:	460b      	mov	r3, r1
 801ceac:	70fb      	strb	r3, [r7, #3]
 801ceae:	4613      	mov	r3, r2
 801ceb0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801ceb6:	e004      	b.n	801cec2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	1c5a      	adds	r2, r3, #1
 801cebc:	60fa      	str	r2, [r7, #12]
 801cebe:	78fa      	ldrb	r2, [r7, #3]
 801cec0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801cec2:	883b      	ldrh	r3, [r7, #0]
 801cec4:	1e5a      	subs	r2, r3, #1
 801cec6:	803a      	strh	r2, [r7, #0]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d1f5      	bne.n	801ceb8 <UTIL_MEM_set_8+0x16>
  }
}
 801cecc:	bf00      	nop
 801cece:	bf00      	nop
 801ced0:	3714      	adds	r7, #20
 801ced2:	46bd      	mov	sp, r7
 801ced4:	bc80      	pop	{r7}
 801ced6:	4770      	bx	lr

0801ced8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ced8:	b082      	sub	sp, #8
 801ceda:	b480      	push	{r7}
 801cedc:	b087      	sub	sp, #28
 801cede:	af00      	add	r7, sp, #0
 801cee0:	60f8      	str	r0, [r7, #12]
 801cee2:	1d38      	adds	r0, r7, #4
 801cee4:	e880 0006 	stmia.w	r0, {r1, r2}
 801cee8:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ceea:	2300      	movs	r3, #0
 801ceec:	613b      	str	r3, [r7, #16]
 801ceee:	2300      	movs	r3, #0
 801cef0:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801cef2:	687a      	ldr	r2, [r7, #4]
 801cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cef6:	4413      	add	r3, r2
 801cef8:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801cefa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cefe:	b29a      	uxth	r2, r3
 801cf00:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cf04:	b29b      	uxth	r3, r3
 801cf06:	4413      	add	r3, r2
 801cf08:	b29b      	uxth	r3, r3
 801cf0a:	b21b      	sxth	r3, r3
 801cf0c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801cf0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cf12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cf16:	db0a      	blt.n	801cf2e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801cf18:	693b      	ldr	r3, [r7, #16]
 801cf1a:	3301      	adds	r3, #1
 801cf1c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801cf1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cf22:	b29b      	uxth	r3, r3
 801cf24:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801cf28:	b29b      	uxth	r3, r3
 801cf2a:	b21b      	sxth	r3, r3
 801cf2c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	461a      	mov	r2, r3
 801cf32:	f107 0310 	add.w	r3, r7, #16
 801cf36:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cf3a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cf3e:	68f8      	ldr	r0, [r7, #12]
 801cf40:	371c      	adds	r7, #28
 801cf42:	46bd      	mov	sp, r7
 801cf44:	bc80      	pop	{r7}
 801cf46:	b002      	add	sp, #8
 801cf48:	4770      	bx	lr

0801cf4a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801cf4a:	b082      	sub	sp, #8
 801cf4c:	b480      	push	{r7}
 801cf4e:	b087      	sub	sp, #28
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	60f8      	str	r0, [r7, #12]
 801cf54:	1d38      	adds	r0, r7, #4
 801cf56:	e880 0006 	stmia.w	r0, {r1, r2}
 801cf5a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	613b      	str	r3, [r7, #16]
 801cf60:	2300      	movs	r3, #0
 801cf62:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801cf64:	687a      	ldr	r2, [r7, #4]
 801cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf68:	1ad3      	subs	r3, r2, r3
 801cf6a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801cf6c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cf70:	b29a      	uxth	r2, r3
 801cf72:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cf76:	b29b      	uxth	r3, r3
 801cf78:	1ad3      	subs	r3, r2, r3
 801cf7a:	b29b      	uxth	r3, r3
 801cf7c:	b21b      	sxth	r3, r3
 801cf7e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801cf80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	da0a      	bge.n	801cf9e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801cf88:	693b      	ldr	r3, [r7, #16]
 801cf8a:	3b01      	subs	r3, #1
 801cf8c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801cf8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cf92:	b29b      	uxth	r3, r3
 801cf94:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801cf98:	b29b      	uxth	r3, r3
 801cf9a:	b21b      	sxth	r3, r3
 801cf9c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cf9e:	68fb      	ldr	r3, [r7, #12]
 801cfa0:	461a      	mov	r2, r3
 801cfa2:	f107 0310 	add.w	r3, r7, #16
 801cfa6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cfaa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cfae:	68f8      	ldr	r0, [r7, #12]
 801cfb0:	371c      	adds	r7, #28
 801cfb2:	46bd      	mov	sp, r7
 801cfb4:	bc80      	pop	{r7}
 801cfb6:	b002      	add	sp, #8
 801cfb8:	4770      	bx	lr
	...

0801cfbc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801cfbc:	b580      	push	{r7, lr}
 801cfbe:	b088      	sub	sp, #32
 801cfc0:	af02      	add	r7, sp, #8
 801cfc2:	463b      	mov	r3, r7
 801cfc4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cfc8:	2300      	movs	r3, #0
 801cfca:	60bb      	str	r3, [r7, #8]
 801cfcc:	2300      	movs	r3, #0
 801cfce:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cfd0:	4b10      	ldr	r3, [pc, #64]	; (801d014 <SysTimeSet+0x58>)
 801cfd2:	691b      	ldr	r3, [r3, #16]
 801cfd4:	f107 0208 	add.w	r2, r7, #8
 801cfd8:	3204      	adds	r2, #4
 801cfda:	4610      	mov	r0, r2
 801cfdc:	4798      	blx	r3
 801cfde:	4603      	mov	r3, r0
 801cfe0:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801cfe2:	f107 0010 	add.w	r0, r7, #16
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	9300      	str	r3, [sp, #0]
 801cfea:	68bb      	ldr	r3, [r7, #8]
 801cfec:	463a      	mov	r2, r7
 801cfee:	ca06      	ldmia	r2, {r1, r2}
 801cff0:	f7ff ffab 	bl	801cf4a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801cff4:	4b07      	ldr	r3, [pc, #28]	; (801d014 <SysTimeSet+0x58>)
 801cff6:	681b      	ldr	r3, [r3, #0]
 801cff8:	693a      	ldr	r2, [r7, #16]
 801cffa:	4610      	mov	r0, r2
 801cffc:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801cffe:	4b05      	ldr	r3, [pc, #20]	; (801d014 <SysTimeSet+0x58>)
 801d000:	689b      	ldr	r3, [r3, #8]
 801d002:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d006:	4610      	mov	r0, r2
 801d008:	4798      	blx	r3
}
 801d00a:	bf00      	nop
 801d00c:	3718      	adds	r7, #24
 801d00e:	46bd      	mov	sp, r7
 801d010:	bd80      	pop	{r7, pc}
 801d012:	bf00      	nop
 801d014:	0801f010 	.word	0x0801f010

0801d018 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d018:	b580      	push	{r7, lr}
 801d01a:	b08a      	sub	sp, #40	; 0x28
 801d01c:	af02      	add	r7, sp, #8
 801d01e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d020:	2300      	movs	r3, #0
 801d022:	61bb      	str	r3, [r7, #24]
 801d024:	2300      	movs	r3, #0
 801d026:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d028:	2300      	movs	r3, #0
 801d02a:	613b      	str	r3, [r7, #16]
 801d02c:	2300      	movs	r3, #0
 801d02e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d030:	4b14      	ldr	r3, [pc, #80]	; (801d084 <SysTimeGet+0x6c>)
 801d032:	691b      	ldr	r3, [r3, #16]
 801d034:	f107 0218 	add.w	r2, r7, #24
 801d038:	3204      	adds	r2, #4
 801d03a:	4610      	mov	r0, r2
 801d03c:	4798      	blx	r3
 801d03e:	4603      	mov	r3, r0
 801d040:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d042:	4b10      	ldr	r3, [pc, #64]	; (801d084 <SysTimeGet+0x6c>)
 801d044:	68db      	ldr	r3, [r3, #12]
 801d046:	4798      	blx	r3
 801d048:	4603      	mov	r3, r0
 801d04a:	b21b      	sxth	r3, r3
 801d04c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d04e:	4b0d      	ldr	r3, [pc, #52]	; (801d084 <SysTimeGet+0x6c>)
 801d050:	685b      	ldr	r3, [r3, #4]
 801d052:	4798      	blx	r3
 801d054:	4603      	mov	r3, r0
 801d056:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d058:	f107 0010 	add.w	r0, r7, #16
 801d05c:	69fb      	ldr	r3, [r7, #28]
 801d05e:	9300      	str	r3, [sp, #0]
 801d060:	69bb      	ldr	r3, [r7, #24]
 801d062:	f107 0208 	add.w	r2, r7, #8
 801d066:	ca06      	ldmia	r2, {r1, r2}
 801d068:	f7ff ff36 	bl	801ced8 <SysTimeAdd>

  return sysTime;
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	461a      	mov	r2, r3
 801d070:	f107 0310 	add.w	r3, r7, #16
 801d074:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d078:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d07c:	6878      	ldr	r0, [r7, #4]
 801d07e:	3720      	adds	r7, #32
 801d080:	46bd      	mov	sp, r7
 801d082:	bd80      	pop	{r7, pc}
 801d084:	0801f010 	.word	0x0801f010

0801d088 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d088:	b580      	push	{r7, lr}
 801d08a:	b084      	sub	sp, #16
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d090:	2300      	movs	r3, #0
 801d092:	60bb      	str	r3, [r7, #8]
 801d094:	2300      	movs	r3, #0
 801d096:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d098:	4b0a      	ldr	r3, [pc, #40]	; (801d0c4 <SysTimeGetMcuTime+0x3c>)
 801d09a:	691b      	ldr	r3, [r3, #16]
 801d09c:	f107 0208 	add.w	r2, r7, #8
 801d0a0:	3204      	adds	r2, #4
 801d0a2:	4610      	mov	r0, r2
 801d0a4:	4798      	blx	r3
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	461a      	mov	r2, r3
 801d0ae:	f107 0308 	add.w	r3, r7, #8
 801d0b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d0b6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d0ba:	6878      	ldr	r0, [r7, #4]
 801d0bc:	3710      	adds	r7, #16
 801d0be:	46bd      	mov	sp, r7
 801d0c0:	bd80      	pop	{r7, pc}
 801d0c2:	bf00      	nop
 801d0c4:	0801f010 	.word	0x0801f010

0801d0c8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b088      	sub	sp, #32
 801d0cc:	af02      	add	r7, sp, #8
 801d0ce:	463b      	mov	r3, r7
 801d0d0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d0d4:	4b0f      	ldr	r3, [pc, #60]	; (801d114 <SysTimeToMs+0x4c>)
 801d0d6:	68db      	ldr	r3, [r3, #12]
 801d0d8:	4798      	blx	r3
 801d0da:	4603      	mov	r3, r0
 801d0dc:	b21b      	sxth	r3, r3
 801d0de:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d0e0:	4b0c      	ldr	r3, [pc, #48]	; (801d114 <SysTimeToMs+0x4c>)
 801d0e2:	685b      	ldr	r3, [r3, #4]
 801d0e4:	4798      	blx	r3
 801d0e6:	4603      	mov	r3, r0
 801d0e8:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d0ea:	f107 0008 	add.w	r0, r7, #8
 801d0ee:	697b      	ldr	r3, [r7, #20]
 801d0f0:	9300      	str	r3, [sp, #0]
 801d0f2:	693b      	ldr	r3, [r7, #16]
 801d0f4:	463a      	mov	r2, r7
 801d0f6:	ca06      	ldmia	r2, {r1, r2}
 801d0f8:	f7ff ff27 	bl	801cf4a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d0fc:	68bb      	ldr	r3, [r7, #8]
 801d0fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d102:	fb02 f303 	mul.w	r3, r2, r3
 801d106:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d10a:	4413      	add	r3, r2
}
 801d10c:	4618      	mov	r0, r3
 801d10e:	3718      	adds	r7, #24
 801d110:	46bd      	mov	sp, r7
 801d112:	bd80      	pop	{r7, pc}
 801d114:	0801f010 	.word	0x0801f010

0801d118 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	b08a      	sub	sp, #40	; 0x28
 801d11c:	af02      	add	r7, sp, #8
 801d11e:	6078      	str	r0, [r7, #4]
 801d120:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d122:	683b      	ldr	r3, [r7, #0]
 801d124:	4a19      	ldr	r2, [pc, #100]	; (801d18c <SysTimeFromMs+0x74>)
 801d126:	fba2 2303 	umull	r2, r3, r2, r3
 801d12a:	099b      	lsrs	r3, r3, #6
 801d12c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d12e:	69fb      	ldr	r3, [r7, #28]
 801d130:	617b      	str	r3, [r7, #20]
 801d132:	683b      	ldr	r3, [r7, #0]
 801d134:	b29a      	uxth	r2, r3
 801d136:	69fb      	ldr	r3, [r7, #28]
 801d138:	b29b      	uxth	r3, r3
 801d13a:	4619      	mov	r1, r3
 801d13c:	0149      	lsls	r1, r1, #5
 801d13e:	1ac9      	subs	r1, r1, r3
 801d140:	0089      	lsls	r1, r1, #2
 801d142:	440b      	add	r3, r1
 801d144:	00db      	lsls	r3, r3, #3
 801d146:	b29b      	uxth	r3, r3
 801d148:	1ad3      	subs	r3, r2, r3
 801d14a:	b29b      	uxth	r3, r3
 801d14c:	b21b      	sxth	r3, r3
 801d14e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d150:	f107 030c 	add.w	r3, r7, #12
 801d154:	2200      	movs	r2, #0
 801d156:	601a      	str	r2, [r3, #0]
 801d158:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d15a:	4b0d      	ldr	r3, [pc, #52]	; (801d190 <SysTimeFromMs+0x78>)
 801d15c:	68db      	ldr	r3, [r3, #12]
 801d15e:	4798      	blx	r3
 801d160:	4603      	mov	r3, r0
 801d162:	b21b      	sxth	r3, r3
 801d164:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d166:	4b0a      	ldr	r3, [pc, #40]	; (801d190 <SysTimeFromMs+0x78>)
 801d168:	685b      	ldr	r3, [r3, #4]
 801d16a:	4798      	blx	r3
 801d16c:	4603      	mov	r3, r0
 801d16e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d170:	6878      	ldr	r0, [r7, #4]
 801d172:	693b      	ldr	r3, [r7, #16]
 801d174:	9300      	str	r3, [sp, #0]
 801d176:	68fb      	ldr	r3, [r7, #12]
 801d178:	f107 0214 	add.w	r2, r7, #20
 801d17c:	ca06      	ldmia	r2, {r1, r2}
 801d17e:	f7ff feab 	bl	801ced8 <SysTimeAdd>
}
 801d182:	6878      	ldr	r0, [r7, #4]
 801d184:	3720      	adds	r7, #32
 801d186:	46bd      	mov	sp, r7
 801d188:	bd80      	pop	{r7, pc}
 801d18a:	bf00      	nop
 801d18c:	10624dd3 	.word	0x10624dd3
 801d190:	0801f010 	.word	0x0801f010

0801d194 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d194:	b480      	push	{r7}
 801d196:	b085      	sub	sp, #20
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d19c:	2300      	movs	r3, #0
 801d19e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d1a0:	e00e      	b.n	801d1c0 <ee_skip_atoi+0x2c>
 801d1a2:	68fa      	ldr	r2, [r7, #12]
 801d1a4:	4613      	mov	r3, r2
 801d1a6:	009b      	lsls	r3, r3, #2
 801d1a8:	4413      	add	r3, r2
 801d1aa:	005b      	lsls	r3, r3, #1
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	1c59      	adds	r1, r3, #1
 801d1b4:	687a      	ldr	r2, [r7, #4]
 801d1b6:	6011      	str	r1, [r2, #0]
 801d1b8:	781b      	ldrb	r3, [r3, #0]
 801d1ba:	4403      	add	r3, r0
 801d1bc:	3b30      	subs	r3, #48	; 0x30
 801d1be:	60fb      	str	r3, [r7, #12]
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	781b      	ldrb	r3, [r3, #0]
 801d1c6:	2b2f      	cmp	r3, #47	; 0x2f
 801d1c8:	d904      	bls.n	801d1d4 <ee_skip_atoi+0x40>
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	781b      	ldrb	r3, [r3, #0]
 801d1d0:	2b39      	cmp	r3, #57	; 0x39
 801d1d2:	d9e6      	bls.n	801d1a2 <ee_skip_atoi+0xe>
  return i;
 801d1d4:	68fb      	ldr	r3, [r7, #12]
}
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	3714      	adds	r7, #20
 801d1da:	46bd      	mov	sp, r7
 801d1dc:	bc80      	pop	{r7}
 801d1de:	4770      	bx	lr

0801d1e0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d1e0:	b480      	push	{r7}
 801d1e2:	b099      	sub	sp, #100	; 0x64
 801d1e4:	af00      	add	r7, sp, #0
 801d1e6:	60f8      	str	r0, [r7, #12]
 801d1e8:	60b9      	str	r1, [r7, #8]
 801d1ea:	607a      	str	r2, [r7, #4]
 801d1ec:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d1ee:	4b71      	ldr	r3, [pc, #452]	; (801d3b4 <ee_number+0x1d4>)
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d1f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d002      	beq.n	801d204 <ee_number+0x24>
 801d1fe:	4b6e      	ldr	r3, [pc, #440]	; (801d3b8 <ee_number+0x1d8>)
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d204:	683b      	ldr	r3, [r7, #0]
 801d206:	2b01      	cmp	r3, #1
 801d208:	dd02      	ble.n	801d210 <ee_number+0x30>
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	2b24      	cmp	r3, #36	; 0x24
 801d20e:	dd01      	ble.n	801d214 <ee_number+0x34>
 801d210:	2300      	movs	r3, #0
 801d212:	e0ca      	b.n	801d3aa <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d216:	f003 0301 	and.w	r3, r3, #1
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d001      	beq.n	801d222 <ee_number+0x42>
 801d21e:	2330      	movs	r3, #48	; 0x30
 801d220:	e000      	b.n	801d224 <ee_number+0x44>
 801d222:	2320      	movs	r3, #32
 801d224:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d228:	2300      	movs	r3, #0
 801d22a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d22e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d230:	f003 0302 	and.w	r3, r3, #2
 801d234:	2b00      	cmp	r3, #0
 801d236:	d00b      	beq.n	801d250 <ee_number+0x70>
  {
    if (num < 0)
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	da08      	bge.n	801d250 <ee_number+0x70>
    {
      sign = '-';
 801d23e:	232d      	movs	r3, #45	; 0x2d
 801d240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	425b      	negs	r3, r3
 801d248:	607b      	str	r3, [r7, #4]
      size--;
 801d24a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d24c:	3b01      	subs	r3, #1
 801d24e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d250:	2300      	movs	r3, #0
 801d252:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	2b00      	cmp	r3, #0
 801d258:	d11e      	bne.n	801d298 <ee_number+0xb8>
    tmp[i++] = '0';
 801d25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d25c:	1c5a      	adds	r2, r3, #1
 801d25e:	657a      	str	r2, [r7, #84]	; 0x54
 801d260:	3360      	adds	r3, #96	; 0x60
 801d262:	443b      	add	r3, r7
 801d264:	2230      	movs	r2, #48	; 0x30
 801d266:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d26a:	e018      	b.n	801d29e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	683a      	ldr	r2, [r7, #0]
 801d270:	fbb3 f1f2 	udiv	r1, r3, r2
 801d274:	fb01 f202 	mul.w	r2, r1, r2
 801d278:	1a9b      	subs	r3, r3, r2
 801d27a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d27c:	441a      	add	r2, r3
 801d27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d280:	1c59      	adds	r1, r3, #1
 801d282:	6579      	str	r1, [r7, #84]	; 0x54
 801d284:	7812      	ldrb	r2, [r2, #0]
 801d286:	3360      	adds	r3, #96	; 0x60
 801d288:	443b      	add	r3, r7
 801d28a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d28e:	687a      	ldr	r2, [r7, #4]
 801d290:	683b      	ldr	r3, [r7, #0]
 801d292:	fbb2 f3f3 	udiv	r3, r2, r3
 801d296:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d1e6      	bne.n	801d26c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d29e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d2a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2a2:	429a      	cmp	r2, r3
 801d2a4:	dd01      	ble.n	801d2aa <ee_number+0xca>
 801d2a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d2a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d2aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2ae:	1ad3      	subs	r3, r2, r3
 801d2b0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d2b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2b4:	f003 0301 	and.w	r3, r3, #1
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d112      	bne.n	801d2e2 <ee_number+0x102>
 801d2bc:	e00c      	b.n	801d2d8 <ee_number+0xf8>
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	1c5a      	adds	r2, r3, #1
 801d2c2:	60fa      	str	r2, [r7, #12]
 801d2c4:	2220      	movs	r2, #32
 801d2c6:	701a      	strb	r2, [r3, #0]
 801d2c8:	68bb      	ldr	r3, [r7, #8]
 801d2ca:	3b01      	subs	r3, #1
 801d2cc:	60bb      	str	r3, [r7, #8]
 801d2ce:	68bb      	ldr	r3, [r7, #8]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d101      	bne.n	801d2d8 <ee_number+0xf8>
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	e068      	b.n	801d3aa <ee_number+0x1ca>
 801d2d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2da:	1e5a      	subs	r2, r3, #1
 801d2dc:	66ba      	str	r2, [r7, #104]	; 0x68
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	dced      	bgt.n	801d2be <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d2e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d01b      	beq.n	801d322 <ee_number+0x142>
 801d2ea:	68fb      	ldr	r3, [r7, #12]
 801d2ec:	1c5a      	adds	r2, r3, #1
 801d2ee:	60fa      	str	r2, [r7, #12]
 801d2f0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d2f4:	701a      	strb	r2, [r3, #0]
 801d2f6:	68bb      	ldr	r3, [r7, #8]
 801d2f8:	3b01      	subs	r3, #1
 801d2fa:	60bb      	str	r3, [r7, #8]
 801d2fc:	68bb      	ldr	r3, [r7, #8]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d10f      	bne.n	801d322 <ee_number+0x142>
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	e051      	b.n	801d3aa <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	1c5a      	adds	r2, r3, #1
 801d30a:	60fa      	str	r2, [r7, #12]
 801d30c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d310:	701a      	strb	r2, [r3, #0]
 801d312:	68bb      	ldr	r3, [r7, #8]
 801d314:	3b01      	subs	r3, #1
 801d316:	60bb      	str	r3, [r7, #8]
 801d318:	68bb      	ldr	r3, [r7, #8]
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d101      	bne.n	801d322 <ee_number+0x142>
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	e043      	b.n	801d3aa <ee_number+0x1ca>
 801d322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d324:	1e5a      	subs	r2, r3, #1
 801d326:	66ba      	str	r2, [r7, #104]	; 0x68
 801d328:	2b00      	cmp	r3, #0
 801d32a:	dcec      	bgt.n	801d306 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d32c:	e00c      	b.n	801d348 <ee_number+0x168>
 801d32e:	68fb      	ldr	r3, [r7, #12]
 801d330:	1c5a      	adds	r2, r3, #1
 801d332:	60fa      	str	r2, [r7, #12]
 801d334:	2230      	movs	r2, #48	; 0x30
 801d336:	701a      	strb	r2, [r3, #0]
 801d338:	68bb      	ldr	r3, [r7, #8]
 801d33a:	3b01      	subs	r3, #1
 801d33c:	60bb      	str	r3, [r7, #8]
 801d33e:	68bb      	ldr	r3, [r7, #8]
 801d340:	2b00      	cmp	r3, #0
 801d342:	d101      	bne.n	801d348 <ee_number+0x168>
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	e030      	b.n	801d3aa <ee_number+0x1ca>
 801d348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d34a:	1e5a      	subs	r2, r3, #1
 801d34c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d34e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d350:	429a      	cmp	r2, r3
 801d352:	dbec      	blt.n	801d32e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d354:	e010      	b.n	801d378 <ee_number+0x198>
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	1c5a      	adds	r2, r3, #1
 801d35a:	60fa      	str	r2, [r7, #12]
 801d35c:	f107 0110 	add.w	r1, r7, #16
 801d360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d362:	440a      	add	r2, r1
 801d364:	7812      	ldrb	r2, [r2, #0]
 801d366:	701a      	strb	r2, [r3, #0]
 801d368:	68bb      	ldr	r3, [r7, #8]
 801d36a:	3b01      	subs	r3, #1
 801d36c:	60bb      	str	r3, [r7, #8]
 801d36e:	68bb      	ldr	r3, [r7, #8]
 801d370:	2b00      	cmp	r3, #0
 801d372:	d101      	bne.n	801d378 <ee_number+0x198>
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	e018      	b.n	801d3aa <ee_number+0x1ca>
 801d378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d37a:	1e5a      	subs	r2, r3, #1
 801d37c:	657a      	str	r2, [r7, #84]	; 0x54
 801d37e:	2b00      	cmp	r3, #0
 801d380:	dce9      	bgt.n	801d356 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d382:	e00c      	b.n	801d39e <ee_number+0x1be>
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	1c5a      	adds	r2, r3, #1
 801d388:	60fa      	str	r2, [r7, #12]
 801d38a:	2220      	movs	r2, #32
 801d38c:	701a      	strb	r2, [r3, #0]
 801d38e:	68bb      	ldr	r3, [r7, #8]
 801d390:	3b01      	subs	r3, #1
 801d392:	60bb      	str	r3, [r7, #8]
 801d394:	68bb      	ldr	r3, [r7, #8]
 801d396:	2b00      	cmp	r3, #0
 801d398:	d101      	bne.n	801d39e <ee_number+0x1be>
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	e005      	b.n	801d3aa <ee_number+0x1ca>
 801d39e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d3a0:	1e5a      	subs	r2, r3, #1
 801d3a2:	66ba      	str	r2, [r7, #104]	; 0x68
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	dced      	bgt.n	801d384 <ee_number+0x1a4>

  return str;
 801d3a8:	68fb      	ldr	r3, [r7, #12]
}
 801d3aa:	4618      	mov	r0, r3
 801d3ac:	3764      	adds	r7, #100	; 0x64
 801d3ae:	46bd      	mov	sp, r7
 801d3b0:	bc80      	pop	{r7}
 801d3b2:	4770      	bx	lr
 801d3b4:	20000164 	.word	0x20000164
 801d3b8:	20000168 	.word	0x20000168

0801d3bc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d3bc:	b580      	push	{r7, lr}
 801d3be:	b092      	sub	sp, #72	; 0x48
 801d3c0:	af04      	add	r7, sp, #16
 801d3c2:	60f8      	str	r0, [r7, #12]
 801d3c4:	60b9      	str	r1, [r7, #8]
 801d3c6:	607a      	str	r2, [r7, #4]
 801d3c8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d3ca:	68bb      	ldr	r3, [r7, #8]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	dc01      	bgt.n	801d3d4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d3d0:	2300      	movs	r3, #0
 801d3d2:	e13e      	b.n	801d652 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d3d8:	e128      	b.n	801d62c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d3da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d3dc:	68fb      	ldr	r3, [r7, #12]
 801d3de:	1ad2      	subs	r2, r2, r3
 801d3e0:	68bb      	ldr	r3, [r7, #8]
 801d3e2:	3b01      	subs	r3, #1
 801d3e4:	429a      	cmp	r2, r3
 801d3e6:	f280 812e 	bge.w	801d646 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	781b      	ldrb	r3, [r3, #0]
 801d3ee:	2b25      	cmp	r3, #37	; 0x25
 801d3f0:	d006      	beq.n	801d400 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d3f2:	687a      	ldr	r2, [r7, #4]
 801d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3f6:	1c59      	adds	r1, r3, #1
 801d3f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d3fa:	7812      	ldrb	r2, [r2, #0]
 801d3fc:	701a      	strb	r2, [r3, #0]
      continue;
 801d3fe:	e112      	b.n	801d626 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801d400:	2300      	movs	r3, #0
 801d402:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	3301      	adds	r3, #1
 801d408:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	781b      	ldrb	r3, [r3, #0]
 801d40e:	2b30      	cmp	r3, #48	; 0x30
 801d410:	d103      	bne.n	801d41a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d412:	6a3b      	ldr	r3, [r7, #32]
 801d414:	f043 0301 	orr.w	r3, r3, #1
 801d418:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801d41a:	f04f 33ff 	mov.w	r3, #4294967295
 801d41e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	781b      	ldrb	r3, [r3, #0]
 801d424:	2b2f      	cmp	r3, #47	; 0x2f
 801d426:	d908      	bls.n	801d43a <tiny_vsnprintf_like+0x7e>
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	781b      	ldrb	r3, [r3, #0]
 801d42c:	2b39      	cmp	r3, #57	; 0x39
 801d42e:	d804      	bhi.n	801d43a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801d430:	1d3b      	adds	r3, r7, #4
 801d432:	4618      	mov	r0, r3
 801d434:	f7ff feae 	bl	801d194 <ee_skip_atoi>
 801d438:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801d43a:	f04f 33ff 	mov.w	r3, #4294967295
 801d43e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801d440:	f04f 33ff 	mov.w	r3, #4294967295
 801d444:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801d446:	230a      	movs	r3, #10
 801d448:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	781b      	ldrb	r3, [r3, #0]
 801d44e:	3b58      	subs	r3, #88	; 0x58
 801d450:	2b20      	cmp	r3, #32
 801d452:	f200 8094 	bhi.w	801d57e <tiny_vsnprintf_like+0x1c2>
 801d456:	a201      	add	r2, pc, #4	; (adr r2, 801d45c <tiny_vsnprintf_like+0xa0>)
 801d458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d45c:	0801d567 	.word	0x0801d567
 801d460:	0801d57f 	.word	0x0801d57f
 801d464:	0801d57f 	.word	0x0801d57f
 801d468:	0801d57f 	.word	0x0801d57f
 801d46c:	0801d57f 	.word	0x0801d57f
 801d470:	0801d57f 	.word	0x0801d57f
 801d474:	0801d57f 	.word	0x0801d57f
 801d478:	0801d57f 	.word	0x0801d57f
 801d47c:	0801d57f 	.word	0x0801d57f
 801d480:	0801d57f 	.word	0x0801d57f
 801d484:	0801d57f 	.word	0x0801d57f
 801d488:	0801d4eb 	.word	0x0801d4eb
 801d48c:	0801d575 	.word	0x0801d575
 801d490:	0801d57f 	.word	0x0801d57f
 801d494:	0801d57f 	.word	0x0801d57f
 801d498:	0801d57f 	.word	0x0801d57f
 801d49c:	0801d57f 	.word	0x0801d57f
 801d4a0:	0801d575 	.word	0x0801d575
 801d4a4:	0801d57f 	.word	0x0801d57f
 801d4a8:	0801d57f 	.word	0x0801d57f
 801d4ac:	0801d57f 	.word	0x0801d57f
 801d4b0:	0801d57f 	.word	0x0801d57f
 801d4b4:	0801d57f 	.word	0x0801d57f
 801d4b8:	0801d57f 	.word	0x0801d57f
 801d4bc:	0801d57f 	.word	0x0801d57f
 801d4c0:	0801d57f 	.word	0x0801d57f
 801d4c4:	0801d57f 	.word	0x0801d57f
 801d4c8:	0801d50b 	.word	0x0801d50b
 801d4cc:	0801d57f 	.word	0x0801d57f
 801d4d0:	0801d5cb 	.word	0x0801d5cb
 801d4d4:	0801d57f 	.word	0x0801d57f
 801d4d8:	0801d57f 	.word	0x0801d57f
 801d4dc:	0801d56f 	.word	0x0801d56f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4e2:	1c5a      	adds	r2, r3, #1
 801d4e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d4e6:	2220      	movs	r2, #32
 801d4e8:	701a      	strb	r2, [r3, #0]
 801d4ea:	69fb      	ldr	r3, [r7, #28]
 801d4ec:	3b01      	subs	r3, #1
 801d4ee:	61fb      	str	r3, [r7, #28]
 801d4f0:	69fb      	ldr	r3, [r7, #28]
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	dcf4      	bgt.n	801d4e0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d4f6:	683b      	ldr	r3, [r7, #0]
 801d4f8:	1d1a      	adds	r2, r3, #4
 801d4fa:	603a      	str	r2, [r7, #0]
 801d4fc:	6819      	ldr	r1, [r3, #0]
 801d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d500:	1c5a      	adds	r2, r3, #1
 801d502:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d504:	b2ca      	uxtb	r2, r1
 801d506:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d508:	e08d      	b.n	801d626 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801d50a:	683b      	ldr	r3, [r7, #0]
 801d50c:	1d1a      	adds	r2, r3, #4
 801d50e:	603a      	str	r2, [r7, #0]
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d516:	2b00      	cmp	r3, #0
 801d518:	d101      	bne.n	801d51e <tiny_vsnprintf_like+0x162>
 801d51a:	4b50      	ldr	r3, [pc, #320]	; (801d65c <tiny_vsnprintf_like+0x2a0>)
 801d51c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d51e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d520:	f7e2 fe2a 	bl	8000178 <strlen>
 801d524:	4603      	mov	r3, r0
 801d526:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d528:	e004      	b.n	801d534 <tiny_vsnprintf_like+0x178>
 801d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d52c:	1c5a      	adds	r2, r3, #1
 801d52e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d530:	2220      	movs	r2, #32
 801d532:	701a      	strb	r2, [r3, #0]
 801d534:	69fb      	ldr	r3, [r7, #28]
 801d536:	1e5a      	subs	r2, r3, #1
 801d538:	61fa      	str	r2, [r7, #28]
 801d53a:	693a      	ldr	r2, [r7, #16]
 801d53c:	429a      	cmp	r2, r3
 801d53e:	dbf4      	blt.n	801d52a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d540:	2300      	movs	r3, #0
 801d542:	62bb      	str	r3, [r7, #40]	; 0x28
 801d544:	e00a      	b.n	801d55c <tiny_vsnprintf_like+0x1a0>
 801d546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d548:	1c53      	adds	r3, r2, #1
 801d54a:	627b      	str	r3, [r7, #36]	; 0x24
 801d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d54e:	1c59      	adds	r1, r3, #1
 801d550:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d552:	7812      	ldrb	r2, [r2, #0]
 801d554:	701a      	strb	r2, [r3, #0]
 801d556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d558:	3301      	adds	r3, #1
 801d55a:	62bb      	str	r3, [r7, #40]	; 0x28
 801d55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d55e:	693b      	ldr	r3, [r7, #16]
 801d560:	429a      	cmp	r2, r3
 801d562:	dbf0      	blt.n	801d546 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d564:	e05f      	b.n	801d626 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801d566:	6a3b      	ldr	r3, [r7, #32]
 801d568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d56c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d56e:	2310      	movs	r3, #16
 801d570:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d572:	e02b      	b.n	801d5cc <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d574:	6a3b      	ldr	r3, [r7, #32]
 801d576:	f043 0302 	orr.w	r3, r3, #2
 801d57a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d57c:	e025      	b.n	801d5ca <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	781b      	ldrb	r3, [r3, #0]
 801d582:	2b25      	cmp	r3, #37	; 0x25
 801d584:	d004      	beq.n	801d590 <tiny_vsnprintf_like+0x1d4>
 801d586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d588:	1c5a      	adds	r2, r3, #1
 801d58a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d58c:	2225      	movs	r2, #37	; 0x25
 801d58e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	1ad2      	subs	r2, r2, r3
 801d596:	68bb      	ldr	r3, [r7, #8]
 801d598:	3b01      	subs	r3, #1
 801d59a:	429a      	cmp	r2, r3
 801d59c:	da16      	bge.n	801d5cc <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	781b      	ldrb	r3, [r3, #0]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d006      	beq.n	801d5b4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d5a6:	687a      	ldr	r2, [r7, #4]
 801d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5aa:	1c59      	adds	r1, r3, #1
 801d5ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d5ae:	7812      	ldrb	r2, [r2, #0]
 801d5b0:	701a      	strb	r2, [r3, #0]
 801d5b2:	e002      	b.n	801d5ba <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	3b01      	subs	r3, #1
 801d5b8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d5ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	1ad2      	subs	r2, r2, r3
 801d5c0:	68bb      	ldr	r3, [r7, #8]
 801d5c2:	3b01      	subs	r3, #1
 801d5c4:	429a      	cmp	r2, r3
 801d5c6:	db2d      	blt.n	801d624 <tiny_vsnprintf_like+0x268>
 801d5c8:	e000      	b.n	801d5cc <tiny_vsnprintf_like+0x210>
        break;
 801d5ca:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d5cc:	697b      	ldr	r3, [r7, #20]
 801d5ce:	2b6c      	cmp	r3, #108	; 0x6c
 801d5d0:	d105      	bne.n	801d5de <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801d5d2:	683b      	ldr	r3, [r7, #0]
 801d5d4:	1d1a      	adds	r2, r3, #4
 801d5d6:	603a      	str	r2, [r7, #0]
 801d5d8:	681b      	ldr	r3, [r3, #0]
 801d5da:	637b      	str	r3, [r7, #52]	; 0x34
 801d5dc:	e00f      	b.n	801d5fe <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801d5de:	6a3b      	ldr	r3, [r7, #32]
 801d5e0:	f003 0302 	and.w	r3, r3, #2
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	d005      	beq.n	801d5f4 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801d5e8:	683b      	ldr	r3, [r7, #0]
 801d5ea:	1d1a      	adds	r2, r3, #4
 801d5ec:	603a      	str	r2, [r7, #0]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	637b      	str	r3, [r7, #52]	; 0x34
 801d5f2:	e004      	b.n	801d5fe <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801d5f4:	683b      	ldr	r3, [r7, #0]
 801d5f6:	1d1a      	adds	r2, r3, #4
 801d5f8:	603a      	str	r2, [r7, #0]
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d5fe:	68bb      	ldr	r3, [r7, #8]
 801d600:	1e5a      	subs	r2, r3, #1
 801d602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	1acb      	subs	r3, r1, r3
 801d608:	1ad1      	subs	r1, r2, r3
 801d60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d60c:	6a3b      	ldr	r3, [r7, #32]
 801d60e:	9302      	str	r3, [sp, #8]
 801d610:	69bb      	ldr	r3, [r7, #24]
 801d612:	9301      	str	r3, [sp, #4]
 801d614:	69fb      	ldr	r3, [r7, #28]
 801d616:	9300      	str	r3, [sp, #0]
 801d618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d61a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d61c:	f7ff fde0 	bl	801d1e0 <ee_number>
 801d620:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d622:	e000      	b.n	801d626 <tiny_vsnprintf_like+0x26a>
        continue;
 801d624:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	3301      	adds	r3, #1
 801d62a:	607b      	str	r3, [r7, #4]
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	781b      	ldrb	r3, [r3, #0]
 801d630:	2b00      	cmp	r3, #0
 801d632:	f47f aed2 	bne.w	801d3da <tiny_vsnprintf_like+0x1e>
 801d636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	1ad2      	subs	r2, r2, r3
 801d63c:	68bb      	ldr	r3, [r7, #8]
 801d63e:	3b01      	subs	r3, #1
 801d640:	429a      	cmp	r2, r3
 801d642:	f6bf aeca 	bge.w	801d3da <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801d646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d648:	2200      	movs	r2, #0
 801d64a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d64e:	68fb      	ldr	r3, [r7, #12]
 801d650:	1ad3      	subs	r3, r2, r3
}
 801d652:	4618      	mov	r0, r3
 801d654:	3738      	adds	r7, #56	; 0x38
 801d656:	46bd      	mov	sp, r7
 801d658:	bd80      	pop	{r7, pc}
 801d65a:	bf00      	nop
 801d65c:	0801ef24 	.word	0x0801ef24

0801d660 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801d660:	b580      	push	{r7, lr}
 801d662:	b090      	sub	sp, #64	; 0x40
 801d664:	af00      	add	r7, sp, #0
 801d666:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801d668:	4b73      	ldr	r3, [pc, #460]	; (801d838 <UTIL_SEQ_Run+0x1d8>)
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801d66e:	4b72      	ldr	r3, [pc, #456]	; (801d838 <UTIL_SEQ_Run+0x1d8>)
 801d670:	681a      	ldr	r2, [r3, #0]
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	4013      	ands	r3, r2
 801d676:	4a70      	ldr	r2, [pc, #448]	; (801d838 <UTIL_SEQ_Run+0x1d8>)
 801d678:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801d67a:	4b70      	ldr	r3, [pc, #448]	; (801d83c <UTIL_SEQ_Run+0x1dc>)
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d680:	4b6f      	ldr	r3, [pc, #444]	; (801d840 <UTIL_SEQ_Run+0x1e0>)
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d686:	4b6f      	ldr	r3, [pc, #444]	; (801d844 <UTIL_SEQ_Run+0x1e4>)
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801d68c:	4b6e      	ldr	r3, [pc, #440]	; (801d848 <UTIL_SEQ_Run+0x1e8>)
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d692:	e08d      	b.n	801d7b0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801d694:	2300      	movs	r3, #0
 801d696:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d698:	e002      	b.n	801d6a0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801d69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d69c:	3301      	adds	r3, #1
 801d69e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d6a0:	4a6a      	ldr	r2, [pc, #424]	; (801d84c <UTIL_SEQ_Run+0x1ec>)
 801d6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6aa:	401a      	ands	r2, r3
 801d6ac:	4b62      	ldr	r3, [pc, #392]	; (801d838 <UTIL_SEQ_Run+0x1d8>)
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	4013      	ands	r3, r2
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d0f1      	beq.n	801d69a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801d6b6:	4a65      	ldr	r2, [pc, #404]	; (801d84c <UTIL_SEQ_Run+0x1ec>)
 801d6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6ba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6c0:	401a      	ands	r2, r3
 801d6c2:	4b5d      	ldr	r3, [pc, #372]	; (801d838 <UTIL_SEQ_Run+0x1d8>)
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	4013      	ands	r3, r2
 801d6c8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801d6ca:	4a60      	ldr	r2, [pc, #384]	; (801d84c <UTIL_SEQ_Run+0x1ec>)
 801d6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6ce:	00db      	lsls	r3, r3, #3
 801d6d0:	4413      	add	r3, r2
 801d6d2:	685a      	ldr	r2, [r3, #4]
 801d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6d6:	4013      	ands	r3, r2
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	d106      	bne.n	801d6ea <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801d6dc:	4a5b      	ldr	r2, [pc, #364]	; (801d84c <UTIL_SEQ_Run+0x1ec>)
 801d6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6e0:	00db      	lsls	r3, r3, #3
 801d6e2:	4413      	add	r3, r2
 801d6e4:	f04f 32ff 	mov.w	r2, #4294967295
 801d6e8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801d6ea:	4a58      	ldr	r2, [pc, #352]	; (801d84c <UTIL_SEQ_Run+0x1ec>)
 801d6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6ee:	00db      	lsls	r3, r3, #3
 801d6f0:	4413      	add	r3, r2
 801d6f2:	685a      	ldr	r2, [r3, #4]
 801d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6f6:	4013      	ands	r3, r2
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	f000 f907 	bl	801d90c <SEQ_BitPosition>
 801d6fe:	4603      	mov	r3, r0
 801d700:	461a      	mov	r2, r3
 801d702:	4b53      	ldr	r3, [pc, #332]	; (801d850 <UTIL_SEQ_Run+0x1f0>)
 801d704:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801d706:	4a51      	ldr	r2, [pc, #324]	; (801d84c <UTIL_SEQ_Run+0x1ec>)
 801d708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d70a:	00db      	lsls	r3, r3, #3
 801d70c:	4413      	add	r3, r2
 801d70e:	685a      	ldr	r2, [r3, #4]
 801d710:	4b4f      	ldr	r3, [pc, #316]	; (801d850 <UTIL_SEQ_Run+0x1f0>)
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	2101      	movs	r1, #1
 801d716:	fa01 f303 	lsl.w	r3, r1, r3
 801d71a:	43db      	mvns	r3, r3
 801d71c:	401a      	ands	r2, r3
 801d71e:	494b      	ldr	r1, [pc, #300]	; (801d84c <UTIL_SEQ_Run+0x1ec>)
 801d720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d722:	00db      	lsls	r3, r3, #3
 801d724:	440b      	add	r3, r1
 801d726:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d728:	f3ef 8310 	mrs	r3, PRIMASK
 801d72c:	61bb      	str	r3, [r7, #24]
  return(result);
 801d72e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d730:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801d732:	b672      	cpsid	i
}
 801d734:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801d736:	4b46      	ldr	r3, [pc, #280]	; (801d850 <UTIL_SEQ_Run+0x1f0>)
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	2201      	movs	r2, #1
 801d73c:	fa02 f303 	lsl.w	r3, r2, r3
 801d740:	43da      	mvns	r2, r3
 801d742:	4b3e      	ldr	r3, [pc, #248]	; (801d83c <UTIL_SEQ_Run+0x1dc>)
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	4013      	ands	r3, r2
 801d748:	4a3c      	ldr	r2, [pc, #240]	; (801d83c <UTIL_SEQ_Run+0x1dc>)
 801d74a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d74c:	2301      	movs	r3, #1
 801d74e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d750:	e013      	b.n	801d77a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801d752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d754:	3b01      	subs	r3, #1
 801d756:	4a3d      	ldr	r2, [pc, #244]	; (801d84c <UTIL_SEQ_Run+0x1ec>)
 801d758:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801d75c:	4b3c      	ldr	r3, [pc, #240]	; (801d850 <UTIL_SEQ_Run+0x1f0>)
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	2201      	movs	r2, #1
 801d762:	fa02 f303 	lsl.w	r3, r2, r3
 801d766:	43da      	mvns	r2, r3
 801d768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d76a:	3b01      	subs	r3, #1
 801d76c:	400a      	ands	r2, r1
 801d76e:	4937      	ldr	r1, [pc, #220]	; (801d84c <UTIL_SEQ_Run+0x1ec>)
 801d770:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d776:	3b01      	subs	r3, #1
 801d778:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d1e8      	bne.n	801d752 <UTIL_SEQ_Run+0xf2>
 801d780:	6a3b      	ldr	r3, [r7, #32]
 801d782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d784:	697b      	ldr	r3, [r7, #20]
 801d786:	f383 8810 	msr	PRIMASK, r3
}
 801d78a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801d78c:	4b30      	ldr	r3, [pc, #192]	; (801d850 <UTIL_SEQ_Run+0x1f0>)
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	4a30      	ldr	r2, [pc, #192]	; (801d854 <UTIL_SEQ_Run+0x1f4>)
 801d792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d796:	4798      	blx	r3

    local_taskset = TaskSet;
 801d798:	4b28      	ldr	r3, [pc, #160]	; (801d83c <UTIL_SEQ_Run+0x1dc>)
 801d79a:	681b      	ldr	r3, [r3, #0]
 801d79c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801d79e:	4b28      	ldr	r3, [pc, #160]	; (801d840 <UTIL_SEQ_Run+0x1e0>)
 801d7a0:	681b      	ldr	r3, [r3, #0]
 801d7a2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801d7a4:	4b27      	ldr	r3, [pc, #156]	; (801d844 <UTIL_SEQ_Run+0x1e4>)
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801d7aa:	4b27      	ldr	r3, [pc, #156]	; (801d848 <UTIL_SEQ_Run+0x1e8>)
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d7b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7b4:	401a      	ands	r2, r3
 801d7b6:	4b20      	ldr	r3, [pc, #128]	; (801d838 <UTIL_SEQ_Run+0x1d8>)
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	4013      	ands	r3, r2
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d005      	beq.n	801d7cc <UTIL_SEQ_Run+0x16c>
 801d7c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7c4:	4013      	ands	r3, r2
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	f43f af64 	beq.w	801d694 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801d7cc:	4b20      	ldr	r3, [pc, #128]	; (801d850 <UTIL_SEQ_Run+0x1f0>)
 801d7ce:	f04f 32ff 	mov.w	r2, #4294967295
 801d7d2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801d7d4:	f000 f88e 	bl	801d8f4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7d8:	f3ef 8310 	mrs	r3, PRIMASK
 801d7dc:	613b      	str	r3, [r7, #16]
  return(result);
 801d7de:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801d7e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d7e2:	b672      	cpsid	i
}
 801d7e4:	bf00      	nop
  local_taskset = TaskSet;
 801d7e6:	4b15      	ldr	r3, [pc, #84]	; (801d83c <UTIL_SEQ_Run+0x1dc>)
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d7ec:	4b14      	ldr	r3, [pc, #80]	; (801d840 <UTIL_SEQ_Run+0x1e0>)
 801d7ee:	681b      	ldr	r3, [r3, #0]
 801d7f0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d7f2:	4b14      	ldr	r3, [pc, #80]	; (801d844 <UTIL_SEQ_Run+0x1e4>)
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801d7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7fc:	401a      	ands	r2, r3
 801d7fe:	4b0e      	ldr	r3, [pc, #56]	; (801d838 <UTIL_SEQ_Run+0x1d8>)
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	4013      	ands	r3, r2
 801d804:	2b00      	cmp	r3, #0
 801d806:	d107      	bne.n	801d818 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801d808:	4b0f      	ldr	r3, [pc, #60]	; (801d848 <UTIL_SEQ_Run+0x1e8>)
 801d80a:	681a      	ldr	r2, [r3, #0]
 801d80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d80e:	4013      	ands	r3, r2
 801d810:	2b00      	cmp	r3, #0
 801d812:	d101      	bne.n	801d818 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801d814:	f7e5 f81a 	bl	800284c <UTIL_SEQ_Idle>
 801d818:	69fb      	ldr	r3, [r7, #28]
 801d81a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	f383 8810 	msr	PRIMASK, r3
}
 801d822:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801d824:	f000 f86c 	bl	801d900 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801d828:	4a03      	ldr	r2, [pc, #12]	; (801d838 <UTIL_SEQ_Run+0x1d8>)
 801d82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d82c:	6013      	str	r3, [r2, #0]

  return;
 801d82e:	bf00      	nop
}
 801d830:	3740      	adds	r7, #64	; 0x40
 801d832:	46bd      	mov	sp, r7
 801d834:	bd80      	pop	{r7, pc}
 801d836:	bf00      	nop
 801d838:	20000170 	.word	0x20000170
 801d83c:	20001f98 	.word	0x20001f98
 801d840:	20001f9c 	.word	0x20001f9c
 801d844:	2000016c 	.word	0x2000016c
 801d848:	20001fa0 	.word	0x20001fa0
 801d84c:	20001fb8 	.word	0x20001fb8
 801d850:	20001fa4 	.word	0x20001fa4
 801d854:	20001fa8 	.word	0x20001fa8

0801d858 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801d858:	b580      	push	{r7, lr}
 801d85a:	b088      	sub	sp, #32
 801d85c:	af00      	add	r7, sp, #0
 801d85e:	60f8      	str	r0, [r7, #12]
 801d860:	60b9      	str	r1, [r7, #8]
 801d862:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d864:	f3ef 8310 	mrs	r3, PRIMASK
 801d868:	617b      	str	r3, [r7, #20]
  return(result);
 801d86a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801d86c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d86e:	b672      	cpsid	i
}
 801d870:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801d872:	68f8      	ldr	r0, [r7, #12]
 801d874:	f000 f84a 	bl	801d90c <SEQ_BitPosition>
 801d878:	4603      	mov	r3, r0
 801d87a:	4619      	mov	r1, r3
 801d87c:	4a06      	ldr	r2, [pc, #24]	; (801d898 <UTIL_SEQ_RegTask+0x40>)
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d884:	69fb      	ldr	r3, [r7, #28]
 801d886:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d888:	69bb      	ldr	r3, [r7, #24]
 801d88a:	f383 8810 	msr	PRIMASK, r3
}
 801d88e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801d890:	bf00      	nop
}
 801d892:	3720      	adds	r7, #32
 801d894:	46bd      	mov	sp, r7
 801d896:	bd80      	pop	{r7, pc}
 801d898:	20001fa8 	.word	0x20001fa8

0801d89c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801d89c:	b480      	push	{r7}
 801d89e:	b087      	sub	sp, #28
 801d8a0:	af00      	add	r7, sp, #0
 801d8a2:	6078      	str	r0, [r7, #4]
 801d8a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8a6:	f3ef 8310 	mrs	r3, PRIMASK
 801d8aa:	60fb      	str	r3, [r7, #12]
  return(result);
 801d8ac:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d8ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d8b0:	b672      	cpsid	i
}
 801d8b2:	bf00      	nop

  TaskSet |= TaskId_bm;
 801d8b4:	4b0d      	ldr	r3, [pc, #52]	; (801d8ec <UTIL_SEQ_SetTask+0x50>)
 801d8b6:	681a      	ldr	r2, [r3, #0]
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	4313      	orrs	r3, r2
 801d8bc:	4a0b      	ldr	r2, [pc, #44]	; (801d8ec <UTIL_SEQ_SetTask+0x50>)
 801d8be:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801d8c0:	4a0b      	ldr	r2, [pc, #44]	; (801d8f0 <UTIL_SEQ_SetTask+0x54>)
 801d8c2:	683b      	ldr	r3, [r7, #0]
 801d8c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	431a      	orrs	r2, r3
 801d8cc:	4908      	ldr	r1, [pc, #32]	; (801d8f0 <UTIL_SEQ_SetTask+0x54>)
 801d8ce:	683b      	ldr	r3, [r7, #0]
 801d8d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801d8d4:	697b      	ldr	r3, [r7, #20]
 801d8d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8d8:	693b      	ldr	r3, [r7, #16]
 801d8da:	f383 8810 	msr	PRIMASK, r3
}
 801d8de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d8e0:	bf00      	nop
}
 801d8e2:	371c      	adds	r7, #28
 801d8e4:	46bd      	mov	sp, r7
 801d8e6:	bc80      	pop	{r7}
 801d8e8:	4770      	bx	lr
 801d8ea:	bf00      	nop
 801d8ec:	20001f98 	.word	0x20001f98
 801d8f0:	20001fb8 	.word	0x20001fb8

0801d8f4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801d8f4:	b480      	push	{r7}
 801d8f6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d8f8:	bf00      	nop
}
 801d8fa:	46bd      	mov	sp, r7
 801d8fc:	bc80      	pop	{r7}
 801d8fe:	4770      	bx	lr

0801d900 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801d900:	b480      	push	{r7}
 801d902:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d904:	bf00      	nop
}
 801d906:	46bd      	mov	sp, r7
 801d908:	bc80      	pop	{r7}
 801d90a:	4770      	bx	lr

0801d90c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801d90c:	b480      	push	{r7}
 801d90e:	b085      	sub	sp, #20
 801d910:	af00      	add	r7, sp, #0
 801d912:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801d914:	2300      	movs	r3, #0
 801d916:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801d91c:	68bb      	ldr	r3, [r7, #8]
 801d91e:	0c1b      	lsrs	r3, r3, #16
 801d920:	041b      	lsls	r3, r3, #16
 801d922:	2b00      	cmp	r3, #0
 801d924:	d104      	bne.n	801d930 <SEQ_BitPosition+0x24>
 801d926:	2310      	movs	r3, #16
 801d928:	73fb      	strb	r3, [r7, #15]
 801d92a:	68bb      	ldr	r3, [r7, #8]
 801d92c:	041b      	lsls	r3, r3, #16
 801d92e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801d930:	68bb      	ldr	r3, [r7, #8]
 801d932:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d936:	2b00      	cmp	r3, #0
 801d938:	d105      	bne.n	801d946 <SEQ_BitPosition+0x3a>
 801d93a:	7bfb      	ldrb	r3, [r7, #15]
 801d93c:	3308      	adds	r3, #8
 801d93e:	73fb      	strb	r3, [r7, #15]
 801d940:	68bb      	ldr	r3, [r7, #8]
 801d942:	021b      	lsls	r3, r3, #8
 801d944:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801d946:	68bb      	ldr	r3, [r7, #8]
 801d948:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d105      	bne.n	801d95c <SEQ_BitPosition+0x50>
 801d950:	7bfb      	ldrb	r3, [r7, #15]
 801d952:	3304      	adds	r3, #4
 801d954:	73fb      	strb	r3, [r7, #15]
 801d956:	68bb      	ldr	r3, [r7, #8]
 801d958:	011b      	lsls	r3, r3, #4
 801d95a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801d95c:	68bb      	ldr	r3, [r7, #8]
 801d95e:	0f1b      	lsrs	r3, r3, #28
 801d960:	4a06      	ldr	r2, [pc, #24]	; (801d97c <SEQ_BitPosition+0x70>)
 801d962:	5cd2      	ldrb	r2, [r2, r3]
 801d964:	7bfb      	ldrb	r3, [r7, #15]
 801d966:	4413      	add	r3, r2
 801d968:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801d96a:	7bfb      	ldrb	r3, [r7, #15]
 801d96c:	f1c3 031f 	rsb	r3, r3, #31
 801d970:	b2db      	uxtb	r3, r3
}
 801d972:	4618      	mov	r0, r3
 801d974:	3714      	adds	r7, #20
 801d976:	46bd      	mov	sp, r7
 801d978:	bc80      	pop	{r7}
 801d97a:	4770      	bx	lr
 801d97c:	0801f4dc 	.word	0x0801f4dc

0801d980 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801d980:	b580      	push	{r7, lr}
 801d982:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801d984:	4b04      	ldr	r3, [pc, #16]	; (801d998 <UTIL_TIMER_Init+0x18>)
 801d986:	2200      	movs	r2, #0
 801d988:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801d98a:	4b04      	ldr	r3, [pc, #16]	; (801d99c <UTIL_TIMER_Init+0x1c>)
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	4798      	blx	r3
 801d990:	4603      	mov	r3, r0
}
 801d992:	4618      	mov	r0, r3
 801d994:	bd80      	pop	{r7, pc}
 801d996:	bf00      	nop
 801d998:	20001fc0 	.word	0x20001fc0
 801d99c:	0801efe4 	.word	0x0801efe4

0801d9a0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801d9a0:	b580      	push	{r7, lr}
 801d9a2:	b084      	sub	sp, #16
 801d9a4:	af00      	add	r7, sp, #0
 801d9a6:	60f8      	str	r0, [r7, #12]
 801d9a8:	60b9      	str	r1, [r7, #8]
 801d9aa:	603b      	str	r3, [r7, #0]
 801d9ac:	4613      	mov	r3, r2
 801d9ae:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d023      	beq.n	801d9fe <UTIL_TIMER_Create+0x5e>
 801d9b6:	683b      	ldr	r3, [r7, #0]
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d020      	beq.n	801d9fe <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	2200      	movs	r2, #0
 801d9c0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801d9c2:	4b11      	ldr	r3, [pc, #68]	; (801da08 <UTIL_TIMER_Create+0x68>)
 801d9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9c6:	68b8      	ldr	r0, [r7, #8]
 801d9c8:	4798      	blx	r3
 801d9ca:	4602      	mov	r2, r0
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801d9d0:	68fb      	ldr	r3, [r7, #12]
 801d9d2:	2200      	movs	r2, #0
 801d9d4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801d9d6:	68fb      	ldr	r3, [r7, #12]
 801d9d8:	2200      	movs	r2, #0
 801d9da:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	2200      	movs	r2, #0
 801d9e0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801d9e2:	68fb      	ldr	r3, [r7, #12]
 801d9e4:	683a      	ldr	r2, [r7, #0]
 801d9e6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	69ba      	ldr	r2, [r7, #24]
 801d9ec:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	79fa      	ldrb	r2, [r7, #7]
 801d9f2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	2200      	movs	r2, #0
 801d9f8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801d9fa:	2300      	movs	r3, #0
 801d9fc:	e000      	b.n	801da00 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801d9fe:	2301      	movs	r3, #1
  }
}
 801da00:	4618      	mov	r0, r3
 801da02:	3710      	adds	r7, #16
 801da04:	46bd      	mov	sp, r7
 801da06:	bd80      	pop	{r7, pc}
 801da08:	0801efe4 	.word	0x0801efe4

0801da0c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801da0c:	b580      	push	{r7, lr}
 801da0e:	b08a      	sub	sp, #40	; 0x28
 801da10:	af00      	add	r7, sp, #0
 801da12:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801da14:	2300      	movs	r3, #0
 801da16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d056      	beq.n	801dace <UTIL_TIMER_Start+0xc2>
 801da20:	6878      	ldr	r0, [r7, #4]
 801da22:	f000 f9a9 	bl	801dd78 <TimerExists>
 801da26:	4603      	mov	r3, r0
 801da28:	f083 0301 	eor.w	r3, r3, #1
 801da2c:	b2db      	uxtb	r3, r3
 801da2e:	2b00      	cmp	r3, #0
 801da30:	d04d      	beq.n	801dace <UTIL_TIMER_Start+0xc2>
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	7a5b      	ldrb	r3, [r3, #9]
 801da36:	2b00      	cmp	r3, #0
 801da38:	d149      	bne.n	801dace <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da3a:	f3ef 8310 	mrs	r3, PRIMASK
 801da3e:	613b      	str	r3, [r7, #16]
  return(result);
 801da40:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801da42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801da44:	b672      	cpsid	i
}
 801da46:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	685b      	ldr	r3, [r3, #4]
 801da4c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801da4e:	4b24      	ldr	r3, [pc, #144]	; (801dae0 <UTIL_TIMER_Start+0xd4>)
 801da50:	6a1b      	ldr	r3, [r3, #32]
 801da52:	4798      	blx	r3
 801da54:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801da56:	6a3a      	ldr	r2, [r7, #32]
 801da58:	69bb      	ldr	r3, [r7, #24]
 801da5a:	429a      	cmp	r2, r3
 801da5c:	d201      	bcs.n	801da62 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801da5e:	69bb      	ldr	r3, [r7, #24]
 801da60:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	6a3a      	ldr	r2, [r7, #32]
 801da66:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	2200      	movs	r2, #0
 801da6c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	2201      	movs	r2, #1
 801da72:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	2200      	movs	r2, #0
 801da78:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801da7a:	4b1a      	ldr	r3, [pc, #104]	; (801dae4 <UTIL_TIMER_Start+0xd8>)
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	2b00      	cmp	r3, #0
 801da80:	d106      	bne.n	801da90 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801da82:	4b17      	ldr	r3, [pc, #92]	; (801dae0 <UTIL_TIMER_Start+0xd4>)
 801da84:	691b      	ldr	r3, [r3, #16]
 801da86:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801da88:	6878      	ldr	r0, [r7, #4]
 801da8a:	f000 f9eb 	bl	801de64 <TimerInsertNewHeadTimer>
 801da8e:	e017      	b.n	801dac0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801da90:	4b13      	ldr	r3, [pc, #76]	; (801dae0 <UTIL_TIMER_Start+0xd4>)
 801da92:	699b      	ldr	r3, [r3, #24]
 801da94:	4798      	blx	r3
 801da96:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	681a      	ldr	r2, [r3, #0]
 801da9c:	697b      	ldr	r3, [r7, #20]
 801da9e:	441a      	add	r2, r3
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	681a      	ldr	r2, [r3, #0]
 801daa8:	4b0e      	ldr	r3, [pc, #56]	; (801dae4 <UTIL_TIMER_Start+0xd8>)
 801daaa:	681b      	ldr	r3, [r3, #0]
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	429a      	cmp	r2, r3
 801dab0:	d203      	bcs.n	801daba <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801dab2:	6878      	ldr	r0, [r7, #4]
 801dab4:	f000 f9d6 	bl	801de64 <TimerInsertNewHeadTimer>
 801dab8:	e002      	b.n	801dac0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801daba:	6878      	ldr	r0, [r7, #4]
 801dabc:	f000 f9a2 	bl	801de04 <TimerInsertTimer>
 801dac0:	69fb      	ldr	r3, [r7, #28]
 801dac2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dac4:	68fb      	ldr	r3, [r7, #12]
 801dac6:	f383 8810 	msr	PRIMASK, r3
}
 801daca:	bf00      	nop
  {
 801dacc:	e002      	b.n	801dad4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801dace:	2301      	movs	r3, #1
 801dad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801dad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801dad8:	4618      	mov	r0, r3
 801dada:	3728      	adds	r7, #40	; 0x28
 801dadc:	46bd      	mov	sp, r7
 801dade:	bd80      	pop	{r7, pc}
 801dae0:	0801efe4 	.word	0x0801efe4
 801dae4:	20001fc0 	.word	0x20001fc0

0801dae8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801dae8:	b580      	push	{r7, lr}
 801daea:	b088      	sub	sp, #32
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801daf0:	2300      	movs	r3, #0
 801daf2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d05b      	beq.n	801dbb2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dafa:	f3ef 8310 	mrs	r3, PRIMASK
 801dafe:	60fb      	str	r3, [r7, #12]
  return(result);
 801db00:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801db02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801db04:	b672      	cpsid	i
}
 801db06:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801db08:	4b2d      	ldr	r3, [pc, #180]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801db0e:	4b2c      	ldr	r3, [pc, #176]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	2201      	movs	r2, #1
 801db18:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801db1a:	4b29      	ldr	r3, [pc, #164]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	2b00      	cmp	r3, #0
 801db20:	d041      	beq.n	801dba6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	2200      	movs	r2, #0
 801db26:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801db28:	4b25      	ldr	r3, [pc, #148]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	687a      	ldr	r2, [r7, #4]
 801db2e:	429a      	cmp	r2, r3
 801db30:	d134      	bne.n	801db9c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801db32:	4b23      	ldr	r3, [pc, #140]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	2200      	movs	r2, #0
 801db38:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801db3a:	4b21      	ldr	r3, [pc, #132]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	695b      	ldr	r3, [r3, #20]
 801db40:	2b00      	cmp	r3, #0
 801db42:	d00a      	beq.n	801db5a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801db44:	4b1e      	ldr	r3, [pc, #120]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	695b      	ldr	r3, [r3, #20]
 801db4a:	4a1d      	ldr	r2, [pc, #116]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db4c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801db4e:	4b1c      	ldr	r3, [pc, #112]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	4618      	mov	r0, r3
 801db54:	f000 f92c 	bl	801ddb0 <TimerSetTimeout>
 801db58:	e023      	b.n	801dba2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801db5a:	4b1a      	ldr	r3, [pc, #104]	; (801dbc4 <UTIL_TIMER_Stop+0xdc>)
 801db5c:	68db      	ldr	r3, [r3, #12]
 801db5e:	4798      	blx	r3
            TimerListHead = NULL;
 801db60:	4b17      	ldr	r3, [pc, #92]	; (801dbc0 <UTIL_TIMER_Stop+0xd8>)
 801db62:	2200      	movs	r2, #0
 801db64:	601a      	str	r2, [r3, #0]
 801db66:	e01c      	b.n	801dba2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801db68:	697a      	ldr	r2, [r7, #20]
 801db6a:	687b      	ldr	r3, [r7, #4]
 801db6c:	429a      	cmp	r2, r3
 801db6e:	d110      	bne.n	801db92 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801db70:	697b      	ldr	r3, [r7, #20]
 801db72:	695b      	ldr	r3, [r3, #20]
 801db74:	2b00      	cmp	r3, #0
 801db76:	d006      	beq.n	801db86 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801db78:	697b      	ldr	r3, [r7, #20]
 801db7a:	695b      	ldr	r3, [r3, #20]
 801db7c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801db7e:	69bb      	ldr	r3, [r7, #24]
 801db80:	697a      	ldr	r2, [r7, #20]
 801db82:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801db84:	e00d      	b.n	801dba2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801db86:	2300      	movs	r3, #0
 801db88:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801db8a:	69bb      	ldr	r3, [r7, #24]
 801db8c:	697a      	ldr	r2, [r7, #20]
 801db8e:	615a      	str	r2, [r3, #20]
            break;
 801db90:	e007      	b.n	801dba2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801db92:	697b      	ldr	r3, [r7, #20]
 801db94:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801db96:	697b      	ldr	r3, [r7, #20]
 801db98:	695b      	ldr	r3, [r3, #20]
 801db9a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801db9c:	697b      	ldr	r3, [r7, #20]
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d1e2      	bne.n	801db68 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801dba2:	2300      	movs	r3, #0
 801dba4:	77fb      	strb	r3, [r7, #31]
 801dba6:	693b      	ldr	r3, [r7, #16]
 801dba8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbaa:	68bb      	ldr	r3, [r7, #8]
 801dbac:	f383 8810 	msr	PRIMASK, r3
}
 801dbb0:	e001      	b.n	801dbb6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801dbb2:	2301      	movs	r3, #1
 801dbb4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801dbb6:	7ffb      	ldrb	r3, [r7, #31]
}
 801dbb8:	4618      	mov	r0, r3
 801dbba:	3720      	adds	r7, #32
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	bd80      	pop	{r7, pc}
 801dbc0:	20001fc0 	.word	0x20001fc0
 801dbc4:	0801efe4 	.word	0x0801efe4

0801dbc8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b084      	sub	sp, #16
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]
 801dbd0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dbd2:	2300      	movs	r3, #0
 801dbd4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d102      	bne.n	801dbe2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801dbdc:	2301      	movs	r3, #1
 801dbde:	73fb      	strb	r3, [r7, #15]
 801dbe0:	e014      	b.n	801dc0c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801dbe2:	4b0d      	ldr	r3, [pc, #52]	; (801dc18 <UTIL_TIMER_SetPeriod+0x50>)
 801dbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbe6:	6838      	ldr	r0, [r7, #0]
 801dbe8:	4798      	blx	r3
 801dbea:	4602      	mov	r2, r0
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801dbf0:	6878      	ldr	r0, [r7, #4]
 801dbf2:	f000 f8c1 	bl	801dd78 <TimerExists>
 801dbf6:	4603      	mov	r3, r0
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	d007      	beq.n	801dc0c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801dbfc:	6878      	ldr	r0, [r7, #4]
 801dbfe:	f7ff ff73 	bl	801dae8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801dc02:	6878      	ldr	r0, [r7, #4]
 801dc04:	f7ff ff02 	bl	801da0c <UTIL_TIMER_Start>
 801dc08:	4603      	mov	r3, r0
 801dc0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc0e:	4618      	mov	r0, r3
 801dc10:	3710      	adds	r7, #16
 801dc12:	46bd      	mov	sp, r7
 801dc14:	bd80      	pop	{r7, pc}
 801dc16:	bf00      	nop
 801dc18:	0801efe4 	.word	0x0801efe4

0801dc1c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801dc1c:	b590      	push	{r4, r7, lr}
 801dc1e:	b089      	sub	sp, #36	; 0x24
 801dc20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc22:	f3ef 8310 	mrs	r3, PRIMASK
 801dc26:	60bb      	str	r3, [r7, #8]
  return(result);
 801dc28:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801dc2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801dc2c:	b672      	cpsid	i
}
 801dc2e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801dc30:	4b38      	ldr	r3, [pc, #224]	; (801dd14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dc32:	695b      	ldr	r3, [r3, #20]
 801dc34:	4798      	blx	r3
 801dc36:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801dc38:	4b36      	ldr	r3, [pc, #216]	; (801dd14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dc3a:	691b      	ldr	r3, [r3, #16]
 801dc3c:	4798      	blx	r3
 801dc3e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801dc40:	693a      	ldr	r2, [r7, #16]
 801dc42:	697b      	ldr	r3, [r7, #20]
 801dc44:	1ad3      	subs	r3, r2, r3
 801dc46:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801dc48:	4b33      	ldr	r3, [pc, #204]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d037      	beq.n	801dcc0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801dc50:	4b31      	ldr	r3, [pc, #196]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801dc56:	69fb      	ldr	r3, [r7, #28]
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	68fa      	ldr	r2, [r7, #12]
 801dc5c:	429a      	cmp	r2, r3
 801dc5e:	d206      	bcs.n	801dc6e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801dc60:	69fb      	ldr	r3, [r7, #28]
 801dc62:	681a      	ldr	r2, [r3, #0]
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	1ad2      	subs	r2, r2, r3
 801dc68:	69fb      	ldr	r3, [r7, #28]
 801dc6a:	601a      	str	r2, [r3, #0]
 801dc6c:	e002      	b.n	801dc74 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801dc6e:	69fb      	ldr	r3, [r7, #28]
 801dc70:	2200      	movs	r2, #0
 801dc72:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801dc74:	69fb      	ldr	r3, [r7, #28]
 801dc76:	695b      	ldr	r3, [r3, #20]
 801dc78:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801dc7a:	69fb      	ldr	r3, [r7, #28]
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	d1ea      	bne.n	801dc56 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dc80:	e01e      	b.n	801dcc0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801dc82:	4b25      	ldr	r3, [pc, #148]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc84:	681b      	ldr	r3, [r3, #0]
 801dc86:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801dc88:	4b23      	ldr	r3, [pc, #140]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	695b      	ldr	r3, [r3, #20]
 801dc8e:	4a22      	ldr	r2, [pc, #136]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dc90:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801dc92:	69fb      	ldr	r3, [r7, #28]
 801dc94:	2200      	movs	r2, #0
 801dc96:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801dc98:	69fb      	ldr	r3, [r7, #28]
 801dc9a:	2200      	movs	r2, #0
 801dc9c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801dc9e:	69fb      	ldr	r3, [r7, #28]
 801dca0:	68db      	ldr	r3, [r3, #12]
 801dca2:	69fa      	ldr	r2, [r7, #28]
 801dca4:	6912      	ldr	r2, [r2, #16]
 801dca6:	4610      	mov	r0, r2
 801dca8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801dcaa:	69fb      	ldr	r3, [r7, #28]
 801dcac:	7adb      	ldrb	r3, [r3, #11]
 801dcae:	2b01      	cmp	r3, #1
 801dcb0:	d106      	bne.n	801dcc0 <UTIL_TIMER_IRQ_Handler+0xa4>
 801dcb2:	69fb      	ldr	r3, [r7, #28]
 801dcb4:	7a9b      	ldrb	r3, [r3, #10]
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	d102      	bne.n	801dcc0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801dcba:	69f8      	ldr	r0, [r7, #28]
 801dcbc:	f7ff fea6 	bl	801da0c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dcc0:	4b15      	ldr	r3, [pc, #84]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d00d      	beq.n	801dce4 <UTIL_TIMER_IRQ_Handler+0xc8>
 801dcc8:	4b13      	ldr	r3, [pc, #76]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dcca:	681b      	ldr	r3, [r3, #0]
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d0d7      	beq.n	801dc82 <UTIL_TIMER_IRQ_Handler+0x66>
 801dcd2:	4b11      	ldr	r3, [pc, #68]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	681c      	ldr	r4, [r3, #0]
 801dcd8:	4b0e      	ldr	r3, [pc, #56]	; (801dd14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dcda:	699b      	ldr	r3, [r3, #24]
 801dcdc:	4798      	blx	r3
 801dcde:	4603      	mov	r3, r0
 801dce0:	429c      	cmp	r4, r3
 801dce2:	d3ce      	bcc.n	801dc82 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801dce4:	4b0c      	ldr	r3, [pc, #48]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d009      	beq.n	801dd00 <UTIL_TIMER_IRQ_Handler+0xe4>
 801dcec:	4b0a      	ldr	r3, [pc, #40]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dcee:	681b      	ldr	r3, [r3, #0]
 801dcf0:	7a1b      	ldrb	r3, [r3, #8]
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d104      	bne.n	801dd00 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801dcf6:	4b08      	ldr	r3, [pc, #32]	; (801dd18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	f000 f858 	bl	801ddb0 <TimerSetTimeout>
 801dd00:	69bb      	ldr	r3, [r7, #24]
 801dd02:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	f383 8810 	msr	PRIMASK, r3
}
 801dd0a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801dd0c:	bf00      	nop
 801dd0e:	3724      	adds	r7, #36	; 0x24
 801dd10:	46bd      	mov	sp, r7
 801dd12:	bd90      	pop	{r4, r7, pc}
 801dd14:	0801efe4 	.word	0x0801efe4
 801dd18:	20001fc0 	.word	0x20001fc0

0801dd1c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801dd1c:	b580      	push	{r7, lr}
 801dd1e:	b082      	sub	sp, #8
 801dd20:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801dd22:	4b06      	ldr	r3, [pc, #24]	; (801dd3c <UTIL_TIMER_GetCurrentTime+0x20>)
 801dd24:	69db      	ldr	r3, [r3, #28]
 801dd26:	4798      	blx	r3
 801dd28:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801dd2a:	4b04      	ldr	r3, [pc, #16]	; (801dd3c <UTIL_TIMER_GetCurrentTime+0x20>)
 801dd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd2e:	6878      	ldr	r0, [r7, #4]
 801dd30:	4798      	blx	r3
 801dd32:	4603      	mov	r3, r0
}
 801dd34:	4618      	mov	r0, r3
 801dd36:	3708      	adds	r7, #8
 801dd38:	46bd      	mov	sp, r7
 801dd3a:	bd80      	pop	{r7, pc}
 801dd3c:	0801efe4 	.word	0x0801efe4

0801dd40 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801dd40:	b580      	push	{r7, lr}
 801dd42:	b084      	sub	sp, #16
 801dd44:	af00      	add	r7, sp, #0
 801dd46:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801dd48:	4b0a      	ldr	r3, [pc, #40]	; (801dd74 <UTIL_TIMER_GetElapsedTime+0x34>)
 801dd4a:	69db      	ldr	r3, [r3, #28]
 801dd4c:	4798      	blx	r3
 801dd4e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801dd50:	4b08      	ldr	r3, [pc, #32]	; (801dd74 <UTIL_TIMER_GetElapsedTime+0x34>)
 801dd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd54:	6878      	ldr	r0, [r7, #4]
 801dd56:	4798      	blx	r3
 801dd58:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801dd5a:	4b06      	ldr	r3, [pc, #24]	; (801dd74 <UTIL_TIMER_GetElapsedTime+0x34>)
 801dd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd5e:	68f9      	ldr	r1, [r7, #12]
 801dd60:	68ba      	ldr	r2, [r7, #8]
 801dd62:	1a8a      	subs	r2, r1, r2
 801dd64:	4610      	mov	r0, r2
 801dd66:	4798      	blx	r3
 801dd68:	4603      	mov	r3, r0
}
 801dd6a:	4618      	mov	r0, r3
 801dd6c:	3710      	adds	r7, #16
 801dd6e:	46bd      	mov	sp, r7
 801dd70:	bd80      	pop	{r7, pc}
 801dd72:	bf00      	nop
 801dd74:	0801efe4 	.word	0x0801efe4

0801dd78 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801dd78:	b480      	push	{r7}
 801dd7a:	b085      	sub	sp, #20
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801dd80:	4b0a      	ldr	r3, [pc, #40]	; (801ddac <TimerExists+0x34>)
 801dd82:	681b      	ldr	r3, [r3, #0]
 801dd84:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801dd86:	e008      	b.n	801dd9a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801dd88:	68fa      	ldr	r2, [r7, #12]
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	429a      	cmp	r2, r3
 801dd8e:	d101      	bne.n	801dd94 <TimerExists+0x1c>
    {
      return true;
 801dd90:	2301      	movs	r3, #1
 801dd92:	e006      	b.n	801dda2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	695b      	ldr	r3, [r3, #20]
 801dd98:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801dd9a:	68fb      	ldr	r3, [r7, #12]
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d1f3      	bne.n	801dd88 <TimerExists+0x10>
  }
  return false;
 801dda0:	2300      	movs	r3, #0
}
 801dda2:	4618      	mov	r0, r3
 801dda4:	3714      	adds	r7, #20
 801dda6:	46bd      	mov	sp, r7
 801dda8:	bc80      	pop	{r7}
 801ddaa:	4770      	bx	lr
 801ddac:	20001fc0 	.word	0x20001fc0

0801ddb0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801ddb0:	b590      	push	{r4, r7, lr}
 801ddb2:	b085      	sub	sp, #20
 801ddb4:	af00      	add	r7, sp, #0
 801ddb6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801ddb8:	4b11      	ldr	r3, [pc, #68]	; (801de00 <TimerSetTimeout+0x50>)
 801ddba:	6a1b      	ldr	r3, [r3, #32]
 801ddbc:	4798      	blx	r3
 801ddbe:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	2201      	movs	r2, #1
 801ddc4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	681c      	ldr	r4, [r3, #0]
 801ddca:	4b0d      	ldr	r3, [pc, #52]	; (801de00 <TimerSetTimeout+0x50>)
 801ddcc:	699b      	ldr	r3, [r3, #24]
 801ddce:	4798      	blx	r3
 801ddd0:	4602      	mov	r2, r0
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	4413      	add	r3, r2
 801ddd6:	429c      	cmp	r4, r3
 801ddd8:	d207      	bcs.n	801ddea <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801ddda:	4b09      	ldr	r3, [pc, #36]	; (801de00 <TimerSetTimeout+0x50>)
 801dddc:	699b      	ldr	r3, [r3, #24]
 801ddde:	4798      	blx	r3
 801dde0:	4602      	mov	r2, r0
 801dde2:	68fb      	ldr	r3, [r7, #12]
 801dde4:	441a      	add	r2, r3
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801ddea:	4b05      	ldr	r3, [pc, #20]	; (801de00 <TimerSetTimeout+0x50>)
 801ddec:	689b      	ldr	r3, [r3, #8]
 801ddee:	687a      	ldr	r2, [r7, #4]
 801ddf0:	6812      	ldr	r2, [r2, #0]
 801ddf2:	4610      	mov	r0, r2
 801ddf4:	4798      	blx	r3
}
 801ddf6:	bf00      	nop
 801ddf8:	3714      	adds	r7, #20
 801ddfa:	46bd      	mov	sp, r7
 801ddfc:	bd90      	pop	{r4, r7, pc}
 801ddfe:	bf00      	nop
 801de00:	0801efe4 	.word	0x0801efe4

0801de04 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801de04:	b480      	push	{r7}
 801de06:	b085      	sub	sp, #20
 801de08:	af00      	add	r7, sp, #0
 801de0a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801de0c:	4b14      	ldr	r3, [pc, #80]	; (801de60 <TimerInsertTimer+0x5c>)
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801de12:	4b13      	ldr	r3, [pc, #76]	; (801de60 <TimerInsertTimer+0x5c>)
 801de14:	681b      	ldr	r3, [r3, #0]
 801de16:	695b      	ldr	r3, [r3, #20]
 801de18:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801de1a:	e012      	b.n	801de42 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	681a      	ldr	r2, [r3, #0]
 801de20:	68bb      	ldr	r3, [r7, #8]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	429a      	cmp	r2, r3
 801de26:	d905      	bls.n	801de34 <TimerInsertTimer+0x30>
    {
        cur = next;
 801de28:	68bb      	ldr	r3, [r7, #8]
 801de2a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801de2c:	68bb      	ldr	r3, [r7, #8]
 801de2e:	695b      	ldr	r3, [r3, #20]
 801de30:	60bb      	str	r3, [r7, #8]
 801de32:	e006      	b.n	801de42 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	687a      	ldr	r2, [r7, #4]
 801de38:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	68ba      	ldr	r2, [r7, #8]
 801de3e:	615a      	str	r2, [r3, #20]
        return;
 801de40:	e009      	b.n	801de56 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	695b      	ldr	r3, [r3, #20]
 801de46:	2b00      	cmp	r3, #0
 801de48:	d1e8      	bne.n	801de1c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	687a      	ldr	r2, [r7, #4]
 801de4e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	2200      	movs	r2, #0
 801de54:	615a      	str	r2, [r3, #20]
}
 801de56:	3714      	adds	r7, #20
 801de58:	46bd      	mov	sp, r7
 801de5a:	bc80      	pop	{r7}
 801de5c:	4770      	bx	lr
 801de5e:	bf00      	nop
 801de60:	20001fc0 	.word	0x20001fc0

0801de64 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801de64:	b580      	push	{r7, lr}
 801de66:	b084      	sub	sp, #16
 801de68:	af00      	add	r7, sp, #0
 801de6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801de6c:	4b0b      	ldr	r3, [pc, #44]	; (801de9c <TimerInsertNewHeadTimer+0x38>)
 801de6e:	681b      	ldr	r3, [r3, #0]
 801de70:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801de72:	68fb      	ldr	r3, [r7, #12]
 801de74:	2b00      	cmp	r3, #0
 801de76:	d002      	beq.n	801de7e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	2200      	movs	r2, #0
 801de7c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	68fa      	ldr	r2, [r7, #12]
 801de82:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801de84:	4a05      	ldr	r2, [pc, #20]	; (801de9c <TimerInsertNewHeadTimer+0x38>)
 801de86:	687b      	ldr	r3, [r7, #4]
 801de88:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801de8a:	4b04      	ldr	r3, [pc, #16]	; (801de9c <TimerInsertNewHeadTimer+0x38>)
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	4618      	mov	r0, r3
 801de90:	f7ff ff8e 	bl	801ddb0 <TimerSetTimeout>
}
 801de94:	bf00      	nop
 801de96:	3710      	adds	r7, #16
 801de98:	46bd      	mov	sp, r7
 801de9a:	bd80      	pop	{r7, pc}
 801de9c:	20001fc0 	.word	0x20001fc0

0801dea0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801dea0:	b580      	push	{r7, lr}
 801dea2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801dea4:	2218      	movs	r2, #24
 801dea6:	2100      	movs	r1, #0
 801dea8:	4807      	ldr	r0, [pc, #28]	; (801dec8 <UTIL_ADV_TRACE_Init+0x28>)
 801deaa:	f7fe fffa 	bl	801cea2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801deae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801deb2:	2100      	movs	r1, #0
 801deb4:	4805      	ldr	r0, [pc, #20]	; (801decc <UTIL_ADV_TRACE_Init+0x2c>)
 801deb6:	f7fe fff4 	bl	801cea2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801deba:	4b05      	ldr	r3, [pc, #20]	; (801ded0 <UTIL_ADV_TRACE_Init+0x30>)
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	4805      	ldr	r0, [pc, #20]	; (801ded4 <UTIL_ADV_TRACE_Init+0x34>)
 801dec0:	4798      	blx	r3
 801dec2:	4603      	mov	r3, r0
}
 801dec4:	4618      	mov	r0, r3
 801dec6:	bd80      	pop	{r7, pc}
 801dec8:	20001fc4 	.word	0x20001fc4
 801decc:	20001fdc 	.word	0x20001fdc
 801ded0:	0801f024 	.word	0x0801f024
 801ded4:	0801e141 	.word	0x0801e141

0801ded8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ded8:	b480      	push	{r7}
 801deda:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801dedc:	4b06      	ldr	r3, [pc, #24]	; (801def8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801dede:	8a5a      	ldrh	r2, [r3, #18]
 801dee0:	4b05      	ldr	r3, [pc, #20]	; (801def8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801dee2:	8a1b      	ldrh	r3, [r3, #16]
 801dee4:	429a      	cmp	r2, r3
 801dee6:	d101      	bne.n	801deec <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801dee8:	2301      	movs	r3, #1
 801deea:	e000      	b.n	801deee <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801deec:	2300      	movs	r3, #0
}
 801deee:	4618      	mov	r0, r3
 801def0:	46bd      	mov	sp, r7
 801def2:	bc80      	pop	{r7}
 801def4:	4770      	bx	lr
 801def6:	bf00      	nop
 801def8:	20001fc4 	.word	0x20001fc4

0801defc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801defc:	b408      	push	{r3}
 801defe:	b580      	push	{r7, lr}
 801df00:	b08d      	sub	sp, #52	; 0x34
 801df02:	af00      	add	r7, sp, #0
 801df04:	60f8      	str	r0, [r7, #12]
 801df06:	60b9      	str	r1, [r7, #8]
 801df08:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801df0a:	2300      	movs	r3, #0
 801df0c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801df0e:	2300      	movs	r3, #0
 801df10:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801df12:	4b37      	ldr	r3, [pc, #220]	; (801dff0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801df14:	7a1b      	ldrb	r3, [r3, #8]
 801df16:	461a      	mov	r2, r3
 801df18:	68fb      	ldr	r3, [r7, #12]
 801df1a:	4293      	cmp	r3, r2
 801df1c:	d902      	bls.n	801df24 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801df1e:	f06f 0304 	mvn.w	r3, #4
 801df22:	e05e      	b.n	801dfe2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801df24:	4b32      	ldr	r3, [pc, #200]	; (801dff0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801df26:	68da      	ldr	r2, [r3, #12]
 801df28:	68bb      	ldr	r3, [r7, #8]
 801df2a:	4013      	ands	r3, r2
 801df2c:	68ba      	ldr	r2, [r7, #8]
 801df2e:	429a      	cmp	r2, r3
 801df30:	d002      	beq.n	801df38 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801df32:	f06f 0305 	mvn.w	r3, #5
 801df36:	e054      	b.n	801dfe2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801df38:	4b2d      	ldr	r3, [pc, #180]	; (801dff0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801df3a:	685b      	ldr	r3, [r3, #4]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d00a      	beq.n	801df56 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	2b00      	cmp	r3, #0
 801df44:	d007      	beq.n	801df56 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801df46:	4b2a      	ldr	r3, [pc, #168]	; (801dff0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801df48:	685b      	ldr	r3, [r3, #4]
 801df4a:	f107 0116 	add.w	r1, r7, #22
 801df4e:	f107 0218 	add.w	r2, r7, #24
 801df52:	4610      	mov	r0, r2
 801df54:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801df56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801df5a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801df5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801df60:	f44f 7100 	mov.w	r1, #512	; 0x200
 801df64:	4823      	ldr	r0, [pc, #140]	; (801dff4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801df66:	f7ff fa29 	bl	801d3bc <tiny_vsnprintf_like>
 801df6a:	4603      	mov	r3, r0
 801df6c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801df6e:	f000 f9f1 	bl	801e354 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801df72:	8afa      	ldrh	r2, [r7, #22]
 801df74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801df76:	4413      	add	r3, r2
 801df78:	b29b      	uxth	r3, r3
 801df7a:	f107 0214 	add.w	r2, r7, #20
 801df7e:	4611      	mov	r1, r2
 801df80:	4618      	mov	r0, r3
 801df82:	f000 f969 	bl	801e258 <TRACE_AllocateBufer>
 801df86:	4603      	mov	r3, r0
 801df88:	f1b3 3fff 	cmp.w	r3, #4294967295
 801df8c:	d025      	beq.n	801dfda <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801df8e:	2300      	movs	r3, #0
 801df90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801df92:	e00e      	b.n	801dfb2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801df94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801df96:	8aba      	ldrh	r2, [r7, #20]
 801df98:	3330      	adds	r3, #48	; 0x30
 801df9a:	443b      	add	r3, r7
 801df9c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801dfa0:	4b15      	ldr	r3, [pc, #84]	; (801dff8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801dfa2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801dfa4:	8abb      	ldrh	r3, [r7, #20]
 801dfa6:	3301      	adds	r3, #1
 801dfa8:	b29b      	uxth	r3, r3
 801dfaa:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801dfac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801dfae:	3301      	adds	r3, #1
 801dfb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801dfb2:	8afb      	ldrh	r3, [r7, #22]
 801dfb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801dfb6:	429a      	cmp	r2, r3
 801dfb8:	d3ec      	bcc.n	801df94 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801dfba:	8abb      	ldrh	r3, [r7, #20]
 801dfbc:	461a      	mov	r2, r3
 801dfbe:	4b0e      	ldr	r3, [pc, #56]	; (801dff8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801dfc0:	18d0      	adds	r0, r2, r3
 801dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dfc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801dfca:	f7ff f9f7 	bl	801d3bc <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801dfce:	f000 f9df 	bl	801e390 <TRACE_UnLock>

    return TRACE_Send();
 801dfd2:	f000 f831 	bl	801e038 <TRACE_Send>
 801dfd6:	4603      	mov	r3, r0
 801dfd8:	e003      	b.n	801dfe2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801dfda:	f000 f9d9 	bl	801e390 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801dfde:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801dfe2:	4618      	mov	r0, r3
 801dfe4:	3734      	adds	r7, #52	; 0x34
 801dfe6:	46bd      	mov	sp, r7
 801dfe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dfec:	b001      	add	sp, #4
 801dfee:	4770      	bx	lr
 801dff0:	20001fc4 	.word	0x20001fc4
 801dff4:	200023dc 	.word	0x200023dc
 801dff8:	20001fdc 	.word	0x20001fdc

0801dffc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801dffc:	b480      	push	{r7}
 801dffe:	b083      	sub	sp, #12
 801e000:	af00      	add	r7, sp, #0
 801e002:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e004:	4a03      	ldr	r2, [pc, #12]	; (801e014 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e006:	687b      	ldr	r3, [r7, #4]
 801e008:	6053      	str	r3, [r2, #4]
}
 801e00a:	bf00      	nop
 801e00c:	370c      	adds	r7, #12
 801e00e:	46bd      	mov	sp, r7
 801e010:	bc80      	pop	{r7}
 801e012:	4770      	bx	lr
 801e014:	20001fc4 	.word	0x20001fc4

0801e018 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e018:	b480      	push	{r7}
 801e01a:	b083      	sub	sp, #12
 801e01c:	af00      	add	r7, sp, #0
 801e01e:	4603      	mov	r3, r0
 801e020:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e022:	4a04      	ldr	r2, [pc, #16]	; (801e034 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e024:	79fb      	ldrb	r3, [r7, #7]
 801e026:	7213      	strb	r3, [r2, #8]
}
 801e028:	bf00      	nop
 801e02a:	370c      	adds	r7, #12
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bc80      	pop	{r7}
 801e030:	4770      	bx	lr
 801e032:	bf00      	nop
 801e034:	20001fc4 	.word	0x20001fc4

0801e038 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e038:	b580      	push	{r7, lr}
 801e03a:	b088      	sub	sp, #32
 801e03c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e03e:	2300      	movs	r3, #0
 801e040:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e042:	2300      	movs	r3, #0
 801e044:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e046:	f3ef 8310 	mrs	r3, PRIMASK
 801e04a:	613b      	str	r3, [r7, #16]
  return(result);
 801e04c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e04e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e050:	b672      	cpsid	i
}
 801e052:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e054:	f000 f9ba 	bl	801e3cc <TRACE_IsLocked>
 801e058:	4603      	mov	r3, r0
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	d15d      	bne.n	801e11a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e05e:	f000 f979 	bl	801e354 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e062:	4b34      	ldr	r3, [pc, #208]	; (801e134 <TRACE_Send+0xfc>)
 801e064:	8a1a      	ldrh	r2, [r3, #16]
 801e066:	4b33      	ldr	r3, [pc, #204]	; (801e134 <TRACE_Send+0xfc>)
 801e068:	8a5b      	ldrh	r3, [r3, #18]
 801e06a:	429a      	cmp	r2, r3
 801e06c:	d04d      	beq.n	801e10a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e06e:	4b31      	ldr	r3, [pc, #196]	; (801e134 <TRACE_Send+0xfc>)
 801e070:	789b      	ldrb	r3, [r3, #2]
 801e072:	2b01      	cmp	r3, #1
 801e074:	d117      	bne.n	801e0a6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e076:	4b2f      	ldr	r3, [pc, #188]	; (801e134 <TRACE_Send+0xfc>)
 801e078:	881a      	ldrh	r2, [r3, #0]
 801e07a:	4b2e      	ldr	r3, [pc, #184]	; (801e134 <TRACE_Send+0xfc>)
 801e07c:	8a1b      	ldrh	r3, [r3, #16]
 801e07e:	1ad3      	subs	r3, r2, r3
 801e080:	b29a      	uxth	r2, r3
 801e082:	4b2c      	ldr	r3, [pc, #176]	; (801e134 <TRACE_Send+0xfc>)
 801e084:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e086:	4b2b      	ldr	r3, [pc, #172]	; (801e134 <TRACE_Send+0xfc>)
 801e088:	2202      	movs	r2, #2
 801e08a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e08c:	4b29      	ldr	r3, [pc, #164]	; (801e134 <TRACE_Send+0xfc>)
 801e08e:	2200      	movs	r2, #0
 801e090:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e092:	4b28      	ldr	r3, [pc, #160]	; (801e134 <TRACE_Send+0xfc>)
 801e094:	8a9b      	ldrh	r3, [r3, #20]
 801e096:	2b00      	cmp	r3, #0
 801e098:	d105      	bne.n	801e0a6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e09a:	4b26      	ldr	r3, [pc, #152]	; (801e134 <TRACE_Send+0xfc>)
 801e09c:	2200      	movs	r2, #0
 801e09e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e0a0:	4b24      	ldr	r3, [pc, #144]	; (801e134 <TRACE_Send+0xfc>)
 801e0a2:	2200      	movs	r2, #0
 801e0a4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e0a6:	4b23      	ldr	r3, [pc, #140]	; (801e134 <TRACE_Send+0xfc>)
 801e0a8:	789b      	ldrb	r3, [r3, #2]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d115      	bne.n	801e0da <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e0ae:	4b21      	ldr	r3, [pc, #132]	; (801e134 <TRACE_Send+0xfc>)
 801e0b0:	8a5a      	ldrh	r2, [r3, #18]
 801e0b2:	4b20      	ldr	r3, [pc, #128]	; (801e134 <TRACE_Send+0xfc>)
 801e0b4:	8a1b      	ldrh	r3, [r3, #16]
 801e0b6:	429a      	cmp	r2, r3
 801e0b8:	d908      	bls.n	801e0cc <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e0ba:	4b1e      	ldr	r3, [pc, #120]	; (801e134 <TRACE_Send+0xfc>)
 801e0bc:	8a5a      	ldrh	r2, [r3, #18]
 801e0be:	4b1d      	ldr	r3, [pc, #116]	; (801e134 <TRACE_Send+0xfc>)
 801e0c0:	8a1b      	ldrh	r3, [r3, #16]
 801e0c2:	1ad3      	subs	r3, r2, r3
 801e0c4:	b29a      	uxth	r2, r3
 801e0c6:	4b1b      	ldr	r3, [pc, #108]	; (801e134 <TRACE_Send+0xfc>)
 801e0c8:	829a      	strh	r2, [r3, #20]
 801e0ca:	e006      	b.n	801e0da <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e0cc:	4b19      	ldr	r3, [pc, #100]	; (801e134 <TRACE_Send+0xfc>)
 801e0ce:	8a1b      	ldrh	r3, [r3, #16]
 801e0d0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e0d4:	b29a      	uxth	r2, r3
 801e0d6:	4b17      	ldr	r3, [pc, #92]	; (801e134 <TRACE_Send+0xfc>)
 801e0d8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e0da:	4b16      	ldr	r3, [pc, #88]	; (801e134 <TRACE_Send+0xfc>)
 801e0dc:	8a1b      	ldrh	r3, [r3, #16]
 801e0de:	461a      	mov	r2, r3
 801e0e0:	4b15      	ldr	r3, [pc, #84]	; (801e138 <TRACE_Send+0x100>)
 801e0e2:	4413      	add	r3, r2
 801e0e4:	61bb      	str	r3, [r7, #24]
 801e0e6:	697b      	ldr	r3, [r7, #20]
 801e0e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	f383 8810 	msr	PRIMASK, r3
}
 801e0f0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e0f2:	f7e4 fcad 	bl	8002a50 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e0f6:	4b11      	ldr	r3, [pc, #68]	; (801e13c <TRACE_Send+0x104>)
 801e0f8:	68db      	ldr	r3, [r3, #12]
 801e0fa:	4a0e      	ldr	r2, [pc, #56]	; (801e134 <TRACE_Send+0xfc>)
 801e0fc:	8a92      	ldrh	r2, [r2, #20]
 801e0fe:	4611      	mov	r1, r2
 801e100:	69b8      	ldr	r0, [r7, #24]
 801e102:	4798      	blx	r3
 801e104:	4603      	mov	r3, r0
 801e106:	77fb      	strb	r3, [r7, #31]
 801e108:	e00d      	b.n	801e126 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e10a:	f000 f941 	bl	801e390 <TRACE_UnLock>
 801e10e:	697b      	ldr	r3, [r7, #20]
 801e110:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e112:	68bb      	ldr	r3, [r7, #8]
 801e114:	f383 8810 	msr	PRIMASK, r3
}
 801e118:	e005      	b.n	801e126 <TRACE_Send+0xee>
 801e11a:	697b      	ldr	r3, [r7, #20]
 801e11c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	f383 8810 	msr	PRIMASK, r3
}
 801e124:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e126:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e12a:	4618      	mov	r0, r3
 801e12c:	3720      	adds	r7, #32
 801e12e:	46bd      	mov	sp, r7
 801e130:	bd80      	pop	{r7, pc}
 801e132:	bf00      	nop
 801e134:	20001fc4 	.word	0x20001fc4
 801e138:	20001fdc 	.word	0x20001fdc
 801e13c:	0801f024 	.word	0x0801f024

0801e140 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e140:	b580      	push	{r7, lr}
 801e142:	b088      	sub	sp, #32
 801e144:	af00      	add	r7, sp, #0
 801e146:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e148:	2300      	movs	r3, #0
 801e14a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e14c:	f3ef 8310 	mrs	r3, PRIMASK
 801e150:	617b      	str	r3, [r7, #20]
  return(result);
 801e152:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e154:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e156:	b672      	cpsid	i
}
 801e158:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e15a:	4b3c      	ldr	r3, [pc, #240]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e15c:	789b      	ldrb	r3, [r3, #2]
 801e15e:	2b02      	cmp	r3, #2
 801e160:	d106      	bne.n	801e170 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e162:	4b3a      	ldr	r3, [pc, #232]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e164:	2200      	movs	r2, #0
 801e166:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e168:	4b38      	ldr	r3, [pc, #224]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e16a:	2200      	movs	r2, #0
 801e16c:	821a      	strh	r2, [r3, #16]
 801e16e:	e00a      	b.n	801e186 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e170:	4b36      	ldr	r3, [pc, #216]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e172:	8a1a      	ldrh	r2, [r3, #16]
 801e174:	4b35      	ldr	r3, [pc, #212]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e176:	8a9b      	ldrh	r3, [r3, #20]
 801e178:	4413      	add	r3, r2
 801e17a:	b29b      	uxth	r3, r3
 801e17c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e180:	b29a      	uxth	r2, r3
 801e182:	4b32      	ldr	r3, [pc, #200]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e184:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e186:	4b31      	ldr	r3, [pc, #196]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e188:	8a1a      	ldrh	r2, [r3, #16]
 801e18a:	4b30      	ldr	r3, [pc, #192]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e18c:	8a5b      	ldrh	r3, [r3, #18]
 801e18e:	429a      	cmp	r2, r3
 801e190:	d04d      	beq.n	801e22e <TRACE_TxCpltCallback+0xee>
 801e192:	4b2e      	ldr	r3, [pc, #184]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e194:	8adb      	ldrh	r3, [r3, #22]
 801e196:	2b01      	cmp	r3, #1
 801e198:	d149      	bne.n	801e22e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e19a:	4b2c      	ldr	r3, [pc, #176]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e19c:	789b      	ldrb	r3, [r3, #2]
 801e19e:	2b01      	cmp	r3, #1
 801e1a0:	d117      	bne.n	801e1d2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e1a2:	4b2a      	ldr	r3, [pc, #168]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1a4:	881a      	ldrh	r2, [r3, #0]
 801e1a6:	4b29      	ldr	r3, [pc, #164]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1a8:	8a1b      	ldrh	r3, [r3, #16]
 801e1aa:	1ad3      	subs	r3, r2, r3
 801e1ac:	b29a      	uxth	r2, r3
 801e1ae:	4b27      	ldr	r3, [pc, #156]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1b0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e1b2:	4b26      	ldr	r3, [pc, #152]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1b4:	2202      	movs	r2, #2
 801e1b6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e1b8:	4b24      	ldr	r3, [pc, #144]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1ba:	2200      	movs	r2, #0
 801e1bc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e1be:	4b23      	ldr	r3, [pc, #140]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1c0:	8a9b      	ldrh	r3, [r3, #20]
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d105      	bne.n	801e1d2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e1c6:	4b21      	ldr	r3, [pc, #132]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1c8:	2200      	movs	r2, #0
 801e1ca:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e1cc:	4b1f      	ldr	r3, [pc, #124]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1ce:	2200      	movs	r2, #0
 801e1d0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e1d2:	4b1e      	ldr	r3, [pc, #120]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1d4:	789b      	ldrb	r3, [r3, #2]
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d115      	bne.n	801e206 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e1da:	4b1c      	ldr	r3, [pc, #112]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1dc:	8a5a      	ldrh	r2, [r3, #18]
 801e1de:	4b1b      	ldr	r3, [pc, #108]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1e0:	8a1b      	ldrh	r3, [r3, #16]
 801e1e2:	429a      	cmp	r2, r3
 801e1e4:	d908      	bls.n	801e1f8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e1e6:	4b19      	ldr	r3, [pc, #100]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1e8:	8a5a      	ldrh	r2, [r3, #18]
 801e1ea:	4b18      	ldr	r3, [pc, #96]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1ec:	8a1b      	ldrh	r3, [r3, #16]
 801e1ee:	1ad3      	subs	r3, r2, r3
 801e1f0:	b29a      	uxth	r2, r3
 801e1f2:	4b16      	ldr	r3, [pc, #88]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1f4:	829a      	strh	r2, [r3, #20]
 801e1f6:	e006      	b.n	801e206 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e1f8:	4b14      	ldr	r3, [pc, #80]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e1fa:	8a1b      	ldrh	r3, [r3, #16]
 801e1fc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e200:	b29a      	uxth	r2, r3
 801e202:	4b12      	ldr	r3, [pc, #72]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e204:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e206:	4b11      	ldr	r3, [pc, #68]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e208:	8a1b      	ldrh	r3, [r3, #16]
 801e20a:	461a      	mov	r2, r3
 801e20c:	4b10      	ldr	r3, [pc, #64]	; (801e250 <TRACE_TxCpltCallback+0x110>)
 801e20e:	4413      	add	r3, r2
 801e210:	61fb      	str	r3, [r7, #28]
 801e212:	69bb      	ldr	r3, [r7, #24]
 801e214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e216:	693b      	ldr	r3, [r7, #16]
 801e218:	f383 8810 	msr	PRIMASK, r3
}
 801e21c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e21e:	4b0d      	ldr	r3, [pc, #52]	; (801e254 <TRACE_TxCpltCallback+0x114>)
 801e220:	68db      	ldr	r3, [r3, #12]
 801e222:	4a0a      	ldr	r2, [pc, #40]	; (801e24c <TRACE_TxCpltCallback+0x10c>)
 801e224:	8a92      	ldrh	r2, [r2, #20]
 801e226:	4611      	mov	r1, r2
 801e228:	69f8      	ldr	r0, [r7, #28]
 801e22a:	4798      	blx	r3
 801e22c:	e00a      	b.n	801e244 <TRACE_TxCpltCallback+0x104>
 801e22e:	69bb      	ldr	r3, [r7, #24]
 801e230:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e232:	68fb      	ldr	r3, [r7, #12]
 801e234:	f383 8810 	msr	PRIMASK, r3
}
 801e238:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e23a:	f7e4 fc11 	bl	8002a60 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e23e:	f000 f8a7 	bl	801e390 <TRACE_UnLock>
  }
}
 801e242:	bf00      	nop
 801e244:	bf00      	nop
 801e246:	3720      	adds	r7, #32
 801e248:	46bd      	mov	sp, r7
 801e24a:	bd80      	pop	{r7, pc}
 801e24c:	20001fc4 	.word	0x20001fc4
 801e250:	20001fdc 	.word	0x20001fdc
 801e254:	0801f024 	.word	0x0801f024

0801e258 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e258:	b480      	push	{r7}
 801e25a:	b087      	sub	sp, #28
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	4603      	mov	r3, r0
 801e260:	6039      	str	r1, [r7, #0]
 801e262:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e268:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e26a:	f3ef 8310 	mrs	r3, PRIMASK
 801e26e:	60fb      	str	r3, [r7, #12]
  return(result);
 801e270:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e274:	b672      	cpsid	i
}
 801e276:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e278:	4b35      	ldr	r3, [pc, #212]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e27a:	8a5a      	ldrh	r2, [r3, #18]
 801e27c:	4b34      	ldr	r3, [pc, #208]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e27e:	8a1b      	ldrh	r3, [r3, #16]
 801e280:	429a      	cmp	r2, r3
 801e282:	d11b      	bne.n	801e2bc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e284:	4b32      	ldr	r3, [pc, #200]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e286:	8a5b      	ldrh	r3, [r3, #18]
 801e288:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e28c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e28e:	88fa      	ldrh	r2, [r7, #6]
 801e290:	8afb      	ldrh	r3, [r7, #22]
 801e292:	429a      	cmp	r2, r3
 801e294:	d33a      	bcc.n	801e30c <TRACE_AllocateBufer+0xb4>
 801e296:	4b2e      	ldr	r3, [pc, #184]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e298:	8a1b      	ldrh	r3, [r3, #16]
 801e29a:	88fa      	ldrh	r2, [r7, #6]
 801e29c:	429a      	cmp	r2, r3
 801e29e:	d235      	bcs.n	801e30c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e2a0:	4b2b      	ldr	r3, [pc, #172]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2a2:	2201      	movs	r2, #1
 801e2a4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e2a6:	4b2a      	ldr	r3, [pc, #168]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2a8:	8a5a      	ldrh	r2, [r3, #18]
 801e2aa:	4b29      	ldr	r3, [pc, #164]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2ac:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e2ae:	4b28      	ldr	r3, [pc, #160]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2b0:	8a1b      	ldrh	r3, [r3, #16]
 801e2b2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e2b4:	4b26      	ldr	r3, [pc, #152]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2b6:	2200      	movs	r2, #0
 801e2b8:	825a      	strh	r2, [r3, #18]
 801e2ba:	e027      	b.n	801e30c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e2bc:	4b24      	ldr	r3, [pc, #144]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2be:	8a5a      	ldrh	r2, [r3, #18]
 801e2c0:	4b23      	ldr	r3, [pc, #140]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2c2:	8a1b      	ldrh	r3, [r3, #16]
 801e2c4:	429a      	cmp	r2, r3
 801e2c6:	d91b      	bls.n	801e300 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e2c8:	4b21      	ldr	r3, [pc, #132]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2ca:	8a5b      	ldrh	r3, [r3, #18]
 801e2cc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e2d0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e2d2:	88fa      	ldrh	r2, [r7, #6]
 801e2d4:	8afb      	ldrh	r3, [r7, #22]
 801e2d6:	429a      	cmp	r2, r3
 801e2d8:	d318      	bcc.n	801e30c <TRACE_AllocateBufer+0xb4>
 801e2da:	4b1d      	ldr	r3, [pc, #116]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2dc:	8a1b      	ldrh	r3, [r3, #16]
 801e2de:	88fa      	ldrh	r2, [r7, #6]
 801e2e0:	429a      	cmp	r2, r3
 801e2e2:	d213      	bcs.n	801e30c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e2e4:	4b1a      	ldr	r3, [pc, #104]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2e6:	2201      	movs	r2, #1
 801e2e8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e2ea:	4b19      	ldr	r3, [pc, #100]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2ec:	8a5a      	ldrh	r2, [r3, #18]
 801e2ee:	4b18      	ldr	r3, [pc, #96]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2f0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e2f2:	4b17      	ldr	r3, [pc, #92]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2f4:	8a1b      	ldrh	r3, [r3, #16]
 801e2f6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e2f8:	4b15      	ldr	r3, [pc, #84]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e2fa:	2200      	movs	r2, #0
 801e2fc:	825a      	strh	r2, [r3, #18]
 801e2fe:	e005      	b.n	801e30c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e300:	4b13      	ldr	r3, [pc, #76]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e302:	8a1a      	ldrh	r2, [r3, #16]
 801e304:	4b12      	ldr	r3, [pc, #72]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e306:	8a5b      	ldrh	r3, [r3, #18]
 801e308:	1ad3      	subs	r3, r2, r3
 801e30a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e30c:	8afa      	ldrh	r2, [r7, #22]
 801e30e:	88fb      	ldrh	r3, [r7, #6]
 801e310:	429a      	cmp	r2, r3
 801e312:	d90f      	bls.n	801e334 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e314:	4b0e      	ldr	r3, [pc, #56]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e316:	8a5a      	ldrh	r2, [r3, #18]
 801e318:	683b      	ldr	r3, [r7, #0]
 801e31a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e31c:	4b0c      	ldr	r3, [pc, #48]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e31e:	8a5a      	ldrh	r2, [r3, #18]
 801e320:	88fb      	ldrh	r3, [r7, #6]
 801e322:	4413      	add	r3, r2
 801e324:	b29b      	uxth	r3, r3
 801e326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e32a:	b29a      	uxth	r2, r3
 801e32c:	4b08      	ldr	r3, [pc, #32]	; (801e350 <TRACE_AllocateBufer+0xf8>)
 801e32e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e330:	2300      	movs	r3, #0
 801e332:	82bb      	strh	r3, [r7, #20]
 801e334:	693b      	ldr	r3, [r7, #16]
 801e336:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e338:	68bb      	ldr	r3, [r7, #8]
 801e33a:	f383 8810 	msr	PRIMASK, r3
}
 801e33e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e340:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e344:	4618      	mov	r0, r3
 801e346:	371c      	adds	r7, #28
 801e348:	46bd      	mov	sp, r7
 801e34a:	bc80      	pop	{r7}
 801e34c:	4770      	bx	lr
 801e34e:	bf00      	nop
 801e350:	20001fc4 	.word	0x20001fc4

0801e354 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e354:	b480      	push	{r7}
 801e356:	b085      	sub	sp, #20
 801e358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e35a:	f3ef 8310 	mrs	r3, PRIMASK
 801e35e:	607b      	str	r3, [r7, #4]
  return(result);
 801e360:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e362:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e364:	b672      	cpsid	i
}
 801e366:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e368:	4b08      	ldr	r3, [pc, #32]	; (801e38c <TRACE_Lock+0x38>)
 801e36a:	8adb      	ldrh	r3, [r3, #22]
 801e36c:	3301      	adds	r3, #1
 801e36e:	b29a      	uxth	r2, r3
 801e370:	4b06      	ldr	r3, [pc, #24]	; (801e38c <TRACE_Lock+0x38>)
 801e372:	82da      	strh	r2, [r3, #22]
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e378:	68bb      	ldr	r3, [r7, #8]
 801e37a:	f383 8810 	msr	PRIMASK, r3
}
 801e37e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e380:	bf00      	nop
 801e382:	3714      	adds	r7, #20
 801e384:	46bd      	mov	sp, r7
 801e386:	bc80      	pop	{r7}
 801e388:	4770      	bx	lr
 801e38a:	bf00      	nop
 801e38c:	20001fc4 	.word	0x20001fc4

0801e390 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801e390:	b480      	push	{r7}
 801e392:	b085      	sub	sp, #20
 801e394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e396:	f3ef 8310 	mrs	r3, PRIMASK
 801e39a:	607b      	str	r3, [r7, #4]
  return(result);
 801e39c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e39e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e3a0:	b672      	cpsid	i
}
 801e3a2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801e3a4:	4b08      	ldr	r3, [pc, #32]	; (801e3c8 <TRACE_UnLock+0x38>)
 801e3a6:	8adb      	ldrh	r3, [r3, #22]
 801e3a8:	3b01      	subs	r3, #1
 801e3aa:	b29a      	uxth	r2, r3
 801e3ac:	4b06      	ldr	r3, [pc, #24]	; (801e3c8 <TRACE_UnLock+0x38>)
 801e3ae:	82da      	strh	r2, [r3, #22]
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3b4:	68bb      	ldr	r3, [r7, #8]
 801e3b6:	f383 8810 	msr	PRIMASK, r3
}
 801e3ba:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e3bc:	bf00      	nop
 801e3be:	3714      	adds	r7, #20
 801e3c0:	46bd      	mov	sp, r7
 801e3c2:	bc80      	pop	{r7}
 801e3c4:	4770      	bx	lr
 801e3c6:	bf00      	nop
 801e3c8:	20001fc4 	.word	0x20001fc4

0801e3cc <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801e3cc:	b480      	push	{r7}
 801e3ce:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801e3d0:	4b05      	ldr	r3, [pc, #20]	; (801e3e8 <TRACE_IsLocked+0x1c>)
 801e3d2:	8adb      	ldrh	r3, [r3, #22]
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	bf14      	ite	ne
 801e3d8:	2301      	movne	r3, #1
 801e3da:	2300      	moveq	r3, #0
 801e3dc:	b2db      	uxtb	r3, r3
}
 801e3de:	4618      	mov	r0, r3
 801e3e0:	46bd      	mov	sp, r7
 801e3e2:	bc80      	pop	{r7}
 801e3e4:	4770      	bx	lr
 801e3e6:	bf00      	nop
 801e3e8:	20001fc4 	.word	0x20001fc4

0801e3ec <memset>:
 801e3ec:	4402      	add	r2, r0
 801e3ee:	4603      	mov	r3, r0
 801e3f0:	4293      	cmp	r3, r2
 801e3f2:	d100      	bne.n	801e3f6 <memset+0xa>
 801e3f4:	4770      	bx	lr
 801e3f6:	f803 1b01 	strb.w	r1, [r3], #1
 801e3fa:	e7f9      	b.n	801e3f0 <memset+0x4>

0801e3fc <__libc_init_array>:
 801e3fc:	b570      	push	{r4, r5, r6, lr}
 801e3fe:	4d0d      	ldr	r5, [pc, #52]	; (801e434 <__libc_init_array+0x38>)
 801e400:	4c0d      	ldr	r4, [pc, #52]	; (801e438 <__libc_init_array+0x3c>)
 801e402:	1b64      	subs	r4, r4, r5
 801e404:	10a4      	asrs	r4, r4, #2
 801e406:	2600      	movs	r6, #0
 801e408:	42a6      	cmp	r6, r4
 801e40a:	d109      	bne.n	801e420 <__libc_init_array+0x24>
 801e40c:	4d0b      	ldr	r5, [pc, #44]	; (801e43c <__libc_init_array+0x40>)
 801e40e:	4c0c      	ldr	r4, [pc, #48]	; (801e440 <__libc_init_array+0x44>)
 801e410:	f000 f8fe 	bl	801e610 <_init>
 801e414:	1b64      	subs	r4, r4, r5
 801e416:	10a4      	asrs	r4, r4, #2
 801e418:	2600      	movs	r6, #0
 801e41a:	42a6      	cmp	r6, r4
 801e41c:	d105      	bne.n	801e42a <__libc_init_array+0x2e>
 801e41e:	bd70      	pop	{r4, r5, r6, pc}
 801e420:	f855 3b04 	ldr.w	r3, [r5], #4
 801e424:	4798      	blx	r3
 801e426:	3601      	adds	r6, #1
 801e428:	e7ee      	b.n	801e408 <__libc_init_array+0xc>
 801e42a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e42e:	4798      	blx	r3
 801e430:	3601      	adds	r6, #1
 801e432:	e7f2      	b.n	801e41a <__libc_init_array+0x1e>
 801e434:	0801f5b4 	.word	0x0801f5b4
 801e438:	0801f5b4 	.word	0x0801f5b4
 801e43c:	0801f5b4 	.word	0x0801f5b4
 801e440:	0801f5bc 	.word	0x0801f5bc

0801e444 <__retarget_lock_acquire_recursive>:
 801e444:	4770      	bx	lr

0801e446 <__retarget_lock_release_recursive>:
 801e446:	4770      	bx	lr

0801e448 <register_fini>:
 801e448:	4b02      	ldr	r3, [pc, #8]	; (801e454 <register_fini+0xc>)
 801e44a:	b113      	cbz	r3, 801e452 <register_fini+0xa>
 801e44c:	4802      	ldr	r0, [pc, #8]	; (801e458 <register_fini+0x10>)
 801e44e:	f000 b805 	b.w	801e45c <atexit>
 801e452:	4770      	bx	lr
 801e454:	00000000 	.word	0x00000000
 801e458:	0801e469 	.word	0x0801e469

0801e45c <atexit>:
 801e45c:	2300      	movs	r3, #0
 801e45e:	4601      	mov	r1, r0
 801e460:	461a      	mov	r2, r3
 801e462:	4618      	mov	r0, r3
 801e464:	f000 b814 	b.w	801e490 <__register_exitproc>

0801e468 <__libc_fini_array>:
 801e468:	b538      	push	{r3, r4, r5, lr}
 801e46a:	4d07      	ldr	r5, [pc, #28]	; (801e488 <__libc_fini_array+0x20>)
 801e46c:	4c07      	ldr	r4, [pc, #28]	; (801e48c <__libc_fini_array+0x24>)
 801e46e:	1b64      	subs	r4, r4, r5
 801e470:	10a4      	asrs	r4, r4, #2
 801e472:	b91c      	cbnz	r4, 801e47c <__libc_fini_array+0x14>
 801e474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e478:	f000 b8d0 	b.w	801e61c <_fini>
 801e47c:	3c01      	subs	r4, #1
 801e47e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801e482:	4798      	blx	r3
 801e484:	e7f5      	b.n	801e472 <__libc_fini_array+0xa>
 801e486:	bf00      	nop
 801e488:	0801f5bc 	.word	0x0801f5bc
 801e48c:	0801f5c0 	.word	0x0801f5c0

0801e490 <__register_exitproc>:
 801e490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e494:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801e504 <__register_exitproc+0x74>
 801e498:	4606      	mov	r6, r0
 801e49a:	f8da 0000 	ldr.w	r0, [sl]
 801e49e:	4698      	mov	r8, r3
 801e4a0:	460f      	mov	r7, r1
 801e4a2:	4691      	mov	r9, r2
 801e4a4:	f7ff ffce 	bl	801e444 <__retarget_lock_acquire_recursive>
 801e4a8:	4b17      	ldr	r3, [pc, #92]	; (801e508 <__register_exitproc+0x78>)
 801e4aa:	681c      	ldr	r4, [r3, #0]
 801e4ac:	b90c      	cbnz	r4, 801e4b2 <__register_exitproc+0x22>
 801e4ae:	4c17      	ldr	r4, [pc, #92]	; (801e50c <__register_exitproc+0x7c>)
 801e4b0:	601c      	str	r4, [r3, #0]
 801e4b2:	6865      	ldr	r5, [r4, #4]
 801e4b4:	f8da 0000 	ldr.w	r0, [sl]
 801e4b8:	2d1f      	cmp	r5, #31
 801e4ba:	dd05      	ble.n	801e4c8 <__register_exitproc+0x38>
 801e4bc:	f7ff ffc3 	bl	801e446 <__retarget_lock_release_recursive>
 801e4c0:	f04f 30ff 	mov.w	r0, #4294967295
 801e4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4c8:	b19e      	cbz	r6, 801e4f2 <__register_exitproc+0x62>
 801e4ca:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801e4ce:	2201      	movs	r2, #1
 801e4d0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801e4d4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801e4d8:	40aa      	lsls	r2, r5
 801e4da:	4313      	orrs	r3, r2
 801e4dc:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801e4e0:	2e02      	cmp	r6, #2
 801e4e2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801e4e6:	bf02      	ittt	eq
 801e4e8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801e4ec:	4313      	orreq	r3, r2
 801e4ee:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801e4f2:	1c6b      	adds	r3, r5, #1
 801e4f4:	3502      	adds	r5, #2
 801e4f6:	6063      	str	r3, [r4, #4]
 801e4f8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801e4fc:	f7ff ffa3 	bl	801e446 <__retarget_lock_release_recursive>
 801e500:	2000      	movs	r0, #0
 801e502:	e7df      	b.n	801e4c4 <__register_exitproc+0x34>
 801e504:	20000174 	.word	0x20000174
 801e508:	200025e0 	.word	0x200025e0
 801e50c:	200025e4 	.word	0x200025e4

0801e510 <floor>:
 801e510:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e518:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801e51c:	2e13      	cmp	r6, #19
 801e51e:	460b      	mov	r3, r1
 801e520:	4607      	mov	r7, r0
 801e522:	460c      	mov	r4, r1
 801e524:	4605      	mov	r5, r0
 801e526:	dc32      	bgt.n	801e58e <floor+0x7e>
 801e528:	2e00      	cmp	r6, #0
 801e52a:	da14      	bge.n	801e556 <floor+0x46>
 801e52c:	a334      	add	r3, pc, #208	; (adr r3, 801e600 <floor+0xf0>)
 801e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e532:	f7e1 fe2f 	bl	8000194 <__adddf3>
 801e536:	2200      	movs	r2, #0
 801e538:	2300      	movs	r3, #0
 801e53a:	f7e2 fa71 	bl	8000a20 <__aeabi_dcmpgt>
 801e53e:	b138      	cbz	r0, 801e550 <floor+0x40>
 801e540:	2c00      	cmp	r4, #0
 801e542:	da56      	bge.n	801e5f2 <floor+0xe2>
 801e544:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801e548:	4325      	orrs	r5, r4
 801e54a:	d055      	beq.n	801e5f8 <floor+0xe8>
 801e54c:	4c2e      	ldr	r4, [pc, #184]	; (801e608 <floor+0xf8>)
 801e54e:	2500      	movs	r5, #0
 801e550:	4623      	mov	r3, r4
 801e552:	462f      	mov	r7, r5
 801e554:	e025      	b.n	801e5a2 <floor+0x92>
 801e556:	4a2d      	ldr	r2, [pc, #180]	; (801e60c <floor+0xfc>)
 801e558:	fa42 f806 	asr.w	r8, r2, r6
 801e55c:	ea01 0208 	and.w	r2, r1, r8
 801e560:	4302      	orrs	r2, r0
 801e562:	d01e      	beq.n	801e5a2 <floor+0x92>
 801e564:	a326      	add	r3, pc, #152	; (adr r3, 801e600 <floor+0xf0>)
 801e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e56a:	f7e1 fe13 	bl	8000194 <__adddf3>
 801e56e:	2200      	movs	r2, #0
 801e570:	2300      	movs	r3, #0
 801e572:	f7e2 fa55 	bl	8000a20 <__aeabi_dcmpgt>
 801e576:	2800      	cmp	r0, #0
 801e578:	d0ea      	beq.n	801e550 <floor+0x40>
 801e57a:	2c00      	cmp	r4, #0
 801e57c:	bfbe      	ittt	lt
 801e57e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e582:	4133      	asrlt	r3, r6
 801e584:	18e4      	addlt	r4, r4, r3
 801e586:	ea24 0408 	bic.w	r4, r4, r8
 801e58a:	2500      	movs	r5, #0
 801e58c:	e7e0      	b.n	801e550 <floor+0x40>
 801e58e:	2e33      	cmp	r6, #51	; 0x33
 801e590:	dd0b      	ble.n	801e5aa <floor+0x9a>
 801e592:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e596:	d104      	bne.n	801e5a2 <floor+0x92>
 801e598:	4602      	mov	r2, r0
 801e59a:	f7e1 fdfb 	bl	8000194 <__adddf3>
 801e59e:	4607      	mov	r7, r0
 801e5a0:	460b      	mov	r3, r1
 801e5a2:	4638      	mov	r0, r7
 801e5a4:	4619      	mov	r1, r3
 801e5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e5aa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801e5ae:	f04f 38ff 	mov.w	r8, #4294967295
 801e5b2:	fa28 f802 	lsr.w	r8, r8, r2
 801e5b6:	ea10 0f08 	tst.w	r0, r8
 801e5ba:	d0f2      	beq.n	801e5a2 <floor+0x92>
 801e5bc:	a310      	add	r3, pc, #64	; (adr r3, 801e600 <floor+0xf0>)
 801e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c2:	f7e1 fde7 	bl	8000194 <__adddf3>
 801e5c6:	2200      	movs	r2, #0
 801e5c8:	2300      	movs	r3, #0
 801e5ca:	f7e2 fa29 	bl	8000a20 <__aeabi_dcmpgt>
 801e5ce:	2800      	cmp	r0, #0
 801e5d0:	d0be      	beq.n	801e550 <floor+0x40>
 801e5d2:	2c00      	cmp	r4, #0
 801e5d4:	da0a      	bge.n	801e5ec <floor+0xdc>
 801e5d6:	2e14      	cmp	r6, #20
 801e5d8:	d101      	bne.n	801e5de <floor+0xce>
 801e5da:	3401      	adds	r4, #1
 801e5dc:	e006      	b.n	801e5ec <floor+0xdc>
 801e5de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e5e2:	2301      	movs	r3, #1
 801e5e4:	40b3      	lsls	r3, r6
 801e5e6:	441d      	add	r5, r3
 801e5e8:	42af      	cmp	r7, r5
 801e5ea:	d8f6      	bhi.n	801e5da <floor+0xca>
 801e5ec:	ea25 0508 	bic.w	r5, r5, r8
 801e5f0:	e7ae      	b.n	801e550 <floor+0x40>
 801e5f2:	2500      	movs	r5, #0
 801e5f4:	462c      	mov	r4, r5
 801e5f6:	e7ab      	b.n	801e550 <floor+0x40>
 801e5f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801e5fc:	e7a8      	b.n	801e550 <floor+0x40>
 801e5fe:	bf00      	nop
 801e600:	8800759c 	.word	0x8800759c
 801e604:	7e37e43c 	.word	0x7e37e43c
 801e608:	bff00000 	.word	0xbff00000
 801e60c:	000fffff 	.word	0x000fffff

0801e610 <_init>:
 801e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e612:	bf00      	nop
 801e614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e616:	bc08      	pop	{r3}
 801e618:	469e      	mov	lr, r3
 801e61a:	4770      	bx	lr

0801e61c <_fini>:
 801e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e61e:	bf00      	nop
 801e620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e622:	bc08      	pop	{r3}
 801e624:	469e      	mov	lr, r3
 801e626:	4770      	bx	lr
